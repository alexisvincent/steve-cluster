{
    "version": 3,
    "terraform_version": "0.11.5",
    "serial": 1,
    "lineage": "29d08e20-2709-99bd-8faf-64535fa9be50",
    "modules": [
        {
            "path": [
                "root"
            ],
            "outputs": {},
            "resources": {
                "data.template_file.cl_gateway": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "e8a0050d93f70866532fab62d2ee7f94519c4e3e7710c08b5d4a8dcc0ce2c2f6",
                        "attributes": {
                            "id": "e8a0050d93f70866532fab62d2ee7f94519c4e3e7710c08b5d4a8dcc0ce2c2f6",
                            "rendered": "# storage:\n#   disks:\n#   - device: /dev/sda\n#     wipe_table: true\n#     partitions:\n#     - label: ROOT\n#   filesystems:\n#   - mount:\n#       device: /dev/disk/by-partlabel/ROOT\n#       format: ext4\n#       create:\n#         force: true\n#         options: [-L, ROOT]\n\npasswd:\n  users:\n    - name: core\n      password_hash: \"$6$rounds=4096$LP6daiKkb6c$MGeaex639HmrfnglLpYsxPPruEovlzmkqgvbrouiDmv9XH/zEo7rM9ja/y9ur89OveohZ8VUf8NbdgjGRyEOi1\"\n      \n\nstorage:\n  files:\n    - path: /etc/dnsmasq.conf\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          address=/gateway.steve/10.10.0.1\n\n          address=/steve/10.10.1.2\n\n          address=/n1.steve/10.10.1.1\n          address=/n2.steve/10.10.1.2\n          address=/n3.steve/10.10.1.3\n          address=/n4.steve/10.10.1.4\n          address=/n5.steve/10.10.1.5\n          address=/n6.steve/10.10.1.6\n          address=/n7.steve/10.10.1.7\n          address=/n8.steve/10.10.1.8\n          address=/n9.steve/10.10.1.9\n          address=/n10.steve/10.10.1.10\n          address=/n11.steve/10.10.1.11\n          address=/n12.steve/10.10.1.12\n          address=/n13.steve/10.10.1.13\n\n          address=/vm1.steve/10.10.10.1\n          address=/vm2.steve/10.10.10.2\n          address=/vm3.steve/10.10.10.3\n          address=/vm4.steve/10.10.10.4\n          address=/vm5.steve/10.10.10.5\n          address=/vm6.steve/10.10.10.6\n          address=/vm7.steve/10.10.10.7\n          address=/vm8.steve/10.10.10.8\n          address=/vm9.steve/10.10.10.9\n          address=/vm10.steve/10.10.10.10\n\n          dhcp-host=00:22:19:8E:26:AC,10.10.1.1\n          dhcp-host=00:1E:4F:28:30:12,10.10.1.2\n          dhcp-host=00:22:19:AB:7E:78,10.10.1.3\n          dhcp-host=00:22:19:8E:15:77,10.10.1.4\n          dhcp-host=00:1E:C9:D0:AA:9E,10.10.1.5\n          dhcp-host=00:22:19:8E:26:B6,10.10.1.6\n          dhcp-host=00:22:19:8E:25:A1,10.10.1.7\n          dhcp-host=00:22:19:8E:26:00,10.10.1.8\n          dhcp-host=00:1E:C9:D0:AA:BC,10.10.1.9\n          dhcp-host=00:1A:A0:15:E3:76,10.10.1.10\n          dhcp-host=00:1D:09:05:9A:C0,10.10.1.11\n          dhcp-host=00:1A:A0:26:DA:B6,10.10.1.12\n          dhcp-host=00:1D:09:05:98:DC,10.10.1.13\n\n          dhcp-host=00:0C:29:90:A9:F3,10.10.10.1\n          dhcp-host=00:50:56:30:35:90,10.10.10.2\n          dhcp-host=00:50:56:30:35:91,10.10.10.3\n\n\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: {{.hostname}}\n\n    - path: /etc/check-asset-status.sh\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          if [ ! -e /opt/cluster-config/assets.ready.processed ]\n          then\n            while [ ! -e /opt/cluster-config/assets.ready ]\n            do\n              sleep 1\n            done\n          else\n            touch /opt/cluster-config/assets.ready\n          fi\n\n    # - path: /root/.ssh/known_hosts\n    #   filesystem: root\n    #   mode: 0644\n    #   contents:\n    #     inline: \"\"\n\n    # - path: /root/.ssh/id_rsa\n    #   filesystem: root\n    #   mode: 0600\n    #   contents:\n    #     remote:\n    #       url: http://{|network.bootstrapper.address.internal|}:8080/assets/keys/bootstrapper\n\n    # - path: /root/.ssh/id_rsa.pub\n    #   filesystem: root\n    #   mode: 0600\n    #   contents:\n    #     remote:\n    #       url: http://{|network.bootstrapper.address.internal|}:8080/assets/keys/bootstrapper.pub\n\nnetworkd:\n  units:\n    - name: gateway.network\n      contents: |\n        [Match]\n        Name={{.interface_internal}}\n\n        [Network]\n        Address={{.address_internal}}/16\n        Address=10.10.0.1/16\n        DNS={{.address_internal}}\n        IPForward=ipv4\n        IPMasquerade=yes\n\nsystemd:\n  units:\n    - name: assets.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for assets to be pushed (assets.path)\n\n        [Service]\n        Type=oneshot\n        ExecStartPre=/usr/bin/bash /etc/check-asset-status.sh\n        ExecStart=/usr/bin/mv /opt/cluster-config/assets.ready /opt/cluster-config/assets.ready.processed\n        RemainAfterExit=true\n\n        [Install]\n        WantedBy=multi-user.target\n\n    - name: matchbox.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=CoreOS matchbox Server\n        After=docker.service assets.service\n        Requires=docker.service assets.service\n\n        [Service]\n        ExecStartPre=-/usr/bin/docker kill matchbox\n        ExecStartPre=-/usr/bin/docker rm matchbox\n        ExecStartPre=/usr/bin/docker pull quay.io/coreos/matchbox\n        ExecStart=/usr/bin/docker run --name=matchbox --net=host \\\n          -v /opt/cluster-config/matchbox:/var/lib/matchbox:Z \\\n          -v /opt/cluster-config/matchbox/etc/tls:/etc/matchbox:Z,ro \\\n          quay.io/coreos/matchbox \\\n            -address=10.10.0.1:8080 \\\n            -rpc-address=10.10.0.1:8081 \\\n            -log-level=debug \\\n            -assets-path=/var/lib/matchbox/assets\n        ExecStop=/usr/bin/docker stop matchbox\n        Restart=always\n\n        [Install]\n        WantedBy=multi-user.target\n\n    - name: dnsmasq.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Run dnsmasq, providing dhcp, dns and network book\n        After=docker.service assets.service\n        Requires=docker.service assets.service\n\n        [Service]\n        ExecStartPre=-/usr/bin/docker kill dnsmasq\n        ExecStartPre=-/usr/bin/docker rm dnsmasq\n        ExecStartPre=/usr/bin/docker pull quay.io/coreos/dnsmasq\n        ExecStart=/usr/bin/docker run \\\n          --name=dnsmasq --cap-add=NET_ADMIN --net=host \\\n          -v /etc/dnsmasq.conf:/etc/dnsmasq.conf quay.io/coreos/dnsmasq -d -q \\\n            --interface={{.interface_internal}} \\\n            --dhcp-option=3,10.10.0.1 \\\n            --dhcp-range={{.interface_internal}},10.10.100.50,10.10.100.100,12h \\\n            --enable-tftp --tftp-root=/var/lib/tftpboot \\\n            --dhcp-userclass=set:ipxe,iPXE \\\n            --dhcp-boot=tag:#ipxe,undionly.kpxe \\\n            --dhcp-boot=tag:ipxe,http://10.10.0.1:8080/boot.ipxe \\\n            --log-queries \\\n            --log-dhcp\n        ExecStop=/usr/bin/docker stop dnsmasq\n        Restart=always\n\n        [Install]\n        WantedBy=multi-user.target\n",
                            "template": "# storage:\n#   disks:\n#   - device: /dev/sda\n#     wipe_table: true\n#     partitions:\n#     - label: ROOT\n#   filesystems:\n#   - mount:\n#       device: /dev/disk/by-partlabel/ROOT\n#       format: ext4\n#       create:\n#         force: true\n#         options: [-L, ROOT]\n\npasswd:\n  users:\n    - name: core\n      password_hash: \"$6$rounds=4096$LP6daiKkb6c$MGeaex639HmrfnglLpYsxPPruEovlzmkqgvbrouiDmv9XH/zEo7rM9ja/y9ur89OveohZ8VUf8NbdgjGRyEOi1\"\n      \n\nstorage:\n  files:\n    - path: /etc/dnsmasq.conf\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n${dnsmasq_conf}\n\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: {{.hostname}}\n\n    - path: /etc/check-asset-status.sh\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          if [ ! -e /opt/cluster-config/assets.ready.processed ]\n          then\n            while [ ! -e /opt/cluster-config/assets.ready ]\n            do\n              sleep 1\n            done\n          else\n            touch /opt/cluster-config/assets.ready\n          fi\n\n    # - path: /root/.ssh/known_hosts\n    #   filesystem: root\n    #   mode: 0644\n    #   contents:\n    #     inline: \"\"\n\n    # - path: /root/.ssh/id_rsa\n    #   filesystem: root\n    #   mode: 0600\n    #   contents:\n    #     remote:\n    #       url: http://{|network.bootstrapper.address.internal|}:8080/assets/keys/bootstrapper\n\n    # - path: /root/.ssh/id_rsa.pub\n    #   filesystem: root\n    #   mode: 0600\n    #   contents:\n    #     remote:\n    #       url: http://{|network.bootstrapper.address.internal|}:8080/assets/keys/bootstrapper.pub\n\nnetworkd:\n  units:\n    - name: gateway.network\n      contents: |\n        [Match]\n        Name={{.interface_internal}}\n\n        [Network]\n        Address={{.address_internal}}/${subnet_short}\n        Address=${gateway_address}/${subnet_short}\n        DNS={{.address_internal}}\n        IPForward=ipv4\n        IPMasquerade=yes\n\nsystemd:\n  units:\n    - name: assets.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for assets to be pushed (assets.path)\n\n        [Service]\n        Type=oneshot\n        ExecStartPre=/usr/bin/bash /etc/check-asset-status.sh\n        ExecStart=/usr/bin/mv /opt/cluster-config/assets.ready /opt/cluster-config/assets.ready.processed\n        RemainAfterExit=true\n\n        [Install]\n        WantedBy=multi-user.target\n\n    - name: matchbox.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=CoreOS matchbox Server\n        After=docker.service assets.service\n        Requires=docker.service assets.service\n\n        [Service]\n        ExecStartPre=-/usr/bin/docker kill matchbox\n        ExecStartPre=-/usr/bin/docker rm matchbox\n        ExecStartPre=/usr/bin/docker pull quay.io/coreos/matchbox\n        ExecStart=/usr/bin/docker run --name=matchbox --net=host \\\n          -v /opt/cluster-config/matchbox:/var/lib/matchbox:Z \\\n          -v /opt/cluster-config/matchbox/etc/tls:/etc/matchbox:Z,ro \\\n          quay.io/coreos/matchbox \\\n            -address=${gateway_address}:8080 \\\n            -rpc-address=${gateway_address}:8081 \\\n            -log-level=debug \\\n            -assets-path=/var/lib/matchbox/assets\n        ExecStop=/usr/bin/docker stop matchbox\n        Restart=always\n\n        [Install]\n        WantedBy=multi-user.target\n\n    - name: dnsmasq.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Run dnsmasq, providing dhcp, dns and network book\n        After=docker.service assets.service\n        Requires=docker.service assets.service\n\n        [Service]\n        ExecStartPre=-/usr/bin/docker kill dnsmasq\n        ExecStartPre=-/usr/bin/docker rm dnsmasq\n        ExecStartPre=/usr/bin/docker pull quay.io/coreos/dnsmasq\n        ExecStart=/usr/bin/docker run \\\n          --name=dnsmasq --cap-add=NET_ADMIN --net=host \\\n          -v /etc/dnsmasq.conf:/etc/dnsmasq.conf quay.io/coreos/dnsmasq -d -q \\\n            --interface={{.interface_internal}} \\\n            --dhcp-option=3,${gateway_address} \\\n            --dhcp-range={{.interface_internal}},${dhcp_start},${dhcp_end},12h \\\n            --enable-tftp --tftp-root=/var/lib/tftpboot \\\n            --dhcp-userclass=set:ipxe,iPXE \\\n            --dhcp-boot=tag:#ipxe,undionly.kpxe \\\n            --dhcp-boot=tag:ipxe,http://${gateway_address}:8080/boot.ipxe \\\n            --log-queries \\\n            --log-dhcp\n        ExecStop=/usr/bin/docker stop dnsmasq\n        Restart=always\n\n        [Install]\n        WantedBy=multi-user.target\n",
                            "vars.%": "7",
                            "vars.dhcp_end": "10.10.100.100",
                            "vars.dhcp_start": "10.10.100.50",
                            "vars.dnsmasq_conf": "          address=/gateway.steve/10.10.0.1\n\n          address=/steve/10.10.1.2\n\n          address=/n1.steve/10.10.1.1\n          address=/n2.steve/10.10.1.2\n          address=/n3.steve/10.10.1.3\n          address=/n4.steve/10.10.1.4\n          address=/n5.steve/10.10.1.5\n          address=/n6.steve/10.10.1.6\n          address=/n7.steve/10.10.1.7\n          address=/n8.steve/10.10.1.8\n          address=/n9.steve/10.10.1.9\n          address=/n10.steve/10.10.1.10\n          address=/n11.steve/10.10.1.11\n          address=/n12.steve/10.10.1.12\n          address=/n13.steve/10.10.1.13\n\n          address=/vm1.steve/10.10.10.1\n          address=/vm2.steve/10.10.10.2\n          address=/vm3.steve/10.10.10.3\n          address=/vm4.steve/10.10.10.4\n          address=/vm5.steve/10.10.10.5\n          address=/vm6.steve/10.10.10.6\n          address=/vm7.steve/10.10.10.7\n          address=/vm8.steve/10.10.10.8\n          address=/vm9.steve/10.10.10.9\n          address=/vm10.steve/10.10.10.10\n\n          dhcp-host=00:22:19:8E:26:AC,10.10.1.1\n          dhcp-host=00:1E:4F:28:30:12,10.10.1.2\n          dhcp-host=00:22:19:AB:7E:78,10.10.1.3\n          dhcp-host=00:22:19:8E:15:77,10.10.1.4\n          dhcp-host=00:1E:C9:D0:AA:9E,10.10.1.5\n          dhcp-host=00:22:19:8E:26:B6,10.10.1.6\n          dhcp-host=00:22:19:8E:25:A1,10.10.1.7\n          dhcp-host=00:22:19:8E:26:00,10.10.1.8\n          dhcp-host=00:1E:C9:D0:AA:BC,10.10.1.9\n          dhcp-host=00:1A:A0:15:E3:76,10.10.1.10\n          dhcp-host=00:1D:09:05:9A:C0,10.10.1.11\n          dhcp-host=00:1A:A0:26:DA:B6,10.10.1.12\n          dhcp-host=00:1D:09:05:98:DC,10.10.1.13\n\n          dhcp-host=00:0C:29:90:A9:F3,10.10.10.1\n          dhcp-host=00:50:56:30:35:90,10.10.10.2\n          dhcp-host=00:50:56:30:35:91,10.10.10.3\n",
                            "vars.gateway_address": "10.10.0.1",
                            "vars.network_domain": "steve",
                            "vars.subnet_long": "255.255.0.0",
                            "vars.subnet_short": "16"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "matchbox_group.install-reboot-n1": {
                    "type": "matchbox_group",
                    "depends_on": [],
                    "primary": {
                        "id": "install-reboot-n1",
                        "attributes": {
                            "id": "install-reboot-n1",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1",
                            "name": "install-reboot-n1",
                            "profile": "steve-cached-container-linux-install-n1",
                            "selector.%": "1",
                            "selector.mac": "00:22:19:8E:26:AC"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.install-reboot-vm1": {
                    "type": "matchbox_group",
                    "depends_on": [],
                    "primary": {
                        "id": "install-reboot-vm1",
                        "attributes": {
                            "id": "install-reboot-vm1",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1",
                            "name": "install-reboot-vm1",
                            "profile": "steve-cached-container-linux-install-vm2",
                            "selector.%": "1",
                            "selector.mac": "08:00:27:FE:45:EF"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.n1": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.gateway"
                    ],
                    "primary": {
                        "id": "n1",
                        "attributes": {
                            "id": "n1",
                            "metadata.%": "5",
                            "metadata.address_internal": "10.10.1.1",
                            "metadata.hostname": "n1",
                            "metadata.interface_external": "eno1",
                            "metadata.interface_internal": "eno2",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1",
                            "name": "n1",
                            "profile": "gateway",
                            "selector.%": "2",
                            "selector.mac": "00:22:19:8E:26:AC",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.vm1": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.gateway"
                    ],
                    "primary": {
                        "id": "vm1",
                        "attributes": {
                            "id": "vm1",
                            "metadata.%": "5",
                            "metadata.address_internal": "10.10.10.1",
                            "metadata.hostname": "vm1",
                            "metadata.interface_external": "enp0s8",
                            "metadata.interface_internal": "enp0s3",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1",
                            "name": "vm1",
                            "profile": "gateway",
                            "selector.%": "2",
                            "selector.mac": "08:00:27:FE:45:EF",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.vm2": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.gateway"
                    ],
                    "primary": {
                        "id": "vm2",
                        "attributes": {
                            "id": "vm2",
                            "metadata.%": "5",
                            "metadata.address_internal": "10.10.10.1",
                            "metadata.hostname": "vm1",
                            "metadata.interface_external": "enp0s8",
                            "metadata.interface_internal": "enp0s3",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1",
                            "name": "vm2",
                            "profile": "gateway",
                            "selector.%": "2",
                            "selector.mac": "08:00:27:3A:40:26",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.gateway": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cl_gateway"
                    ],
                    "primary": {
                        "id": "gateway",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "coreos.config.url=http://http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.1": "coreos.first_boot=yes",
                            "args.2": "console=tty0",
                            "args.3": "console=ttyS0",
                            "args.4": "coreos.autologin",
                            "container_linux_config": "# storage:\n#   disks:\n#   - device: /dev/sda\n#     wipe_table: true\n#     partitions:\n#     - label: ROOT\n#   filesystems:\n#   - mount:\n#       device: /dev/disk/by-partlabel/ROOT\n#       format: ext4\n#       create:\n#         force: true\n#         options: [-L, ROOT]\n\npasswd:\n  users:\n    - name: core\n      password_hash: \"$6$rounds=4096$LP6daiKkb6c$MGeaex639HmrfnglLpYsxPPruEovlzmkqgvbrouiDmv9XH/zEo7rM9ja/y9ur89OveohZ8VUf8NbdgjGRyEOi1\"\n      \n\nstorage:\n  files:\n    - path: /etc/dnsmasq.conf\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          address=/gateway.steve/10.10.0.1\n\n          address=/steve/10.10.1.2\n\n          address=/n1.steve/10.10.1.1\n          address=/n2.steve/10.10.1.2\n          address=/n3.steve/10.10.1.3\n          address=/n4.steve/10.10.1.4\n          address=/n5.steve/10.10.1.5\n          address=/n6.steve/10.10.1.6\n          address=/n7.steve/10.10.1.7\n          address=/n8.steve/10.10.1.8\n          address=/n9.steve/10.10.1.9\n          address=/n10.steve/10.10.1.10\n          address=/n11.steve/10.10.1.11\n          address=/n12.steve/10.10.1.12\n          address=/n13.steve/10.10.1.13\n\n          address=/vm1.steve/10.10.10.1\n          address=/vm2.steve/10.10.10.2\n          address=/vm3.steve/10.10.10.3\n          address=/vm4.steve/10.10.10.4\n          address=/vm5.steve/10.10.10.5\n          address=/vm6.steve/10.10.10.6\n          address=/vm7.steve/10.10.10.7\n          address=/vm8.steve/10.10.10.8\n          address=/vm9.steve/10.10.10.9\n          address=/vm10.steve/10.10.10.10\n\n          dhcp-host=00:22:19:8E:26:AC,10.10.1.1\n          dhcp-host=00:1E:4F:28:30:12,10.10.1.2\n          dhcp-host=00:22:19:AB:7E:78,10.10.1.3\n          dhcp-host=00:22:19:8E:15:77,10.10.1.4\n          dhcp-host=00:1E:C9:D0:AA:9E,10.10.1.5\n          dhcp-host=00:22:19:8E:26:B6,10.10.1.6\n          dhcp-host=00:22:19:8E:25:A1,10.10.1.7\n          dhcp-host=00:22:19:8E:26:00,10.10.1.8\n          dhcp-host=00:1E:C9:D0:AA:BC,10.10.1.9\n          dhcp-host=00:1A:A0:15:E3:76,10.10.1.10\n          dhcp-host=00:1D:09:05:9A:C0,10.10.1.11\n          dhcp-host=00:1A:A0:26:DA:B6,10.10.1.12\n          dhcp-host=00:1D:09:05:98:DC,10.10.1.13\n\n          dhcp-host=00:0C:29:90:A9:F3,10.10.10.1\n          dhcp-host=00:50:56:30:35:90,10.10.10.2\n          dhcp-host=00:50:56:30:35:91,10.10.10.3\n\n\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: {{.hostname}}\n\n    - path: /etc/check-asset-status.sh\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          if [ ! -e /opt/cluster-config/assets.ready.processed ]\n          then\n            while [ ! -e /opt/cluster-config/assets.ready ]\n            do\n              sleep 1\n            done\n          else\n            touch /opt/cluster-config/assets.ready\n          fi\n\n    # - path: /root/.ssh/known_hosts\n    #   filesystem: root\n    #   mode: 0644\n    #   contents:\n    #     inline: \"\"\n\n    # - path: /root/.ssh/id_rsa\n    #   filesystem: root\n    #   mode: 0600\n    #   contents:\n    #     remote:\n    #       url: http://{|network.bootstrapper.address.internal|}:8080/assets/keys/bootstrapper\n\n    # - path: /root/.ssh/id_rsa.pub\n    #   filesystem: root\n    #   mode: 0600\n    #   contents:\n    #     remote:\n    #       url: http://{|network.bootstrapper.address.internal|}:8080/assets/keys/bootstrapper.pub\n\nnetworkd:\n  units:\n    - name: gateway.network\n      contents: |\n        [Match]\n        Name={{.interface_internal}}\n\n        [Network]\n        Address={{.address_internal}}/16\n        Address=10.10.0.1/16\n        DNS={{.address_internal}}\n        IPForward=ipv4\n        IPMasquerade=yes\n\nsystemd:\n  units:\n    - name: assets.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for assets to be pushed (assets.path)\n\n        [Service]\n        Type=oneshot\n        ExecStartPre=/usr/bin/bash /etc/check-asset-status.sh\n        ExecStart=/usr/bin/mv /opt/cluster-config/assets.ready /opt/cluster-config/assets.ready.processed\n        RemainAfterExit=true\n\n        [Install]\n        WantedBy=multi-user.target\n\n    - name: matchbox.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=CoreOS matchbox Server\n        After=docker.service assets.service\n        Requires=docker.service assets.service\n\n        [Service]\n        ExecStartPre=-/usr/bin/docker kill matchbox\n        ExecStartPre=-/usr/bin/docker rm matchbox\n        ExecStartPre=/usr/bin/docker pull quay.io/coreos/matchbox\n        ExecStart=/usr/bin/docker run --name=matchbox --net=host \\\n          -v /opt/cluster-config/matchbox:/var/lib/matchbox:Z \\\n          -v /opt/cluster-config/matchbox/etc/tls:/etc/matchbox:Z,ro \\\n          quay.io/coreos/matchbox \\\n            -address=10.10.0.1:8080 \\\n            -rpc-address=10.10.0.1:8081 \\\n            -log-level=debug \\\n            -assets-path=/var/lib/matchbox/assets\n        ExecStop=/usr/bin/docker stop matchbox\n        Restart=always\n\n        [Install]\n        WantedBy=multi-user.target\n\n    - name: dnsmasq.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Run dnsmasq, providing dhcp, dns and network book\n        After=docker.service assets.service\n        Requires=docker.service assets.service\n\n        [Service]\n        ExecStartPre=-/usr/bin/docker kill dnsmasq\n        ExecStartPre=-/usr/bin/docker rm dnsmasq\n        ExecStartPre=/usr/bin/docker pull quay.io/coreos/dnsmasq\n        ExecStart=/usr/bin/docker run \\\n          --name=dnsmasq --cap-add=NET_ADMIN --net=host \\\n          -v /etc/dnsmasq.conf:/etc/dnsmasq.conf quay.io/coreos/dnsmasq -d -q \\\n            --interface={{.interface_internal}} \\\n            --dhcp-option=3,10.10.0.1 \\\n            --dhcp-range={{.interface_internal}},10.10.100.50,10.10.100.100,12h \\\n            --enable-tftp --tftp-root=/var/lib/tftpboot \\\n            --dhcp-userclass=set:ipxe,iPXE \\\n            --dhcp-boot=tag:#ipxe,undionly.kpxe \\\n            --dhcp-boot=tag:ipxe,http://10.10.0.1:8080/boot.ipxe \\\n            --log-queries \\\n            --log-dhcp\n        ExecStop=/usr/bin/docker stop dnsmasq\n        Restart=always\n\n        [Install]\n        WantedBy=multi-user.target\n",
                            "id": "gateway",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "gateway"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "kubernetes"
            ],
            "outputs": {
                "kubeconfig": {
                    "sensitive": false,
                    "type": "string",
                    "value": "apiVersion: v1\nkind: Config\nclusters:\n- name: local\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRS3FxUW9Mb1NPYUdkMUFycEI2b1c3ekFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURreApNekl6TVRKYUZ3MHhPVEEwTURreE16SXpNVEphTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXdDSUQKVDRkOUsxUWtWaU5ITUtNTGxoL2pkNUlLeXdRenc1VFduTGdVM3VRWGt5aTlDY0FjNDM1WHEzMVV0MnNsMW1GbwpkVi9waGVtT2t4Q3RSZU9MOVFrd3JnaWpnU2dQM2k5MlpXalJxVDVlVUwyR21BSVh5aEQ2YUw0WnJaWnpvK3l4Cms2MVFwN2lsbWV0QkZSczlSUHBoSjN5UUtobmYyMGhraDlVRHlvRnMyR3RUVDI2c05LTFEzdHVXU1k5cjhyRUIKNjE4dGpLSzZjYkhmV3QxSXJHMm9oSWZ6SXhTZ0EraXBwak9COERpZG5lcUNhRThHUE5oZnlHMS9qcFRjNGVuQwpqQmhqSGJvVys0UnJSMXVRdmQ0QjdhNUQ3QTBwVjFSc3Fla2pKak11VEtwRGlMcFlobElEK3g0Y2lQZlh1RWR6Cmdnc0ZoN1RpVWRScVEwN0g1UUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVRGlXTVZmT3BHeTZ0N0craGFsL2cxTFBDQngwd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBR29ONHlOdFl0eVZGQXJBVU9mRlg2WjZvaE9nWjZoelRGSFFJSkc5bVlDZ3RmVG5rellvCkF3d1g2QXBpRDdYdVZkZk16aDJzbFdRMTc0YTBvV1pmdUxOcGJFOEJBa2x0bTFYU29nTUM4T3FHN0FDbWFTUGIKWU5xZDA3bzNsVVRqT3pZN2ducWNpbGd0V0s1U3Z4NndBZXNDSitibDl4TUhnN256VTROTnhRcDVkTC9DNTZhMApDc3NWeGVYeFFhc3hFcTlUcG5nbEZhVG5JSVRRc3Ewc0VQV09jUDd0cnVDOTNncm5hRENTVXJySlUrNFpSWE5lClN4cjJTS2p4Z1NkZGFRbWd0MzlQeDNxZFg3ZE1odXdiVDlTUHFWdjZyc0hGbTRXVnl3QUtEUEdYSVQwV3laaFIKNDVyTmdzUmtmdWpsazZ3WTc3VU5hUGY3Qll6UzJvZG93MG89Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: kubelet\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQVA0WnJMRUE4N1ZIQXlvOU9oTVNySXd3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBNQpNVE15TXpFMFdoY05NVGt3TkRBNU1UTXlNekUwV2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFLM3NSTERMdGJrZmNjMzdjYnJ0TzhIWjI5NXZFSGRMSDU3SGx3c045WHVINDFBWGJuTnVnZ204bVdiNQpqS0JFRU1QaG51aXJLaHY4dmxLQndlamlIT0hFUU1ZQ295RDUzbzFaenplTkZ6SXlwMGxzaTNnN0lTYXdhV0l5Cm1TVjlsTE1HczdYb1Rhc3drZTY1dXc4aExRNEVYMCtNS2xSQlQra2tGRC9aTXl1ZTliZ29wNjRoRnNDc3pocUwKTkRMVkQ5aVB4SEFrNTl3d1k3TTcwODZPNlFHb1o4dFIwR2E1TFA3MlBOU2Ryd1h2amFuc3dybkZMbGorV1lReQppMkpOUzNrVmlBWE9FQnREOTd4cGQ4V0VEOC83TDJRb1VKS3hjaDFGaE1YWndYSzd5Y2dqdkRWUmpudEtYa3Z4CnB3ZlFYN1hqdXFkK0tJb0dKWWRUaXVQNGl5VUNBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZBNGxqRlh6cVJzdXJleHZvV3BmNE5TendnY2RNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFVCngreDdSZTAxWjg5MklzZzVEYzJRN2F3Z2VNREVjaEZpSGxPaHhGVEpSU2xsUWJmWXplSGZ3NzVRdk1uTzNmOE4KVGhYYU4yc1MwU0ZsRlY2UlI0ZEJINnUxZWNIS2lBem9EWkk3TnpIZTVadXFsQmphY2p6ckM2d0xHYjNmd3k0UwplbWVBZWlWelRrRW96OWxmaEJFdWpOYk4rcmhKVGc4RHUyWk9zdWFLa1cxbjJKVU5OTkJxRlA4eWZzd0lMSm95CmhTa0lTQXIrMmlmUTJvUjVpRG5tY01weWhGcEh2UDF2VmRQWU9SVHpzcW1DU25TbTRoMWhpRHlQZ0NsdUJiVjcKVHFsMUtRTmF3Y1NEQ01TaUc5ZVJVWW1MVEQ1a3J4Y3dOdFU0NUVQaFVmT0ZZK0RFSW1oQ1VhZnp1bDBYZW5scwpoVy9ySzI0QzAzVEdLWllVVkkyUAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcmV4RXNNdTF1Ujl4emZ0eHV1MDd3ZG5iM204UWQwc2Zuc2VYQ3czMWU0ZmpVQmR1CmMyNkNDYnlaWnZtTW9FUVF3K0dlNktzcUcveStVb0hCNk9JYzRjUkF4Z0tqSVBuZWpWblBONDBYTWpLblNXeUwKZURzaEpyQnBZaktaSlgyVXN3YXp0ZWhOcXpDUjdybTdEeUV0RGdSZlQ0d3FWRUZQNlNRVVA5a3pLNTcxdUNpbgpyaUVXd0t6T0dvczBNdFVQMkkvRWNDVG4zREJqc3p2VHpvN3BBYWhueTFIUVpya3Mvdlk4MUoydkJlK05xZXpDCnVjVXVXUDVaaERLTFlrMUxlUldJQmM0UUcwUDN2R2wzeFlRUHovc3ZaQ2hRa3JGeUhVV0V4ZG5CY3J2SnlDTzgKTlZHT2UwcGVTL0duQjlCZnRlTzZwMzRvaWdZbGgxT0s0L2lMSlFJREFRQUJBb0lCQURwMStaem56SHllZWpWLwp1SG5adGtWeHduc2hJQXJKUUtheGRpN3NFVURscTEzSGtvUFFlSHRuWHJVRFd1YWdHbmFOUjBuMEJ1S0RjVUh3CmhjcU8vcUJReEdrS2grVFV1SjhRdWh0MUhIL3VFTmNZV2tVZXN3VDdOV0VobXVMRU5KQjh4emwxRFc1bWxCY0gKYlQ0bnE2cFRnK29NTmtvOTdldHpDaTl3QmNnNlIyNjVNUmtzM20vK2Fpc2xjTUNvZWExQVBDbGFoV0h3Rmx3TQp4UGtvV1hESHQwOFRNcUtIMUhTRllmV3N3VWVwMEJ2ditxcVpibGxUYUNiZ3RKUVBvd0p5YjlHa3ZLNGhsdjMvCmFFbTV4U1hMM1lXd0dNdyszSmVod2V0VmdEajZkcUdtWGJiODh6RDVpOXR6STRFLzVFY1QzWEx6VXd2WXBaL2wKM1l2eXBKMENnWUVBeXhadWJHTkxDcnNrNm5RWFhVMFk3VVJ0M0V3ZE0vMlAxTmhhL0J2eWNCclpySFNkZXB4ago5K2V3MDhoaTlVS0JuZVdFdXNsZ1podGNwUWFvS284RnhEWDF6T1paS2djSFB2TEpFYmVLSkVCN05iSXhER2dqCmVreGRLQ3dIRHNpQXh5bjVjaHBXRWdwVzdITndDTW52aGVIaDI1Mm56clZzVU9xUk9Kblh4bXNDZ1lFQTJ6eWIKQWdmN0NvOFhRWmFWSzNadEJ0ZW0yTVZZY3Q0b0tSbDZ0M0JEVHdTUk5YMXJmSFRzcERJVk1HVCtoM1p3WGpkdQpNZHh0ZHJYWHM5WVlOVERsWTBoUU9QUmg4T2xSU2lYL1lzQ3ZHdmZEaGxtUnEyRmYvejl1YldSb1o4WDhOdkl5CmJueWRXb0kyRk95RWp3eHFIOG1HQWc0R0JUMG90SzdZNjFGUnVLOENnWUI3VTdYZTBEVmo0TjI4R3ArTm95SCsKQTg0TE41V01XdkNiT24rV0ZZcVdGVmdXYUFLeDBJTE1xc0F3KzhGTVd3VEhVL2ZVVGpIaUQ3K2szM1FEMURLVwpRb1p2MVhwVUVVeVBKM1IrODh4SjAzWisxeVQ5K2NlQm54bjdLVEZvQXM1aEk5WTlPazBHUzQwWnJjaGRMZlBzCmc0MWFobFMvTEdFSWlrbUI2N3FpM1FLQmdRQ3Azdi9NUnhyQlI3WWhYK2dkVVJtUlg2OHI3MTFsUTdXaWd0ZVAKSXpGRUhLblc1R05RZjlpTU1USXgyVTlPN3ZxS1JqRGYrWWZubjJhUE5haDBMbnJPdnMxS0ZERi9WWWxqQnFZbgpnbDByYkNiWUJyYlVNQk1OMTd4Y2pweEhMQ1VNL2dVTmp3anRoRThiVDFnMjdzdWI3YTRrRVhHZ3hZNncwWG5LCmU2dnlpUUtCZ0FGNm80eWRKdzFkVktKTS9HeklBa2t1TmxTTFltN0NHTHpGVlFXSWJpTU83U2JkN0RGRlFLZWUKNmJRVDA5ODNqYm9aZzF6dUJPSVFDcFdTVG9JaWZYL2tYSWhQTjVoRVNDd2dSeVVYSXAzLzZpVnl6Y0Y2RklDTgpwditRYzFROXBObGE4dTlzNGordkIrMXhMaDd2VHAwaGNqbXhDVDhWRVpEN0tKdExtd05HCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\ncontexts:\n- context:\n    cluster: local\n    user: kubelet\n"
                }
            },
            "resources": {
                "data.template_file.cached-container-linux-install-configs.0": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.1": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.10": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.11": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.2": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.3": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.4": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.5": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.6": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.7": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.8": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.9": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.0": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.1": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.10": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.11": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.2": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.3": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.4": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.5": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.6": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.7": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.8": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.9": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.controller-configs": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "838b8ee28d934553dc68af4d5f0296daa61f4588e4f835687eb439d4a92ab4bd",
                        "attributes": {
                            "id": "838b8ee28d934553dc68af4d5f0296daa61f4588e4f835687eb439d4a92ab4bd",
                            "rendered": "---\nsystemd:\n  units:\n    - name: etcd-member.service\n      enable: true\n      dropins:\n        - name: 40-etcd-cluster.conf\n          contents: |\n            [Service]\n            Environment=\"ETCD_IMAGE_TAG=v3.3.2\"\n            Environment=\"ETCD_NAME=n2\"\n            Environment=\"ETCD_ADVERTISE_CLIENT_URLS=https://n2.steve:2379\"\n            Environment=\"ETCD_INITIAL_ADVERTISE_PEER_URLS=https://n2.steve:2380\"\n            Environment=\"ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379\"\n            Environment=\"ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380\"\n            Environment=\"ETCD_INITIAL_CLUSTER=n2=https://n2.steve:2380\"\n            Environment=\"ETCD_STRICT_RECONFIG_CHECK=true\"\n            Environment=\"ETCD_SSL_DIR=/etc/ssl/etcd\"\n            Environment=\"ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/server-ca.crt\"\n            Environment=\"ETCD_CERT_FILE=/etc/ssl/certs/etcd/server.crt\"\n            Environment=\"ETCD_KEY_FILE=/etc/ssl/certs/etcd/server.key\"\n            Environment=\"ETCD_CLIENT_CERT_AUTH=true\"\n            Environment=\"ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/peer-ca.crt\"\n            Environment=\"ETCD_PEER_CERT_FILE=/etc/ssl/certs/etcd/peer.crt\"\n            Environment=\"ETCD_PEER_KEY_FILE=/etc/ssl/certs/etcd/peer.key\"\n            Environment=\"ETCD_PEER_CLIENT_CERT_AUTH=true\"\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n        RequiredBy=etcd-member.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n2.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/master \\\n          --node-labels=node-role.kubernetes.io/controller=\"true\" \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --register-with-taints=node-role.kubernetes.io/master=:NoSchedule \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=10\n        [Install]\n        WantedBy=multi-user.target\n    - name: bootkube.service\n      contents: |\n        [Unit]\n        Description=Bootstrap a Kubernetes control plane with a temp api-server\n        ConditionPathExists=!/opt/bootkube/init_bootkube.done\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        WorkingDirectory=/opt/bootkube\n        ExecStart=/opt/bootkube/bootkube-start\n        ExecStartPost=/bin/touch /opt/bootkube/init_bootkube.done\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n2.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\n    - path: /opt/bootkube/bootkube-start\n      filesystem: root\n      mode: 0544\n      user:\n        id: 500\n      group:\n        id: 500\n      contents:\n        inline: |\n          #!/bin/bash\n          # Wrapper for bootkube start\n          set -e\n          # Move experimental manifests\n          [ -n \"$(ls /opt/bootkube/assets/manifests-*/* 2\u003e/dev/null)\" ] \u0026\u0026 mv /opt/bootkube/assets/manifests-*/* /opt/bootkube/assets/manifests \u0026\u0026 rm -rf /opt/bootkube/assets/manifests-*\n          BOOTKUBE_ACI=\"${BOOTKUBE_ACI:-quay.io/coreos/bootkube}\"\n          BOOTKUBE_VERSION=\"${BOOTKUBE_VERSION:-v0.11.0}\"\n          BOOTKUBE_ASSETS=\"${BOOTKUBE_ASSETS:-/opt/bootkube/assets}\"\n          exec /usr/bin/rkt run \\\n            --trust-keys-from-https \\\n            --volume assets,kind=host,source=$BOOTKUBE_ASSETS \\\n            --mount volume=assets,target=/assets \\\n            --volume bootstrap,kind=host,source=/etc/kubernetes \\\n            --mount volume=bootstrap,target=/etc/kubernetes \\\n            $RKT_OPTS \\\n            ${BOOTKUBE_ACI}:${BOOTKUBE_VERSION} \\\n            --net=host \\\n            --dns=host \\\n            --exec=/bootkube -- start --asset-dir=/assets \"$@\"\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1\n",
                            "template": "---\nsystemd:\n  units:\n    - name: etcd-member.service\n      enable: true\n      dropins:\n        - name: 40-etcd-cluster.conf\n          contents: |\n            [Service]\n            Environment=\"ETCD_IMAGE_TAG=v3.3.2\"\n            Environment=\"ETCD_NAME=${etcd_name}\"\n            Environment=\"ETCD_ADVERTISE_CLIENT_URLS=https://${domain_name}:2379\"\n            Environment=\"ETCD_INITIAL_ADVERTISE_PEER_URLS=https://${domain_name}:2380\"\n            Environment=\"ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379\"\n            Environment=\"ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380\"\n            Environment=\"ETCD_INITIAL_CLUSTER=${etcd_initial_cluster}\"\n            Environment=\"ETCD_STRICT_RECONFIG_CHECK=true\"\n            Environment=\"ETCD_SSL_DIR=/etc/ssl/etcd\"\n            Environment=\"ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/server-ca.crt\"\n            Environment=\"ETCD_CERT_FILE=/etc/ssl/certs/etcd/server.crt\"\n            Environment=\"ETCD_KEY_FILE=/etc/ssl/certs/etcd/server.key\"\n            Environment=\"ETCD_CLIENT_CERT_AUTH=true\"\n            Environment=\"ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/peer-ca.crt\"\n            Environment=\"ETCD_PEER_CERT_FILE=/etc/ssl/certs/etcd/peer.crt\"\n            Environment=\"ETCD_PEER_KEY_FILE=/etc/ssl/certs/etcd/peer.key\"\n            Environment=\"ETCD_PEER_CLIENT_CERT_AUTH=true\"\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n        RequiredBy=etcd-member.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/master \\\n          --node-labels=node-role.kubernetes.io/controller=\"true\" \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --register-with-taints=node-role.kubernetes.io/master=:NoSchedule \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=10\n        [Install]\n        WantedBy=multi-user.target\n    - name: bootkube.service\n      contents: |\n        [Unit]\n        Description=Bootstrap a Kubernetes control plane with a temp api-server\n        ConditionPathExists=!/opt/bootkube/init_bootkube.done\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        WorkingDirectory=/opt/bootkube\n        ExecStart=/opt/bootkube/bootkube-start\n        ExecStartPost=/bin/touch /opt/bootkube/init_bootkube.done\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\n    - path: /opt/bootkube/bootkube-start\n      filesystem: root\n      mode: 0544\n      user:\n        id: 500\n      group:\n        id: 500\n      contents:\n        inline: |\n          #!/bin/bash\n          # Wrapper for bootkube start\n          set -e\n          # Move experimental manifests\n          [ -n \"$(ls /opt/bootkube/assets/manifests-*/* 2\u003e/dev/null)\" ] \u0026\u0026 mv /opt/bootkube/assets/manifests-*/* /opt/bootkube/assets/manifests \u0026\u0026 rm -rf /opt/bootkube/assets/manifests-*\n          BOOTKUBE_ACI=\"$${BOOTKUBE_ACI:-quay.io/coreos/bootkube}\"\n          BOOTKUBE_VERSION=\"$${BOOTKUBE_VERSION:-v0.11.0}\"\n          BOOTKUBE_ASSETS=\"$${BOOTKUBE_ASSETS:-/opt/bootkube/assets}\"\n          exec /usr/bin/rkt run \\\n            --trust-keys-from-https \\\n            --volume assets,kind=host,source=$BOOTKUBE_ASSETS \\\n            --mount volume=assets,target=/assets \\\n            --volume bootstrap,kind=host,source=/etc/kubernetes \\\n            --mount volume=bootstrap,target=/etc/kubernetes \\\n            $$RKT_OPTS \\\n            $${BOOTKUBE_ACI}:$${BOOTKUBE_VERSION} \\\n            --net=host \\\n            --dns=host \\\n            --exec=/bootkube -- start --asset-dir=/assets \"$@\"\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n",
                            "vars.%": "7",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n2.steve",
                            "vars.etcd_initial_cluster": "n2=https://n2.steve:2380",
                            "vars.etcd_name": "n2",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.0": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "342a1fd2e4751a4d3109ba295484c4299aad73c47bd1a1e20a262182dbc4502f",
                        "attributes": {
                            "id": "342a1fd2e4751a4d3109ba295484c4299aad73c47bd1a1e20a262182dbc4502f",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n3.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n3.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n3.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.1": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "979060246aff6ee95c6cf1a5eb507a63a41eff076b3daab119689f080970e7ae",
                        "attributes": {
                            "id": "979060246aff6ee95c6cf1a5eb507a63a41eff076b3daab119689f080970e7ae",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n4.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n4.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n4.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.10": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "4536655b915b7e47651f0bd89dc7761a60be9a118863879e0d5fd84189d2567a",
                        "attributes": {
                            "id": "4536655b915b7e47651f0bd89dc7761a60be9a118863879e0d5fd84189d2567a",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n13.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n13.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n13.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.2": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "0ada4b734a6a1d8ebc9ddac784f48609775b09e3e2265f89df6858970823052f",
                        "attributes": {
                            "id": "0ada4b734a6a1d8ebc9ddac784f48609775b09e3e2265f89df6858970823052f",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n5.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n5.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n5.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.3": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "1443daf08156be4ec2bb653f55f238677109eb5cb51c614d48e2ea5c533f5c46",
                        "attributes": {
                            "id": "1443daf08156be4ec2bb653f55f238677109eb5cb51c614d48e2ea5c533f5c46",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n6.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n6.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n6.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.4": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "d4f333560c1ac627249ea1812d5531a2574ef37f65ee35adf34d455fd6bbe60d",
                        "attributes": {
                            "id": "d4f333560c1ac627249ea1812d5531a2574ef37f65ee35adf34d455fd6bbe60d",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n7.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n7.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n7.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.5": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "40c5b434e67ecb55c061b18a01af064d1b02dcf208844bf8142ee49042e532f5",
                        "attributes": {
                            "id": "40c5b434e67ecb55c061b18a01af064d1b02dcf208844bf8142ee49042e532f5",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n8.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n8.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n8.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.6": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "a9fadd1ca57a8d4c3e3b14d3700b7a4d3cb9ebe0c9ead05648848e7d427761ec",
                        "attributes": {
                            "id": "a9fadd1ca57a8d4c3e3b14d3700b7a4d3cb9ebe0c9ead05648848e7d427761ec",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n9.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n9.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n9.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.7": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "12bdae4dfe7cf700d43f6e779756154a97e2c123b29e5e17bd0b03f4f8f1d066",
                        "attributes": {
                            "id": "12bdae4dfe7cf700d43f6e779756154a97e2c123b29e5e17bd0b03f4f8f1d066",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n10.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n10.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n10.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.8": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "b1ce2be70f757052d6c1acb8448e4f190f94f7e52beec911c899724e294c0569",
                        "attributes": {
                            "id": "b1ce2be70f757052d6c1acb8448e4f190f94f7e52beec911c899724e294c0569",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n11.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n11.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n11.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.9": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "ad12fea84f30759c5c6a474734802eaf23b32018b9abacc52ceda0d864146508",
                        "attributes": {
                            "id": "ad12fea84f30759c5c6a474734802eaf23b32018b9abacc52ceda0d864146508",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n12.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n12.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n12.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "matchbox_group.container-linux-install.0": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n2",
                        "attributes": {
                            "id": "container-linux-install-n2",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1",
                            "name": "container-linux-install-n2",
                            "profile": "steve-cached-container-linux-install-n2",
                            "selector.%": "1",
                            "selector.mac": "00:1E:4F:28:30:12"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.1": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n3",
                        "attributes": {
                            "id": "container-linux-install-n3",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1",
                            "name": "container-linux-install-n3",
                            "profile": "steve-cached-container-linux-install-n3",
                            "selector.%": "1",
                            "selector.mac": "00:22:19:AB:7E:78"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.10": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n12",
                        "attributes": {
                            "id": "container-linux-install-n12",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1",
                            "name": "container-linux-install-n12",
                            "profile": "steve-cached-container-linux-install-n12",
                            "selector.%": "1",
                            "selector.mac": "00:1A:A0:26:DA:B6"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.11": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n13",
                        "attributes": {
                            "id": "container-linux-install-n13",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1",
                            "name": "container-linux-install-n13",
                            "profile": "steve-cached-container-linux-install-n13",
                            "selector.%": "1",
                            "selector.mac": "00:1D:09:05:98:DC"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.2": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n4",
                        "attributes": {
                            "id": "container-linux-install-n4",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1",
                            "name": "container-linux-install-n4",
                            "profile": "steve-cached-container-linux-install-n4",
                            "selector.%": "1",
                            "selector.mac": "00:22:19:8E:15:77"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.3": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n5",
                        "attributes": {
                            "id": "container-linux-install-n5",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1",
                            "name": "container-linux-install-n5",
                            "profile": "steve-cached-container-linux-install-n5",
                            "selector.%": "1",
                            "selector.mac": "00:1E:C9:D0:AA:9E"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.4": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n6",
                        "attributes": {
                            "id": "container-linux-install-n6",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1",
                            "name": "container-linux-install-n6",
                            "profile": "steve-cached-container-linux-install-n6",
                            "selector.%": "1",
                            "selector.mac": "00:22:19:8E:26:B6"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.5": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n7",
                        "attributes": {
                            "id": "container-linux-install-n7",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1",
                            "name": "container-linux-install-n7",
                            "profile": "steve-cached-container-linux-install-n7",
                            "selector.%": "1",
                            "selector.mac": "00:22:19:8E:25:A1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.6": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n8",
                        "attributes": {
                            "id": "container-linux-install-n8",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1",
                            "name": "container-linux-install-n8",
                            "profile": "steve-cached-container-linux-install-n8",
                            "selector.%": "1",
                            "selector.mac": "00:22:19:8E:26:00"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.7": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n9",
                        "attributes": {
                            "id": "container-linux-install-n9",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1",
                            "name": "container-linux-install-n9",
                            "profile": "steve-cached-container-linux-install-n9",
                            "selector.%": "1",
                            "selector.mac": "00:1E:C9:D0:AA:BC"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.8": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n10",
                        "attributes": {
                            "id": "container-linux-install-n10",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1",
                            "name": "container-linux-install-n10",
                            "profile": "steve-cached-container-linux-install-n10",
                            "selector.%": "1",
                            "selector.mac": "00:1A:A0:15:E3:76"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.9": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n11",
                        "attributes": {
                            "id": "container-linux-install-n11",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1",
                            "name": "container-linux-install-n11",
                            "profile": "steve-cached-container-linux-install-n11",
                            "selector.%": "1",
                            "selector.mac": "00:1D:09:05:9A:C0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.controller": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.controllers.*"
                    ],
                    "primary": {
                        "id": "steve-n2",
                        "attributes": {
                            "id": "steve-n2",
                            "name": "steve-n2",
                            "profile": "steve-controller-n2",
                            "selector.%": "2",
                            "selector.mac": "00:1E:4F:28:30:12",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.0": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n3",
                        "attributes": {
                            "id": "steve-n3",
                            "name": "steve-n3",
                            "profile": "steve-worker-n3",
                            "selector.%": "2",
                            "selector.mac": "00:22:19:AB:7E:78",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.1": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n4",
                        "attributes": {
                            "id": "steve-n4",
                            "name": "steve-n4",
                            "profile": "steve-worker-n4",
                            "selector.%": "2",
                            "selector.mac": "00:22:19:8E:15:77",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.10": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n13",
                        "attributes": {
                            "id": "steve-n13",
                            "name": "steve-n13",
                            "profile": "steve-worker-n13",
                            "selector.%": "2",
                            "selector.mac": "00:1D:09:05:98:DC",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.2": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n5",
                        "attributes": {
                            "id": "steve-n5",
                            "name": "steve-n5",
                            "profile": "steve-worker-n5",
                            "selector.%": "2",
                            "selector.mac": "00:1E:C9:D0:AA:9E",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.3": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n6",
                        "attributes": {
                            "id": "steve-n6",
                            "name": "steve-n6",
                            "profile": "steve-worker-n6",
                            "selector.%": "2",
                            "selector.mac": "00:22:19:8E:26:B6",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.4": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n7",
                        "attributes": {
                            "id": "steve-n7",
                            "name": "steve-n7",
                            "profile": "steve-worker-n7",
                            "selector.%": "2",
                            "selector.mac": "00:22:19:8E:25:A1",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.5": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n8",
                        "attributes": {
                            "id": "steve-n8",
                            "name": "steve-n8",
                            "profile": "steve-worker-n8",
                            "selector.%": "2",
                            "selector.mac": "00:22:19:8E:26:00",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.6": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n9",
                        "attributes": {
                            "id": "steve-n9",
                            "name": "steve-n9",
                            "profile": "steve-worker-n9",
                            "selector.%": "2",
                            "selector.mac": "00:1E:C9:D0:AA:BC",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.7": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n10",
                        "attributes": {
                            "id": "steve-n10",
                            "name": "steve-n10",
                            "profile": "steve-worker-n10",
                            "selector.%": "2",
                            "selector.mac": "00:1A:A0:15:E3:76",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.8": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n11",
                        "attributes": {
                            "id": "steve-n11",
                            "name": "steve-n11",
                            "profile": "steve-worker-n11",
                            "selector.%": "2",
                            "selector.mac": "00:1D:09:05:9A:C0",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.9": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n12",
                        "attributes": {
                            "id": "steve-n12",
                            "name": "steve-n12",
                            "profile": "steve-worker-n12",
                            "selector.%": "2",
                            "selector.mac": "00:1A:A0:26:DA:B6",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.0": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n2",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n2",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n2"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.1": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n3",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n3",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n3"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.10": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n12",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n12",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n12"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.11": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n13",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n13",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n13"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.2": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n4",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n4",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n4"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.3": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n5",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n5",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n5"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.4": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n6",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n6",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n6"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.5": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n7",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n7",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n7"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.6": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n8",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n8",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n8"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.7": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n9",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n9",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n9"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.8": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n10",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n10",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n10"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.9": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n11",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n11",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n11"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.0": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n2",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n2",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n2"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.1": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n3",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n3",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n3"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.10": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n12",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n12",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n12"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.11": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n13",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n13",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n13"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.2": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n4",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n4",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n4"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.3": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n5",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n5",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n5"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.4": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n6",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n6",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n6"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.5": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n7",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n7",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n7"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.6": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n8",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n8",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n8"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.7": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n9",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n9",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n9"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.8": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n10",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n10",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n10"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.9": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n11",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n11",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n11"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.controllers": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.controller-configs.*"
                    ],
                    "primary": {
                        "id": "steve-controller-n2",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: etcd-member.service\n      enable: true\n      dropins:\n        - name: 40-etcd-cluster.conf\n          contents: |\n            [Service]\n            Environment=\"ETCD_IMAGE_TAG=v3.3.2\"\n            Environment=\"ETCD_NAME=n2\"\n            Environment=\"ETCD_ADVERTISE_CLIENT_URLS=https://n2.steve:2379\"\n            Environment=\"ETCD_INITIAL_ADVERTISE_PEER_URLS=https://n2.steve:2380\"\n            Environment=\"ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379\"\n            Environment=\"ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380\"\n            Environment=\"ETCD_INITIAL_CLUSTER=n2=https://n2.steve:2380\"\n            Environment=\"ETCD_STRICT_RECONFIG_CHECK=true\"\n            Environment=\"ETCD_SSL_DIR=/etc/ssl/etcd\"\n            Environment=\"ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/server-ca.crt\"\n            Environment=\"ETCD_CERT_FILE=/etc/ssl/certs/etcd/server.crt\"\n            Environment=\"ETCD_KEY_FILE=/etc/ssl/certs/etcd/server.key\"\n            Environment=\"ETCD_CLIENT_CERT_AUTH=true\"\n            Environment=\"ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/peer-ca.crt\"\n            Environment=\"ETCD_PEER_CERT_FILE=/etc/ssl/certs/etcd/peer.crt\"\n            Environment=\"ETCD_PEER_KEY_FILE=/etc/ssl/certs/etcd/peer.key\"\n            Environment=\"ETCD_PEER_CLIENT_CERT_AUTH=true\"\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n        RequiredBy=etcd-member.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n2.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/master \\\n          --node-labels=node-role.kubernetes.io/controller=\"true\" \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --register-with-taints=node-role.kubernetes.io/master=:NoSchedule \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=10\n        [Install]\n        WantedBy=multi-user.target\n    - name: bootkube.service\n      contents: |\n        [Unit]\n        Description=Bootstrap a Kubernetes control plane with a temp api-server\n        ConditionPathExists=!/opt/bootkube/init_bootkube.done\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        WorkingDirectory=/opt/bootkube\n        ExecStart=/opt/bootkube/bootkube-start\n        ExecStartPost=/bin/touch /opt/bootkube/init_bootkube.done\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n2.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\n    - path: /opt/bootkube/bootkube-start\n      filesystem: root\n      mode: 0544\n      user:\n        id: 500\n      group:\n        id: 500\n      contents:\n        inline: |\n          #!/bin/bash\n          # Wrapper for bootkube start\n          set -e\n          # Move experimental manifests\n          [ -n \"$(ls /opt/bootkube/assets/manifests-*/* 2\u003e/dev/null)\" ] \u0026\u0026 mv /opt/bootkube/assets/manifests-*/* /opt/bootkube/assets/manifests \u0026\u0026 rm -rf /opt/bootkube/assets/manifests-*\n          BOOTKUBE_ACI=\"${BOOTKUBE_ACI:-quay.io/coreos/bootkube}\"\n          BOOTKUBE_VERSION=\"${BOOTKUBE_VERSION:-v0.11.0}\"\n          BOOTKUBE_ASSETS=\"${BOOTKUBE_ASSETS:-/opt/bootkube/assets}\"\n          exec /usr/bin/rkt run \\\n            --trust-keys-from-https \\\n            --volume assets,kind=host,source=$BOOTKUBE_ASSETS \\\n            --mount volume=assets,target=/assets \\\n            --volume bootstrap,kind=host,source=/etc/kubernetes \\\n            --mount volume=bootstrap,target=/etc/kubernetes \\\n            $RKT_OPTS \\\n            ${BOOTKUBE_ACI}:${BOOTKUBE_VERSION} \\\n            --net=host \\\n            --dns=host \\\n            --exec=/bootkube -- start --asset-dir=/assets \"$@\"\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1\n",
                            "id": "steve-controller-n2",
                            "name": "steve-controller-n2"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.0": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n3",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n3.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n3.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1\n\n",
                            "id": "steve-worker-n3",
                            "name": "steve-worker-n3"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.1": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n4",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n4.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n4.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1\n\n",
                            "id": "steve-worker-n4",
                            "name": "steve-worker-n4"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.10": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n13",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n13.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n13.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1\n\n",
                            "id": "steve-worker-n13",
                            "name": "steve-worker-n13"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.2": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n5",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n5.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n5.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1\n\n",
                            "id": "steve-worker-n5",
                            "name": "steve-worker-n5"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.3": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n6",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n6.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n6.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1\n\n",
                            "id": "steve-worker-n6",
                            "name": "steve-worker-n6"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.4": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n7",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n7.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n7.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1\n\n",
                            "id": "steve-worker-n7",
                            "name": "steve-worker-n7"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.5": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n8",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n8.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n8.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1\n\n",
                            "id": "steve-worker-n8",
                            "name": "steve-worker-n8"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.6": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n9",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n9.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n9.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1\n\n",
                            "id": "steve-worker-n9",
                            "name": "steve-worker-n9"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.7": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n10",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n10.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n10.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1\n\n",
                            "id": "steve-worker-n10",
                            "name": "steve-worker-n10"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.8": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n11",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n11.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n11.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1\n\n",
                            "id": "steve-worker-n11",
                            "name": "steve-worker-n11"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.9": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n12",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n12.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n12.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZd25W4KjeOh/CYZFNxUm27tRbyArGj3dikY4gez7LzY9J/Mw9eb/IOwixpvdDx6jgcuZB9ZpqtcA9xNP2IZCgnox3R1rFSnzEHSbwUWWs2aMlcaQi9HTHmox/LoOVbQr3+AwF12xNkcXIxyz+z812FYWerd8VdzI6aRhWTuxf7fCiDtajQytJwfP8T7pNx+LaZS5PhPP/gK8rDtE1s3z0oVCpJWwTkEt4x6RzFPjou+xyQ9roY+E2r1l8g8ryUDWudWEL8d1FUQeDZYvmTTZgdeedhrWYhEfOT1WqDYkX37nIVniTWKluceJMeTKUnXrv1VSFXSpiHqoL+q0JZqyt core@n1\n\n",
                            "id": "steve-worker-n12",
                            "name": "steve-worker-n12"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "null_resource.copy-controller-secrets": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube",
                        "module.bootkube",
                        "module.bootkube",
                        "module.bootkube",
                        "module.bootkube",
                        "module.bootkube",
                        "module.bootkube",
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "7053133003165479872",
                        "attributes": {
                            "id": "7053133003165479872"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.0": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "6198938102811074471",
                        "attributes": {
                            "id": "6198938102811074471"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.1": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "6472142043869966013",
                        "attributes": {
                            "id": "6472142043869966013"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.10": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "3114020870407362432",
                        "attributes": {
                            "id": "3114020870407362432"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.2": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "6233854162626387300",
                        "attributes": {
                            "id": "6233854162626387300"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.3": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "618743186074054594",
                        "attributes": {
                            "id": "618743186074054594"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.4": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "7238704437369518706",
                        "attributes": {
                            "id": "7238704437369518706"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.5": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "4050349359740028766",
                        "attributes": {
                            "id": "4050349359740028766"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.6": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "2659979391959196303",
                        "attributes": {
                            "id": "2659979391959196303"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.7": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "999411823660899563",
                        "attributes": {
                            "id": "999411823660899563"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.8": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "5678510291289289325",
                        "attributes": {
                            "id": "5678510291289289325"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.9": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "3207447552431754465",
                        "attributes": {
                            "id": "3207447552431754465"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "kubernetes",
                "bootkube"
            ],
            "outputs": {
                "ca_cert": {
                    "sensitive": false,
                    "type": "string",
                    "value": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRS3FxUW9Mb1NPYUdkMUFycEI2b1c3ekFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURreApNekl6TVRKYUZ3MHhPVEEwTURreE16SXpNVEphTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXdDSUQKVDRkOUsxUWtWaU5ITUtNTGxoL2pkNUlLeXdRenc1VFduTGdVM3VRWGt5aTlDY0FjNDM1WHEzMVV0MnNsMW1GbwpkVi9waGVtT2t4Q3RSZU9MOVFrd3JnaWpnU2dQM2k5MlpXalJxVDVlVUwyR21BSVh5aEQ2YUw0WnJaWnpvK3l4Cms2MVFwN2lsbWV0QkZSczlSUHBoSjN5UUtobmYyMGhraDlVRHlvRnMyR3RUVDI2c05LTFEzdHVXU1k5cjhyRUIKNjE4dGpLSzZjYkhmV3QxSXJHMm9oSWZ6SXhTZ0EraXBwak9COERpZG5lcUNhRThHUE5oZnlHMS9qcFRjNGVuQwpqQmhqSGJvVys0UnJSMXVRdmQ0QjdhNUQ3QTBwVjFSc3Fla2pKak11VEtwRGlMcFlobElEK3g0Y2lQZlh1RWR6Cmdnc0ZoN1RpVWRScVEwN0g1UUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVRGlXTVZmT3BHeTZ0N0craGFsL2cxTFBDQngwd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBR29ONHlOdFl0eVZGQXJBVU9mRlg2WjZvaE9nWjZoelRGSFFJSkc5bVlDZ3RmVG5rellvCkF3d1g2QXBpRDdYdVZkZk16aDJzbFdRMTc0YTBvV1pmdUxOcGJFOEJBa2x0bTFYU29nTUM4T3FHN0FDbWFTUGIKWU5xZDA3bzNsVVRqT3pZN2ducWNpbGd0V0s1U3Z4NndBZXNDSitibDl4TUhnN256VTROTnhRcDVkTC9DNTZhMApDc3NWeGVYeFFhc3hFcTlUcG5nbEZhVG5JSVRRc3Ewc0VQV09jUDd0cnVDOTNncm5hRENTVXJySlUrNFpSWE5lClN4cjJTS2p4Z1NkZGFRbWd0MzlQeDNxZFg3ZE1odXdiVDlTUHFWdjZyc0hGbTRXVnl3QUtEUEdYSVQwV3laaFIKNDVyTmdzUmtmdWpsazZ3WTc3VU5hUGY3Qll6UzJvZG93MG89Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
                },
                "content_hash": {
                    "sensitive": false,
                    "type": "string",
                    "value": "8217e9d937f11c7ebd040f9bf029c0ae80983d87"
                },
                "etcd_ca_cert": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN CERTIFICATE-----\nMIIDDzCCAfegAwIBAgIRAK5RObOoi7TKD6WHjkWJWE0wDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDkxMzIz\nMTBaFw0xOTA0MDkxMzIzMTBaMCExDTALBgNVBAoTBGV0Y2QxEDAOBgNVBAMTB2V0\nY2QtY2EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtU/uszGxQ118I\nMYYthTQUbHUEoFYglHiUaG7yUITbYiermIjCSvNPtygWO0FXddOFHvEdHHTgH4Dw\n6agrGfg3nKGwR9SLsmfg5TGkCjgmCBqHVywElvWfApe0RtRphdo9xobbOClOgXtJ\nPj3P1y5LoxbRSAjlmk1jx5cUi9i/5HpJ70zrvoqRj3sgO3ZAaDm2UNR80tZL6fa6\nsCVIQMgpqOcwnIsuLlaKeqHVFgP9R9g+Hg7KMeJ9vCrP20BrozeIU0nLMQ7pBmff\ncgoEVMhN7lsRO+LalZaX6CqGhjqTyfK0vbOG5SgYewHLkIn6OHJsCiIWDh9UUVcz\nfhx/3e9nAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/\nMB0GA1UdDgQWBBQcsHb5R9G/ozx6D6FFMfLszgRTUzANBgkqhkiG9w0BAQsFAAOC\nAQEAC2OMbsBS0K6XAxvT+IYr0OLfSiKGwVN5O1c37x632CULgDrFbbVQYi+NDEY3\n0MkHtq6SrKGjxP8HKxiVh1QMI0a70GnB2vRyH/yr9Kh7aMiKwuNtUyi7vlePjziM\nPz3rDII0RkgtF38mpQJOkpC4ld2qgSRVN8K+TpmZhZBUTG4tGzO8VcOGCexewvkZ\n34L03Byy3N6Cc0bpB8nxNr1miKnbzVwHKBnk6aRK76iT4B3nY+VBNKATfQuVrwgf\npx89pHBys6+zgRoB8gIKs6jZZHopUdBxGMZjuPxscJxuTULmQZbFSWXSYPmORoZa\n9cHiDQVL8xs5r2k261sOkPbmpQ==\n-----END CERTIFICATE-----\n"
                },
                "etcd_client_cert": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN CERTIFICATE-----\nMIIDWTCCAkGgAwIBAgIRAJyMVfLALb3NYQGz4hNPMiswDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDkxMzIz\nMTRaFw0xOTA0MDkxMzIzMTRaMCUxDTALBgNVBAoTBGV0Y2QxFDASBgNVBAMTC2V0\nY2QtY2xpZW50MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyCCyJEXW\n+llPYBvvwT+reP7qNp165HYwTFOMTab8/Ojszf42Trz9uQpUMoF9/MQLPZ801Q3j\nf3Zjjr44bYu5vLpcqfJ4TnA51/3FtunWjshuLoj4sJIUVmUYxfRs+bn5W3pqvnhB\nPAhvPDO6oNV40FW3p1zUOI0p0Fpy+1yTDkJoZsbSm01pXYHsOaNc7+w1RfWp/TQ6\neuA8f0HjcocAb4CLdG3WM40KSR5Zng/uNagcLJCkdfafIOZq/2Mz6vmiSSEnp0Uf\nUcfmRFKjeV0zmj+/JkuY6hMj7dn9jYabFHmJ8iP7q/AsdeRcytSOaA7TsDy7pVzx\n9+RXB/PMWpRcOQIDAQABo4GHMIGEMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAU\nBggrBgEFBQcDAQYIKwYBBQUHAwIwDAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBQc\nsHb5R9G/ozx6D6FFMfLszgRTUzAkBgNVHREEHTAbgghuMi5zdGV2ZYIJbG9jYWxo\nb3N0hwR/AAABMA0GCSqGSIb3DQEBCwUAA4IBAQA6E3pVspH6hU+mp68o9isQ2qP5\niFvA8QHwF/h6g1zBV1K6SfKj89SXeScgs6p2ph/QT/h9Bt6oYUNHQsbHidk9Efxd\nhvue3zAtFEDj9a33+rP7xQx8uUbusTZXqfn0zeoqvpGjSPDokjGaf2SHMhuPrRYW\nBHZVvekXiLln8Ths0/pr01MEkILe4QaSastEMtE4wLpfeue43giz73EQVfZuvFzb\nFrXoyJnbLZms4nEdvIlJDl39pXSrpBNQmHDgR4znlCms9dtx+X/08Woi78byfzAg\n51+ueOpc9xbl4Y8i4CYUaZZtq99O6QWva2Vnda5mVg5RQ2SCryduM2dbxWJu\n-----END CERTIFICATE-----\n"
                },
                "etcd_client_key": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAyCCyJEXW+llPYBvvwT+reP7qNp165HYwTFOMTab8/Ojszf42\nTrz9uQpUMoF9/MQLPZ801Q3jf3Zjjr44bYu5vLpcqfJ4TnA51/3FtunWjshuLoj4\nsJIUVmUYxfRs+bn5W3pqvnhBPAhvPDO6oNV40FW3p1zUOI0p0Fpy+1yTDkJoZsbS\nm01pXYHsOaNc7+w1RfWp/TQ6euA8f0HjcocAb4CLdG3WM40KSR5Zng/uNagcLJCk\ndfafIOZq/2Mz6vmiSSEnp0UfUcfmRFKjeV0zmj+/JkuY6hMj7dn9jYabFHmJ8iP7\nq/AsdeRcytSOaA7TsDy7pVzx9+RXB/PMWpRcOQIDAQABAoIBAQDCuc2cLbh3796k\nDYrD5kfae285pRGmqrlkCwdBp3ISRDHmXaxKAOp/2eUDH6yO/dJSK08k31a092T3\nx27waDxZvpvbYOpeqCQgXfS7fdwfIjbTYMNaS0kupz/rnWFLvAE9WWfz3N7covhZ\nA5xcUloznLQOTOzR+cjtypSGsBUGkSwHb6nh1BxHIr13BV+VvHl2aQJporaCUhU0\n8xY5cJFw0jd1N7LTuxgh/lBHmKTf927kvA2LDq/gMzZNPpAOVJQUptwyUFfDH71b\nUzaa2EfPaBFOuuXXNQNydznmGkyCDmzNLD3JnZ2Vv6At3SWoejM6E/BshErsTGcL\nQDgUP4ABAoGBAMqmdf0XffputPdWWxN1h+rN9CDVlfnyBhFzuZO1b77+asPHWaAP\n42w5wMlAbVYVkCe2+XnJlC4VSKPLEaDKA+m8RRFas6X+9jKQ2jmG9kXAQUHbo3J9\n5IQH9D7m6CVv1Xw1DwHfRzOZitEyQVqIii1Z0tgDpWjs5mom1OTzw3I5AoGBAPzQ\nOw3G4J+LRphadHwc+xziTSqoWjJiFdekgHZbROGqPNUaX+Cp6uUEUtwrPaJmcYAF\nRH1oqof7ING0YSFBosEnCfIp1QndmKEPrKCd6IIaKceMtBQ8ek/2XMhkkh3Jh+Rj\n7C0Q3JYfERlV+e3N+7DCGnSKBzfqG3250CxWcDoBAoGADz6KbamQvoAJePm0DDix\nKsancLjgeVbtge6UrTne2B1HZsbeRR4s231UtU71ap5go7wt9C1nyjerqTajctb/\niFuzTmTmUrxlRNSEtgMjD4gw4IVnPDugLxZyFzFDkV1iT9+l61wifQ011hrTs73F\ntzeklr9feA8qHh4hsb9smnECgYEAkED04UiQlRiwgHBktQkIVBPgui1zwfnrwq8P\nyfkMFcPAkExLVvM9n83WxeA6e/b+XnEjAnf9jjfCI0ZMgeBk0NfIuhAailWSKJy8\nAK35pHrvSfjELCPSGtxVVtbj9PEwhCZr9c8APvydEhrX0FRPgC1RURwNQF9prlSf\nLx1nTgECgYA/MxB0PUBF9VKSVdvokEZTm1uxht+w8/R0Xo5iOZSIuL2XYk3oWF28\nX0BnoVMWGF8ug29rk2Q84nx6WW1Z+LjGRV9YgNMD2eyvGhg4moOsij1hIl1Mrvqh\nkJkkiusfrZhJtMk4wJfX/KAshRjBSDvHLrWu5Z3PI4O1Rme5OCHYtg==\n-----END RSA PRIVATE KEY-----\n"
                },
                "etcd_peer_cert": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN CERTIFICATE-----\nMIIDQzCCAiugAwIBAgIQKm4W9F4qEwkADfmwGCbAEjANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwOTEzMjMx\nNFoXDTE5MDQwOTEzMjMxNFowIzENMAsGA1UEChMEZXRjZDESMBAGA1UEAxMJZXRj\nZC1wZWVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzAx+wfXWchY1\nLsGGenUuZN3ssrV3wcRZ+aT2JiHo6LTNRPOpbYc4Chf9nPwoF7JTsUedV6AuGpdZ\nT1+lliIWjg/r1ewrOVmsHNu7gwKBzut4mlesZ+I7NwaxFaFM6dcJ5NygwjNjvNjZ\nt2zPqkchMxz4D4oCaMnrTP+HuuJ3GgNTo/U9O+c4SkK894qBbplyk2uSCTxg6kQn\n0GFBxPiZfo0YfWTPHP5JnTC/Q1W0RmbZIrIGDjQuXhWqT6xrhiaXs5xGs/muylqR\n59xoKnsllo8/vnvF1Q1B26rX0gVfXvc7uX4+dslLJ+hsRX/QmNJoNtcozqSmnIjP\nELFV9L06twIDAQABo3UwczAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYB\nBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUHLB2+UfR\nv6M8eg+hRTHy7M4EU1MwEwYDVR0RBAwwCoIIbjIuc3RldmUwDQYJKoZIhvcNAQEL\nBQADggEBAFOYzm8RW3u4y+qdPIgip4jA3HYJ5BZrG/pp51JBOze8kwYTaM2rlnOy\nE9jAZZPJkc5SS4noYUyr6uPADuX/Fk673KaxCUkXqwJySO8E+Asz3zPBEBPiwPet\nBXlaaTygGxYb2nPWDoVD2CLNdgWPNolpVvcy2mUkLjcLfjTE+gOpCg+nyboDjVDt\nDqCSfY5s5K9RZxuAiBY/ekp7gySqeFU0XcrFuTOBrW0cpxUPeIbXl5UAaImiXbda\ngIqeJsQM9pSxV65yc9EpwnNcECvGIyIk9nVUCvLvfZe92iO3SIlFf+zLwx+03L0t\n2zuBs92ngQMp7rMEQWhPMfOwoxbSBTA=\n-----END CERTIFICATE-----\n"
                },
                "etcd_peer_key": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAzAx+wfXWchY1LsGGenUuZN3ssrV3wcRZ+aT2JiHo6LTNRPOp\nbYc4Chf9nPwoF7JTsUedV6AuGpdZT1+lliIWjg/r1ewrOVmsHNu7gwKBzut4mles\nZ+I7NwaxFaFM6dcJ5NygwjNjvNjZt2zPqkchMxz4D4oCaMnrTP+HuuJ3GgNTo/U9\nO+c4SkK894qBbplyk2uSCTxg6kQn0GFBxPiZfo0YfWTPHP5JnTC/Q1W0RmbZIrIG\nDjQuXhWqT6xrhiaXs5xGs/muylqR59xoKnsllo8/vnvF1Q1B26rX0gVfXvc7uX4+\ndslLJ+hsRX/QmNJoNtcozqSmnIjPELFV9L06twIDAQABAoIBAB0cc0Es16lzLac8\nCPmTmkjduJVOeoV0g/mv5UZPdDEvClIaCUQNFJusDIzHFNk8oeAa/YGw4qL8kMtY\nNAGVX25pKxZcGVaXSozbdIceZnKk+ZHbjEdN6XDSTZVua9C40zqJl43dUw9wSK94\noLAEceIe8e0VnX5hwGY91pl9EczuB1tl//eRBqHngnSuOLVbovq4Up4B6JxjvIxY\nGTcw4co1b3jLHm4v33Uisf0u6DaMM93Jwy7nZEcuy4LXSmxR6pJSl28FFvRZLQr+\npcdf8WyevahYWMnkfpi03oFv+UGxtliTzm/1R0hZSsDZFmC7BG2AhSG5sAFoiUu9\nyDIpvyECgYEA4yIedBG96EGP3T1eUVm4+A3mn6lsAb1OLIbTJhWpNN/4iwUh0raQ\njpTDVaiKodfN9sHHnxgk1aty/nqA5HK0rbEp/rmcbpKjpvWTABlSOJdLRp5+oAkQ\nGPyFdBb1ZvvLV78FvLbpgUCAwbXte+Hop10fXVUGvcY0/7r1qvkaNZ8CgYEA5ftQ\nGFvNCaSKO42wgM7wkZDDnBCCDIkcgaoiBnUnLD4BiFDtoylPEzj+qIbIE6bS3PUo\nzR+3UNn6YHBkDzfnyV3O1MZiIAjWQbw/a0wWq0U+U0isyN0X7HBv8EoirdBx0TAh\nd2gMRinB7yuj4Ab84yucq+1NCY2lmeHVL/60c+kCgYEAwdPg9x4Y2PXyBlQThAq0\nLYL3VzMmh4l8B8V6tRpxDj0/hat4hK/lRreuxg+RVrGqAzS03JCnBmxMMtxp2AoH\nI953Pvg4hae/3n/c1Y3GO6LoyzgASSPSx+/fFwVsoFip25SZGcViGTnpZuWQ51IO\nz5xJYsVnflWB7uYmNaRkeHMCgYAazoNUg4bPw+0U6fwT14s0/HHAhDAUc/rtpj4X\nEJrDTmrxT7WTWiJMdE1CqYsytzRG6xCZcEP22aGUkiUnnPWYhCWyqXkQkNcgjGe8\nAv91cTnFjWgOda7vMV/q20lVh0FtB7Yu6+LaXs2rKiQM3eOmOxQk+iELpwYRfMBT\nutWf2QKBgB8cGwa0CIMtg1CCJ+hg47+lis1G6nRY3gzQxiwNuj8wuQJMImQvZzYo\naJBnQOpkHygqB9a4xYky6Xjlo+OmDl23NZC+55GK3pafQVj5Ly6eAevcuOjnPTS3\nzPUgNlJC8vvtifRTkH1DywYaUOyGSCSRG6kMcM0rPFP1FsjtLpzY\n-----END RSA PRIVATE KEY-----\n"
                },
                "etcd_server_cert": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN CERTIFICATE-----\nMIIDWDCCAkCgAwIBAgIQI7Y7mE2b7waEO8QVNPC6RTANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwOTEzMjMx\nM1oXDTE5MDQwOTEzMjMxM1owJTENMAsGA1UEChMEZXRjZDEUMBIGA1UEAxMLZXRj\nZC1zZXJ2ZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC1oAxiaZIt\nqOa9oE2pm2AtxAbvAyLKpu5GFlrATG2C10/yuD0/422yh7zTjXSrmUpyZjW46sGp\nozXMjA6tRD+DDbU7zNDolrRvQ3uVXM4+82+ce/CyFgVpC9+mpeO3IXTICZfH48a+\nN/Ou+Gwzttaq7k3itZJTrmlhOGK0eknHJQkugU7P2tpn2S1eiOEZn4L1lLev58hK\neyow4wqEznKwl02D8JJWXVRUkwHqjC4MHCVN3aF7tk6ZKUlx6JbkXgdgHZeKgSVJ\nRnlrsnieR2XFglD3NLncpCrcBFen0NXuMXgqR5za3PO6fm47mxvM15Fj73L+kpAX\nkZ7lbbUsIBI9AgMBAAGjgYcwgYQwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQG\nCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFByw\ndvlH0b+jPHoPoUUx8uzOBFNTMCQGA1UdEQQdMBuCCG4yLnN0ZXZlgglsb2NhbGhv\nc3SHBH8AAAEwDQYJKoZIhvcNAQELBQADggEBAFqTWBrMMN270qQVx18kMgJu6Uos\n3AIsQ3A+DZa+qi161VtoQKErmEbCmN9iJhUMjIHDpRiVNg9j3i6U4kOrEWj4PfFb\nQVqxNKBGIJspBVBVcstrymVSa/QCMn4kw8vP+1+5AGZUPXa5eu2yiP88pN+KdNoF\nzSxAki7LfwcU86D1YyKrVZUL2xdCLPHuFF+fPAkbyG90e2q69nr+uQJ3eODK3ylh\noUzaZe3VpE5U4K+RNcGnzqzPw9XfR1LjFrchv/UgH2joCWqEbkGBBomEgwXIRI0O\nxwv/sDWlmVManAVXXxgJMJ3GtETQMTkftfzFTUpbEa7ooJGffr1jYboec4s=\n-----END CERTIFICATE-----\n"
                },
                "etcd_server_key": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAtaAMYmmSLajmvaBNqZtgLcQG7wMiyqbuRhZawExtgtdP8rg9\nP+Ntsoe80410q5lKcmY1uOrBqaM1zIwOrUQ/gw21O8zQ6Ja0b0N7lVzOPvNvnHvw\nshYFaQvfpqXjtyF0yAmXx+PGvjfzrvhsM7bWqu5N4rWSU65pYThitHpJxyUJLoFO\nz9raZ9ktXojhGZ+C9ZS3r+fISnsqMOMKhM5ysJdNg/CSVl1UVJMB6owuDBwlTd2h\ne7ZOmSlJceiW5F4HYB2XioElSUZ5a7J4nkdlxYJQ9zS53KQq3ARXp9DV7jF4Kkec\n2tzzun5uO5sbzNeRY+9y/pKQF5Ge5W21LCASPQIDAQABAoIBADpM9sy8UKUBe5fR\nFjzkWDo4m3Urj4Z3kTLESDtEDT8buFkUVOzmJzdQpQdPd+0BVslkD8ic6q92aXWQ\nW8G4j56UzuE0PLb8cUzp34ixcq74W5Jion+32+K9YfxPcco+Hgt8MNGERy6WLU20\nBp+PCFd0CWJFoIPmD4OaouyF+JrIuTuV7WdaJdHhSnzdV01LxEgUHsfH+GffJx3y\n5g4poItVuN8iEhRxpiqBqwqtc2dufA7IHjHaZuZn1cbX7gML8BcZfP9qP3u9YGQq\ne/6k9+HFFYPoH0f5o8BAYFdBj7x/UvmvkzDGSl8CM0v9DsG7xxYW6EilrnpPoebK\niiDNoUECgYEA1vdSCwHEJ1DW/7On1R9DfSs+Joij1W63qkIabXpbL9G+Knq4nTCb\n3QlMQQW3aYOkYY6XyTLMBG/updPbbctEDMIg7cKifetd6DiAnWlf+rHlJMMW2BJv\nNZi+CJpDXydYpLG4HYtt4SwlSsNSJZuklUICOFVB66FXDTf2dPpxcjECgYEA2Et3\n7SI+NdiIBWkSLu6N/mr264vSOgyad0RkgsqdhyCIjQ3tv4x9ciHqdPRzPnr8Y5WO\nJDIULbM0bkKUkTE4m1VIODVTxRJUCuI8VPTPY+NNpQF2ISo+8KPPX6TQnOCVcLs0\nIjmfASmw7za2xBhFPZqCfXA0xhjd2b/ooXHgcc0CgYAg8ReOfj/L8pRv7N0MSNUz\nyjuk9g19OJFGswiPvE9a/Z5Rriq6U+eesL0RvcmEjtrS5GIYQAOJrol4ugWHRr3v\n4pPfO5NhDn9+haIX/TzrEvXVc1v90p1eLkD42oL2gvYPjvhy9pnpBrXURihBgR9w\njAQBE/edH0VSzj+jX3mhEQKBgQCEyhhvemVtE2m2wKIMNCLyvmKni6jeQJyYemGm\ntpPtwLh0uMdsoOjnKBFUCjuycTkAPnIMoL4orGuVAcVKOkjBfKMg9wRd6fm00N4v\nXjjw3zzs/6+xfskzXa5TztDQb0Tv985y8KNAyIK66gFc9HWV84UHU9rif6O8Koi8\njTg5RQKBgQC18/nBnMo2j4jC7w6o8YnDZTUhXQMz7WQh20AdHCPHSNeMPGYM1qs/\nTfwRsgmYcH0VyxB/Zf9RO2cY5hV4o9bnxhiwLRtVs5ByUxejkPzVx3/vwHcq7oV0\n/Ybhehkm7GMx1DUoWNFWmNgzMuOTK0Xb6i9/LxhaHF2N5/lWK0ndvw==\n-----END RSA PRIVATE KEY-----\n"
                },
                "id": {
                    "sensitive": false,
                    "type": "string",
                    "value": "227beffec071f5857548407565582e83fabaf565"
                },
                "kube_dns_service_ip": {
                    "sensitive": false,
                    "type": "string",
                    "value": "10.3.0.10"
                },
                "kubeconfig": {
                    "sensitive": false,
                    "type": "string",
                    "value": "apiVersion: v1\nkind: Config\nclusters:\n- name: local\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRS3FxUW9Mb1NPYUdkMUFycEI2b1c3ekFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURreApNekl6TVRKYUZ3MHhPVEEwTURreE16SXpNVEphTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXdDSUQKVDRkOUsxUWtWaU5ITUtNTGxoL2pkNUlLeXdRenc1VFduTGdVM3VRWGt5aTlDY0FjNDM1WHEzMVV0MnNsMW1GbwpkVi9waGVtT2t4Q3RSZU9MOVFrd3JnaWpnU2dQM2k5MlpXalJxVDVlVUwyR21BSVh5aEQ2YUw0WnJaWnpvK3l4Cms2MVFwN2lsbWV0QkZSczlSUHBoSjN5UUtobmYyMGhraDlVRHlvRnMyR3RUVDI2c05LTFEzdHVXU1k5cjhyRUIKNjE4dGpLSzZjYkhmV3QxSXJHMm9oSWZ6SXhTZ0EraXBwak9COERpZG5lcUNhRThHUE5oZnlHMS9qcFRjNGVuQwpqQmhqSGJvVys0UnJSMXVRdmQ0QjdhNUQ3QTBwVjFSc3Fla2pKak11VEtwRGlMcFlobElEK3g0Y2lQZlh1RWR6Cmdnc0ZoN1RpVWRScVEwN0g1UUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVRGlXTVZmT3BHeTZ0N0craGFsL2cxTFBDQngwd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBR29ONHlOdFl0eVZGQXJBVU9mRlg2WjZvaE9nWjZoelRGSFFJSkc5bVlDZ3RmVG5rellvCkF3d1g2QXBpRDdYdVZkZk16aDJzbFdRMTc0YTBvV1pmdUxOcGJFOEJBa2x0bTFYU29nTUM4T3FHN0FDbWFTUGIKWU5xZDA3bzNsVVRqT3pZN2ducWNpbGd0V0s1U3Z4NndBZXNDSitibDl4TUhnN256VTROTnhRcDVkTC9DNTZhMApDc3NWeGVYeFFhc3hFcTlUcG5nbEZhVG5JSVRRc3Ewc0VQV09jUDd0cnVDOTNncm5hRENTVXJySlUrNFpSWE5lClN4cjJTS2p4Z1NkZGFRbWd0MzlQeDNxZFg3ZE1odXdiVDlTUHFWdjZyc0hGbTRXVnl3QUtEUEdYSVQwV3laaFIKNDVyTmdzUmtmdWpsazZ3WTc3VU5hUGY3Qll6UzJvZG93MG89Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: kubelet\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQVA0WnJMRUE4N1ZIQXlvOU9oTVNySXd3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBNQpNVE15TXpFMFdoY05NVGt3TkRBNU1UTXlNekUwV2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFLM3NSTERMdGJrZmNjMzdjYnJ0TzhIWjI5NXZFSGRMSDU3SGx3c045WHVINDFBWGJuTnVnZ204bVdiNQpqS0JFRU1QaG51aXJLaHY4dmxLQndlamlIT0hFUU1ZQ295RDUzbzFaenplTkZ6SXlwMGxzaTNnN0lTYXdhV0l5Cm1TVjlsTE1HczdYb1Rhc3drZTY1dXc4aExRNEVYMCtNS2xSQlQra2tGRC9aTXl1ZTliZ29wNjRoRnNDc3pocUwKTkRMVkQ5aVB4SEFrNTl3d1k3TTcwODZPNlFHb1o4dFIwR2E1TFA3MlBOU2Ryd1h2amFuc3dybkZMbGorV1lReQppMkpOUzNrVmlBWE9FQnREOTd4cGQ4V0VEOC83TDJRb1VKS3hjaDFGaE1YWndYSzd5Y2dqdkRWUmpudEtYa3Z4CnB3ZlFYN1hqdXFkK0tJb0dKWWRUaXVQNGl5VUNBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZBNGxqRlh6cVJzdXJleHZvV3BmNE5TendnY2RNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFVCngreDdSZTAxWjg5MklzZzVEYzJRN2F3Z2VNREVjaEZpSGxPaHhGVEpSU2xsUWJmWXplSGZ3NzVRdk1uTzNmOE4KVGhYYU4yc1MwU0ZsRlY2UlI0ZEJINnUxZWNIS2lBem9EWkk3TnpIZTVadXFsQmphY2p6ckM2d0xHYjNmd3k0UwplbWVBZWlWelRrRW96OWxmaEJFdWpOYk4rcmhKVGc4RHUyWk9zdWFLa1cxbjJKVU5OTkJxRlA4eWZzd0lMSm95CmhTa0lTQXIrMmlmUTJvUjVpRG5tY01weWhGcEh2UDF2VmRQWU9SVHpzcW1DU25TbTRoMWhpRHlQZ0NsdUJiVjcKVHFsMUtRTmF3Y1NEQ01TaUc5ZVJVWW1MVEQ1a3J4Y3dOdFU0NUVQaFVmT0ZZK0RFSW1oQ1VhZnp1bDBYZW5scwpoVy9ySzI0QzAzVEdLWllVVkkyUAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcmV4RXNNdTF1Ujl4emZ0eHV1MDd3ZG5iM204UWQwc2Zuc2VYQ3czMWU0ZmpVQmR1CmMyNkNDYnlaWnZtTW9FUVF3K0dlNktzcUcveStVb0hCNk9JYzRjUkF4Z0tqSVBuZWpWblBONDBYTWpLblNXeUwKZURzaEpyQnBZaktaSlgyVXN3YXp0ZWhOcXpDUjdybTdEeUV0RGdSZlQ0d3FWRUZQNlNRVVA5a3pLNTcxdUNpbgpyaUVXd0t6T0dvczBNdFVQMkkvRWNDVG4zREJqc3p2VHpvN3BBYWhueTFIUVpya3Mvdlk4MUoydkJlK05xZXpDCnVjVXVXUDVaaERLTFlrMUxlUldJQmM0UUcwUDN2R2wzeFlRUHovc3ZaQ2hRa3JGeUhVV0V4ZG5CY3J2SnlDTzgKTlZHT2UwcGVTL0duQjlCZnRlTzZwMzRvaWdZbGgxT0s0L2lMSlFJREFRQUJBb0lCQURwMStaem56SHllZWpWLwp1SG5adGtWeHduc2hJQXJKUUtheGRpN3NFVURscTEzSGtvUFFlSHRuWHJVRFd1YWdHbmFOUjBuMEJ1S0RjVUh3CmhjcU8vcUJReEdrS2grVFV1SjhRdWh0MUhIL3VFTmNZV2tVZXN3VDdOV0VobXVMRU5KQjh4emwxRFc1bWxCY0gKYlQ0bnE2cFRnK29NTmtvOTdldHpDaTl3QmNnNlIyNjVNUmtzM20vK2Fpc2xjTUNvZWExQVBDbGFoV0h3Rmx3TQp4UGtvV1hESHQwOFRNcUtIMUhTRllmV3N3VWVwMEJ2ditxcVpibGxUYUNiZ3RKUVBvd0p5YjlHa3ZLNGhsdjMvCmFFbTV4U1hMM1lXd0dNdyszSmVod2V0VmdEajZkcUdtWGJiODh6RDVpOXR6STRFLzVFY1QzWEx6VXd2WXBaL2wKM1l2eXBKMENnWUVBeXhadWJHTkxDcnNrNm5RWFhVMFk3VVJ0M0V3ZE0vMlAxTmhhL0J2eWNCclpySFNkZXB4ago5K2V3MDhoaTlVS0JuZVdFdXNsZ1podGNwUWFvS284RnhEWDF6T1paS2djSFB2TEpFYmVLSkVCN05iSXhER2dqCmVreGRLQ3dIRHNpQXh5bjVjaHBXRWdwVzdITndDTW52aGVIaDI1Mm56clZzVU9xUk9Kblh4bXNDZ1lFQTJ6eWIKQWdmN0NvOFhRWmFWSzNadEJ0ZW0yTVZZY3Q0b0tSbDZ0M0JEVHdTUk5YMXJmSFRzcERJVk1HVCtoM1p3WGpkdQpNZHh0ZHJYWHM5WVlOVERsWTBoUU9QUmg4T2xSU2lYL1lzQ3ZHdmZEaGxtUnEyRmYvejl1YldSb1o4WDhOdkl5CmJueWRXb0kyRk95RWp3eHFIOG1HQWc0R0JUMG90SzdZNjFGUnVLOENnWUI3VTdYZTBEVmo0TjI4R3ArTm95SCsKQTg0TE41V01XdkNiT24rV0ZZcVdGVmdXYUFLeDBJTE1xc0F3KzhGTVd3VEhVL2ZVVGpIaUQ3K2szM1FEMURLVwpRb1p2MVhwVUVVeVBKM1IrODh4SjAzWisxeVQ5K2NlQm54bjdLVEZvQXM1aEk5WTlPazBHUzQwWnJjaGRMZlBzCmc0MWFobFMvTEdFSWlrbUI2N3FpM1FLQmdRQ3Azdi9NUnhyQlI3WWhYK2dkVVJtUlg2OHI3MTFsUTdXaWd0ZVAKSXpGRUhLblc1R05RZjlpTU1USXgyVTlPN3ZxS1JqRGYrWWZubjJhUE5haDBMbnJPdnMxS0ZERi9WWWxqQnFZbgpnbDByYkNiWUJyYlVNQk1OMTd4Y2pweEhMQ1VNL2dVTmp3anRoRThiVDFnMjdzdWI3YTRrRVhHZ3hZNncwWG5LCmU2dnlpUUtCZ0FGNm80eWRKdzFkVktKTS9HeklBa2t1TmxTTFltN0NHTHpGVlFXSWJpTU83U2JkN0RGRlFLZWUKNmJRVDA5ODNqYm9aZzF6dUJPSVFDcFdTVG9JaWZYL2tYSWhQTjVoRVNDd2dSeVVYSXAzLzZpVnl6Y0Y2RklDTgpwditRYzFROXBObGE4dTlzNGordkIrMXhMaDd2VHAwaGNqbXhDVDhWRVpEN0tKdExtd05HCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\ncontexts:\n- context:\n    cluster: local\n    user: kubelet\n"
                },
                "kubelet_cert": {
                    "sensitive": false,
                    "type": "string",
                    "value": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQVA0WnJMRUE4N1ZIQXlvOU9oTVNySXd3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBNQpNVE15TXpFMFdoY05NVGt3TkRBNU1UTXlNekUwV2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFLM3NSTERMdGJrZmNjMzdjYnJ0TzhIWjI5NXZFSGRMSDU3SGx3c045WHVINDFBWGJuTnVnZ204bVdiNQpqS0JFRU1QaG51aXJLaHY4dmxLQndlamlIT0hFUU1ZQ295RDUzbzFaenplTkZ6SXlwMGxzaTNnN0lTYXdhV0l5Cm1TVjlsTE1HczdYb1Rhc3drZTY1dXc4aExRNEVYMCtNS2xSQlQra2tGRC9aTXl1ZTliZ29wNjRoRnNDc3pocUwKTkRMVkQ5aVB4SEFrNTl3d1k3TTcwODZPNlFHb1o4dFIwR2E1TFA3MlBOU2Ryd1h2amFuc3dybkZMbGorV1lReQppMkpOUzNrVmlBWE9FQnREOTd4cGQ4V0VEOC83TDJRb1VKS3hjaDFGaE1YWndYSzd5Y2dqdkRWUmpudEtYa3Z4CnB3ZlFYN1hqdXFkK0tJb0dKWWRUaXVQNGl5VUNBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZBNGxqRlh6cVJzdXJleHZvV3BmNE5TendnY2RNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFVCngreDdSZTAxWjg5MklzZzVEYzJRN2F3Z2VNREVjaEZpSGxPaHhGVEpSU2xsUWJmWXplSGZ3NzVRdk1uTzNmOE4KVGhYYU4yc1MwU0ZsRlY2UlI0ZEJINnUxZWNIS2lBem9EWkk3TnpIZTVadXFsQmphY2p6ckM2d0xHYjNmd3k0UwplbWVBZWlWelRrRW96OWxmaEJFdWpOYk4rcmhKVGc4RHUyWk9zdWFLa1cxbjJKVU5OTkJxRlA4eWZzd0lMSm95CmhTa0lTQXIrMmlmUTJvUjVpRG5tY01weWhGcEh2UDF2VmRQWU9SVHpzcW1DU25TbTRoMWhpRHlQZ0NsdUJiVjcKVHFsMUtRTmF3Y1NEQ01TaUc5ZVJVWW1MVEQ1a3J4Y3dOdFU0NUVQaFVmT0ZZK0RFSW1oQ1VhZnp1bDBYZW5scwpoVy9ySzI0QzAzVEdLWllVVkkyUAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
                },
                "kubelet_key": {
                    "sensitive": false,
                    "type": "string",
                    "value": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcmV4RXNNdTF1Ujl4emZ0eHV1MDd3ZG5iM204UWQwc2Zuc2VYQ3czMWU0ZmpVQmR1CmMyNkNDYnlaWnZtTW9FUVF3K0dlNktzcUcveStVb0hCNk9JYzRjUkF4Z0tqSVBuZWpWblBONDBYTWpLblNXeUwKZURzaEpyQnBZaktaSlgyVXN3YXp0ZWhOcXpDUjdybTdEeUV0RGdSZlQ0d3FWRUZQNlNRVVA5a3pLNTcxdUNpbgpyaUVXd0t6T0dvczBNdFVQMkkvRWNDVG4zREJqc3p2VHpvN3BBYWhueTFIUVpya3Mvdlk4MUoydkJlK05xZXpDCnVjVXVXUDVaaERLTFlrMUxlUldJQmM0UUcwUDN2R2wzeFlRUHovc3ZaQ2hRa3JGeUhVV0V4ZG5CY3J2SnlDTzgKTlZHT2UwcGVTL0duQjlCZnRlTzZwMzRvaWdZbGgxT0s0L2lMSlFJREFRQUJBb0lCQURwMStaem56SHllZWpWLwp1SG5adGtWeHduc2hJQXJKUUtheGRpN3NFVURscTEzSGtvUFFlSHRuWHJVRFd1YWdHbmFOUjBuMEJ1S0RjVUh3CmhjcU8vcUJReEdrS2grVFV1SjhRdWh0MUhIL3VFTmNZV2tVZXN3VDdOV0VobXVMRU5KQjh4emwxRFc1bWxCY0gKYlQ0bnE2cFRnK29NTmtvOTdldHpDaTl3QmNnNlIyNjVNUmtzM20vK2Fpc2xjTUNvZWExQVBDbGFoV0h3Rmx3TQp4UGtvV1hESHQwOFRNcUtIMUhTRllmV3N3VWVwMEJ2ditxcVpibGxUYUNiZ3RKUVBvd0p5YjlHa3ZLNGhsdjMvCmFFbTV4U1hMM1lXd0dNdyszSmVod2V0VmdEajZkcUdtWGJiODh6RDVpOXR6STRFLzVFY1QzWEx6VXd2WXBaL2wKM1l2eXBKMENnWUVBeXhadWJHTkxDcnNrNm5RWFhVMFk3VVJ0M0V3ZE0vMlAxTmhhL0J2eWNCclpySFNkZXB4ago5K2V3MDhoaTlVS0JuZVdFdXNsZ1podGNwUWFvS284RnhEWDF6T1paS2djSFB2TEpFYmVLSkVCN05iSXhER2dqCmVreGRLQ3dIRHNpQXh5bjVjaHBXRWdwVzdITndDTW52aGVIaDI1Mm56clZzVU9xUk9Kblh4bXNDZ1lFQTJ6eWIKQWdmN0NvOFhRWmFWSzNadEJ0ZW0yTVZZY3Q0b0tSbDZ0M0JEVHdTUk5YMXJmSFRzcERJVk1HVCtoM1p3WGpkdQpNZHh0ZHJYWHM5WVlOVERsWTBoUU9QUmg4T2xSU2lYL1lzQ3ZHdmZEaGxtUnEyRmYvejl1YldSb1o4WDhOdkl5CmJueWRXb0kyRk95RWp3eHFIOG1HQWc0R0JUMG90SzdZNjFGUnVLOENnWUI3VTdYZTBEVmo0TjI4R3ArTm95SCsKQTg0TE41V01XdkNiT24rV0ZZcVdGVmdXYUFLeDBJTE1xc0F3KzhGTVd3VEhVL2ZVVGpIaUQ3K2szM1FEMURLVwpRb1p2MVhwVUVVeVBKM1IrODh4SjAzWisxeVQ5K2NlQm54bjdLVEZvQXM1aEk5WTlPazBHUzQwWnJjaGRMZlBzCmc0MWFobFMvTEdFSWlrbUI2N3FpM1FLQmdRQ3Azdi9NUnhyQlI3WWhYK2dkVVJtUlg2OHI3MTFsUTdXaWd0ZVAKSXpGRUhLblc1R05RZjlpTU1USXgyVTlPN3ZxS1JqRGYrWWZubjJhUE5haDBMbnJPdnMxS0ZERi9WWWxqQnFZbgpnbDByYkNiWUJyYlVNQk1OMTd4Y2pweEhMQ1VNL2dVTmp3anRoRThiVDFnMjdzdWI3YTRrRVhHZ3hZNncwWG5LCmU2dnlpUUtCZ0FGNm80eWRKdzFkVktKTS9HeklBa2t1TmxTTFltN0NHTHpGVlFXSWJpTU83U2JkN0RGRlFLZWUKNmJRVDA5ODNqYm9aZzF6dUJPSVFDcFdTVG9JaWZYL2tYSWhQTjVoRVNDd2dSeVVYSXAzLzZpVnl6Y0Y2RklDTgpwditRYzFROXBObGE4dTlzNGordkIrMXhMaDd2VHAwaGNqbXhDVDhWRVpEN0tKdExtd05HCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
                },
                "server": {
                    "sensitive": false,
                    "type": "string",
                    "value": "https://steve:443"
                },
                "user-kubeconfig": {
                    "sensitive": false,
                    "type": "string",
                    "value": "apiVersion: v1\nkind: Config\nclusters:\n- name: steve-cluster\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRS3FxUW9Mb1NPYUdkMUFycEI2b1c3ekFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURreApNekl6TVRKYUZ3MHhPVEEwTURreE16SXpNVEphTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXdDSUQKVDRkOUsxUWtWaU5ITUtNTGxoL2pkNUlLeXdRenc1VFduTGdVM3VRWGt5aTlDY0FjNDM1WHEzMVV0MnNsMW1GbwpkVi9waGVtT2t4Q3RSZU9MOVFrd3JnaWpnU2dQM2k5MlpXalJxVDVlVUwyR21BSVh5aEQ2YUw0WnJaWnpvK3l4Cms2MVFwN2lsbWV0QkZSczlSUHBoSjN5UUtobmYyMGhraDlVRHlvRnMyR3RUVDI2c05LTFEzdHVXU1k5cjhyRUIKNjE4dGpLSzZjYkhmV3QxSXJHMm9oSWZ6SXhTZ0EraXBwak9COERpZG5lcUNhRThHUE5oZnlHMS9qcFRjNGVuQwpqQmhqSGJvVys0UnJSMXVRdmQ0QjdhNUQ3QTBwVjFSc3Fla2pKak11VEtwRGlMcFlobElEK3g0Y2lQZlh1RWR6Cmdnc0ZoN1RpVWRScVEwN0g1UUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVRGlXTVZmT3BHeTZ0N0craGFsL2cxTFBDQngwd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBR29ONHlOdFl0eVZGQXJBVU9mRlg2WjZvaE9nWjZoelRGSFFJSkc5bVlDZ3RmVG5rellvCkF3d1g2QXBpRDdYdVZkZk16aDJzbFdRMTc0YTBvV1pmdUxOcGJFOEJBa2x0bTFYU29nTUM4T3FHN0FDbWFTUGIKWU5xZDA3bzNsVVRqT3pZN2ducWNpbGd0V0s1U3Z4NndBZXNDSitibDl4TUhnN256VTROTnhRcDVkTC9DNTZhMApDc3NWeGVYeFFhc3hFcTlUcG5nbEZhVG5JSVRRc3Ewc0VQV09jUDd0cnVDOTNncm5hRENTVXJySlUrNFpSWE5lClN4cjJTS2p4Z1NkZGFRbWd0MzlQeDNxZFg3ZE1odXdiVDlTUHFWdjZyc0hGbTRXVnl3QUtEUEdYSVQwV3laaFIKNDVyTmdzUmtmdWpsazZ3WTc3VU5hUGY3Qll6UzJvZG93MG89Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: steve-user\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQVA0WnJMRUE4N1ZIQXlvOU9oTVNySXd3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBNQpNVE15TXpFMFdoY05NVGt3TkRBNU1UTXlNekUwV2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFLM3NSTERMdGJrZmNjMzdjYnJ0TzhIWjI5NXZFSGRMSDU3SGx3c045WHVINDFBWGJuTnVnZ204bVdiNQpqS0JFRU1QaG51aXJLaHY4dmxLQndlamlIT0hFUU1ZQ295RDUzbzFaenplTkZ6SXlwMGxzaTNnN0lTYXdhV0l5Cm1TVjlsTE1HczdYb1Rhc3drZTY1dXc4aExRNEVYMCtNS2xSQlQra2tGRC9aTXl1ZTliZ29wNjRoRnNDc3pocUwKTkRMVkQ5aVB4SEFrNTl3d1k3TTcwODZPNlFHb1o4dFIwR2E1TFA3MlBOU2Ryd1h2amFuc3dybkZMbGorV1lReQppMkpOUzNrVmlBWE9FQnREOTd4cGQ4V0VEOC83TDJRb1VKS3hjaDFGaE1YWndYSzd5Y2dqdkRWUmpudEtYa3Z4CnB3ZlFYN1hqdXFkK0tJb0dKWWRUaXVQNGl5VUNBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZBNGxqRlh6cVJzdXJleHZvV3BmNE5TendnY2RNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFVCngreDdSZTAxWjg5MklzZzVEYzJRN2F3Z2VNREVjaEZpSGxPaHhGVEpSU2xsUWJmWXplSGZ3NzVRdk1uTzNmOE4KVGhYYU4yc1MwU0ZsRlY2UlI0ZEJINnUxZWNIS2lBem9EWkk3TnpIZTVadXFsQmphY2p6ckM2d0xHYjNmd3k0UwplbWVBZWlWelRrRW96OWxmaEJFdWpOYk4rcmhKVGc4RHUyWk9zdWFLa1cxbjJKVU5OTkJxRlA4eWZzd0lMSm95CmhTa0lTQXIrMmlmUTJvUjVpRG5tY01weWhGcEh2UDF2VmRQWU9SVHpzcW1DU25TbTRoMWhpRHlQZ0NsdUJiVjcKVHFsMUtRTmF3Y1NEQ01TaUc5ZVJVWW1MVEQ1a3J4Y3dOdFU0NUVQaFVmT0ZZK0RFSW1oQ1VhZnp1bDBYZW5scwpoVy9ySzI0QzAzVEdLWllVVkkyUAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcmV4RXNNdTF1Ujl4emZ0eHV1MDd3ZG5iM204UWQwc2Zuc2VYQ3czMWU0ZmpVQmR1CmMyNkNDYnlaWnZtTW9FUVF3K0dlNktzcUcveStVb0hCNk9JYzRjUkF4Z0tqSVBuZWpWblBONDBYTWpLblNXeUwKZURzaEpyQnBZaktaSlgyVXN3YXp0ZWhOcXpDUjdybTdEeUV0RGdSZlQ0d3FWRUZQNlNRVVA5a3pLNTcxdUNpbgpyaUVXd0t6T0dvczBNdFVQMkkvRWNDVG4zREJqc3p2VHpvN3BBYWhueTFIUVpya3Mvdlk4MUoydkJlK05xZXpDCnVjVXVXUDVaaERLTFlrMUxlUldJQmM0UUcwUDN2R2wzeFlRUHovc3ZaQ2hRa3JGeUhVV0V4ZG5CY3J2SnlDTzgKTlZHT2UwcGVTL0duQjlCZnRlTzZwMzRvaWdZbGgxT0s0L2lMSlFJREFRQUJBb0lCQURwMStaem56SHllZWpWLwp1SG5adGtWeHduc2hJQXJKUUtheGRpN3NFVURscTEzSGtvUFFlSHRuWHJVRFd1YWdHbmFOUjBuMEJ1S0RjVUh3CmhjcU8vcUJReEdrS2grVFV1SjhRdWh0MUhIL3VFTmNZV2tVZXN3VDdOV0VobXVMRU5KQjh4emwxRFc1bWxCY0gKYlQ0bnE2cFRnK29NTmtvOTdldHpDaTl3QmNnNlIyNjVNUmtzM20vK2Fpc2xjTUNvZWExQVBDbGFoV0h3Rmx3TQp4UGtvV1hESHQwOFRNcUtIMUhTRllmV3N3VWVwMEJ2ditxcVpibGxUYUNiZ3RKUVBvd0p5YjlHa3ZLNGhsdjMvCmFFbTV4U1hMM1lXd0dNdyszSmVod2V0VmdEajZkcUdtWGJiODh6RDVpOXR6STRFLzVFY1QzWEx6VXd2WXBaL2wKM1l2eXBKMENnWUVBeXhadWJHTkxDcnNrNm5RWFhVMFk3VVJ0M0V3ZE0vMlAxTmhhL0J2eWNCclpySFNkZXB4ago5K2V3MDhoaTlVS0JuZVdFdXNsZ1podGNwUWFvS284RnhEWDF6T1paS2djSFB2TEpFYmVLSkVCN05iSXhER2dqCmVreGRLQ3dIRHNpQXh5bjVjaHBXRWdwVzdITndDTW52aGVIaDI1Mm56clZzVU9xUk9Kblh4bXNDZ1lFQTJ6eWIKQWdmN0NvOFhRWmFWSzNadEJ0ZW0yTVZZY3Q0b0tSbDZ0M0JEVHdTUk5YMXJmSFRzcERJVk1HVCtoM1p3WGpkdQpNZHh0ZHJYWHM5WVlOVERsWTBoUU9QUmg4T2xSU2lYL1lzQ3ZHdmZEaGxtUnEyRmYvejl1YldSb1o4WDhOdkl5CmJueWRXb0kyRk95RWp3eHFIOG1HQWc0R0JUMG90SzdZNjFGUnVLOENnWUI3VTdYZTBEVmo0TjI4R3ArTm95SCsKQTg0TE41V01XdkNiT24rV0ZZcVdGVmdXYUFLeDBJTE1xc0F3KzhGTVd3VEhVL2ZVVGpIaUQ3K2szM1FEMURLVwpRb1p2MVhwVUVVeVBKM1IrODh4SjAzWisxeVQ5K2NlQm54bjdLVEZvQXM1aEk5WTlPazBHUzQwWnJjaGRMZlBzCmc0MWFobFMvTEdFSWlrbUI2N3FpM1FLQmdRQ3Azdi9NUnhyQlI3WWhYK2dkVVJtUlg2OHI3MTFsUTdXaWd0ZVAKSXpGRUhLblc1R05RZjlpTU1USXgyVTlPN3ZxS1JqRGYrWWZubjJhUE5haDBMbnJPdnMxS0ZERi9WWWxqQnFZbgpnbDByYkNiWUJyYlVNQk1OMTd4Y2pweEhMQ1VNL2dVTmp3anRoRThiVDFnMjdzdWI3YTRrRVhHZ3hZNncwWG5LCmU2dnlpUUtCZ0FGNm80eWRKdzFkVktKTS9HeklBa2t1TmxTTFltN0NHTHpGVlFXSWJpTU83U2JkN0RGRlFLZWUKNmJRVDA5ODNqYm9aZzF6dUJPSVFDcFdTVG9JaWZYL2tYSWhQTjVoRVNDd2dSeVVYSXAzLzZpVnl6Y0Y2RklDTgpwditRYzFROXBObGE4dTlzNGordkIrMXhMaDd2VHAwaGNqbXhDVDhWRVpEN0tKdExtd05HCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\ncontexts:\n- name: steve-context\n  context:\n    cluster: steve-cluster\n    user: steve-user\n"
                }
            },
            "resources": {
                "data.template_file.kubeconfig": {
                    "type": "template_file",
                    "depends_on": [
                        "tls_locally_signed_cert.kubelet",
                        "tls_private_key.kubelet",
                        "tls_self_signed_cert.kube-ca.*"
                    ],
                    "primary": {
                        "id": "006291e44e076497286294dccc77ea22e84d34d9391e63a3ee7909ca94563726",
                        "attributes": {
                            "id": "006291e44e076497286294dccc77ea22e84d34d9391e63a3ee7909ca94563726",
                            "rendered": "apiVersion: v1\nkind: Config\nclusters:\n- name: local\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRS3FxUW9Mb1NPYUdkMUFycEI2b1c3ekFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURreApNekl6TVRKYUZ3MHhPVEEwTURreE16SXpNVEphTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXdDSUQKVDRkOUsxUWtWaU5ITUtNTGxoL2pkNUlLeXdRenc1VFduTGdVM3VRWGt5aTlDY0FjNDM1WHEzMVV0MnNsMW1GbwpkVi9waGVtT2t4Q3RSZU9MOVFrd3JnaWpnU2dQM2k5MlpXalJxVDVlVUwyR21BSVh5aEQ2YUw0WnJaWnpvK3l4Cms2MVFwN2lsbWV0QkZSczlSUHBoSjN5UUtobmYyMGhraDlVRHlvRnMyR3RUVDI2c05LTFEzdHVXU1k5cjhyRUIKNjE4dGpLSzZjYkhmV3QxSXJHMm9oSWZ6SXhTZ0EraXBwak9COERpZG5lcUNhRThHUE5oZnlHMS9qcFRjNGVuQwpqQmhqSGJvVys0UnJSMXVRdmQ0QjdhNUQ3QTBwVjFSc3Fla2pKak11VEtwRGlMcFlobElEK3g0Y2lQZlh1RWR6Cmdnc0ZoN1RpVWRScVEwN0g1UUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVRGlXTVZmT3BHeTZ0N0craGFsL2cxTFBDQngwd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBR29ONHlOdFl0eVZGQXJBVU9mRlg2WjZvaE9nWjZoelRGSFFJSkc5bVlDZ3RmVG5rellvCkF3d1g2QXBpRDdYdVZkZk16aDJzbFdRMTc0YTBvV1pmdUxOcGJFOEJBa2x0bTFYU29nTUM4T3FHN0FDbWFTUGIKWU5xZDA3bzNsVVRqT3pZN2ducWNpbGd0V0s1U3Z4NndBZXNDSitibDl4TUhnN256VTROTnhRcDVkTC9DNTZhMApDc3NWeGVYeFFhc3hFcTlUcG5nbEZhVG5JSVRRc3Ewc0VQV09jUDd0cnVDOTNncm5hRENTVXJySlUrNFpSWE5lClN4cjJTS2p4Z1NkZGFRbWd0MzlQeDNxZFg3ZE1odXdiVDlTUHFWdjZyc0hGbTRXVnl3QUtEUEdYSVQwV3laaFIKNDVyTmdzUmtmdWpsazZ3WTc3VU5hUGY3Qll6UzJvZG93MG89Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: kubelet\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQVA0WnJMRUE4N1ZIQXlvOU9oTVNySXd3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBNQpNVE15TXpFMFdoY05NVGt3TkRBNU1UTXlNekUwV2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFLM3NSTERMdGJrZmNjMzdjYnJ0TzhIWjI5NXZFSGRMSDU3SGx3c045WHVINDFBWGJuTnVnZ204bVdiNQpqS0JFRU1QaG51aXJLaHY4dmxLQndlamlIT0hFUU1ZQ295RDUzbzFaenplTkZ6SXlwMGxzaTNnN0lTYXdhV0l5Cm1TVjlsTE1HczdYb1Rhc3drZTY1dXc4aExRNEVYMCtNS2xSQlQra2tGRC9aTXl1ZTliZ29wNjRoRnNDc3pocUwKTkRMVkQ5aVB4SEFrNTl3d1k3TTcwODZPNlFHb1o4dFIwR2E1TFA3MlBOU2Ryd1h2amFuc3dybkZMbGorV1lReQppMkpOUzNrVmlBWE9FQnREOTd4cGQ4V0VEOC83TDJRb1VKS3hjaDFGaE1YWndYSzd5Y2dqdkRWUmpudEtYa3Z4CnB3ZlFYN1hqdXFkK0tJb0dKWWRUaXVQNGl5VUNBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZBNGxqRlh6cVJzdXJleHZvV3BmNE5TendnY2RNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFVCngreDdSZTAxWjg5MklzZzVEYzJRN2F3Z2VNREVjaEZpSGxPaHhGVEpSU2xsUWJmWXplSGZ3NzVRdk1uTzNmOE4KVGhYYU4yc1MwU0ZsRlY2UlI0ZEJINnUxZWNIS2lBem9EWkk3TnpIZTVadXFsQmphY2p6ckM2d0xHYjNmd3k0UwplbWVBZWlWelRrRW96OWxmaEJFdWpOYk4rcmhKVGc4RHUyWk9zdWFLa1cxbjJKVU5OTkJxRlA4eWZzd0lMSm95CmhTa0lTQXIrMmlmUTJvUjVpRG5tY01weWhGcEh2UDF2VmRQWU9SVHpzcW1DU25TbTRoMWhpRHlQZ0NsdUJiVjcKVHFsMUtRTmF3Y1NEQ01TaUc5ZVJVWW1MVEQ1a3J4Y3dOdFU0NUVQaFVmT0ZZK0RFSW1oQ1VhZnp1bDBYZW5scwpoVy9ySzI0QzAzVEdLWllVVkkyUAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcmV4RXNNdTF1Ujl4emZ0eHV1MDd3ZG5iM204UWQwc2Zuc2VYQ3czMWU0ZmpVQmR1CmMyNkNDYnlaWnZtTW9FUVF3K0dlNktzcUcveStVb0hCNk9JYzRjUkF4Z0tqSVBuZWpWblBONDBYTWpLblNXeUwKZURzaEpyQnBZaktaSlgyVXN3YXp0ZWhOcXpDUjdybTdEeUV0RGdSZlQ0d3FWRUZQNlNRVVA5a3pLNTcxdUNpbgpyaUVXd0t6T0dvczBNdFVQMkkvRWNDVG4zREJqc3p2VHpvN3BBYWhueTFIUVpya3Mvdlk4MUoydkJlK05xZXpDCnVjVXVXUDVaaERLTFlrMUxlUldJQmM0UUcwUDN2R2wzeFlRUHovc3ZaQ2hRa3JGeUhVV0V4ZG5CY3J2SnlDTzgKTlZHT2UwcGVTL0duQjlCZnRlTzZwMzRvaWdZbGgxT0s0L2lMSlFJREFRQUJBb0lCQURwMStaem56SHllZWpWLwp1SG5adGtWeHduc2hJQXJKUUtheGRpN3NFVURscTEzSGtvUFFlSHRuWHJVRFd1YWdHbmFOUjBuMEJ1S0RjVUh3CmhjcU8vcUJReEdrS2grVFV1SjhRdWh0MUhIL3VFTmNZV2tVZXN3VDdOV0VobXVMRU5KQjh4emwxRFc1bWxCY0gKYlQ0bnE2cFRnK29NTmtvOTdldHpDaTl3QmNnNlIyNjVNUmtzM20vK2Fpc2xjTUNvZWExQVBDbGFoV0h3Rmx3TQp4UGtvV1hESHQwOFRNcUtIMUhTRllmV3N3VWVwMEJ2ditxcVpibGxUYUNiZ3RKUVBvd0p5YjlHa3ZLNGhsdjMvCmFFbTV4U1hMM1lXd0dNdyszSmVod2V0VmdEajZkcUdtWGJiODh6RDVpOXR6STRFLzVFY1QzWEx6VXd2WXBaL2wKM1l2eXBKMENnWUVBeXhadWJHTkxDcnNrNm5RWFhVMFk3VVJ0M0V3ZE0vMlAxTmhhL0J2eWNCclpySFNkZXB4ago5K2V3MDhoaTlVS0JuZVdFdXNsZ1podGNwUWFvS284RnhEWDF6T1paS2djSFB2TEpFYmVLSkVCN05iSXhER2dqCmVreGRLQ3dIRHNpQXh5bjVjaHBXRWdwVzdITndDTW52aGVIaDI1Mm56clZzVU9xUk9Kblh4bXNDZ1lFQTJ6eWIKQWdmN0NvOFhRWmFWSzNadEJ0ZW0yTVZZY3Q0b0tSbDZ0M0JEVHdTUk5YMXJmSFRzcERJVk1HVCtoM1p3WGpkdQpNZHh0ZHJYWHM5WVlOVERsWTBoUU9QUmg4T2xSU2lYL1lzQ3ZHdmZEaGxtUnEyRmYvejl1YldSb1o4WDhOdkl5CmJueWRXb0kyRk95RWp3eHFIOG1HQWc0R0JUMG90SzdZNjFGUnVLOENnWUI3VTdYZTBEVmo0TjI4R3ArTm95SCsKQTg0TE41V01XdkNiT24rV0ZZcVdGVmdXYUFLeDBJTE1xc0F3KzhGTVd3VEhVL2ZVVGpIaUQ3K2szM1FEMURLVwpRb1p2MVhwVUVVeVBKM1IrODh4SjAzWisxeVQ5K2NlQm54bjdLVEZvQXM1aEk5WTlPazBHUzQwWnJjaGRMZlBzCmc0MWFobFMvTEdFSWlrbUI2N3FpM1FLQmdRQ3Azdi9NUnhyQlI3WWhYK2dkVVJtUlg2OHI3MTFsUTdXaWd0ZVAKSXpGRUhLblc1R05RZjlpTU1USXgyVTlPN3ZxS1JqRGYrWWZubjJhUE5haDBMbnJPdnMxS0ZERi9WWWxqQnFZbgpnbDByYkNiWUJyYlVNQk1OMTd4Y2pweEhMQ1VNL2dVTmp3anRoRThiVDFnMjdzdWI3YTRrRVhHZ3hZNncwWG5LCmU2dnlpUUtCZ0FGNm80eWRKdzFkVktKTS9HeklBa2t1TmxTTFltN0NHTHpGVlFXSWJpTU83U2JkN0RGRlFLZWUKNmJRVDA5ODNqYm9aZzF6dUJPSVFDcFdTVG9JaWZYL2tYSWhQTjVoRVNDd2dSeVVYSXAzLzZpVnl6Y0Y2RklDTgpwditRYzFROXBObGE4dTlzNGordkIrMXhMaDd2VHAwaGNqbXhDVDhWRVpEN0tKdExtd05HCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\ncontexts:\n- context:\n    cluster: local\n    user: kubelet\n",
                            "template": "apiVersion: v1\nkind: Config\nclusters:\n- name: local\n  cluster:\n    server: ${server}\n    certificate-authority-data: ${ca_cert}\nusers:\n- name: kubelet\n  user:\n    client-certificate-data: ${kubelet_cert}\n    client-key-data: ${kubelet_key}\ncontexts:\n- context:\n    cluster: local\n    user: kubelet\n",
                            "vars.%": "4",
                            "vars.ca_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRS3FxUW9Mb1NPYUdkMUFycEI2b1c3ekFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURreApNekl6TVRKYUZ3MHhPVEEwTURreE16SXpNVEphTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXdDSUQKVDRkOUsxUWtWaU5ITUtNTGxoL2pkNUlLeXdRenc1VFduTGdVM3VRWGt5aTlDY0FjNDM1WHEzMVV0MnNsMW1GbwpkVi9waGVtT2t4Q3RSZU9MOVFrd3JnaWpnU2dQM2k5MlpXalJxVDVlVUwyR21BSVh5aEQ2YUw0WnJaWnpvK3l4Cms2MVFwN2lsbWV0QkZSczlSUHBoSjN5UUtobmYyMGhraDlVRHlvRnMyR3RUVDI2c05LTFEzdHVXU1k5cjhyRUIKNjE4dGpLSzZjYkhmV3QxSXJHMm9oSWZ6SXhTZ0EraXBwak9COERpZG5lcUNhRThHUE5oZnlHMS9qcFRjNGVuQwpqQmhqSGJvVys0UnJSMXVRdmQ0QjdhNUQ3QTBwVjFSc3Fla2pKak11VEtwRGlMcFlobElEK3g0Y2lQZlh1RWR6Cmdnc0ZoN1RpVWRScVEwN0g1UUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVRGlXTVZmT3BHeTZ0N0craGFsL2cxTFBDQngwd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBR29ONHlOdFl0eVZGQXJBVU9mRlg2WjZvaE9nWjZoelRGSFFJSkc5bVlDZ3RmVG5rellvCkF3d1g2QXBpRDdYdVZkZk16aDJzbFdRMTc0YTBvV1pmdUxOcGJFOEJBa2x0bTFYU29nTUM4T3FHN0FDbWFTUGIKWU5xZDA3bzNsVVRqT3pZN2ducWNpbGd0V0s1U3Z4NndBZXNDSitibDl4TUhnN256VTROTnhRcDVkTC9DNTZhMApDc3NWeGVYeFFhc3hFcTlUcG5nbEZhVG5JSVRRc3Ewc0VQV09jUDd0cnVDOTNncm5hRENTVXJySlUrNFpSWE5lClN4cjJTS2p4Z1NkZGFRbWd0MzlQeDNxZFg3ZE1odXdiVDlTUHFWdjZyc0hGbTRXVnl3QUtEUEdYSVQwV3laaFIKNDVyTmdzUmtmdWpsazZ3WTc3VU5hUGY3Qll6UzJvZG93MG89Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
                            "vars.kubelet_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQVA0WnJMRUE4N1ZIQXlvOU9oTVNySXd3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBNQpNVE15TXpFMFdoY05NVGt3TkRBNU1UTXlNekUwV2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFLM3NSTERMdGJrZmNjMzdjYnJ0TzhIWjI5NXZFSGRMSDU3SGx3c045WHVINDFBWGJuTnVnZ204bVdiNQpqS0JFRU1QaG51aXJLaHY4dmxLQndlamlIT0hFUU1ZQ295RDUzbzFaenplTkZ6SXlwMGxzaTNnN0lTYXdhV0l5Cm1TVjlsTE1HczdYb1Rhc3drZTY1dXc4aExRNEVYMCtNS2xSQlQra2tGRC9aTXl1ZTliZ29wNjRoRnNDc3pocUwKTkRMVkQ5aVB4SEFrNTl3d1k3TTcwODZPNlFHb1o4dFIwR2E1TFA3MlBOU2Ryd1h2amFuc3dybkZMbGorV1lReQppMkpOUzNrVmlBWE9FQnREOTd4cGQ4V0VEOC83TDJRb1VKS3hjaDFGaE1YWndYSzd5Y2dqdkRWUmpudEtYa3Z4CnB3ZlFYN1hqdXFkK0tJb0dKWWRUaXVQNGl5VUNBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZBNGxqRlh6cVJzdXJleHZvV3BmNE5TendnY2RNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFVCngreDdSZTAxWjg5MklzZzVEYzJRN2F3Z2VNREVjaEZpSGxPaHhGVEpSU2xsUWJmWXplSGZ3NzVRdk1uTzNmOE4KVGhYYU4yc1MwU0ZsRlY2UlI0ZEJINnUxZWNIS2lBem9EWkk3TnpIZTVadXFsQmphY2p6ckM2d0xHYjNmd3k0UwplbWVBZWlWelRrRW96OWxmaEJFdWpOYk4rcmhKVGc4RHUyWk9zdWFLa1cxbjJKVU5OTkJxRlA4eWZzd0lMSm95CmhTa0lTQXIrMmlmUTJvUjVpRG5tY01weWhGcEh2UDF2VmRQWU9SVHpzcW1DU25TbTRoMWhpRHlQZ0NsdUJiVjcKVHFsMUtRTmF3Y1NEQ01TaUc5ZVJVWW1MVEQ1a3J4Y3dOdFU0NUVQaFVmT0ZZK0RFSW1oQ1VhZnp1bDBYZW5scwpoVy9ySzI0QzAzVEdLWllVVkkyUAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
                            "vars.kubelet_key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcmV4RXNNdTF1Ujl4emZ0eHV1MDd3ZG5iM204UWQwc2Zuc2VYQ3czMWU0ZmpVQmR1CmMyNkNDYnlaWnZtTW9FUVF3K0dlNktzcUcveStVb0hCNk9JYzRjUkF4Z0tqSVBuZWpWblBONDBYTWpLblNXeUwKZURzaEpyQnBZaktaSlgyVXN3YXp0ZWhOcXpDUjdybTdEeUV0RGdSZlQ0d3FWRUZQNlNRVVA5a3pLNTcxdUNpbgpyaUVXd0t6T0dvczBNdFVQMkkvRWNDVG4zREJqc3p2VHpvN3BBYWhueTFIUVpya3Mvdlk4MUoydkJlK05xZXpDCnVjVXVXUDVaaERLTFlrMUxlUldJQmM0UUcwUDN2R2wzeFlRUHovc3ZaQ2hRa3JGeUhVV0V4ZG5CY3J2SnlDTzgKTlZHT2UwcGVTL0duQjlCZnRlTzZwMzRvaWdZbGgxT0s0L2lMSlFJREFRQUJBb0lCQURwMStaem56SHllZWpWLwp1SG5adGtWeHduc2hJQXJKUUtheGRpN3NFVURscTEzSGtvUFFlSHRuWHJVRFd1YWdHbmFOUjBuMEJ1S0RjVUh3CmhjcU8vcUJReEdrS2grVFV1SjhRdWh0MUhIL3VFTmNZV2tVZXN3VDdOV0VobXVMRU5KQjh4emwxRFc1bWxCY0gKYlQ0bnE2cFRnK29NTmtvOTdldHpDaTl3QmNnNlIyNjVNUmtzM20vK2Fpc2xjTUNvZWExQVBDbGFoV0h3Rmx3TQp4UGtvV1hESHQwOFRNcUtIMUhTRllmV3N3VWVwMEJ2ditxcVpibGxUYUNiZ3RKUVBvd0p5YjlHa3ZLNGhsdjMvCmFFbTV4U1hMM1lXd0dNdyszSmVod2V0VmdEajZkcUdtWGJiODh6RDVpOXR6STRFLzVFY1QzWEx6VXd2WXBaL2wKM1l2eXBKMENnWUVBeXhadWJHTkxDcnNrNm5RWFhVMFk3VVJ0M0V3ZE0vMlAxTmhhL0J2eWNCclpySFNkZXB4ago5K2V3MDhoaTlVS0JuZVdFdXNsZ1podGNwUWFvS284RnhEWDF6T1paS2djSFB2TEpFYmVLSkVCN05iSXhER2dqCmVreGRLQ3dIRHNpQXh5bjVjaHBXRWdwVzdITndDTW52aGVIaDI1Mm56clZzVU9xUk9Kblh4bXNDZ1lFQTJ6eWIKQWdmN0NvOFhRWmFWSzNadEJ0ZW0yTVZZY3Q0b0tSbDZ0M0JEVHdTUk5YMXJmSFRzcERJVk1HVCtoM1p3WGpkdQpNZHh0ZHJYWHM5WVlOVERsWTBoUU9QUmg4T2xSU2lYL1lzQ3ZHdmZEaGxtUnEyRmYvejl1YldSb1o4WDhOdkl5CmJueWRXb0kyRk95RWp3eHFIOG1HQWc0R0JUMG90SzdZNjFGUnVLOENnWUI3VTdYZTBEVmo0TjI4R3ArTm95SCsKQTg0TE41V01XdkNiT24rV0ZZcVdGVmdXYUFLeDBJTE1xc0F3KzhGTVd3VEhVL2ZVVGpIaUQ3K2szM1FEMURLVwpRb1p2MVhwVUVVeVBKM1IrODh4SjAzWisxeVQ5K2NlQm54bjdLVEZvQXM1aEk5WTlPazBHUzQwWnJjaGRMZlBzCmc0MWFobFMvTEdFSWlrbUI2N3FpM1FLQmdRQ3Azdi9NUnhyQlI3WWhYK2dkVVJtUlg2OHI3MTFsUTdXaWd0ZVAKSXpGRUhLblc1R05RZjlpTU1USXgyVTlPN3ZxS1JqRGYrWWZubjJhUE5haDBMbnJPdnMxS0ZERi9WWWxqQnFZbgpnbDByYkNiWUJyYlVNQk1OMTd4Y2pweEhMQ1VNL2dVTmp3anRoRThiVDFnMjdzdWI3YTRrRVhHZ3hZNncwWG5LCmU2dnlpUUtCZ0FGNm80eWRKdzFkVktKTS9HeklBa2t1TmxTTFltN0NHTHpGVlFXSWJpTU83U2JkN0RGRlFLZWUKNmJRVDA5ODNqYm9aZzF6dUJPSVFDcFdTVG9JaWZYL2tYSWhQTjVoRVNDd2dSeVVYSXAzLzZpVnl6Y0Y2RklDTgpwditRYzFROXBObGE4dTlzNGordkIrMXhMaDd2VHAwaGNqbXhDVDhWRVpEN0tKdExtd05HCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
                            "vars.server": "https://steve:443"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.user-kubeconfig": {
                    "type": "template_file",
                    "depends_on": [
                        "tls_locally_signed_cert.kubelet",
                        "tls_private_key.kubelet",
                        "tls_self_signed_cert.kube-ca.*"
                    ],
                    "primary": {
                        "id": "e4a96c726124366cb87a541788a22586c3a0cdcc8c0a939f1b21c2416ae7b39d",
                        "attributes": {
                            "id": "e4a96c726124366cb87a541788a22586c3a0cdcc8c0a939f1b21c2416ae7b39d",
                            "rendered": "apiVersion: v1\nkind: Config\nclusters:\n- name: steve-cluster\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRS3FxUW9Mb1NPYUdkMUFycEI2b1c3ekFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURreApNekl6TVRKYUZ3MHhPVEEwTURreE16SXpNVEphTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXdDSUQKVDRkOUsxUWtWaU5ITUtNTGxoL2pkNUlLeXdRenc1VFduTGdVM3VRWGt5aTlDY0FjNDM1WHEzMVV0MnNsMW1GbwpkVi9waGVtT2t4Q3RSZU9MOVFrd3JnaWpnU2dQM2k5MlpXalJxVDVlVUwyR21BSVh5aEQ2YUw0WnJaWnpvK3l4Cms2MVFwN2lsbWV0QkZSczlSUHBoSjN5UUtobmYyMGhraDlVRHlvRnMyR3RUVDI2c05LTFEzdHVXU1k5cjhyRUIKNjE4dGpLSzZjYkhmV3QxSXJHMm9oSWZ6SXhTZ0EraXBwak9COERpZG5lcUNhRThHUE5oZnlHMS9qcFRjNGVuQwpqQmhqSGJvVys0UnJSMXVRdmQ0QjdhNUQ3QTBwVjFSc3Fla2pKak11VEtwRGlMcFlobElEK3g0Y2lQZlh1RWR6Cmdnc0ZoN1RpVWRScVEwN0g1UUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVRGlXTVZmT3BHeTZ0N0craGFsL2cxTFBDQngwd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBR29ONHlOdFl0eVZGQXJBVU9mRlg2WjZvaE9nWjZoelRGSFFJSkc5bVlDZ3RmVG5rellvCkF3d1g2QXBpRDdYdVZkZk16aDJzbFdRMTc0YTBvV1pmdUxOcGJFOEJBa2x0bTFYU29nTUM4T3FHN0FDbWFTUGIKWU5xZDA3bzNsVVRqT3pZN2ducWNpbGd0V0s1U3Z4NndBZXNDSitibDl4TUhnN256VTROTnhRcDVkTC9DNTZhMApDc3NWeGVYeFFhc3hFcTlUcG5nbEZhVG5JSVRRc3Ewc0VQV09jUDd0cnVDOTNncm5hRENTVXJySlUrNFpSWE5lClN4cjJTS2p4Z1NkZGFRbWd0MzlQeDNxZFg3ZE1odXdiVDlTUHFWdjZyc0hGbTRXVnl3QUtEUEdYSVQwV3laaFIKNDVyTmdzUmtmdWpsazZ3WTc3VU5hUGY3Qll6UzJvZG93MG89Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: steve-user\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQVA0WnJMRUE4N1ZIQXlvOU9oTVNySXd3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBNQpNVE15TXpFMFdoY05NVGt3TkRBNU1UTXlNekUwV2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFLM3NSTERMdGJrZmNjMzdjYnJ0TzhIWjI5NXZFSGRMSDU3SGx3c045WHVINDFBWGJuTnVnZ204bVdiNQpqS0JFRU1QaG51aXJLaHY4dmxLQndlamlIT0hFUU1ZQ295RDUzbzFaenplTkZ6SXlwMGxzaTNnN0lTYXdhV0l5Cm1TVjlsTE1HczdYb1Rhc3drZTY1dXc4aExRNEVYMCtNS2xSQlQra2tGRC9aTXl1ZTliZ29wNjRoRnNDc3pocUwKTkRMVkQ5aVB4SEFrNTl3d1k3TTcwODZPNlFHb1o4dFIwR2E1TFA3MlBOU2Ryd1h2amFuc3dybkZMbGorV1lReQppMkpOUzNrVmlBWE9FQnREOTd4cGQ4V0VEOC83TDJRb1VKS3hjaDFGaE1YWndYSzd5Y2dqdkRWUmpudEtYa3Z4CnB3ZlFYN1hqdXFkK0tJb0dKWWRUaXVQNGl5VUNBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZBNGxqRlh6cVJzdXJleHZvV3BmNE5TendnY2RNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFVCngreDdSZTAxWjg5MklzZzVEYzJRN2F3Z2VNREVjaEZpSGxPaHhGVEpSU2xsUWJmWXplSGZ3NzVRdk1uTzNmOE4KVGhYYU4yc1MwU0ZsRlY2UlI0ZEJINnUxZWNIS2lBem9EWkk3TnpIZTVadXFsQmphY2p6ckM2d0xHYjNmd3k0UwplbWVBZWlWelRrRW96OWxmaEJFdWpOYk4rcmhKVGc4RHUyWk9zdWFLa1cxbjJKVU5OTkJxRlA4eWZzd0lMSm95CmhTa0lTQXIrMmlmUTJvUjVpRG5tY01weWhGcEh2UDF2VmRQWU9SVHpzcW1DU25TbTRoMWhpRHlQZ0NsdUJiVjcKVHFsMUtRTmF3Y1NEQ01TaUc5ZVJVWW1MVEQ1a3J4Y3dOdFU0NUVQaFVmT0ZZK0RFSW1oQ1VhZnp1bDBYZW5scwpoVy9ySzI0QzAzVEdLWllVVkkyUAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcmV4RXNNdTF1Ujl4emZ0eHV1MDd3ZG5iM204UWQwc2Zuc2VYQ3czMWU0ZmpVQmR1CmMyNkNDYnlaWnZtTW9FUVF3K0dlNktzcUcveStVb0hCNk9JYzRjUkF4Z0tqSVBuZWpWblBONDBYTWpLblNXeUwKZURzaEpyQnBZaktaSlgyVXN3YXp0ZWhOcXpDUjdybTdEeUV0RGdSZlQ0d3FWRUZQNlNRVVA5a3pLNTcxdUNpbgpyaUVXd0t6T0dvczBNdFVQMkkvRWNDVG4zREJqc3p2VHpvN3BBYWhueTFIUVpya3Mvdlk4MUoydkJlK05xZXpDCnVjVXVXUDVaaERLTFlrMUxlUldJQmM0UUcwUDN2R2wzeFlRUHovc3ZaQ2hRa3JGeUhVV0V4ZG5CY3J2SnlDTzgKTlZHT2UwcGVTL0duQjlCZnRlTzZwMzRvaWdZbGgxT0s0L2lMSlFJREFRQUJBb0lCQURwMStaem56SHllZWpWLwp1SG5adGtWeHduc2hJQXJKUUtheGRpN3NFVURscTEzSGtvUFFlSHRuWHJVRFd1YWdHbmFOUjBuMEJ1S0RjVUh3CmhjcU8vcUJReEdrS2grVFV1SjhRdWh0MUhIL3VFTmNZV2tVZXN3VDdOV0VobXVMRU5KQjh4emwxRFc1bWxCY0gKYlQ0bnE2cFRnK29NTmtvOTdldHpDaTl3QmNnNlIyNjVNUmtzM20vK2Fpc2xjTUNvZWExQVBDbGFoV0h3Rmx3TQp4UGtvV1hESHQwOFRNcUtIMUhTRllmV3N3VWVwMEJ2ditxcVpibGxUYUNiZ3RKUVBvd0p5YjlHa3ZLNGhsdjMvCmFFbTV4U1hMM1lXd0dNdyszSmVod2V0VmdEajZkcUdtWGJiODh6RDVpOXR6STRFLzVFY1QzWEx6VXd2WXBaL2wKM1l2eXBKMENnWUVBeXhadWJHTkxDcnNrNm5RWFhVMFk3VVJ0M0V3ZE0vMlAxTmhhL0J2eWNCclpySFNkZXB4ago5K2V3MDhoaTlVS0JuZVdFdXNsZ1podGNwUWFvS284RnhEWDF6T1paS2djSFB2TEpFYmVLSkVCN05iSXhER2dqCmVreGRLQ3dIRHNpQXh5bjVjaHBXRWdwVzdITndDTW52aGVIaDI1Mm56clZzVU9xUk9Kblh4bXNDZ1lFQTJ6eWIKQWdmN0NvOFhRWmFWSzNadEJ0ZW0yTVZZY3Q0b0tSbDZ0M0JEVHdTUk5YMXJmSFRzcERJVk1HVCtoM1p3WGpkdQpNZHh0ZHJYWHM5WVlOVERsWTBoUU9QUmg4T2xSU2lYL1lzQ3ZHdmZEaGxtUnEyRmYvejl1YldSb1o4WDhOdkl5CmJueWRXb0kyRk95RWp3eHFIOG1HQWc0R0JUMG90SzdZNjFGUnVLOENnWUI3VTdYZTBEVmo0TjI4R3ArTm95SCsKQTg0TE41V01XdkNiT24rV0ZZcVdGVmdXYUFLeDBJTE1xc0F3KzhGTVd3VEhVL2ZVVGpIaUQ3K2szM1FEMURLVwpRb1p2MVhwVUVVeVBKM1IrODh4SjAzWisxeVQ5K2NlQm54bjdLVEZvQXM1aEk5WTlPazBHUzQwWnJjaGRMZlBzCmc0MWFobFMvTEdFSWlrbUI2N3FpM1FLQmdRQ3Azdi9NUnhyQlI3WWhYK2dkVVJtUlg2OHI3MTFsUTdXaWd0ZVAKSXpGRUhLblc1R05RZjlpTU1USXgyVTlPN3ZxS1JqRGYrWWZubjJhUE5haDBMbnJPdnMxS0ZERi9WWWxqQnFZbgpnbDByYkNiWUJyYlVNQk1OMTd4Y2pweEhMQ1VNL2dVTmp3anRoRThiVDFnMjdzdWI3YTRrRVhHZ3hZNncwWG5LCmU2dnlpUUtCZ0FGNm80eWRKdzFkVktKTS9HeklBa2t1TmxTTFltN0NHTHpGVlFXSWJpTU83U2JkN0RGRlFLZWUKNmJRVDA5ODNqYm9aZzF6dUJPSVFDcFdTVG9JaWZYL2tYSWhQTjVoRVNDd2dSeVVYSXAzLzZpVnl6Y0Y2RklDTgpwditRYzFROXBObGE4dTlzNGordkIrMXhMaDd2VHAwaGNqbXhDVDhWRVpEN0tKdExtd05HCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\ncontexts:\n- name: steve-context\n  context:\n    cluster: steve-cluster\n    user: steve-user\n",
                            "template": "apiVersion: v1\nkind: Config\nclusters:\n- name: ${name}-cluster\n  cluster:\n    server: ${server}\n    certificate-authority-data: ${ca_cert}\nusers:\n- name: ${name}-user\n  user:\n    client-certificate-data: ${kubelet_cert}\n    client-key-data: ${kubelet_key}\ncontexts:\n- name: ${name}-context\n  context:\n    cluster: ${name}-cluster\n    user: ${name}-user\n",
                            "vars.%": "5",
                            "vars.ca_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRS3FxUW9Mb1NPYUdkMUFycEI2b1c3ekFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURreApNekl6TVRKYUZ3MHhPVEEwTURreE16SXpNVEphTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXdDSUQKVDRkOUsxUWtWaU5ITUtNTGxoL2pkNUlLeXdRenc1VFduTGdVM3VRWGt5aTlDY0FjNDM1WHEzMVV0MnNsMW1GbwpkVi9waGVtT2t4Q3RSZU9MOVFrd3JnaWpnU2dQM2k5MlpXalJxVDVlVUwyR21BSVh5aEQ2YUw0WnJaWnpvK3l4Cms2MVFwN2lsbWV0QkZSczlSUHBoSjN5UUtobmYyMGhraDlVRHlvRnMyR3RUVDI2c05LTFEzdHVXU1k5cjhyRUIKNjE4dGpLSzZjYkhmV3QxSXJHMm9oSWZ6SXhTZ0EraXBwak9COERpZG5lcUNhRThHUE5oZnlHMS9qcFRjNGVuQwpqQmhqSGJvVys0UnJSMXVRdmQ0QjdhNUQ3QTBwVjFSc3Fla2pKak11VEtwRGlMcFlobElEK3g0Y2lQZlh1RWR6Cmdnc0ZoN1RpVWRScVEwN0g1UUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVRGlXTVZmT3BHeTZ0N0craGFsL2cxTFBDQngwd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBR29ONHlOdFl0eVZGQXJBVU9mRlg2WjZvaE9nWjZoelRGSFFJSkc5bVlDZ3RmVG5rellvCkF3d1g2QXBpRDdYdVZkZk16aDJzbFdRMTc0YTBvV1pmdUxOcGJFOEJBa2x0bTFYU29nTUM4T3FHN0FDbWFTUGIKWU5xZDA3bzNsVVRqT3pZN2ducWNpbGd0V0s1U3Z4NndBZXNDSitibDl4TUhnN256VTROTnhRcDVkTC9DNTZhMApDc3NWeGVYeFFhc3hFcTlUcG5nbEZhVG5JSVRRc3Ewc0VQV09jUDd0cnVDOTNncm5hRENTVXJySlUrNFpSWE5lClN4cjJTS2p4Z1NkZGFRbWd0MzlQeDNxZFg3ZE1odXdiVDlTUHFWdjZyc0hGbTRXVnl3QUtEUEdYSVQwV3laaFIKNDVyTmdzUmtmdWpsazZ3WTc3VU5hUGY3Qll6UzJvZG93MG89Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
                            "vars.kubelet_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQVA0WnJMRUE4N1ZIQXlvOU9oTVNySXd3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBNQpNVE15TXpFMFdoY05NVGt3TkRBNU1UTXlNekUwV2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFLM3NSTERMdGJrZmNjMzdjYnJ0TzhIWjI5NXZFSGRMSDU3SGx3c045WHVINDFBWGJuTnVnZ204bVdiNQpqS0JFRU1QaG51aXJLaHY4dmxLQndlamlIT0hFUU1ZQ295RDUzbzFaenplTkZ6SXlwMGxzaTNnN0lTYXdhV0l5Cm1TVjlsTE1HczdYb1Rhc3drZTY1dXc4aExRNEVYMCtNS2xSQlQra2tGRC9aTXl1ZTliZ29wNjRoRnNDc3pocUwKTkRMVkQ5aVB4SEFrNTl3d1k3TTcwODZPNlFHb1o4dFIwR2E1TFA3MlBOU2Ryd1h2amFuc3dybkZMbGorV1lReQppMkpOUzNrVmlBWE9FQnREOTd4cGQ4V0VEOC83TDJRb1VKS3hjaDFGaE1YWndYSzd5Y2dqdkRWUmpudEtYa3Z4CnB3ZlFYN1hqdXFkK0tJb0dKWWRUaXVQNGl5VUNBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZBNGxqRlh6cVJzdXJleHZvV3BmNE5TendnY2RNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFVCngreDdSZTAxWjg5MklzZzVEYzJRN2F3Z2VNREVjaEZpSGxPaHhGVEpSU2xsUWJmWXplSGZ3NzVRdk1uTzNmOE4KVGhYYU4yc1MwU0ZsRlY2UlI0ZEJINnUxZWNIS2lBem9EWkk3TnpIZTVadXFsQmphY2p6ckM2d0xHYjNmd3k0UwplbWVBZWlWelRrRW96OWxmaEJFdWpOYk4rcmhKVGc4RHUyWk9zdWFLa1cxbjJKVU5OTkJxRlA4eWZzd0lMSm95CmhTa0lTQXIrMmlmUTJvUjVpRG5tY01weWhGcEh2UDF2VmRQWU9SVHpzcW1DU25TbTRoMWhpRHlQZ0NsdUJiVjcKVHFsMUtRTmF3Y1NEQ01TaUc5ZVJVWW1MVEQ1a3J4Y3dOdFU0NUVQaFVmT0ZZK0RFSW1oQ1VhZnp1bDBYZW5scwpoVy9ySzI0QzAzVEdLWllVVkkyUAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
                            "vars.kubelet_key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcmV4RXNNdTF1Ujl4emZ0eHV1MDd3ZG5iM204UWQwc2Zuc2VYQ3czMWU0ZmpVQmR1CmMyNkNDYnlaWnZtTW9FUVF3K0dlNktzcUcveStVb0hCNk9JYzRjUkF4Z0tqSVBuZWpWblBONDBYTWpLblNXeUwKZURzaEpyQnBZaktaSlgyVXN3YXp0ZWhOcXpDUjdybTdEeUV0RGdSZlQ0d3FWRUZQNlNRVVA5a3pLNTcxdUNpbgpyaUVXd0t6T0dvczBNdFVQMkkvRWNDVG4zREJqc3p2VHpvN3BBYWhueTFIUVpya3Mvdlk4MUoydkJlK05xZXpDCnVjVXVXUDVaaERLTFlrMUxlUldJQmM0UUcwUDN2R2wzeFlRUHovc3ZaQ2hRa3JGeUhVV0V4ZG5CY3J2SnlDTzgKTlZHT2UwcGVTL0duQjlCZnRlTzZwMzRvaWdZbGgxT0s0L2lMSlFJREFRQUJBb0lCQURwMStaem56SHllZWpWLwp1SG5adGtWeHduc2hJQXJKUUtheGRpN3NFVURscTEzSGtvUFFlSHRuWHJVRFd1YWdHbmFOUjBuMEJ1S0RjVUh3CmhjcU8vcUJReEdrS2grVFV1SjhRdWh0MUhIL3VFTmNZV2tVZXN3VDdOV0VobXVMRU5KQjh4emwxRFc1bWxCY0gKYlQ0bnE2cFRnK29NTmtvOTdldHpDaTl3QmNnNlIyNjVNUmtzM20vK2Fpc2xjTUNvZWExQVBDbGFoV0h3Rmx3TQp4UGtvV1hESHQwOFRNcUtIMUhTRllmV3N3VWVwMEJ2ditxcVpibGxUYUNiZ3RKUVBvd0p5YjlHa3ZLNGhsdjMvCmFFbTV4U1hMM1lXd0dNdyszSmVod2V0VmdEajZkcUdtWGJiODh6RDVpOXR6STRFLzVFY1QzWEx6VXd2WXBaL2wKM1l2eXBKMENnWUVBeXhadWJHTkxDcnNrNm5RWFhVMFk3VVJ0M0V3ZE0vMlAxTmhhL0J2eWNCclpySFNkZXB4ago5K2V3MDhoaTlVS0JuZVdFdXNsZ1podGNwUWFvS284RnhEWDF6T1paS2djSFB2TEpFYmVLSkVCN05iSXhER2dqCmVreGRLQ3dIRHNpQXh5bjVjaHBXRWdwVzdITndDTW52aGVIaDI1Mm56clZzVU9xUk9Kblh4bXNDZ1lFQTJ6eWIKQWdmN0NvOFhRWmFWSzNadEJ0ZW0yTVZZY3Q0b0tSbDZ0M0JEVHdTUk5YMXJmSFRzcERJVk1HVCtoM1p3WGpkdQpNZHh0ZHJYWHM5WVlOVERsWTBoUU9QUmg4T2xSU2lYL1lzQ3ZHdmZEaGxtUnEyRmYvejl1YldSb1o4WDhOdkl5CmJueWRXb0kyRk95RWp3eHFIOG1HQWc0R0JUMG90SzdZNjFGUnVLOENnWUI3VTdYZTBEVmo0TjI4R3ArTm95SCsKQTg0TE41V01XdkNiT24rV0ZZcVdGVmdXYUFLeDBJTE1xc0F3KzhGTVd3VEhVL2ZVVGpIaUQ3K2szM1FEMURLVwpRb1p2MVhwVUVVeVBKM1IrODh4SjAzWisxeVQ5K2NlQm54bjdLVEZvQXM1aEk5WTlPazBHUzQwWnJjaGRMZlBzCmc0MWFobFMvTEdFSWlrbUI2N3FpM1FLQmdRQ3Azdi9NUnhyQlI3WWhYK2dkVVJtUlg2OHI3MTFsUTdXaWd0ZVAKSXpGRUhLblc1R05RZjlpTU1USXgyVTlPN3ZxS1JqRGYrWWZubjJhUE5haDBMbnJPdnMxS0ZERi9WWWxqQnFZbgpnbDByYkNiWUJyYlVNQk1OMTd4Y2pweEhMQ1VNL2dVTmp3anRoRThiVDFnMjdzdWI3YTRrRVhHZ3hZNncwWG5LCmU2dnlpUUtCZ0FGNm80eWRKdzFkVktKTS9HeklBa2t1TmxTTFltN0NHTHpGVlFXSWJpTU83U2JkN0RGRlFLZWUKNmJRVDA5ODNqYm9aZzF6dUJPSVFDcFdTVG9JaWZYL2tYSWhQTjVoRVNDd2dSeVVYSXAzLzZpVnl6Y0Y2RklDTgpwditRYzFROXBObGE4dTlzNGordkIrMXhMaDd2VHAwaGNqbXhDVDhWRVpEN0tKdExtd05HCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
                            "vars.name": "steve",
                            "vars.server": "https://steve:443"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "local_file.apiserver-crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_locally_signed_cert.apiserver"
                    ],
                    "primary": {
                        "id": "3c0c32dca9d4b7e22f68b3d5f8d2eacacfb61c59",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDtjCCAp6gAwIBAgIQYH3rrjAalJCQcM7847Mj0jANBgkqhkiG9w0BAQsFADAl\nMREwDwYDVQQKEwhib290a3ViZTEQMA4GA1UEAxMHa3ViZS1jYTAeFw0xODA0MDkx\nMzIzMTRaFw0xOTA0MDkxMzIzMTRaMC8xFDASBgNVBAoTC2t1YmUtbWFzdGVyMRcw\nFQYDVQQDEw5rdWJlLWFwaXNlcnZlcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC\nAQoCggEBALItOfjb2/V2mNVFn0/9vosih3vdNHDWXe2AYdLm1Ovizioa5VfkN1U4\nX46y73iUFlnLPgDdoB3sLPITqG9+efjabrdcRSIO9oFt2RRBga8qHUVcAWcRH+6N\nn/sut4I/P4anSjdRbXnl5NYT8hTympkoL2bkYAhvqha/FbhY6swNFgSDvSxIZYWw\nOA2aiTx3reuhRrCRCMd0viLXoKLv7NM1qE4BRMEjKX2xNhBIoklAS7PBPBXMIw2i\nsTc0/pgxN8GHo5pKjlA6Lg8xTGZ0oEp1OiShcCJQSxkN65Cc5j+SRj88ZIgLjkGN\naN640zQMUC7GbHlbi61i2BpoyB64rdkCAwEAAaOB1zCB1DAOBgNVHQ8BAf8EBAMC\nBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAw\nHwYDVR0jBBgwFoAUDiWMVfOpGy6t7G+hal/g1LPCBx0wdAYDVR0RBG0wa4IFc3Rl\ndmWCCmt1YmVybmV0ZXOCEmt1YmVybmV0ZXMuZGVmYXVsdIIWa3ViZXJuZXRlcy5k\nZWZhdWx0LnN2Y4Ika3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2Fs\nhwQKAwABMA0GCSqGSIb3DQEBCwUAA4IBAQCGhNt61r9FHgv1aR8/+lU0sLaR34E2\nYUBN0xx7vRI1ObULzM6/2gckkulh2hDUSPqPFojrjKCK/cPD15LQPO8ZCPJHmT2k\n5UTXkB89qnhCpTMMOFnIqUmtuYg2HugOTk65Xu6z0+WVPyI3esR1xx7U9nSca2En\n2sIlVgB6vUlUbHMxPGNqsDmumylSYNxP7TupZgirihVj5eovZ2CUspbbMqH8ZfvP\noYYpQWhbSUxKBW5hOQqNUUChOgz0ntNHCbF/syRfGH/WRIXAHX/aVgCoA86NANK1\n2ZMJToTYP1sg0iM/Td62BhM4XZvH6wdCOozSNLvWyOQyXwRw4nCtpld9\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/apiserver.crt",
                            "id": "3c0c32dca9d4b7e22f68b3d5f8d2eacacfb61c59"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.apiserver-key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.apiserver"
                    ],
                    "primary": {
                        "id": "16ecba74fb1bbec54f607ceef38d3949ebb214f0",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAsi05+Nvb9XaY1UWfT/2+iyKHe900cNZd7YBh0ubU6+LOKhrl\nV+Q3VThfjrLveJQWWcs+AN2gHews8hOob355+Nput1xFIg72gW3ZFEGBryodRVwB\nZxEf7o2f+y63gj8/hqdKN1FteeXk1hPyFPKamSgvZuRgCG+qFr8VuFjqzA0WBIO9\nLEhlhbA4DZqJPHet66FGsJEIx3S+Itegou/s0zWoTgFEwSMpfbE2EEiiSUBLs8E8\nFcwjDaKxNzT+mDE3wYejmkqOUDouDzFMZnSgSnU6JKFwIlBLGQ3rkJzmP5JGPzxk\niAuOQY1o3rjTNAxQLsZseVuLrWLYGmjIHrit2QIDAQABAoIBADtcSfYY+X0b1+sl\n2N/Df9nG1TB1D+WP5ZccsHqdIM69r0Xj1AimJbEkqOFXx+R6IcAksDGFpLSTXJ4B\n4pnSnzxDOaOo//dK2OFiAXJ4KIZ9F2dmMalu0R6e3G/Irqab/8QSs+0eGcUEzGpu\nFrbX5J2l/7Td3Qiyew489zWFmiQEoaQNXMee1p/J6j6YOYzbLSGAHe/XiZyhYI3E\nqe1/GmHxTLWsjuoh8h8SFiSaD+cs+9q5sFIgh7AuiPCzvtfls/iJhrYU0gLoZBdN\nFpZjUMHUX7uZgTcbw3UTaiPqmm1BvasBU+CveIpTaVME07LlnbuPnXaDOOHIoeuz\nSoAc5QkCgYEA3sTFZWWtBAi83dw1vCNVHj2ZFVzRdSWzGi0MW9hUdKSL+96XYs8u\nbQJ4vNzpEFXCCTTL9OEL09GaBKR7K6DhbPWvDzscrXRLR4xJPyCmWcgmZ2fGXA/O\nYUXiv/bF9+oiIakgQsy/Td4D7r3OQrc4rVZv+N6BYiIIiS1v2Bz3KncCgYEAzMGM\nkqt67HGGN5lFMHcW3Coo710cZZkjh2iQ2/IzosEuFhCFedgOtyt3QeX2rIFObw2/\nnPCwt7fGcGkGOnohhwwgoDHtRgAugfZ53Pj2XGXHpBi9kbVamugrV/m9b+sRgz5x\ngGvVpvXFCxbgxwjmS28yccA5Efc0FryC3bkdri8CgYEAhz6XSRQNkmFrqJZE2U/q\nIU3sXpfXYnPc5Its8WXJAHfVtLhS2F5IJU5W1vKXXJ90CfrPyH/ImnSqOR9S2A34\nThpqiaitpHDyMyHsZjMAS4nEJwtN1h6SgWPYYgsD7Ztr1VvEhkmf6zpa0NrTGpX6\nBuJvYHxVuKpI3F+Fg4MyW8kCgYB4vOTck/uPMz4WyO1wr7iuKLoss3YMPuohbbqF\nx+NE5K79Wc6rU4kR37KaDDWR8UnD2JKVw6QhIWAFZxjCIMRmcvNGI0qrzW2fOy0O\n7Uuwnl/D1sbqBcugrqjoXp6jQTT5dDfPp0a8Bg6kBGCVXR0XfEF9rAC7JE713UE5\n52+mBwKBgQCfT7+klM94OSyS7srish93AldvPqZUHmRC1wN+i7lYQHTjIiYAgLaO\n4hroFD206DpsoquxH00DhnJqfOCw2HeUzQZkEupnvn8CruDsGNC9sKZ8+nokc8uN\nieByyuvR0TAcX9co8ooxZPjAnodd04+TNG5wq9A8maYhZpee8YYpCw==\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/apiserver.key",
                            "id": "16ecba74fb1bbec54f607ceef38d3949ebb214f0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_client_ca_crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_self_signed_cert.etcd-ca"
                    ],
                    "primary": {
                        "id": "06eb79a572a7ce0361c0af754979854c28557c2c",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDDzCCAfegAwIBAgIRAK5RObOoi7TKD6WHjkWJWE0wDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDkxMzIz\nMTBaFw0xOTA0MDkxMzIzMTBaMCExDTALBgNVBAoTBGV0Y2QxEDAOBgNVBAMTB2V0\nY2QtY2EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtU/uszGxQ118I\nMYYthTQUbHUEoFYglHiUaG7yUITbYiermIjCSvNPtygWO0FXddOFHvEdHHTgH4Dw\n6agrGfg3nKGwR9SLsmfg5TGkCjgmCBqHVywElvWfApe0RtRphdo9xobbOClOgXtJ\nPj3P1y5LoxbRSAjlmk1jx5cUi9i/5HpJ70zrvoqRj3sgO3ZAaDm2UNR80tZL6fa6\nsCVIQMgpqOcwnIsuLlaKeqHVFgP9R9g+Hg7KMeJ9vCrP20BrozeIU0nLMQ7pBmff\ncgoEVMhN7lsRO+LalZaX6CqGhjqTyfK0vbOG5SgYewHLkIn6OHJsCiIWDh9UUVcz\nfhx/3e9nAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/\nMB0GA1UdDgQWBBQcsHb5R9G/ozx6D6FFMfLszgRTUzANBgkqhkiG9w0BAQsFAAOC\nAQEAC2OMbsBS0K6XAxvT+IYr0OLfSiKGwVN5O1c37x632CULgDrFbbVQYi+NDEY3\n0MkHtq6SrKGjxP8HKxiVh1QMI0a70GnB2vRyH/yr9Kh7aMiKwuNtUyi7vlePjziM\nPz3rDII0RkgtF38mpQJOkpC4ld2qgSRVN8K+TpmZhZBUTG4tGzO8VcOGCexewvkZ\n34L03Byy3N6Cc0bpB8nxNr1miKnbzVwHKBnk6aRK76iT4B3nY+VBNKATfQuVrwgf\npx89pHBys6+zgRoB8gIKs6jZZHopUdBxGMZjuPxscJxuTULmQZbFSWXSYPmORoZa\n9cHiDQVL8xs5r2k261sOkPbmpQ==\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/etcd-client-ca.crt",
                            "id": "06eb79a572a7ce0361c0af754979854c28557c2c"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_client_crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_locally_signed_cert.client"
                    ],
                    "primary": {
                        "id": "41cfc1259f29cc8c10dbe9dab89b6fa1a52f3efa",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDWTCCAkGgAwIBAgIRAJyMVfLALb3NYQGz4hNPMiswDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDkxMzIz\nMTRaFw0xOTA0MDkxMzIzMTRaMCUxDTALBgNVBAoTBGV0Y2QxFDASBgNVBAMTC2V0\nY2QtY2xpZW50MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyCCyJEXW\n+llPYBvvwT+reP7qNp165HYwTFOMTab8/Ojszf42Trz9uQpUMoF9/MQLPZ801Q3j\nf3Zjjr44bYu5vLpcqfJ4TnA51/3FtunWjshuLoj4sJIUVmUYxfRs+bn5W3pqvnhB\nPAhvPDO6oNV40FW3p1zUOI0p0Fpy+1yTDkJoZsbSm01pXYHsOaNc7+w1RfWp/TQ6\neuA8f0HjcocAb4CLdG3WM40KSR5Zng/uNagcLJCkdfafIOZq/2Mz6vmiSSEnp0Uf\nUcfmRFKjeV0zmj+/JkuY6hMj7dn9jYabFHmJ8iP7q/AsdeRcytSOaA7TsDy7pVzx\n9+RXB/PMWpRcOQIDAQABo4GHMIGEMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAU\nBggrBgEFBQcDAQYIKwYBBQUHAwIwDAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBQc\nsHb5R9G/ozx6D6FFMfLszgRTUzAkBgNVHREEHTAbgghuMi5zdGV2ZYIJbG9jYWxo\nb3N0hwR/AAABMA0GCSqGSIb3DQEBCwUAA4IBAQA6E3pVspH6hU+mp68o9isQ2qP5\niFvA8QHwF/h6g1zBV1K6SfKj89SXeScgs6p2ph/QT/h9Bt6oYUNHQsbHidk9Efxd\nhvue3zAtFEDj9a33+rP7xQx8uUbusTZXqfn0zeoqvpGjSPDokjGaf2SHMhuPrRYW\nBHZVvekXiLln8Ths0/pr01MEkILe4QaSastEMtE4wLpfeue43giz73EQVfZuvFzb\nFrXoyJnbLZms4nEdvIlJDl39pXSrpBNQmHDgR4znlCms9dtx+X/08Woi78byfzAg\n51+ueOpc9xbl4Y8i4CYUaZZtq99O6QWva2Vnda5mVg5RQ2SCryduM2dbxWJu\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/etcd-client.crt",
                            "id": "41cfc1259f29cc8c10dbe9dab89b6fa1a52f3efa"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_client_key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.client"
                    ],
                    "primary": {
                        "id": "ba1686b1594e1c8aafdab6831a736d24ff582f86",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAyCCyJEXW+llPYBvvwT+reP7qNp165HYwTFOMTab8/Ojszf42\nTrz9uQpUMoF9/MQLPZ801Q3jf3Zjjr44bYu5vLpcqfJ4TnA51/3FtunWjshuLoj4\nsJIUVmUYxfRs+bn5W3pqvnhBPAhvPDO6oNV40FW3p1zUOI0p0Fpy+1yTDkJoZsbS\nm01pXYHsOaNc7+w1RfWp/TQ6euA8f0HjcocAb4CLdG3WM40KSR5Zng/uNagcLJCk\ndfafIOZq/2Mz6vmiSSEnp0UfUcfmRFKjeV0zmj+/JkuY6hMj7dn9jYabFHmJ8iP7\nq/AsdeRcytSOaA7TsDy7pVzx9+RXB/PMWpRcOQIDAQABAoIBAQDCuc2cLbh3796k\nDYrD5kfae285pRGmqrlkCwdBp3ISRDHmXaxKAOp/2eUDH6yO/dJSK08k31a092T3\nx27waDxZvpvbYOpeqCQgXfS7fdwfIjbTYMNaS0kupz/rnWFLvAE9WWfz3N7covhZ\nA5xcUloznLQOTOzR+cjtypSGsBUGkSwHb6nh1BxHIr13BV+VvHl2aQJporaCUhU0\n8xY5cJFw0jd1N7LTuxgh/lBHmKTf927kvA2LDq/gMzZNPpAOVJQUptwyUFfDH71b\nUzaa2EfPaBFOuuXXNQNydznmGkyCDmzNLD3JnZ2Vv6At3SWoejM6E/BshErsTGcL\nQDgUP4ABAoGBAMqmdf0XffputPdWWxN1h+rN9CDVlfnyBhFzuZO1b77+asPHWaAP\n42w5wMlAbVYVkCe2+XnJlC4VSKPLEaDKA+m8RRFas6X+9jKQ2jmG9kXAQUHbo3J9\n5IQH9D7m6CVv1Xw1DwHfRzOZitEyQVqIii1Z0tgDpWjs5mom1OTzw3I5AoGBAPzQ\nOw3G4J+LRphadHwc+xziTSqoWjJiFdekgHZbROGqPNUaX+Cp6uUEUtwrPaJmcYAF\nRH1oqof7ING0YSFBosEnCfIp1QndmKEPrKCd6IIaKceMtBQ8ek/2XMhkkh3Jh+Rj\n7C0Q3JYfERlV+e3N+7DCGnSKBzfqG3250CxWcDoBAoGADz6KbamQvoAJePm0DDix\nKsancLjgeVbtge6UrTne2B1HZsbeRR4s231UtU71ap5go7wt9C1nyjerqTajctb/\niFuzTmTmUrxlRNSEtgMjD4gw4IVnPDugLxZyFzFDkV1iT9+l61wifQ011hrTs73F\ntzeklr9feA8qHh4hsb9smnECgYEAkED04UiQlRiwgHBktQkIVBPgui1zwfnrwq8P\nyfkMFcPAkExLVvM9n83WxeA6e/b+XnEjAnf9jjfCI0ZMgeBk0NfIuhAailWSKJy8\nAK35pHrvSfjELCPSGtxVVtbj9PEwhCZr9c8APvydEhrX0FRPgC1RURwNQF9prlSf\nLx1nTgECgYA/MxB0PUBF9VKSVdvokEZTm1uxht+w8/R0Xo5iOZSIuL2XYk3oWF28\nX0BnoVMWGF8ug29rk2Q84nx6WW1Z+LjGRV9YgNMD2eyvGhg4moOsij1hIl1Mrvqh\nkJkkiusfrZhJtMk4wJfX/KAshRjBSDvHLrWu5Z3PI4O1Rme5OCHYtg==\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/etcd-client.key",
                            "id": "ba1686b1594e1c8aafdab6831a736d24ff582f86"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_peer_ca_crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_self_signed_cert.etcd-ca"
                    ],
                    "primary": {
                        "id": "06eb79a572a7ce0361c0af754979854c28557c2c",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDDzCCAfegAwIBAgIRAK5RObOoi7TKD6WHjkWJWE0wDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDkxMzIz\nMTBaFw0xOTA0MDkxMzIzMTBaMCExDTALBgNVBAoTBGV0Y2QxEDAOBgNVBAMTB2V0\nY2QtY2EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtU/uszGxQ118I\nMYYthTQUbHUEoFYglHiUaG7yUITbYiermIjCSvNPtygWO0FXddOFHvEdHHTgH4Dw\n6agrGfg3nKGwR9SLsmfg5TGkCjgmCBqHVywElvWfApe0RtRphdo9xobbOClOgXtJ\nPj3P1y5LoxbRSAjlmk1jx5cUi9i/5HpJ70zrvoqRj3sgO3ZAaDm2UNR80tZL6fa6\nsCVIQMgpqOcwnIsuLlaKeqHVFgP9R9g+Hg7KMeJ9vCrP20BrozeIU0nLMQ7pBmff\ncgoEVMhN7lsRO+LalZaX6CqGhjqTyfK0vbOG5SgYewHLkIn6OHJsCiIWDh9UUVcz\nfhx/3e9nAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/\nMB0GA1UdDgQWBBQcsHb5R9G/ozx6D6FFMfLszgRTUzANBgkqhkiG9w0BAQsFAAOC\nAQEAC2OMbsBS0K6XAxvT+IYr0OLfSiKGwVN5O1c37x632CULgDrFbbVQYi+NDEY3\n0MkHtq6SrKGjxP8HKxiVh1QMI0a70GnB2vRyH/yr9Kh7aMiKwuNtUyi7vlePjziM\nPz3rDII0RkgtF38mpQJOkpC4ld2qgSRVN8K+TpmZhZBUTG4tGzO8VcOGCexewvkZ\n34L03Byy3N6Cc0bpB8nxNr1miKnbzVwHKBnk6aRK76iT4B3nY+VBNKATfQuVrwgf\npx89pHBys6+zgRoB8gIKs6jZZHopUdBxGMZjuPxscJxuTULmQZbFSWXSYPmORoZa\n9cHiDQVL8xs5r2k261sOkPbmpQ==\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/etcd/peer-ca.crt",
                            "id": "06eb79a572a7ce0361c0af754979854c28557c2c"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_peer_crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_locally_signed_cert.peer"
                    ],
                    "primary": {
                        "id": "301ef1e96383c0219826384ad4e0ad58364fdcb3",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDQzCCAiugAwIBAgIQKm4W9F4qEwkADfmwGCbAEjANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwOTEzMjMx\nNFoXDTE5MDQwOTEzMjMxNFowIzENMAsGA1UEChMEZXRjZDESMBAGA1UEAxMJZXRj\nZC1wZWVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzAx+wfXWchY1\nLsGGenUuZN3ssrV3wcRZ+aT2JiHo6LTNRPOpbYc4Chf9nPwoF7JTsUedV6AuGpdZ\nT1+lliIWjg/r1ewrOVmsHNu7gwKBzut4mlesZ+I7NwaxFaFM6dcJ5NygwjNjvNjZ\nt2zPqkchMxz4D4oCaMnrTP+HuuJ3GgNTo/U9O+c4SkK894qBbplyk2uSCTxg6kQn\n0GFBxPiZfo0YfWTPHP5JnTC/Q1W0RmbZIrIGDjQuXhWqT6xrhiaXs5xGs/muylqR\n59xoKnsllo8/vnvF1Q1B26rX0gVfXvc7uX4+dslLJ+hsRX/QmNJoNtcozqSmnIjP\nELFV9L06twIDAQABo3UwczAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYB\nBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUHLB2+UfR\nv6M8eg+hRTHy7M4EU1MwEwYDVR0RBAwwCoIIbjIuc3RldmUwDQYJKoZIhvcNAQEL\nBQADggEBAFOYzm8RW3u4y+qdPIgip4jA3HYJ5BZrG/pp51JBOze8kwYTaM2rlnOy\nE9jAZZPJkc5SS4noYUyr6uPADuX/Fk673KaxCUkXqwJySO8E+Asz3zPBEBPiwPet\nBXlaaTygGxYb2nPWDoVD2CLNdgWPNolpVvcy2mUkLjcLfjTE+gOpCg+nyboDjVDt\nDqCSfY5s5K9RZxuAiBY/ekp7gySqeFU0XcrFuTOBrW0cpxUPeIbXl5UAaImiXbda\ngIqeJsQM9pSxV65yc9EpwnNcECvGIyIk9nVUCvLvfZe92iO3SIlFf+zLwx+03L0t\n2zuBs92ngQMp7rMEQWhPMfOwoxbSBTA=\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/etcd/peer.crt",
                            "id": "301ef1e96383c0219826384ad4e0ad58364fdcb3"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_peer_key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.peer"
                    ],
                    "primary": {
                        "id": "6a64a6bf587cf9623a07c6e092b998fbee3e6654",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAzAx+wfXWchY1LsGGenUuZN3ssrV3wcRZ+aT2JiHo6LTNRPOp\nbYc4Chf9nPwoF7JTsUedV6AuGpdZT1+lliIWjg/r1ewrOVmsHNu7gwKBzut4mles\nZ+I7NwaxFaFM6dcJ5NygwjNjvNjZt2zPqkchMxz4D4oCaMnrTP+HuuJ3GgNTo/U9\nO+c4SkK894qBbplyk2uSCTxg6kQn0GFBxPiZfo0YfWTPHP5JnTC/Q1W0RmbZIrIG\nDjQuXhWqT6xrhiaXs5xGs/muylqR59xoKnsllo8/vnvF1Q1B26rX0gVfXvc7uX4+\ndslLJ+hsRX/QmNJoNtcozqSmnIjPELFV9L06twIDAQABAoIBAB0cc0Es16lzLac8\nCPmTmkjduJVOeoV0g/mv5UZPdDEvClIaCUQNFJusDIzHFNk8oeAa/YGw4qL8kMtY\nNAGVX25pKxZcGVaXSozbdIceZnKk+ZHbjEdN6XDSTZVua9C40zqJl43dUw9wSK94\noLAEceIe8e0VnX5hwGY91pl9EczuB1tl//eRBqHngnSuOLVbovq4Up4B6JxjvIxY\nGTcw4co1b3jLHm4v33Uisf0u6DaMM93Jwy7nZEcuy4LXSmxR6pJSl28FFvRZLQr+\npcdf8WyevahYWMnkfpi03oFv+UGxtliTzm/1R0hZSsDZFmC7BG2AhSG5sAFoiUu9\nyDIpvyECgYEA4yIedBG96EGP3T1eUVm4+A3mn6lsAb1OLIbTJhWpNN/4iwUh0raQ\njpTDVaiKodfN9sHHnxgk1aty/nqA5HK0rbEp/rmcbpKjpvWTABlSOJdLRp5+oAkQ\nGPyFdBb1ZvvLV78FvLbpgUCAwbXte+Hop10fXVUGvcY0/7r1qvkaNZ8CgYEA5ftQ\nGFvNCaSKO42wgM7wkZDDnBCCDIkcgaoiBnUnLD4BiFDtoylPEzj+qIbIE6bS3PUo\nzR+3UNn6YHBkDzfnyV3O1MZiIAjWQbw/a0wWq0U+U0isyN0X7HBv8EoirdBx0TAh\nd2gMRinB7yuj4Ab84yucq+1NCY2lmeHVL/60c+kCgYEAwdPg9x4Y2PXyBlQThAq0\nLYL3VzMmh4l8B8V6tRpxDj0/hat4hK/lRreuxg+RVrGqAzS03JCnBmxMMtxp2AoH\nI953Pvg4hae/3n/c1Y3GO6LoyzgASSPSx+/fFwVsoFip25SZGcViGTnpZuWQ51IO\nz5xJYsVnflWB7uYmNaRkeHMCgYAazoNUg4bPw+0U6fwT14s0/HHAhDAUc/rtpj4X\nEJrDTmrxT7WTWiJMdE1CqYsytzRG6xCZcEP22aGUkiUnnPWYhCWyqXkQkNcgjGe8\nAv91cTnFjWgOda7vMV/q20lVh0FtB7Yu6+LaXs2rKiQM3eOmOxQk+iELpwYRfMBT\nutWf2QKBgB8cGwa0CIMtg1CCJ+hg47+lis1G6nRY3gzQxiwNuj8wuQJMImQvZzYo\naJBnQOpkHygqB9a4xYky6Xjlo+OmDl23NZC+55GK3pafQVj5Ly6eAevcuOjnPTS3\nzPUgNlJC8vvtifRTkH1DywYaUOyGSCSRG6kMcM0rPFP1FsjtLpzY\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/etcd/peer.key",
                            "id": "6a64a6bf587cf9623a07c6e092b998fbee3e6654"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_server_ca_crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_self_signed_cert.etcd-ca"
                    ],
                    "primary": {
                        "id": "06eb79a572a7ce0361c0af754979854c28557c2c",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDDzCCAfegAwIBAgIRAK5RObOoi7TKD6WHjkWJWE0wDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDkxMzIz\nMTBaFw0xOTA0MDkxMzIzMTBaMCExDTALBgNVBAoTBGV0Y2QxEDAOBgNVBAMTB2V0\nY2QtY2EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtU/uszGxQ118I\nMYYthTQUbHUEoFYglHiUaG7yUITbYiermIjCSvNPtygWO0FXddOFHvEdHHTgH4Dw\n6agrGfg3nKGwR9SLsmfg5TGkCjgmCBqHVywElvWfApe0RtRphdo9xobbOClOgXtJ\nPj3P1y5LoxbRSAjlmk1jx5cUi9i/5HpJ70zrvoqRj3sgO3ZAaDm2UNR80tZL6fa6\nsCVIQMgpqOcwnIsuLlaKeqHVFgP9R9g+Hg7KMeJ9vCrP20BrozeIU0nLMQ7pBmff\ncgoEVMhN7lsRO+LalZaX6CqGhjqTyfK0vbOG5SgYewHLkIn6OHJsCiIWDh9UUVcz\nfhx/3e9nAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/\nMB0GA1UdDgQWBBQcsHb5R9G/ozx6D6FFMfLszgRTUzANBgkqhkiG9w0BAQsFAAOC\nAQEAC2OMbsBS0K6XAxvT+IYr0OLfSiKGwVN5O1c37x632CULgDrFbbVQYi+NDEY3\n0MkHtq6SrKGjxP8HKxiVh1QMI0a70GnB2vRyH/yr9Kh7aMiKwuNtUyi7vlePjziM\nPz3rDII0RkgtF38mpQJOkpC4ld2qgSRVN8K+TpmZhZBUTG4tGzO8VcOGCexewvkZ\n34L03Byy3N6Cc0bpB8nxNr1miKnbzVwHKBnk6aRK76iT4B3nY+VBNKATfQuVrwgf\npx89pHBys6+zgRoB8gIKs6jZZHopUdBxGMZjuPxscJxuTULmQZbFSWXSYPmORoZa\n9cHiDQVL8xs5r2k261sOkPbmpQ==\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/etcd/server-ca.crt",
                            "id": "06eb79a572a7ce0361c0af754979854c28557c2c"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_server_crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_locally_signed_cert.server"
                    ],
                    "primary": {
                        "id": "a8470f4448995699878985bcbc515f663b442b12",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDWDCCAkCgAwIBAgIQI7Y7mE2b7waEO8QVNPC6RTANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwOTEzMjMx\nM1oXDTE5MDQwOTEzMjMxM1owJTENMAsGA1UEChMEZXRjZDEUMBIGA1UEAxMLZXRj\nZC1zZXJ2ZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC1oAxiaZIt\nqOa9oE2pm2AtxAbvAyLKpu5GFlrATG2C10/yuD0/422yh7zTjXSrmUpyZjW46sGp\nozXMjA6tRD+DDbU7zNDolrRvQ3uVXM4+82+ce/CyFgVpC9+mpeO3IXTICZfH48a+\nN/Ou+Gwzttaq7k3itZJTrmlhOGK0eknHJQkugU7P2tpn2S1eiOEZn4L1lLev58hK\neyow4wqEznKwl02D8JJWXVRUkwHqjC4MHCVN3aF7tk6ZKUlx6JbkXgdgHZeKgSVJ\nRnlrsnieR2XFglD3NLncpCrcBFen0NXuMXgqR5za3PO6fm47mxvM15Fj73L+kpAX\nkZ7lbbUsIBI9AgMBAAGjgYcwgYQwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQG\nCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFByw\ndvlH0b+jPHoPoUUx8uzOBFNTMCQGA1UdEQQdMBuCCG4yLnN0ZXZlgglsb2NhbGhv\nc3SHBH8AAAEwDQYJKoZIhvcNAQELBQADggEBAFqTWBrMMN270qQVx18kMgJu6Uos\n3AIsQ3A+DZa+qi161VtoQKErmEbCmN9iJhUMjIHDpRiVNg9j3i6U4kOrEWj4PfFb\nQVqxNKBGIJspBVBVcstrymVSa/QCMn4kw8vP+1+5AGZUPXa5eu2yiP88pN+KdNoF\nzSxAki7LfwcU86D1YyKrVZUL2xdCLPHuFF+fPAkbyG90e2q69nr+uQJ3eODK3ylh\noUzaZe3VpE5U4K+RNcGnzqzPw9XfR1LjFrchv/UgH2joCWqEbkGBBomEgwXIRI0O\nxwv/sDWlmVManAVXXxgJMJ3GtETQMTkftfzFTUpbEa7ooJGffr1jYboec4s=\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/etcd/server.crt",
                            "id": "a8470f4448995699878985bcbc515f663b442b12"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_server_key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.server"
                    ],
                    "primary": {
                        "id": "0a7f69ce17fbdcde596dde0d5803c5ea1b91abd6",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAtaAMYmmSLajmvaBNqZtgLcQG7wMiyqbuRhZawExtgtdP8rg9\nP+Ntsoe80410q5lKcmY1uOrBqaM1zIwOrUQ/gw21O8zQ6Ja0b0N7lVzOPvNvnHvw\nshYFaQvfpqXjtyF0yAmXx+PGvjfzrvhsM7bWqu5N4rWSU65pYThitHpJxyUJLoFO\nz9raZ9ktXojhGZ+C9ZS3r+fISnsqMOMKhM5ysJdNg/CSVl1UVJMB6owuDBwlTd2h\ne7ZOmSlJceiW5F4HYB2XioElSUZ5a7J4nkdlxYJQ9zS53KQq3ARXp9DV7jF4Kkec\n2tzzun5uO5sbzNeRY+9y/pKQF5Ge5W21LCASPQIDAQABAoIBADpM9sy8UKUBe5fR\nFjzkWDo4m3Urj4Z3kTLESDtEDT8buFkUVOzmJzdQpQdPd+0BVslkD8ic6q92aXWQ\nW8G4j56UzuE0PLb8cUzp34ixcq74W5Jion+32+K9YfxPcco+Hgt8MNGERy6WLU20\nBp+PCFd0CWJFoIPmD4OaouyF+JrIuTuV7WdaJdHhSnzdV01LxEgUHsfH+GffJx3y\n5g4poItVuN8iEhRxpiqBqwqtc2dufA7IHjHaZuZn1cbX7gML8BcZfP9qP3u9YGQq\ne/6k9+HFFYPoH0f5o8BAYFdBj7x/UvmvkzDGSl8CM0v9DsG7xxYW6EilrnpPoebK\niiDNoUECgYEA1vdSCwHEJ1DW/7On1R9DfSs+Joij1W63qkIabXpbL9G+Knq4nTCb\n3QlMQQW3aYOkYY6XyTLMBG/updPbbctEDMIg7cKifetd6DiAnWlf+rHlJMMW2BJv\nNZi+CJpDXydYpLG4HYtt4SwlSsNSJZuklUICOFVB66FXDTf2dPpxcjECgYEA2Et3\n7SI+NdiIBWkSLu6N/mr264vSOgyad0RkgsqdhyCIjQ3tv4x9ciHqdPRzPnr8Y5WO\nJDIULbM0bkKUkTE4m1VIODVTxRJUCuI8VPTPY+NNpQF2ISo+8KPPX6TQnOCVcLs0\nIjmfASmw7za2xBhFPZqCfXA0xhjd2b/ooXHgcc0CgYAg8ReOfj/L8pRv7N0MSNUz\nyjuk9g19OJFGswiPvE9a/Z5Rriq6U+eesL0RvcmEjtrS5GIYQAOJrol4ugWHRr3v\n4pPfO5NhDn9+haIX/TzrEvXVc1v90p1eLkD42oL2gvYPjvhy9pnpBrXURihBgR9w\njAQBE/edH0VSzj+jX3mhEQKBgQCEyhhvemVtE2m2wKIMNCLyvmKni6jeQJyYemGm\ntpPtwLh0uMdsoOjnKBFUCjuycTkAPnIMoL4orGuVAcVKOkjBfKMg9wRd6fm00N4v\nXjjw3zzs/6+xfskzXa5TztDQb0Tv985y8KNAyIK66gFc9HWV84UHU9rif6O8Koi8\njTg5RQKBgQC18/nBnMo2j4jC7w6o8YnDZTUhXQMz7WQh20AdHCPHSNeMPGYM1qs/\nTfwRsgmYcH0VyxB/Zf9RO2cY5hV4o9bnxhiwLRtVs5ByUxejkPzVx3/vwHcq7oV0\n/Ybhehkm7GMx1DUoWNFWmNgzMuOTK0Xb6i9/LxhaHF2N5/lWK0ndvw==\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/etcd/server.key",
                            "id": "0a7f69ce17fbdcde596dde0d5803c5ea1b91abd6"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.kube-ca-crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_self_signed_cert.kube-ca.*"
                    ],
                    "primary": {
                        "id": "1122c220b85e47c7c6e3180be75e718e5f8ee96c",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDFjCCAf6gAwIBAgIQKqqQoLoSOaGd1ArpB6oW7zANBgkqhkiG9w0BAQsFADAl\nMREwDwYDVQQKEwhib290a3ViZTEQMA4GA1UEAxMHa3ViZS1jYTAeFw0xODA0MDkx\nMzIzMTJaFw0xOTA0MDkxMzIzMTJaMCUxETAPBgNVBAoTCGJvb3RrdWJlMRAwDgYD\nVQQDEwdrdWJlLWNhMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwCID\nT4d9K1QkViNHMKMLlh/jd5IKywQzw5TWnLgU3uQXkyi9CcAc435Xq31Ut2sl1mFo\ndV/phemOkxCtReOL9QkwrgijgSgP3i92ZWjRqT5eUL2GmAIXyhD6aL4ZrZZzo+yx\nk61Qp7ilmetBFRs9RPphJ3yQKhnf20hkh9UDyoFs2GtTT26sNKLQ3tuWSY9r8rEB\n618tjKK6cbHfWt1IrG2ohIfzIxSgA+ippjOB8DidneqCaE8GPNhfyG1/jpTc4enC\njBhjHboW+4RrR1uQvd4B7a5D7A0pV1RsqekjJjMuTKpDiLpYhlID+x4ciPfXuEdz\nggsFh7TiUdRqQ07H5QIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAqQwDwYDVR0TAQH/\nBAUwAwEB/zAdBgNVHQ4EFgQUDiWMVfOpGy6t7G+hal/g1LPCBx0wDQYJKoZIhvcN\nAQELBQADggEBAGoN4yNtYtyVFArAUOfFX6Z6ohOgZ6hzTFHQIJG9mYCgtfTnkzYo\nAwwX6ApiD7XuVdfMzh2slWQ174a0oWZfuLNpbE8BAkltm1XSogMC8OqG7ACmaSPb\nYNqd07o3lUTjOzY7gnqcilgtWK5Svx6wAesCJ+bl9xMHg7nzU4NNxQp5dL/C56a0\nCssVxeXxQasxEq9TpnglFaTnIITQsq0sEPWOcP7truC93grnaDCSUrrJU+4ZRXNe\nSxr2SKjxgSddaQmgt39Px3qdX7dMhuwbT9SPqVv6rsHFm4WVywAKDPGXIT0WyZhR\n45rNgsRkfujlk6wY77UNaPf7BYzS2odow0o=\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/ca.crt",
                            "id": "1122c220b85e47c7c6e3180be75e718e5f8ee96c"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.kube-ca-key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.kube-ca.*"
                    ],
                    "primary": {
                        "id": "51fbace5d45362b6345a79eb2f97f3b260bbd2bf",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAwCIDT4d9K1QkViNHMKMLlh/jd5IKywQzw5TWnLgU3uQXkyi9\nCcAc435Xq31Ut2sl1mFodV/phemOkxCtReOL9QkwrgijgSgP3i92ZWjRqT5eUL2G\nmAIXyhD6aL4ZrZZzo+yxk61Qp7ilmetBFRs9RPphJ3yQKhnf20hkh9UDyoFs2GtT\nT26sNKLQ3tuWSY9r8rEB618tjKK6cbHfWt1IrG2ohIfzIxSgA+ippjOB8DidneqC\naE8GPNhfyG1/jpTc4enCjBhjHboW+4RrR1uQvd4B7a5D7A0pV1RsqekjJjMuTKpD\niLpYhlID+x4ciPfXuEdzggsFh7TiUdRqQ07H5QIDAQABAoIBAHJNieSteWTmmPt5\n32drCICWlg/TnYIsDNOlX4w644e68N+Gk/gSB927k1KdrGG2Z/tDVg7GMbqOOVj6\nyerTNbdgcUqILyWufMo1OF2aX2kthpTIPCOA00BOm3rm5YXlBQUX0olFyb8OVc7d\nK4nv+6JmxpfkPiwd2pStW8mHi8rT7n8/LF3/rM1zzCr9igahvyk32LKfpHLfmg7P\nAIUfLluhodg70VOlnIjiISOu+H82vMsUbrDmmRmthiWsfiuKitckZgfl7i2nL2uI\nH0867IjX/FMIPo/V9BUh1R8aXAwhAGIKoDbqEqPdyn04p/97IApqwwTDr2fIYoeO\nXmbbUv0CgYEA0rKLiNB76Aw1ok+ViPu0O3sENL4+EOL3U1sAtAHXQh4UCHKIrSUg\nxGPJmr57hcUnz4qfWFYN6HKJtYH6tEhurfeTduBJxCv3m2tdDIgf1VbfjfmrVzHK\nzTjjzh9t7n07U3g3WaSD4n42xK5w/1VEQXp0c/nqLQiC2lygNwpvCMMCgYEA6XGd\nWJhbt79XTM923qbirrRqpmhl4h+38AMqHl20/6MDYoj5dyXz6MRrjStwcPL272EL\n0UjGsbMgGA6AlWTBRMMrazSYjLuvyfZjgjvSHsXjZm1cEsbZbgscPRHcjTLfYv6O\naQE5zlnIuVjvFK2u2XJx7/eMRSkLgADpY0vuIjcCgYEAybO5FpGXfK5rjeWoHonv\noV2DykYxPpM49+hPhQOaIaaPwQJ8S10WwEtTDbu6nnX+RZXMM5G2IMe9gzBaY8pP\ngmVXG19d3tnEYVnnqv6Jkv9mZhEUcRWussX6dzHpWH00lRSp0DxJMUNohOMGM7lZ\n7WEgKIKgJtpWAlrX2bk4UGcCgYBsmFzA9QddoBYldjFu/CVhbi5awR/8JBM2BNLY\nE3F6pkOR1/Rs1+vyMUVzA20oLe5vhy6vKfK8gX6BkmWAmcFKkpwlH++DMGBjTEoY\nMGnbxOS3JlJ5raVCCssVIbT+vlaqv45SDK7ublfw2Q1HClDXeOTF49uN5L0jy8jG\nV3Es2wKBgD4KMV2oNrHmuGHkYBj0419DX0SJPjMSZS6Qfl+37QLBQkcqOcul9rKL\nILdPgJV+//VaMSm0YNVwgq8mu+xPMs5RTr1whT/dNXwAAQMcLAg1n2Gfu2e9KNPn\n9sFio5ZVFcSTFFFZT9SlwupXE2ae7LjNCz8de/1eYSemSPZ6ITlM\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/ca.key",
                            "id": "51fbace5d45362b6345a79eb2f97f3b260bbd2bf"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.kubeconfig": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.kubeconfig"
                    ],
                    "primary": {
                        "id": "2792740e029ec23e5e9e3d1b8ce155e79868189a",
                        "attributes": {
                            "content": "apiVersion: v1\nkind: Config\nclusters:\n- name: local\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRS3FxUW9Mb1NPYUdkMUFycEI2b1c3ekFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURreApNekl6TVRKYUZ3MHhPVEEwTURreE16SXpNVEphTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXdDSUQKVDRkOUsxUWtWaU5ITUtNTGxoL2pkNUlLeXdRenc1VFduTGdVM3VRWGt5aTlDY0FjNDM1WHEzMVV0MnNsMW1GbwpkVi9waGVtT2t4Q3RSZU9MOVFrd3JnaWpnU2dQM2k5MlpXalJxVDVlVUwyR21BSVh5aEQ2YUw0WnJaWnpvK3l4Cms2MVFwN2lsbWV0QkZSczlSUHBoSjN5UUtobmYyMGhraDlVRHlvRnMyR3RUVDI2c05LTFEzdHVXU1k5cjhyRUIKNjE4dGpLSzZjYkhmV3QxSXJHMm9oSWZ6SXhTZ0EraXBwak9COERpZG5lcUNhRThHUE5oZnlHMS9qcFRjNGVuQwpqQmhqSGJvVys0UnJSMXVRdmQ0QjdhNUQ3QTBwVjFSc3Fla2pKak11VEtwRGlMcFlobElEK3g0Y2lQZlh1RWR6Cmdnc0ZoN1RpVWRScVEwN0g1UUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVRGlXTVZmT3BHeTZ0N0craGFsL2cxTFBDQngwd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBR29ONHlOdFl0eVZGQXJBVU9mRlg2WjZvaE9nWjZoelRGSFFJSkc5bVlDZ3RmVG5rellvCkF3d1g2QXBpRDdYdVZkZk16aDJzbFdRMTc0YTBvV1pmdUxOcGJFOEJBa2x0bTFYU29nTUM4T3FHN0FDbWFTUGIKWU5xZDA3bzNsVVRqT3pZN2ducWNpbGd0V0s1U3Z4NndBZXNDSitibDl4TUhnN256VTROTnhRcDVkTC9DNTZhMApDc3NWeGVYeFFhc3hFcTlUcG5nbEZhVG5JSVRRc3Ewc0VQV09jUDd0cnVDOTNncm5hRENTVXJySlUrNFpSWE5lClN4cjJTS2p4Z1NkZGFRbWd0MzlQeDNxZFg3ZE1odXdiVDlTUHFWdjZyc0hGbTRXVnl3QUtEUEdYSVQwV3laaFIKNDVyTmdzUmtmdWpsazZ3WTc3VU5hUGY3Qll6UzJvZG93MG89Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: kubelet\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQVA0WnJMRUE4N1ZIQXlvOU9oTVNySXd3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBNQpNVE15TXpFMFdoY05NVGt3TkRBNU1UTXlNekUwV2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFLM3NSTERMdGJrZmNjMzdjYnJ0TzhIWjI5NXZFSGRMSDU3SGx3c045WHVINDFBWGJuTnVnZ204bVdiNQpqS0JFRU1QaG51aXJLaHY4dmxLQndlamlIT0hFUU1ZQ295RDUzbzFaenplTkZ6SXlwMGxzaTNnN0lTYXdhV0l5Cm1TVjlsTE1HczdYb1Rhc3drZTY1dXc4aExRNEVYMCtNS2xSQlQra2tGRC9aTXl1ZTliZ29wNjRoRnNDc3pocUwKTkRMVkQ5aVB4SEFrNTl3d1k3TTcwODZPNlFHb1o4dFIwR2E1TFA3MlBOU2Ryd1h2amFuc3dybkZMbGorV1lReQppMkpOUzNrVmlBWE9FQnREOTd4cGQ4V0VEOC83TDJRb1VKS3hjaDFGaE1YWndYSzd5Y2dqdkRWUmpudEtYa3Z4CnB3ZlFYN1hqdXFkK0tJb0dKWWRUaXVQNGl5VUNBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZBNGxqRlh6cVJzdXJleHZvV3BmNE5TendnY2RNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFVCngreDdSZTAxWjg5MklzZzVEYzJRN2F3Z2VNREVjaEZpSGxPaHhGVEpSU2xsUWJmWXplSGZ3NzVRdk1uTzNmOE4KVGhYYU4yc1MwU0ZsRlY2UlI0ZEJINnUxZWNIS2lBem9EWkk3TnpIZTVadXFsQmphY2p6ckM2d0xHYjNmd3k0UwplbWVBZWlWelRrRW96OWxmaEJFdWpOYk4rcmhKVGc4RHUyWk9zdWFLa1cxbjJKVU5OTkJxRlA4eWZzd0lMSm95CmhTa0lTQXIrMmlmUTJvUjVpRG5tY01weWhGcEh2UDF2VmRQWU9SVHpzcW1DU25TbTRoMWhpRHlQZ0NsdUJiVjcKVHFsMUtRTmF3Y1NEQ01TaUc5ZVJVWW1MVEQ1a3J4Y3dOdFU0NUVQaFVmT0ZZK0RFSW1oQ1VhZnp1bDBYZW5scwpoVy9ySzI0QzAzVEdLWllVVkkyUAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcmV4RXNNdTF1Ujl4emZ0eHV1MDd3ZG5iM204UWQwc2Zuc2VYQ3czMWU0ZmpVQmR1CmMyNkNDYnlaWnZtTW9FUVF3K0dlNktzcUcveStVb0hCNk9JYzRjUkF4Z0tqSVBuZWpWblBONDBYTWpLblNXeUwKZURzaEpyQnBZaktaSlgyVXN3YXp0ZWhOcXpDUjdybTdEeUV0RGdSZlQ0d3FWRUZQNlNRVVA5a3pLNTcxdUNpbgpyaUVXd0t6T0dvczBNdFVQMkkvRWNDVG4zREJqc3p2VHpvN3BBYWhueTFIUVpya3Mvdlk4MUoydkJlK05xZXpDCnVjVXVXUDVaaERLTFlrMUxlUldJQmM0UUcwUDN2R2wzeFlRUHovc3ZaQ2hRa3JGeUhVV0V4ZG5CY3J2SnlDTzgKTlZHT2UwcGVTL0duQjlCZnRlTzZwMzRvaWdZbGgxT0s0L2lMSlFJREFRQUJBb0lCQURwMStaem56SHllZWpWLwp1SG5adGtWeHduc2hJQXJKUUtheGRpN3NFVURscTEzSGtvUFFlSHRuWHJVRFd1YWdHbmFOUjBuMEJ1S0RjVUh3CmhjcU8vcUJReEdrS2grVFV1SjhRdWh0MUhIL3VFTmNZV2tVZXN3VDdOV0VobXVMRU5KQjh4emwxRFc1bWxCY0gKYlQ0bnE2cFRnK29NTmtvOTdldHpDaTl3QmNnNlIyNjVNUmtzM20vK2Fpc2xjTUNvZWExQVBDbGFoV0h3Rmx3TQp4UGtvV1hESHQwOFRNcUtIMUhTRllmV3N3VWVwMEJ2ditxcVpibGxUYUNiZ3RKUVBvd0p5YjlHa3ZLNGhsdjMvCmFFbTV4U1hMM1lXd0dNdyszSmVod2V0VmdEajZkcUdtWGJiODh6RDVpOXR6STRFLzVFY1QzWEx6VXd2WXBaL2wKM1l2eXBKMENnWUVBeXhadWJHTkxDcnNrNm5RWFhVMFk3VVJ0M0V3ZE0vMlAxTmhhL0J2eWNCclpySFNkZXB4ago5K2V3MDhoaTlVS0JuZVdFdXNsZ1podGNwUWFvS284RnhEWDF6T1paS2djSFB2TEpFYmVLSkVCN05iSXhER2dqCmVreGRLQ3dIRHNpQXh5bjVjaHBXRWdwVzdITndDTW52aGVIaDI1Mm56clZzVU9xUk9Kblh4bXNDZ1lFQTJ6eWIKQWdmN0NvOFhRWmFWSzNadEJ0ZW0yTVZZY3Q0b0tSbDZ0M0JEVHdTUk5YMXJmSFRzcERJVk1HVCtoM1p3WGpkdQpNZHh0ZHJYWHM5WVlOVERsWTBoUU9QUmg4T2xSU2lYL1lzQ3ZHdmZEaGxtUnEyRmYvejl1YldSb1o4WDhOdkl5CmJueWRXb0kyRk95RWp3eHFIOG1HQWc0R0JUMG90SzdZNjFGUnVLOENnWUI3VTdYZTBEVmo0TjI4R3ArTm95SCsKQTg0TE41V01XdkNiT24rV0ZZcVdGVmdXYUFLeDBJTE1xc0F3KzhGTVd3VEhVL2ZVVGpIaUQ3K2szM1FEMURLVwpRb1p2MVhwVUVVeVBKM1IrODh4SjAzWisxeVQ5K2NlQm54bjdLVEZvQXM1aEk5WTlPazBHUzQwWnJjaGRMZlBzCmc0MWFobFMvTEdFSWlrbUI2N3FpM1FLQmdRQ3Azdi9NUnhyQlI3WWhYK2dkVVJtUlg2OHI3MTFsUTdXaWd0ZVAKSXpGRUhLblc1R05RZjlpTU1USXgyVTlPN3ZxS1JqRGYrWWZubjJhUE5haDBMbnJPdnMxS0ZERi9WWWxqQnFZbgpnbDByYkNiWUJyYlVNQk1OMTd4Y2pweEhMQ1VNL2dVTmp3anRoRThiVDFnMjdzdWI3YTRrRVhHZ3hZNncwWG5LCmU2dnlpUUtCZ0FGNm80eWRKdzFkVktKTS9HeklBa2t1TmxTTFltN0NHTHpGVlFXSWJpTU83U2JkN0RGRlFLZWUKNmJRVDA5ODNqYm9aZzF6dUJPSVFDcFdTVG9JaWZYL2tYSWhQTjVoRVNDd2dSeVVYSXAzLzZpVnl6Y0Y2RklDTgpwditRYzFROXBObGE4dTlzNGordkIrMXhMaDd2VHAwaGNqbXhDVDhWRVpEN0tKdExtd05HCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\ncontexts:\n- context:\n    cluster: local\n    user: kubelet\n",
                            "filename": "assets/auth/kubeconfig",
                            "id": "2792740e029ec23e5e9e3d1b8ce155e79868189a"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.kubelet-crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_locally_signed_cert.kubelet"
                    ],
                    "primary": {
                        "id": "9bca0080115585fbaed1e606fef4d73da05fea81",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDOzCCAiOgAwIBAgIRAP4ZrLEA87VHAyo9OhMSrIwwDQYJKoZIhvcNAQELBQAw\nJTERMA8GA1UEChMIYm9vdGt1YmUxEDAOBgNVBAMTB2t1YmUtY2EwHhcNMTgwNDA5\nMTMyMzE0WhcNMTkwNDA5MTMyMzE0WjArMRcwFQYDVQQKEw5zeXN0ZW06bWFzdGVy\nczEQMA4GA1UEAxMHa3ViZWxldDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC\nggEBAK3sRLDLtbkfcc37cbrtO8HZ295vEHdLH57HlwsN9XuH41AXbnNuggm8mWb5\njKBEEMPhnuirKhv8vlKBwejiHOHEQMYCoyD53o1ZzzeNFzIyp0lsi3g7ISawaWIy\nmSV9lLMGs7XoTaswke65uw8hLQ4EX0+MKlRBT+kkFD/ZMyue9bgop64hFsCszhqL\nNDLVD9iPxHAk59wwY7M7086O6QGoZ8tR0Ga5LP72PNSdrwXvjanswrnFLlj+WYQy\ni2JNS3kViAXOEBtD97xpd8WED8/7L2QoUJKxch1FhMXZwXK7ycgjvDVRjntKXkvx\npwfQX7Xjuqd+KIoGJYdTiuP4iyUCAwEAAaNgMF4wDgYDVR0PAQH/BAQDAgWgMB0G\nA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB8GA1Ud\nIwQYMBaAFA4ljFXzqRsurexvoWpf4NSzwgcdMA0GCSqGSIb3DQEBCwUAA4IBAQAU\nx+x7Re01Z892Isg5Dc2Q7awgeMDEchFiHlOhxFTJRSllQbfYzeHfw75QvMnO3f8N\nThXaN2sS0SFlFV6RR4dBH6u1ecHKiAzoDZI7NzHe5ZuqlBjacjzrC6wLGb3fwy4S\nemeAeiVzTkEoz9lfhBEujNbN+rhJTg8Du2ZOsuaKkW1n2JUNNNBqFP8yfswILJoy\nhSkISAr+2ifQ2oR5iDnmcMpyhFpHvP1vVdPYORTzsqmCSnSm4h1hiDyPgCluBbV7\nTql1KQNawcSDCMSiG9eRUYmLTD5krxcwNtU45EPhUfOFY+DEImhCUafzul0Xenls\nhW/rK24C03TGKZYUVI2P\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/kubelet.crt",
                            "id": "9bca0080115585fbaed1e606fef4d73da05fea81"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.kubelet-key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.kubelet"
                    ],
                    "primary": {
                        "id": "dd5a6b7edf30ad256a631d72de2ded544e62baf9",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEArexEsMu1uR9xzftxuu07wdnb3m8Qd0sfnseXCw31e4fjUBdu\nc26CCbyZZvmMoEQQw+Ge6KsqG/y+UoHB6OIc4cRAxgKjIPnejVnPN40XMjKnSWyL\neDshJrBpYjKZJX2UswaztehNqzCR7rm7DyEtDgRfT4wqVEFP6SQUP9kzK571uCin\nriEWwKzOGos0MtUP2I/EcCTn3DBjszvTzo7pAahny1HQZrks/vY81J2vBe+NqezC\nucUuWP5ZhDKLYk1LeRWIBc4QG0P3vGl3xYQPz/svZChQkrFyHUWExdnBcrvJyCO8\nNVGOe0peS/GnB9BfteO6p34oigYlh1OK4/iLJQIDAQABAoIBADp1+ZznzHyeejV/\nuHnZtkVxwnshIArJQKaxdi7sEUDlq13HkoPQeHtnXrUDWuagGnaNR0n0BuKDcUHw\nhcqO/qBQxGkKh+TUuJ8Quht1HH/uENcYWkUeswT7NWEhmuLENJB8xzl1DW5mlBcH\nbT4nq6pTg+oMNko97etzCi9wBcg6R265MRks3m/+aislcMCoea1APClahWHwFlwM\nxPkoWXDHt08TMqKH1HSFYfWswUep0Bvv+qqZbllTaCbgtJQPowJyb9GkvK4hlv3/\naEm5xSXL3YWwGMw+3JehwetVgDj6dqGmXbb88zD5i9tzI4E/5EcT3XLzUwvYpZ/l\n3YvypJ0CgYEAyxZubGNLCrsk6nQXXU0Y7URt3EwdM/2P1Nha/BvycBrZrHSdepxj\n9+ew08hi9UKBneWEuslgZhtcpQaoKo8FxDX1zOZZKgcHPvLJEbeKJEB7NbIxDGgj\nekxdKCwHDsiAxyn5chpWEgpW7HNwCMnvheHh252nzrVsUOqROJnXxmsCgYEA2zyb\nAgf7Co8XQZaVK3ZtBtem2MVYct4oKRl6t3BDTwSRNX1rfHTspDIVMGT+h3ZwXjdu\nMdxtdrXXs9YYNTDlY0hQOPRh8OlRSiX/YsCvGvfDhlmRq2Ff/z9ubWRoZ8X8NvIy\nbnydWoI2FOyEjwxqH8mGAg4GBT0otK7Y61FRuK8CgYB7U7Xe0DVj4N28Gp+NoyH+\nA84LN5WMWvCbOn+WFYqWFVgWaAKx0ILMqsAw+8FMWwTHU/fUTjHiD7+k33QD1DKW\nQoZv1XpUEUyPJ3R+88xJ03Z+1yT9+ceBnxn7KTFoAs5hI9Y9Ok0GS40ZrchdLfPs\ng41ahlS/LGEIikmB67qi3QKBgQCp3v/MRxrBR7YhX+gdURmRX68r711lQ7WigteP\nIzFEHKnW5GNQf9iMMTIx2U9O7vqKRjDf+Yfnn2aPNah0LnrOvs1KFDF/VYljBqYn\ngl0rbCbYBrbUMBMN17xcjpxHLCUM/gUNjwjthE8bT1g27sub7a4kEXGgxY6w0XnK\ne6vyiQKBgAF6o4ydJw1dVKJM/GzIAkkuNlSLYm7CGLzFVQWIbiMO7Sbd7DFFQKee\n6bQT0983jboZg1zuBOIQCpWSToIifX/kXIhPN5hESCwgRyUXIp3/6iVyzcF6FICN\npv+Qc1Q9pNla8u9s4j+vB+1xLh7vTp0hcjmxCT8VEZD7KJtLmwNG\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/kubelet.key",
                            "id": "dd5a6b7edf30ad256a631d72de2ded544e62baf9"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.service-account-crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.service-account"
                    ],
                    "primary": {
                        "id": "f8ce6c95df8b9d3fbdca8cb6b51c922fb9df4af9",
                        "attributes": {
                            "content": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtekvoa1szKXZ5RgNkg+7\nkYB0d5pGZkDtkhZ226/Ev4IZkmb835xobsP6iae9LEdtXPGlaJs5QU32cBtgkuiQ\nHWYn7568CONpV1PF/4MfkhUT2VOF9a7P0bOf7GFyK1Eyfwe/qwnqguPMulmzDzTG\nDQCvZk/YmRMbYg127WHSwUxCtgYNfyf3rhQYvXhda0Ql6tVK8WaIoJeNS/jThFT3\nbzPerUzbarNyHxubE7OAesFJ8yc7Ob1F8SwGPkKDvpQBqDYo+xhp52EsuLR/f5HQ\nN6DXNmj/DX6xcgljZsLbgfYD2KxnqaS3BMX3qn0S9KgbnuEXs93c8MNXIZUMq9L9\n2QIDAQAB\n-----END PUBLIC KEY-----\n",
                            "filename": "assets/tls/service-account.pub",
                            "id": "f8ce6c95df8b9d3fbdca8cb6b51c922fb9df4af9"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.service-account-key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.service-account"
                    ],
                    "primary": {
                        "id": "81cd23e95c53854fc35cd5116659f3396e09f9d1",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAtekvoa1szKXZ5RgNkg+7kYB0d5pGZkDtkhZ226/Ev4IZkmb8\n35xobsP6iae9LEdtXPGlaJs5QU32cBtgkuiQHWYn7568CONpV1PF/4MfkhUT2VOF\n9a7P0bOf7GFyK1Eyfwe/qwnqguPMulmzDzTGDQCvZk/YmRMbYg127WHSwUxCtgYN\nfyf3rhQYvXhda0Ql6tVK8WaIoJeNS/jThFT3bzPerUzbarNyHxubE7OAesFJ8yc7\nOb1F8SwGPkKDvpQBqDYo+xhp52EsuLR/f5HQN6DXNmj/DX6xcgljZsLbgfYD2Kxn\nqaS3BMX3qn0S9KgbnuEXs93c8MNXIZUMq9L92QIDAQABAoIBAQChIzdbKylWOo/C\nXMUgnikToUsJ6zHzQA5xus58mb1Zut/2DJ5xYbYscBONPnXXNEpO64sPF3jnPS1Q\nbx/j4nhOYoB7xQthgDh+76lTRg6AM4WKnG7si3ZxloDSPhuI/XsShYWl97mxSiK+\n69guXxwUxoeYxJ/kMMWv3Kd9bYroR6vxDbSnCeNfE8jX0Vuqvk7SedEGdNq7V2Fm\nK0g2gg+FcbUgJtlR6eQ9vIzkbbmqj4yR/01hvGz+3DhmggR8GppWnc1tZC0zRUn4\nJHogSDqvuUmkudGtjkA04UdPUrPNdYEJod52ZtNsyJyzRC1wU7ygTwl3zU9mJ80D\nO+8SxxKBAoGBANS6cx3qIMoDWm86Td9aD+8rsl9Rs6txKD2tK2R2ywn9usXB8wq7\nNHVZ08qAcKHUlUFhX2Zm8pof8/DiXx9hBWpAgHC3jDlHpdhHCbF7mogva/Jo0agM\nJblQXZxdzlWezMVfQ1RnP+IGedxnossIIlwCWHEYMsYKFWUMLU73wcTJAoGBANrp\n9WF3JSU0Z/wgatHnudBf+s6Wt26DOWceFlj5YEpXbY8TPd5RMTvXOGm/m4OtyEVU\nRPTq4O/vAY45EkJRL+3zPjKGEPTcYakhsbWRnoRzT6II6MXvhOjBDQr0ttxYLoCw\nz4tjkTeP5hEcQ2t6ROTwncHF3uhfIrzLvqo46kiRAoGACxM58xDBbEMIbkoGy94Q\nfk80FipWxFI72hot7CkTIQ4Ir0sNsD1W2dU3ZY+STZqXurOrF9W8Q7HuLVhbw3J1\nqbZ5+WRU9JZ6V+w64PaicPynDhPO9oTLYf6BISbxGxwNZSk0hCxr8wSLS6JJo3Bk\n+Y1VtW2hFxZnTr93jGjxuaECgYAXGtxYNiAIhjh3ZuB/WQrGkGrDRSsFEfqMBKPt\nLhzYm9OnZyt/fGhK3ZNJrfx28G+Tyaohg2zMRhiO7z0bHMCHR8YHxRijD2OLW1AL\nTtxBNH5yJqiSw43ulvmOb3ehV/lIgeDV4GNiTuDEa4w+GsCMvUyZOA4nzmq3LHXq\nN2ma0QKBgBMxFWpGaH53OeMUmmTwqdZNwjNSYGChPpV+QsPlNwx7XFR8lMB+h64e\n2GdyrcnfumxE/45SSPsMzKNq0hxWPLKl5rUv5Kv9dvvwBQJ6CvUstOnvBpPbkM7d\n7sDy6KDKKzFMdWqj3tEGJgQLonzpCg+hteDNqbwy4+k244PIr1uM\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/service-account.key",
                            "id": "81cd23e95c53854fc35cd5116659f3396e09f9d1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.user-kubeconfig": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.user-kubeconfig"
                    ],
                    "primary": {
                        "id": "b28b0c853d3840f97b41475976efd8175e346e47",
                        "attributes": {
                            "content": "apiVersion: v1\nkind: Config\nclusters:\n- name: steve-cluster\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRS3FxUW9Mb1NPYUdkMUFycEI2b1c3ekFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURreApNekl6TVRKYUZ3MHhPVEEwTURreE16SXpNVEphTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXdDSUQKVDRkOUsxUWtWaU5ITUtNTGxoL2pkNUlLeXdRenc1VFduTGdVM3VRWGt5aTlDY0FjNDM1WHEzMVV0MnNsMW1GbwpkVi9waGVtT2t4Q3RSZU9MOVFrd3JnaWpnU2dQM2k5MlpXalJxVDVlVUwyR21BSVh5aEQ2YUw0WnJaWnpvK3l4Cms2MVFwN2lsbWV0QkZSczlSUHBoSjN5UUtobmYyMGhraDlVRHlvRnMyR3RUVDI2c05LTFEzdHVXU1k5cjhyRUIKNjE4dGpLSzZjYkhmV3QxSXJHMm9oSWZ6SXhTZ0EraXBwak9COERpZG5lcUNhRThHUE5oZnlHMS9qcFRjNGVuQwpqQmhqSGJvVys0UnJSMXVRdmQ0QjdhNUQ3QTBwVjFSc3Fla2pKak11VEtwRGlMcFlobElEK3g0Y2lQZlh1RWR6Cmdnc0ZoN1RpVWRScVEwN0g1UUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVRGlXTVZmT3BHeTZ0N0craGFsL2cxTFBDQngwd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBR29ONHlOdFl0eVZGQXJBVU9mRlg2WjZvaE9nWjZoelRGSFFJSkc5bVlDZ3RmVG5rellvCkF3d1g2QXBpRDdYdVZkZk16aDJzbFdRMTc0YTBvV1pmdUxOcGJFOEJBa2x0bTFYU29nTUM4T3FHN0FDbWFTUGIKWU5xZDA3bzNsVVRqT3pZN2ducWNpbGd0V0s1U3Z4NndBZXNDSitibDl4TUhnN256VTROTnhRcDVkTC9DNTZhMApDc3NWeGVYeFFhc3hFcTlUcG5nbEZhVG5JSVRRc3Ewc0VQV09jUDd0cnVDOTNncm5hRENTVXJySlUrNFpSWE5lClN4cjJTS2p4Z1NkZGFRbWd0MzlQeDNxZFg3ZE1odXdiVDlTUHFWdjZyc0hGbTRXVnl3QUtEUEdYSVQwV3laaFIKNDVyTmdzUmtmdWpsazZ3WTc3VU5hUGY3Qll6UzJvZG93MG89Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: steve-user\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQVA0WnJMRUE4N1ZIQXlvOU9oTVNySXd3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBNQpNVE15TXpFMFdoY05NVGt3TkRBNU1UTXlNekUwV2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFLM3NSTERMdGJrZmNjMzdjYnJ0TzhIWjI5NXZFSGRMSDU3SGx3c045WHVINDFBWGJuTnVnZ204bVdiNQpqS0JFRU1QaG51aXJLaHY4dmxLQndlamlIT0hFUU1ZQ295RDUzbzFaenplTkZ6SXlwMGxzaTNnN0lTYXdhV0l5Cm1TVjlsTE1HczdYb1Rhc3drZTY1dXc4aExRNEVYMCtNS2xSQlQra2tGRC9aTXl1ZTliZ29wNjRoRnNDc3pocUwKTkRMVkQ5aVB4SEFrNTl3d1k3TTcwODZPNlFHb1o4dFIwR2E1TFA3MlBOU2Ryd1h2amFuc3dybkZMbGorV1lReQppMkpOUzNrVmlBWE9FQnREOTd4cGQ4V0VEOC83TDJRb1VKS3hjaDFGaE1YWndYSzd5Y2dqdkRWUmpudEtYa3Z4CnB3ZlFYN1hqdXFkK0tJb0dKWWRUaXVQNGl5VUNBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZBNGxqRlh6cVJzdXJleHZvV3BmNE5TendnY2RNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFVCngreDdSZTAxWjg5MklzZzVEYzJRN2F3Z2VNREVjaEZpSGxPaHhGVEpSU2xsUWJmWXplSGZ3NzVRdk1uTzNmOE4KVGhYYU4yc1MwU0ZsRlY2UlI0ZEJINnUxZWNIS2lBem9EWkk3TnpIZTVadXFsQmphY2p6ckM2d0xHYjNmd3k0UwplbWVBZWlWelRrRW96OWxmaEJFdWpOYk4rcmhKVGc4RHUyWk9zdWFLa1cxbjJKVU5OTkJxRlA4eWZzd0lMSm95CmhTa0lTQXIrMmlmUTJvUjVpRG5tY01weWhGcEh2UDF2VmRQWU9SVHpzcW1DU25TbTRoMWhpRHlQZ0NsdUJiVjcKVHFsMUtRTmF3Y1NEQ01TaUc5ZVJVWW1MVEQ1a3J4Y3dOdFU0NUVQaFVmT0ZZK0RFSW1oQ1VhZnp1bDBYZW5scwpoVy9ySzI0QzAzVEdLWllVVkkyUAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcmV4RXNNdTF1Ujl4emZ0eHV1MDd3ZG5iM204UWQwc2Zuc2VYQ3czMWU0ZmpVQmR1CmMyNkNDYnlaWnZtTW9FUVF3K0dlNktzcUcveStVb0hCNk9JYzRjUkF4Z0tqSVBuZWpWblBONDBYTWpLblNXeUwKZURzaEpyQnBZaktaSlgyVXN3YXp0ZWhOcXpDUjdybTdEeUV0RGdSZlQ0d3FWRUZQNlNRVVA5a3pLNTcxdUNpbgpyaUVXd0t6T0dvczBNdFVQMkkvRWNDVG4zREJqc3p2VHpvN3BBYWhueTFIUVpya3Mvdlk4MUoydkJlK05xZXpDCnVjVXVXUDVaaERLTFlrMUxlUldJQmM0UUcwUDN2R2wzeFlRUHovc3ZaQ2hRa3JGeUhVV0V4ZG5CY3J2SnlDTzgKTlZHT2UwcGVTL0duQjlCZnRlTzZwMzRvaWdZbGgxT0s0L2lMSlFJREFRQUJBb0lCQURwMStaem56SHllZWpWLwp1SG5adGtWeHduc2hJQXJKUUtheGRpN3NFVURscTEzSGtvUFFlSHRuWHJVRFd1YWdHbmFOUjBuMEJ1S0RjVUh3CmhjcU8vcUJReEdrS2grVFV1SjhRdWh0MUhIL3VFTmNZV2tVZXN3VDdOV0VobXVMRU5KQjh4emwxRFc1bWxCY0gKYlQ0bnE2cFRnK29NTmtvOTdldHpDaTl3QmNnNlIyNjVNUmtzM20vK2Fpc2xjTUNvZWExQVBDbGFoV0h3Rmx3TQp4UGtvV1hESHQwOFRNcUtIMUhTRllmV3N3VWVwMEJ2ditxcVpibGxUYUNiZ3RKUVBvd0p5YjlHa3ZLNGhsdjMvCmFFbTV4U1hMM1lXd0dNdyszSmVod2V0VmdEajZkcUdtWGJiODh6RDVpOXR6STRFLzVFY1QzWEx6VXd2WXBaL2wKM1l2eXBKMENnWUVBeXhadWJHTkxDcnNrNm5RWFhVMFk3VVJ0M0V3ZE0vMlAxTmhhL0J2eWNCclpySFNkZXB4ago5K2V3MDhoaTlVS0JuZVdFdXNsZ1podGNwUWFvS284RnhEWDF6T1paS2djSFB2TEpFYmVLSkVCN05iSXhER2dqCmVreGRLQ3dIRHNpQXh5bjVjaHBXRWdwVzdITndDTW52aGVIaDI1Mm56clZzVU9xUk9Kblh4bXNDZ1lFQTJ6eWIKQWdmN0NvOFhRWmFWSzNadEJ0ZW0yTVZZY3Q0b0tSbDZ0M0JEVHdTUk5YMXJmSFRzcERJVk1HVCtoM1p3WGpkdQpNZHh0ZHJYWHM5WVlOVERsWTBoUU9QUmg4T2xSU2lYL1lzQ3ZHdmZEaGxtUnEyRmYvejl1YldSb1o4WDhOdkl5CmJueWRXb0kyRk95RWp3eHFIOG1HQWc0R0JUMG90SzdZNjFGUnVLOENnWUI3VTdYZTBEVmo0TjI4R3ArTm95SCsKQTg0TE41V01XdkNiT24rV0ZZcVdGVmdXYUFLeDBJTE1xc0F3KzhGTVd3VEhVL2ZVVGpIaUQ3K2szM1FEMURLVwpRb1p2MVhwVUVVeVBKM1IrODh4SjAzWisxeVQ5K2NlQm54bjdLVEZvQXM1aEk5WTlPazBHUzQwWnJjaGRMZlBzCmc0MWFobFMvTEdFSWlrbUI2N3FpM1FLQmdRQ3Azdi9NUnhyQlI3WWhYK2dkVVJtUlg2OHI3MTFsUTdXaWd0ZVAKSXpGRUhLblc1R05RZjlpTU1USXgyVTlPN3ZxS1JqRGYrWWZubjJhUE5haDBMbnJPdnMxS0ZERi9WWWxqQnFZbgpnbDByYkNiWUJyYlVNQk1OMTd4Y2pweEhMQ1VNL2dVTmp3anRoRThiVDFnMjdzdWI3YTRrRVhHZ3hZNncwWG5LCmU2dnlpUUtCZ0FGNm80eWRKdzFkVktKTS9HeklBa2t1TmxTTFltN0NHTHpGVlFXSWJpTU83U2JkN0RGRlFLZWUKNmJRVDA5ODNqYm9aZzF6dUJPSVFDcFdTVG9JaWZYL2tYSWhQTjVoRVNDd2dSeVVYSXAzLzZpVnl6Y0Y2RklDTgpwditRYzFROXBObGE4dTlzNGordkIrMXhMaDd2VHAwaGNqbXhDVDhWRVpEN0tKdExtd05HCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\ncontexts:\n- name: steve-context\n  context:\n    cluster: steve-cluster\n    user: steve-user\n",
                            "filename": "assets/auth/steve-config",
                            "id": "b28b0c853d3840f97b41475976efd8175e346e47"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "template_dir.bootstrap-manifests": {
                    "type": "template_dir",
                    "depends_on": [],
                    "primary": {
                        "id": "6472a04654386cfdb60aa5873c5eb4c3855bb741",
                        "attributes": {
                            "destination_dir": "assets/bootstrap-manifests",
                            "id": "6472a04654386cfdb60aa5873c5eb4c3855bb741",
                            "source_dir": "/opt/cluster-config/terraform/.terraform/modules/ea39d6d476cd18bf0c8b076127e11683/resources/bootstrap-manifests",
                            "vars.%": "5",
                            "vars.cloud_provider": "",
                            "vars.etcd_servers": "https://n2.steve:2379",
                            "vars.hyperkube_image": "gcr.io/google_containers/hyperkube:v1.10.0",
                            "vars.pod_cidr": "10.2.0.0/16",
                            "vars.service_cidr": "10.3.0.0/16"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "template_dir.calico-manifests": {
                    "type": "template_dir",
                    "depends_on": [],
                    "primary": {
                        "id": "309fa17f3afe651a50b42be5293d78a406c6e499",
                        "attributes": {
                            "destination_dir": "assets/manifests-networking",
                            "id": "309fa17f3afe651a50b42be5293d78a406c6e499",
                            "source_dir": "/opt/cluster-config/terraform/.terraform/modules/ea39d6d476cd18bf0c8b076127e11683/resources/calico",
                            "vars.%": "4",
                            "vars.calico_cni_image": "quay.io/calico/cni:v2.0.1",
                            "vars.calico_image": "quay.io/calico/node:v3.0.4",
                            "vars.network_mtu": "1480",
                            "vars.pod_cidr": "10.2.0.0/16"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "template_dir.manifests": {
                    "type": "template_dir",
                    "depends_on": [
                        "tls_locally_signed_cert.apiserver",
                        "tls_locally_signed_cert.client",
                        "tls_private_key.apiserver",
                        "tls_private_key.client",
                        "tls_private_key.service-account",
                        "tls_self_signed_cert.etcd-ca",
                        "tls_self_signed_cert.kube-ca.*"
                    ],
                    "primary": {
                        "id": "6037697ae2008bf2f32f0b847f1725b3791d68b6",
                        "attributes": {
                            "destination_dir": "assets/manifests",
                            "id": "6037697ae2008bf2f32f0b847f1725b3791d68b6",
                            "source_dir": "/opt/cluster-config/terraform/.terraform/modules/ea39d6d476cd18bf0c8b076127e11683/resources/manifests",
                            "vars.%": "20",
                            "vars.apiserver_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR0akNDQXA2Z0F3SUJBZ0lRWUgzcnJqQWFsSkNRY003ODQ3TWowakFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURreApNekl6TVRSYUZ3MHhPVEEwTURreE16SXpNVFJhTUM4eEZEQVNCZ05WQkFvVEMydDFZbVV0YldGemRHVnlNUmN3CkZRWURWUVFERXc1cmRXSmxMV0Z3YVhObGNuWmxjakNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0MKQVFvQ2dnRUJBTEl0T2ZqYjIvVjJtTlZGbjAvOXZvc2loM3ZkTkhEV1hlMkFZZExtMU92aXppb2E1VmZrTjFVNApYNDZ5NzNpVUZsbkxQZ0Rkb0Izc0xQSVRxRzkrZWZqYWJyZGNSU0lPOW9GdDJSUkJnYThxSFVWY0FXY1JIKzZOCm4vc3V0NEkvUDRhblNqZFJiWG5sNU5ZVDhoVHltcGtvTDJia1lBaHZxaGEvRmJoWTZzd05GZ1NEdlN4SVpZV3cKT0EyYWlUeDNyZXVoUnJDUkNNZDB2aUxYb0tMdjdOTTFxRTRCUk1FaktYMnhOaEJJb2tsQVM3UEJQQlhNSXcyaQpzVGMwL3BneE44R0hvNXBLamxBNkxnOHhUR1owb0VwMU9pU2hjQ0pRU3hrTjY1Q2M1aitTUmo4OFpJZ0xqa0dOCmFONjQwelFNVUM3R2JIbGJpNjFpMkJwb3lCNjRyZGtDQXdFQUFhT0IxekNCMURBT0JnTlZIUThCQWY4RUJBTUMKQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBdwpId1lEVlIwakJCZ3dGb0FVRGlXTVZmT3BHeTZ0N0craGFsL2cxTFBDQngwd2RBWURWUjBSQkcwd2E0SUZjM1JsCmRtV0NDbXQxWW1WeWJtVjBaWE9DRW10MVltVnlibVYwWlhNdVpHVm1ZWFZzZElJV2EzVmlaWEp1WlhSbGN5NWsKWldaaGRXeDBMbk4yWTRJa2EzVmlaWEp1WlhSbGN5NWtaV1poZFd4MExuTjJZeTVqYkhWemRHVnlMbXh2WTJGcwpod1FLQXdBQk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ0doTnQ2MXI5RkhndjFhUjgvK2xVMHNMYVIzNEUyCllVQk4weHg3dlJJMU9iVUx6TTYvMmdja2t1bGgyaERVU1BxUEZvanJqS0NLL2NQRDE1TFFQTzhaQ1BKSG1UMmsKNVVUWGtCODlxbmhDcFRNTU9GbklxVW10dVlnMkh1Z09UazY1WHU2ejArV1ZQeUkzZXNSMXh4N1U5blNjYTJFbgoyc0lsVmdCNnZVbFViSE14UEdOcXNEbXVteWxTWU54UDdUdXBaZ2lyaWhWajVlb3ZaMkNVc3BiYk1xSDhaZnZQCm9ZWXBRV2hiU1V4S0JXNWhPUXFOVVVDaE9nejBudE5IQ2JGL3N5UmZHSC9XUklYQUhYL2FWZ0NvQTg2TkFOSzEKMlpNSlRvVFlQMXNnMGlNL1RkNjJCaE00WFp2SDZ3ZENPb3pTTkx2V3lPUXlYd1J3NG5DdHBsZDkKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
                            "vars.apiserver_key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBc2kwNStOdmI5WGFZMVVXZlQvMitpeUtIZTkwMGNOWmQ3WUJoMHViVTYrTE9LaHJsClYrUTNWVGhmanJMdmVKUVdXY3MrQU4yZ0hld3M4aE9vYjM1NStOcHV0MXhGSWc3MmdXM1pGRUdCcnlvZFJWd0IKWnhFZjdvMmYreTYzZ2o4L2hxZEtOMUZ0ZWVYazFoUHlGUEthbVNndlp1UmdDRytxRnI4VnVGanF6QTBXQklPOQpMRWhsaGJBNERacUpQSGV0NjZGR3NKRUl4M1MrSXRlZ291L3MweldvVGdGRXdTTXBmYkUyRUVpaVNVQkxzOEU4CkZjd2pEYUt4TnpUK21ERTN3WWVqbWtxT1VEb3VEekZNWm5TZ1NuVTZKS0Z3SWxCTEdRM3JrSnptUDVKR1B6eGsKaUF1T1FZMW8zcmpUTkF4UUxzWnNlVnVMcldMWUdtaklIcml0MlFJREFRQUJBb0lCQUR0Y1NmWVkrWDBiMStzbAoyTi9EZjluRzFUQjFEK1dQNVpjY3NIcWRJTTY5cjBYajFBaW1KYkVrcU9GWHgrUjZJY0Frc0RHRnBMU1RYSjRCCjRwblNuenhET2FPby8vZEsyT0ZpQVhKNEtJWjlGMmRtTWFsdTBSNmUzRy9JcnFhYi84UVNzKzBlR2NVRXpHcHUKRnJiWDVKMmwvN1RkM1FpeWV3NDg5eldGbWlRRW9hUU5YTWVlMXAvSjZqNllPWXpiTFNHQUhlL1hpWnloWUkzRQpxZTEvR21IeFRMV3NqdW9oOGg4U0ZpU2FEK2NzKzlxNXNGSWdoN0F1aVBDenZ0ZmxzL2lKaHJZVTBnTG9aQmROCkZwWmpVTUhVWDd1WmdUY2J3M1VUYWlQcW1tMUJ2YXNCVStDdmVJcFRhVk1FMDdMbG5idVBuWGFET09ISW9ldXoKU29BYzVRa0NnWUVBM3NURlpXV3RCQWk4M2R3MXZDTlZIajJaRlZ6UmRTV3pHaTBNVzloVWRLU0wrOTZYWXM4dQpiUUo0dk56cEVGWENDVFRMOU9FTDA5R2FCS1I3SzZEaGJQV3ZEenNjclhSTFI0eEpQeUNtV2NnbVoyZkdYQS9PCllVWGl2L2JGOStvaUlha2dRc3kvVGQ0RDdyM09RcmM0clZaditONkJZaUlJaVMxdjJCejNLbmNDZ1lFQXpNR00Ka3F0NjdIR0dONWxGTUhjVzNDb283MTBjWlpramgyaVEyL0l6b3NFdUZoQ0ZlZGdPdHl0M1FlWDJySUZPYncyLwpuUEN3dDdmR2NHa0dPbm9oaHd3Z29ESHRSZ0F1Z2ZaNTNQajJYR1hIcEJpOWtiVmFtdWdyVi9tOWIrc1JnejV4CmdHdlZwdlhGQ3hiZ3h3am1TMjh5Y2NBNUVmYzBGcnlDM2JrZHJpOENnWUVBaHo2WFNSUU5rbUZycUpaRTJVL3EKSVUzc1hwZlhZblBjNUl0czhXWEpBSGZWdExoUzJGNUlKVTVXMXZLWFhKOTBDZnJQeUgvSW1uU3FPUjlTMkEzNApUaHBxaWFpdHBIRHlNeUhzWmpNQVM0bkVKd3ROMWg2U2dXUFlZZ3NEN1p0cjFWdkVoa21mNnpwYTBOclRHcFg2CkJ1SnZZSHhWdUtwSTNGK0ZnNE15VzhrQ2dZQjR2T1Rjay91UE16NFd5TzF3cjdpdUtMb3NzM1lNUHVvaGJicUYKeCtORTVLNzlXYzZyVTRrUjM3S2FERFdSOFVuRDJKS1Z3NlFoSVdBRlp4akNJTVJtY3ZOR0kwcXJ6VzJmT3kwTwo3VXV3bmwvRDFzYnFCY3VncnFqb1hwNmpRVFQ1ZERmUHAwYThCZzZrQkdDVlhSMFhmRUY5ckFDN0pFNzEzVUU1CjUyK21Cd0tCZ1FDZlQ3K2tsTTk0T1N5UzdzcmlzaDkzQWxkdlBxWlVIbVJDMXdOK2k3bFlRSFRqSWlZQWdMYU8KNGhyb0ZEMjA2RHBzb3F1eEgwMERobkpxZk9DdzJIZVV6UVprRXVwbnZuOENydURzR05DOXNLWjgrbm9rYzh1TgppZUJ5eXV2UjBUQWNYOWNvOG9veFpQakFub2RkMDQrVE5HNXdxOUE4bWFZaFpwZWU4WVlwQ3c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=",
                            "vars.ca_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRS3FxUW9Mb1NPYUdkMUFycEI2b1c3ekFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURreApNekl6TVRKYUZ3MHhPVEEwTURreE16SXpNVEphTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXdDSUQKVDRkOUsxUWtWaU5ITUtNTGxoL2pkNUlLeXdRenc1VFduTGdVM3VRWGt5aTlDY0FjNDM1WHEzMVV0MnNsMW1GbwpkVi9waGVtT2t4Q3RSZU9MOVFrd3JnaWpnU2dQM2k5MlpXalJxVDVlVUwyR21BSVh5aEQ2YUw0WnJaWnpvK3l4Cms2MVFwN2lsbWV0QkZSczlSUHBoSjN5UUtobmYyMGhraDlVRHlvRnMyR3RUVDI2c05LTFEzdHVXU1k5cjhyRUIKNjE4dGpLSzZjYkhmV3QxSXJHMm9oSWZ6SXhTZ0EraXBwak9COERpZG5lcUNhRThHUE5oZnlHMS9qcFRjNGVuQwpqQmhqSGJvVys0UnJSMXVRdmQ0QjdhNUQ3QTBwVjFSc3Fla2pKak11VEtwRGlMcFlobElEK3g0Y2lQZlh1RWR6Cmdnc0ZoN1RpVWRScVEwN0g1UUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVRGlXTVZmT3BHeTZ0N0craGFsL2cxTFBDQngwd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBR29ONHlOdFl0eVZGQXJBVU9mRlg2WjZvaE9nWjZoelRGSFFJSkc5bVlDZ3RmVG5rellvCkF3d1g2QXBpRDdYdVZkZk16aDJzbFdRMTc0YTBvV1pmdUxOcGJFOEJBa2x0bTFYU29nTUM4T3FHN0FDbWFTUGIKWU5xZDA3bzNsVVRqT3pZN2ducWNpbGd0V0s1U3Z4NndBZXNDSitibDl4TUhnN256VTROTnhRcDVkTC9DNTZhMApDc3NWeGVYeFFhc3hFcTlUcG5nbEZhVG5JSVRRc3Ewc0VQV09jUDd0cnVDOTNncm5hRENTVXJySlUrNFpSWE5lClN4cjJTS2p4Z1NkZGFRbWd0MzlQeDNxZFg3ZE1odXdiVDlTUHFWdjZyc0hGbTRXVnl3QUtEUEdYSVQwV3laaFIKNDVyTmdzUmtmdWpsazZ3WTc3VU5hUGY3Qll6UzJvZG93MG89Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
                            "vars.cloud_provider": "",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.etcd_ca_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lSQUs1Uk9iT29pN1RLRDZXSGprV0pXRTB3RFFZSktvWklodmNOQVFFTEJRQXcKSVRFTk1Bc0dBMVVFQ2hNRVpYUmpaREVRTUE0R0ExVUVBeE1IWlhSalpDMWpZVEFlRncweE9EQTBNRGt4TXpJegpNVEJhRncweE9UQTBNRGt4TXpJek1UQmFNQ0V4RFRBTEJnTlZCQW9UQkdWMFkyUXhFREFPQmdOVkJBTVRCMlYwClkyUXRZMkV3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ3RVL3Vzekd4UTExOEkKTVlZdGhUUVViSFVFb0ZZZ2xIaVVhRzd5VUlUYllpZXJtSWpDU3ZOUHR5Z1dPMEZYZGRPRkh2RWRISFRnSDREdwo2YWdyR2ZnM25LR3dSOVNMc21mZzVUR2tDamdtQ0JxSFZ5d0VsdldmQXBlMFJ0UnBoZG85eG9iYk9DbE9nWHRKClBqM1AxeTVMb3hiUlNBamxtazFqeDVjVWk5aS81SHBKNzB6cnZvcVJqM3NnTzNaQWFEbTJVTlI4MHRaTDZmYTYKc0NWSVFNZ3BxT2N3bklzdUxsYUtlcUhWRmdQOVI5ZytIZzdLTWVKOXZDclAyMEJyb3plSVUwbkxNUTdwQm1mZgpjZ29FVk1oTjdsc1JPK0xhbFphWDZDcUdoanFUeWZLMHZiT0c1U2dZZXdITGtJbjZPSEpzQ2lJV0RoOVVVVmN6CmZoeC8zZTluQWdNQkFBR2pRakJBTUE0R0ExVWREd0VCL3dRRUF3SUNwREFQQmdOVkhSTUJBZjhFQlRBREFRSC8KTUIwR0ExVWREZ1FXQkJRY3NIYjVSOUcvb3p4NkQ2RkZNZkxzemdSVFV6QU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBQzJPTWJzQlMwSzZYQXh2VCtJWXIwT0xmU2lLR3dWTjVPMWMzN3g2MzJDVUxnRHJGYmJWUVlpK05ERVkzCjBNa0h0cTZTcktHanhQOEhLeGlWaDFRTUkwYTcwR25CMnZSeUgveXI5S2g3YU1pS3d1TnRVeWk3dmxlUGp6aU0KUHozckRJSTBSa2d0RjM4bXBRSk9rcEM0bGQycWdTUlZOOEsrVHBtWmhaQlVURzR0R3pPOFZjT0dDZXhld3ZrWgozNEwwM0J5eTNONkNjMGJwQjhueE5yMW1pS25ielZ3SEtCbms2YVJLNzZpVDRCM25ZK1ZCTktBVGZRdVZyd2dmCnB4ODlwSEJ5czYremdSb0I4Z0lLczZqWlpIb3BVZEJ4R01aanVQeHNjSnh1VFVMbVFaYkZTV1hTWVBtT1JvWmEKOWNIaURRVkw4eHM1cjJrMjYxc09rUGJtcFE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
                            "vars.etcd_client_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXVENDQWtHZ0F3SUJBZ0lSQUp5TVZmTEFMYjNOWVFHejRoTlBNaXN3RFFZSktvWklodmNOQVFFTEJRQXcKSVRFTk1Bc0dBMVVFQ2hNRVpYUmpaREVRTUE0R0ExVUVBeE1IWlhSalpDMWpZVEFlRncweE9EQTBNRGt4TXpJegpNVFJhRncweE9UQTBNRGt4TXpJek1UUmFNQ1V4RFRBTEJnTlZCQW9UQkdWMFkyUXhGREFTQmdOVkJBTVRDMlYwClkyUXRZMnhwWlc1ME1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBeUNDeUpFWFcKK2xsUFlCdnZ3VCtyZVA3cU5wMTY1SFl3VEZPTVRhYjgvT2pzemY0MlRyejl1UXBVTW9GOS9NUUxQWjgwMVEzagpmM1pqanI0NGJZdTV2THBjcWZKNFRuQTUxLzNGdHVuV2pzaHVMb2o0c0pJVVZtVVl4ZlJzK2JuNVczcHF2bmhCClBBaHZQRE82b05WNDBGVzNwMXpVT0kwcDBGcHkrMXlURGtKb1pzYlNtMDFwWFlIc09hTmM3K3cxUmZXcC9UUTYKZXVBOGYwSGpjb2NBYjRDTGRHM1dNNDBLU1I1Wm5nL3VOYWdjTEpDa2RmYWZJT1pxLzJNejZ2bWlTU0VucDBVZgpVY2ZtUkZLamVWMHptaisvSmt1WTZoTWo3ZG45allhYkZIbUo4aVA3cS9Bc2RlUmN5dFNPYUE3VHNEeTdwVnp4CjkrUlhCL1BNV3BSY09RSURBUUFCbzRHSE1JR0VNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVUKQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JRYwpzSGI1UjlHL296eDZENkZGTWZMc3pnUlRVekFrQmdOVkhSRUVIVEFiZ2dodU1pNXpkR1YyWllJSmJHOWpZV3hvCmIzTjBod1IvQUFBQk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQTZFM3BWc3BINmhVK21wNjhvOWlzUTJxUDUKaUZ2QThRSHdGL2g2ZzF6QlYxSzZTZktqODlTWGVTY2dzNnAycGgvUVQvaDlCdDZvWVVOSFFzYkhpZGs5RWZ4ZApodnVlM3pBdEZFRGo5YTMzK3JQN3hReDh1VWJ1c1RaWHFmbjB6ZW9xdnBHalNQRG9rakdhZjJTSE1odVByUllXCkJIWlZ2ZWtYaUxsbjhUaHMwL3ByMDFNRWtJTGU0UWFTYXN0RU10RTR3THBmZXVlNDNnaXo3M0VRVmZadXZGemIKRnJYb3lKbmJMWm1zNG5FZHZJbEpEbDM5cFhTcnBCTlFtSERnUjR6bmxDbXM5ZHR4K1gvMDhXb2k3OGJ5ZnpBZwo1MSt1ZU9wYzl4Ymw0WThpNENZVWFaWnRxOTlPNlFXdmEyVm5kYTVtVmc1UlEyU0NyeWR1TTJkYnhXSnUKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
                            "vars.etcd_client_key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeUNDeUpFWFcrbGxQWUJ2dndUK3JlUDdxTnAxNjVIWXdURk9NVGFiOC9PanN6ZjQyClRyejl1UXBVTW9GOS9NUUxQWjgwMVEzamYzWmpqcjQ0Yll1NXZMcGNxZko0VG5BNTEvM0Z0dW5XanNodUxvajQKc0pJVVZtVVl4ZlJzK2JuNVczcHF2bmhCUEFodlBETzZvTlY0MEZXM3AxelVPSTBwMEZweSsxeVREa0pvWnNiUwptMDFwWFlIc09hTmM3K3cxUmZXcC9UUTZldUE4ZjBIamNvY0FiNENMZEczV000MEtTUjVabmcvdU5hZ2NMSkNrCmRmYWZJT1pxLzJNejZ2bWlTU0VucDBVZlVjZm1SRktqZVYwem1qKy9Ka3VZNmhNajdkbjlqWWFiRkhtSjhpUDcKcS9Bc2RlUmN5dFNPYUE3VHNEeTdwVnp4OStSWEIvUE1XcFJjT1FJREFRQUJBb0lCQVFEQ3VjMmNMYmgzNzk2awpEWXJENWtmYWUyODVwUkdtcXJsa0N3ZEJwM0lTUkRIbVhheEtBT3AvMmVVREg2eU8vZEpTSzA4azMxYTA5MlQzCngyN3dhRHhadnB2YllPcGVxQ1FnWGZTN2Zkd2ZJamJUWU1OYVMwa3Vwei9ybldGTHZBRTlXV2Z6M043Y292aFoKQTV4Y1Vsb3puTFFPVE96UitjanR5cFNHc0JVR2tTd0hiNm5oMUJ4SElyMTNCVitWdkhsMmFRSnBvcmFDVWhVMAo4eFk1Y0pGdzBqZDFON0xUdXhnaC9sQkhtS1RmOTI3a3ZBMkxEcS9nTXpaTlBwQU9WSlFVcHR3eVVGZkRINzFiClV6YWEyRWZQYUJGT3V1WFhOUU55ZHpubUdreUNEbXpOTEQzSm5aMlZ2NkF0M1NXb2VqTTZFL0JzaEVyc1RHY0wKUURnVVA0QUJBb0dCQU1xbWRmMFhmZnB1dFBkV1d4TjFoK3JOOUNEVmxmbnlCaEZ6dVpPMWI3Nythc1BIV2FBUAo0Mnc1d01sQWJWWVZrQ2UyK1huSmxDNFZTS1BMRWFES0ErbThSUkZhczZYKzlqS1Eyam1HOWtYQVFVSGJvM0o5CjVJUUg5RDdtNkNWdjFYdzFEd0hmUnpPWml0RXlRVnFJaWkxWjB0Z0RwV2pzNW1vbTFPVHp3M0k1QW9HQkFQelEKT3czRzRKK0xScGhhZEh3Yyt4emlUU3FvV2pKaUZkZWtnSFpiUk9HcVBOVWFYK0NwNnVVRVV0d3JQYUptY1lBRgpSSDFvcW9mN0lORzBZU0ZCb3NFbkNmSXAxUW5kbUtFUHJLQ2Q2SUlhS2NlTXRCUThlay8yWE1oa2toM0poK1JqCjdDMFEzSllmRVJsVitlM04rN0RDR25TS0J6ZnFHMzI1MEN4V2NEb0JBb0dBRHo2S2JhbVF2b0FKZVBtMEREaXgKS3NhbmNMamdlVmJ0Z2U2VXJUbmUyQjFIWnNiZVJSNHMyMzFVdFU3MWFwNWdvN3d0OUMxbnlqZXJxVGFqY3RiLwppRnV6VG1UbVVyeGxSTlNFdGdNakQ0Z3c0SVZuUER1Z0x4WnlGekZEa1YxaVQ5K2w2MXdpZlEwMTFoclRzNzNGCnR6ZWtscjlmZUE4cUhoNGhzYjlzbW5FQ2dZRUFrRUQwNFVpUWxSaXdnSEJrdFFrSVZCUGd1aTF6d2ZucndxOFAKeWZrTUZjUEFrRXhMVnZNOW44M1d4ZUE2ZS9iK1huRWpBbmY5ampmQ0kwWk1nZUJrME5mSXVoQWFpbFdTS0p5OApBSzM1cEhydlNmakVMQ1BTR3R4VlZ0Ymo5UEV3aENacjljOEFQdnlkRWhyWDBGUlBnQzFSVVJ3TlFGOXBybFNmCkx4MW5UZ0VDZ1lBL014QjBQVUJGOVZLU1Zkdm9rRVpUbTF1eGh0K3c4L1IwWG81aU9aU0l1TDJYWWszb1dGMjgKWDBCbm9WTVdHRjh1ZzI5cmsyUTg0bng2V1cxWitMakdSVjlZZ05NRDJleXZHaGc0bW9Pc2lqMWhJbDFNcnZxaAprSmtraXVzZnJaaEp0TWs0d0pmWC9LQXNoUmpCU0R2SExyV3U1WjNQSTRPMVJtZTVPQ0hZdGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=",
                            "vars.etcd_servers": "https://n2.steve:2379",
                            "vars.hyperkube_image": "gcr.io/google_containers/hyperkube:v1.10.0",
                            "vars.kube_dns_service_ip": "10.3.0.10",
                            "vars.kubedns_dnsmasq_image": "gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.8",
                            "vars.kubedns_image": "gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.8",
                            "vars.kubedns_sidecar_image": "gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.8",
                            "vars.pod_checkpointer_image": "quay.io/coreos/pod-checkpointer:9dc83e1ab3bc36ca25c9f7c18ddef1b91d4a0558",
                            "vars.pod_cidr": "10.2.0.0/16",
                            "vars.server": "https://steve:443",
                            "vars.service_cidr": "10.3.0.0/16",
                            "vars.serviceaccount_key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdGVrdm9hMXN6S1haNVJnTmtnKzdrWUIwZDVwR1prRHRraFoyMjYvRXY0SVprbWI4CjM1eG9ic1A2aWFlOUxFZHRYUEdsYUpzNVFVMzJjQnRna3VpUUhXWW43NTY4Q09OcFYxUEYvNE1ma2hVVDJWT0YKOWE3UDBiT2Y3R0Z5SzFFeWZ3ZS9xd25xZ3VQTXVsbXpEelRHRFFDdlprL1ltUk1iWWcxMjdXSFN3VXhDdGdZTgpmeWYzcmhRWXZYaGRhMFFsNnRWSzhXYUlvSmVOUy9qVGhGVDNielBlclV6YmFyTnlIeHViRTdPQWVzRko4eWM3Ck9iMUY4U3dHUGtLRHZwUUJxRFlvK3hocDUyRXN1TFIvZjVIUU42RFhObWovRFg2eGNnbGpac0xiZ2ZZRDJLeG4KcWFTM0JNWDNxbjBTOUtnYm51RVhzOTNjOE1OWElaVU1xOUw5MlFJREFRQUJBb0lCQVFDaEl6ZGJLeWxXT28vQwpYTVVnbmlrVG9Vc0o2ekh6UUE1eHVzNThtYjFadXQvMkRKNXhZYllzY0JPTlBuWFhORXBPNjRzUEYzam5QUzFRCmJ4L2o0bmhPWW9CN3hRdGhnRGgrNzZsVFJnNkFNNFdLbkc3c2kzWnhsb0RTUGh1SS9Yc1NoWVdsOTdteFNpSysKNjlndVh4d1V4b2VZeEova01NV3YzS2Q5Yllyb1I2dnhEYlNuQ2VOZkU4algwVnVxdms3U2VkRUdkTnE3VjJGbQpLMGcyZ2crRmNiVWdKdGxSNmVROXZJemtiYm1xajR5Ui8wMWh2R3orM0RobWdnUjhHcHBXbmMxdFpDMHpSVW40CkpIb2dTRHF2dVVta3VkR3Rqa0EwNFVkUFVyUE5kWUVKb2Q1Mlp0TnN5Snl6UkMxd1U3eWdUd2wzelU5bUo4MEQKTys4U3h4S0JBb0dCQU5TNmN4M3FJTW9EV204NlRkOWFEKzhyc2w5UnM2dHhLRDJ0SzJSMnl3bjl1c1hCOHdxNwpOSFZaMDhxQWNLSFVsVUZoWDJabThwb2Y4L0RpWHg5aEJXcEFnSEMzakRsSHBkaEhDYkY3bW9ndmEvSm8wYWdNCkpibFFYWnhkemxXZXpNVmZRMVJuUCtJR2VkeG5vc3NJSWx3Q1dIRVlNc1lLRldVTUxVNzN3Y1RKQW9HQkFOcnAKOVdGM0pTVTBaL3dnYXRIbnVkQmYrczZXdDI2RE9XY2VGbGo1WUVwWGJZOFRQZDVSTVR2WE9HbS9tNE90eUVWVQpSUFRxNE8vdkFZNDVFa0pSTCszelBqS0dFUFRjWWFraHNiV1Jub1J6VDZJSTZNWHZoT2pCRFFyMHR0eFlMb0N3Cno0dGprVGVQNWhFY1EydDZST1R3bmNIRjN1aGZJcnpMdnFvNDZraVJBb0dBQ3hNNTh4REJiRU1JYmtvR3k5NFEKZms4MEZpcFd4Rkk3MmhvdDdDa1RJUTRJcjBzTnNEMVcyZFUzWlkrU1RacVh1ck9yRjlXOFE3SHVMVmhidzNKMQpxYlo1K1dSVTlKWjZWK3c2NFBhaWNQeW5EaFBPOW9UTFlmNkJJU2J4R3h3TlpTazBoQ3hyOHdTTFM2SkpvM0JrCitZMVZ0VzJoRnhablRyOTNqR2p4dWFFQ2dZQVhHdHhZTmlBSWhqaDNadUIvV1FyR2tHckRSU3NGRWZxTUJLUHQKTGh6WW05T25aeXQvZkdoSzNaTkpyZngyOEcrVHlhb2hnMnpNUmhpTzd6MGJITUNIUjhZSHhSaWpEMk9MVzFBTApUdHhCTkg1eUpxaVN3NDN1bHZtT2IzZWhWL2xJZ2VEVjRHTmlUdURFYTR3K0dzQ012VXlaT0E0bnptcTNMSFhxCk4ybWEwUUtCZ0JNeEZXcEdhSDUzT2VNVW1tVHdxZFpOd2pOU1lHQ2hQcFYrUXNQbE53eDdYRlI4bE1CK2g2NGUKMkdkeXJjbmZ1bXhFLzQ1U1NQc016S05xMGh4V1BMS2w1clV2NUt2OWR2dndCUUo2Q3ZVc3RPbnZCcFBia003ZAo3c0R5NktES0t6Rk1kV3FqM3RFR0pnUUxvbnpwQ2craHRlRE5xYnd5NCtrMjQ0UElyMXVNCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
                            "vars.serviceaccount_pub": "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF0ZWt2b2Exc3pLWFo1UmdOa2crNwprWUIwZDVwR1prRHRraFoyMjYvRXY0SVprbWI4MzV4b2JzUDZpYWU5TEVkdFhQR2xhSnM1UVUzMmNCdGdrdWlRCkhXWW43NTY4Q09OcFYxUEYvNE1ma2hVVDJWT0Y5YTdQMGJPZjdHRnlLMUV5ZndlL3F3bnFndVBNdWxtekR6VEcKRFFDdlprL1ltUk1iWWcxMjdXSFN3VXhDdGdZTmZ5ZjNyaFFZdlhoZGEwUWw2dFZLOFdhSW9KZU5TL2pUaEZUMwpielBlclV6YmFyTnlIeHViRTdPQWVzRko4eWM3T2IxRjhTd0dQa0tEdnBRQnFEWW8reGhwNTJFc3VMUi9mNUhRCk42RFhObWovRFg2eGNnbGpac0xiZ2ZZRDJLeG5xYVMzQk1YM3FuMFM5S2dibnVFWHM5M2M4TU5YSVpVTXE5TDkKMlFJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg=="
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "tls_cert_request.apiserver": {
                    "type": "tls_cert_request",
                    "depends_on": [
                        "tls_private_key.apiserver"
                    ],
                    "primary": {
                        "id": "4d21027542a465524d5492e4cad169fb0da6fcbb",
                        "attributes": {
                            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIIC/TCCAeUCAQAwLzEUMBIGA1UEChMLa3ViZS1tYXN0ZXIxFzAVBgNVBAMTDmt1\nYmUtYXBpc2VydmVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsi05\n+Nvb9XaY1UWfT/2+iyKHe900cNZd7YBh0ubU6+LOKhrlV+Q3VThfjrLveJQWWcs+\nAN2gHews8hOob355+Nput1xFIg72gW3ZFEGBryodRVwBZxEf7o2f+y63gj8/hqdK\nN1FteeXk1hPyFPKamSgvZuRgCG+qFr8VuFjqzA0WBIO9LEhlhbA4DZqJPHet66FG\nsJEIx3S+Itegou/s0zWoTgFEwSMpfbE2EEiiSUBLs8E8FcwjDaKxNzT+mDE3wYej\nmkqOUDouDzFMZnSgSnU6JKFwIlBLGQ3rkJzmP5JGPzxkiAuOQY1o3rjTNAxQLsZs\neVuLrWLYGmjIHrit2QIDAQABoIGIMIGFBgkqhkiG9w0BCQ4xeDB2MHQGA1UdEQRt\nMGuCBXN0ZXZlggprdWJlcm5ldGVzghJrdWJlcm5ldGVzLmRlZmF1bHSCFmt1YmVy\nbmV0ZXMuZGVmYXVsdC5zdmOCJGt1YmVybmV0ZXMuZGVmYXVsdC5zdmMuY2x1c3Rl\nci5sb2NhbIcECgMAATANBgkqhkiG9w0BAQsFAAOCAQEAEwh+miYF475poN6la8LM\nuCrZPgW0zsBQ8nzGzYX6xEPoLNhItyxBJneiEEsyUAF46KoBRnaftkdGm2h0fzJB\nRe/SEbwY6vWsKITs13PetcH8zNpcOzKEcc5ci5QqPzYnRXJbJ8vXAKsq2ABVmvSQ\nt9vRjbW2Xbh0Ey222QOKppb/sHZ5w3u421mOAe//5VBJOLlYKWxrGm+UO/coCwgA\nnSdctM4n+j1QvCNP2Cy2jOwVYJok8qY+uqNv7utC6JWreWD/ooQUIY1AnIQ+2F3G\nk/7aabzFV7LBYAjnUOA6dx3EeDJ1sbkd6L1AA3okhj9GPC9LwJTpap6kE0f05Xam\nQw==\n-----END CERTIFICATE REQUEST-----\n",
                            "dns_names.#": "5",
                            "dns_names.0": "steve",
                            "dns_names.1": "kubernetes",
                            "dns_names.2": "kubernetes.default",
                            "dns_names.3": "kubernetes.default.svc",
                            "dns_names.4": "kubernetes.default.svc.cluster.local",
                            "id": "4d21027542a465524d5492e4cad169fb0da6fcbb",
                            "ip_addresses.#": "1",
                            "ip_addresses.0": "10.3.0.1",
                            "key_algorithm": "RSA",
                            "private_key_pem": "5f121f73126207a9cc967242a572394b44e290b8",
                            "subject.#": "1",
                            "subject.0.common_name": "kube-apiserver",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "kube-master",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_cert_request.client": {
                    "type": "tls_cert_request",
                    "depends_on": [
                        "tls_private_key.client"
                    ],
                    "primary": {
                        "id": "54ac2e2a26b55ccb6687a052911f9ac2cb252218",
                        "attributes": {
                            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIICoTCCAYkCAQAwJTENMAsGA1UEChMEZXRjZDEUMBIGA1UEAxMLZXRjZC1jbGll\nbnQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDIILIkRdb6WU9gG+/B\nP6t4/uo2nXrkdjBMU4xNpvz86OzN/jZOvP25ClQygX38xAs9nzTVDeN/dmOOvjht\ni7m8ulyp8nhOcDnX/cW26daOyG4uiPiwkhRWZRjF9Gz5uflbemq+eEE8CG88M7qg\n1XjQVbenXNQ4jSnQWnL7XJMOQmhmxtKbTWldgew5o1zv7DVF9an9NDp64Dx/QeNy\nhwBvgIt0bdYzjQpJHlmeD+41qBwskKR19p8g5mr/YzPq+aJJISenRR9Rx+ZEUqN5\nXTOaP78mS5jqEyPt2f2NhpsUeYnyI/ur8Cx15FzK1I5oDtOwPLulXPH35FcH88xa\nlFw5AgMBAAGgNzA1BgkqhkiG9w0BCQ4xKDAmMCQGA1UdEQQdMBuCCG4yLnN0ZXZl\ngglsb2NhbGhvc3SHBH8AAAEwDQYJKoZIhvcNAQELBQADggEBABHPGNO1WxD2eg2i\ntDTqCetWfQdGmtTXwhn6V/IaDimDtXO8/IebMxv/EJ8RTukvxlzloRqPwMC7C3sm\nvi5uumIyj1M960ButLB0xbSYgTXwtex/C4pQmc9mghbljw4N29+KbXJC/Vm7W+x5\nM0bvzeA0gPtzLRXNgZmkX1ZmTgT4cdZy+ak8pbEyEUntDxSXV8KkjPL6FnTw0pxq\nG4vLinq/G3pPuAIRo+ZV2ebP73L6BwMdxz2LyXBzDzfg+PAn4B9kvWFjVMlkTE2m\nfP11BbbjETxl7l97lyGxlvIHbEWJmaPTtcqfBhG+2u1FZFcBtSkPpDN5oEtJziPO\n4LagWKs=\n-----END CERTIFICATE REQUEST-----\n",
                            "dns_names.#": "2",
                            "dns_names.0": "n2.steve",
                            "dns_names.1": "localhost",
                            "id": "54ac2e2a26b55ccb6687a052911f9ac2cb252218",
                            "ip_addresses.#": "1",
                            "ip_addresses.0": "127.0.0.1",
                            "key_algorithm": "RSA",
                            "private_key_pem": "823869f45f74a067ee673485a8e92d93dfefa1cd",
                            "subject.#": "1",
                            "subject.0.common_name": "etcd-client",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "etcd",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_cert_request.kubelet": {
                    "type": "tls_cert_request",
                    "depends_on": [
                        "tls_private_key.kubelet"
                    ],
                    "primary": {
                        "id": "8ebdb79a199a339a36ec1eed0924a5dbfd5aba13",
                        "attributes": {
                            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIICcDCCAVgCAQAwKzEXMBUGA1UEChMOc3lzdGVtOm1hc3RlcnMxEDAOBgNVBAMT\nB2t1YmVsZXQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCt7ESwy7W5\nH3HN+3G67TvB2dvebxB3Sx+ex5cLDfV7h+NQF25zboIJvJlm+YygRBDD4Z7oqyob\n/L5SgcHo4hzhxEDGAqMg+d6NWc83jRcyMqdJbIt4OyEmsGliMpklfZSzBrO16E2r\nMJHuubsPIS0OBF9PjCpUQU/pJBQ/2TMrnvW4KKeuIRbArM4aizQy1Q/Yj8RwJOfc\nMGOzO9POjukBqGfLUdBmuSz+9jzUna8F742p7MK5xS5Y/lmEMotiTUt5FYgFzhAb\nQ/e8aXfFhA/P+y9kKFCSsXIdRYTF2cFyu8nII7w1UY57Sl5L8acH0F+147qnfiiK\nBiWHU4rj+IslAgMBAAGgADANBgkqhkiG9w0BAQsFAAOCAQEAQVm3wXJi93k8vfkP\nc9Jta8MUcfyEroRQLKYVpL0hwF704SbmsOM7Hdkt418Z0JFsikgzhpdp3R5jYvwL\nChb8nSqYKlxtK3zqzX/j58gb71UhBPUbw67FrrQaiNQS+VdDe6cSEsyaf/wihkA8\n3LaeDnUsJxeegnGzTzOkx2ESGRX5wTuMk8wBsoydmMdn7EWgmInVbTLB/1e6cijT\nW6A1i0uaFJxFWMWoAAHdEyfKJthOlpOoP7pdO77gisdCDZTTiYyq9sC1KGd7Vr3C\nAWyrDhthl1Y3PKTaG4PThRB1VyEZ05xj7IwFJaktsuVE0RvlcgjVs4Y54ApavAi8\nN9BP8g==\n-----END CERTIFICATE REQUEST-----\n",
                            "id": "8ebdb79a199a339a36ec1eed0924a5dbfd5aba13",
                            "key_algorithm": "RSA",
                            "private_key_pem": "2c05c40bd3fdd837f14bc357568abc8c1b8afd20",
                            "subject.#": "1",
                            "subject.0.common_name": "kubelet",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "system:masters",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_cert_request.peer": {
                    "type": "tls_cert_request",
                    "depends_on": [
                        "tls_private_key.peer"
                    ],
                    "primary": {
                        "id": "4ef2704d67ebd57cbd09fe24ed8d88047ad5d307",
                        "attributes": {
                            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIICjjCCAXYCAQAwIzENMAsGA1UEChMEZXRjZDESMBAGA1UEAxMJZXRjZC1wZWVy\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzAx+wfXWchY1LsGGenUu\nZN3ssrV3wcRZ+aT2JiHo6LTNRPOpbYc4Chf9nPwoF7JTsUedV6AuGpdZT1+lliIW\njg/r1ewrOVmsHNu7gwKBzut4mlesZ+I7NwaxFaFM6dcJ5NygwjNjvNjZt2zPqkch\nMxz4D4oCaMnrTP+HuuJ3GgNTo/U9O+c4SkK894qBbplyk2uSCTxg6kQn0GFBxPiZ\nfo0YfWTPHP5JnTC/Q1W0RmbZIrIGDjQuXhWqT6xrhiaXs5xGs/muylqR59xoKnsl\nlo8/vnvF1Q1B26rX0gVfXvc7uX4+dslLJ+hsRX/QmNJoNtcozqSmnIjPELFV9L06\ntwIDAQABoCYwJAYJKoZIhvcNAQkOMRcwFTATBgNVHREEDDAKgghuMi5zdGV2ZTAN\nBgkqhkiG9w0BAQsFAAOCAQEApbWQNw0b0xZr6M0ixFLaX7A6HjnzqKLag1X/wt3M\ntnnJZawDk5EoTdN7Mk9G9fve8e7J4ltlVxBDNMKI3v0gpgT+rZh0cAk2fuDpftW7\nDvWaJuOo+RY4vF6s5bklo3zgPxhIeJ9eGTCVSdqXzgWA1BNBtWNZpwg+Eoz2Yxk2\nW+l+EW6C/fCt+XlW2fXOA/nV4iPFkkcEYnXUNoRibCmwxan2bkAdyBcZYKcu896o\nIgWKwCw26f/tr92l7apBDeYluqyAR/uX4sRXt7wbev1OOz2papKyYziU+Y70acrA\nYBVcWdolMPM8ETYfigfZOZ+iyw1AMNPTLzsG4lp5m7BBcw==\n-----END CERTIFICATE REQUEST-----\n",
                            "dns_names.#": "1",
                            "dns_names.0": "n2.steve",
                            "id": "4ef2704d67ebd57cbd09fe24ed8d88047ad5d307",
                            "key_algorithm": "RSA",
                            "private_key_pem": "c9904b8c51b4f84127e935e78f57e08cb924fb33",
                            "subject.#": "1",
                            "subject.0.common_name": "etcd-peer",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "etcd",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_cert_request.server": {
                    "type": "tls_cert_request",
                    "depends_on": [
                        "tls_private_key.server"
                    ],
                    "primary": {
                        "id": "fb37add202e3490ec7c39084785430bfef7e0295",
                        "attributes": {
                            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIICoTCCAYkCAQAwJTENMAsGA1UEChMEZXRjZDEUMBIGA1UEAxMLZXRjZC1zZXJ2\nZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC1oAxiaZItqOa9oE2p\nm2AtxAbvAyLKpu5GFlrATG2C10/yuD0/422yh7zTjXSrmUpyZjW46sGpozXMjA6t\nRD+DDbU7zNDolrRvQ3uVXM4+82+ce/CyFgVpC9+mpeO3IXTICZfH48a+N/Ou+Gwz\nttaq7k3itZJTrmlhOGK0eknHJQkugU7P2tpn2S1eiOEZn4L1lLev58hKeyow4wqE\nznKwl02D8JJWXVRUkwHqjC4MHCVN3aF7tk6ZKUlx6JbkXgdgHZeKgSVJRnlrsnie\nR2XFglD3NLncpCrcBFen0NXuMXgqR5za3PO6fm47mxvM15Fj73L+kpAXkZ7lbbUs\nIBI9AgMBAAGgNzA1BgkqhkiG9w0BCQ4xKDAmMCQGA1UdEQQdMBuCCG4yLnN0ZXZl\ngglsb2NhbGhvc3SHBH8AAAEwDQYJKoZIhvcNAQELBQADggEBAB790wWwFVwEGnWz\n5ofC3zVuF3RPcLTn5xlU/BPWB31FSdoKdlzcuCpeWPZ89SWnCJC36N2QzVbiiCTH\n8zjGRWaOsWRWhoMgBRD/svQXWf+lOlYk54WAtbKSWZoI821nvjy9YoVKucYicBcd\neUN9cHBJjcm4GJpcymWLmbOpfe8pwRlJ0pUkje8FEchNdxLMt5C0WY6tvfJB0SAL\nPciIogHfZGs6gPdMGD4IJknNr7jCShCFgBrW4LdIw1yVUz3bSWfWw5yP+aeWv0tX\nVTj/UCt3wSmjQpFAWwZ8nNbjgvAvoXGNXYf3DYB1C3smm1HiNhoUl+NM8uEbR4vZ\nLUMbYss=\n-----END CERTIFICATE REQUEST-----\n",
                            "dns_names.#": "2",
                            "dns_names.0": "n2.steve",
                            "dns_names.1": "localhost",
                            "id": "fb37add202e3490ec7c39084785430bfef7e0295",
                            "ip_addresses.#": "1",
                            "ip_addresses.0": "127.0.0.1",
                            "key_algorithm": "RSA",
                            "private_key_pem": "ed0bd2f2d5b8f3e06a04a2328fca527e62e1823f",
                            "subject.#": "1",
                            "subject.0.common_name": "etcd-server",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "etcd",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_locally_signed_cert.apiserver": {
                    "type": "tls_locally_signed_cert",
                    "depends_on": [
                        "tls_cert_request.apiserver",
                        "tls_private_key.kube-ca.*",
                        "tls_self_signed_cert.kube-ca.*"
                    ],
                    "primary": {
                        "id": "128259704869513326996589360012164539346",
                        "attributes": {
                            "allowed_uses.#": "4",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "server_auth",
                            "allowed_uses.3": "client_auth",
                            "ca_cert_pem": "f50b24c920ac6262acf084c5f2bb4975b42cc8cc",
                            "ca_key_algorithm": "RSA",
                            "ca_private_key_pem": "adc37212dd245fe5056440827fe30ea8aa1d8385",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDtjCCAp6gAwIBAgIQYH3rrjAalJCQcM7847Mj0jANBgkqhkiG9w0BAQsFADAl\nMREwDwYDVQQKEwhib290a3ViZTEQMA4GA1UEAxMHa3ViZS1jYTAeFw0xODA0MDkx\nMzIzMTRaFw0xOTA0MDkxMzIzMTRaMC8xFDASBgNVBAoTC2t1YmUtbWFzdGVyMRcw\nFQYDVQQDEw5rdWJlLWFwaXNlcnZlcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC\nAQoCggEBALItOfjb2/V2mNVFn0/9vosih3vdNHDWXe2AYdLm1Ovizioa5VfkN1U4\nX46y73iUFlnLPgDdoB3sLPITqG9+efjabrdcRSIO9oFt2RRBga8qHUVcAWcRH+6N\nn/sut4I/P4anSjdRbXnl5NYT8hTympkoL2bkYAhvqha/FbhY6swNFgSDvSxIZYWw\nOA2aiTx3reuhRrCRCMd0viLXoKLv7NM1qE4BRMEjKX2xNhBIoklAS7PBPBXMIw2i\nsTc0/pgxN8GHo5pKjlA6Lg8xTGZ0oEp1OiShcCJQSxkN65Cc5j+SRj88ZIgLjkGN\naN640zQMUC7GbHlbi61i2BpoyB64rdkCAwEAAaOB1zCB1DAOBgNVHQ8BAf8EBAMC\nBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAw\nHwYDVR0jBBgwFoAUDiWMVfOpGy6t7G+hal/g1LPCBx0wdAYDVR0RBG0wa4IFc3Rl\ndmWCCmt1YmVybmV0ZXOCEmt1YmVybmV0ZXMuZGVmYXVsdIIWa3ViZXJuZXRlcy5k\nZWZhdWx0LnN2Y4Ika3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2Fs\nhwQKAwABMA0GCSqGSIb3DQEBCwUAA4IBAQCGhNt61r9FHgv1aR8/+lU0sLaR34E2\nYUBN0xx7vRI1ObULzM6/2gckkulh2hDUSPqPFojrjKCK/cPD15LQPO8ZCPJHmT2k\n5UTXkB89qnhCpTMMOFnIqUmtuYg2HugOTk65Xu6z0+WVPyI3esR1xx7U9nSca2En\n2sIlVgB6vUlUbHMxPGNqsDmumylSYNxP7TupZgirihVj5eovZ2CUspbbMqH8ZfvP\noYYpQWhbSUxKBW5hOQqNUUChOgz0ntNHCbF/syRfGH/WRIXAHX/aVgCoA86NANK1\n2ZMJToTYP1sg0iM/Td62BhM4XZvH6wdCOozSNLvWyOQyXwRw4nCtpld9\n-----END CERTIFICATE-----\n",
                            "cert_request_pem": "cadd0416e9f705f6d2a3b9dad98b12c252930031",
                            "early_renewal_hours": "0",
                            "id": "128259704869513326996589360012164539346",
                            "validity_end_time": "2019-04-09T13:23:14.403678764Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-09T13:23:14.403678764Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_locally_signed_cert.client": {
                    "type": "tls_locally_signed_cert",
                    "depends_on": [
                        "tls_cert_request.client",
                        "tls_private_key.etcd-ca.*",
                        "tls_self_signed_cert.etcd-ca.*"
                    ],
                    "primary": {
                        "id": "208088232140149810748362678905466729003",
                        "attributes": {
                            "allowed_uses.#": "4",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "server_auth",
                            "allowed_uses.3": "client_auth",
                            "ca_cert_pem": "cf6c3485fc424b9d87572c0611243dd616ac4463",
                            "ca_key_algorithm": "RSA",
                            "ca_private_key_pem": "922b8d83243e4f982b7f4193b7e9d5badb1312d0",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDWTCCAkGgAwIBAgIRAJyMVfLALb3NYQGz4hNPMiswDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDkxMzIz\nMTRaFw0xOTA0MDkxMzIzMTRaMCUxDTALBgNVBAoTBGV0Y2QxFDASBgNVBAMTC2V0\nY2QtY2xpZW50MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyCCyJEXW\n+llPYBvvwT+reP7qNp165HYwTFOMTab8/Ojszf42Trz9uQpUMoF9/MQLPZ801Q3j\nf3Zjjr44bYu5vLpcqfJ4TnA51/3FtunWjshuLoj4sJIUVmUYxfRs+bn5W3pqvnhB\nPAhvPDO6oNV40FW3p1zUOI0p0Fpy+1yTDkJoZsbSm01pXYHsOaNc7+w1RfWp/TQ6\neuA8f0HjcocAb4CLdG3WM40KSR5Zng/uNagcLJCkdfafIOZq/2Mz6vmiSSEnp0Uf\nUcfmRFKjeV0zmj+/JkuY6hMj7dn9jYabFHmJ8iP7q/AsdeRcytSOaA7TsDy7pVzx\n9+RXB/PMWpRcOQIDAQABo4GHMIGEMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAU\nBggrBgEFBQcDAQYIKwYBBQUHAwIwDAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBQc\nsHb5R9G/ozx6D6FFMfLszgRTUzAkBgNVHREEHTAbgghuMi5zdGV2ZYIJbG9jYWxo\nb3N0hwR/AAABMA0GCSqGSIb3DQEBCwUAA4IBAQA6E3pVspH6hU+mp68o9isQ2qP5\niFvA8QHwF/h6g1zBV1K6SfKj89SXeScgs6p2ph/QT/h9Bt6oYUNHQsbHidk9Efxd\nhvue3zAtFEDj9a33+rP7xQx8uUbusTZXqfn0zeoqvpGjSPDokjGaf2SHMhuPrRYW\nBHZVvekXiLln8Ths0/pr01MEkILe4QaSastEMtE4wLpfeue43giz73EQVfZuvFzb\nFrXoyJnbLZms4nEdvIlJDl39pXSrpBNQmHDgR4znlCms9dtx+X/08Woi78byfzAg\n51+ueOpc9xbl4Y8i4CYUaZZtq99O6QWva2Vnda5mVg5RQ2SCryduM2dbxWJu\n-----END CERTIFICATE-----\n",
                            "cert_request_pem": "c862ccdfc4bf4d04cf47a949d6f98fb05c15c5d5",
                            "early_renewal_hours": "0",
                            "id": "208088232140149810748362678905466729003",
                            "validity_end_time": "2019-04-09T13:23:14.323958169Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-09T13:23:14.323958169Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_locally_signed_cert.kubelet": {
                    "type": "tls_locally_signed_cert",
                    "depends_on": [
                        "tls_cert_request.kubelet",
                        "tls_private_key.kube-ca.*",
                        "tls_self_signed_cert.kube-ca.*"
                    ],
                    "primary": {
                        "id": "337757220948963220552827574283326893196",
                        "attributes": {
                            "allowed_uses.#": "4",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "server_auth",
                            "allowed_uses.3": "client_auth",
                            "ca_cert_pem": "f50b24c920ac6262acf084c5f2bb4975b42cc8cc",
                            "ca_key_algorithm": "RSA",
                            "ca_private_key_pem": "adc37212dd245fe5056440827fe30ea8aa1d8385",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDOzCCAiOgAwIBAgIRAP4ZrLEA87VHAyo9OhMSrIwwDQYJKoZIhvcNAQELBQAw\nJTERMA8GA1UEChMIYm9vdGt1YmUxEDAOBgNVBAMTB2t1YmUtY2EwHhcNMTgwNDA5\nMTMyMzE0WhcNMTkwNDA5MTMyMzE0WjArMRcwFQYDVQQKEw5zeXN0ZW06bWFzdGVy\nczEQMA4GA1UEAxMHa3ViZWxldDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC\nggEBAK3sRLDLtbkfcc37cbrtO8HZ295vEHdLH57HlwsN9XuH41AXbnNuggm8mWb5\njKBEEMPhnuirKhv8vlKBwejiHOHEQMYCoyD53o1ZzzeNFzIyp0lsi3g7ISawaWIy\nmSV9lLMGs7XoTaswke65uw8hLQ4EX0+MKlRBT+kkFD/ZMyue9bgop64hFsCszhqL\nNDLVD9iPxHAk59wwY7M7086O6QGoZ8tR0Ga5LP72PNSdrwXvjanswrnFLlj+WYQy\ni2JNS3kViAXOEBtD97xpd8WED8/7L2QoUJKxch1FhMXZwXK7ycgjvDVRjntKXkvx\npwfQX7Xjuqd+KIoGJYdTiuP4iyUCAwEAAaNgMF4wDgYDVR0PAQH/BAQDAgWgMB0G\nA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB8GA1Ud\nIwQYMBaAFA4ljFXzqRsurexvoWpf4NSzwgcdMA0GCSqGSIb3DQEBCwUAA4IBAQAU\nx+x7Re01Z892Isg5Dc2Q7awgeMDEchFiHlOhxFTJRSllQbfYzeHfw75QvMnO3f8N\nThXaN2sS0SFlFV6RR4dBH6u1ecHKiAzoDZI7NzHe5ZuqlBjacjzrC6wLGb3fwy4S\nemeAeiVzTkEoz9lfhBEujNbN+rhJTg8Du2ZOsuaKkW1n2JUNNNBqFP8yfswILJoy\nhSkISAr+2ifQ2oR5iDnmcMpyhFpHvP1vVdPYORTzsqmCSnSm4h1hiDyPgCluBbV7\nTql1KQNawcSDCMSiG9eRUYmLTD5krxcwNtU45EPhUfOFY+DEImhCUafzul0Xenls\nhW/rK24C03TGKZYUVI2P\n-----END CERTIFICATE-----\n",
                            "cert_request_pem": "6b0840129d0db44094b0ae9ed5de0363fb3b329f",
                            "early_renewal_hours": "0",
                            "id": "337757220948963220552827574283326893196",
                            "validity_end_time": "2019-04-09T13:23:14.714902782Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-09T13:23:14.714902782Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_locally_signed_cert.peer": {
                    "type": "tls_locally_signed_cert",
                    "depends_on": [
                        "tls_cert_request.peer",
                        "tls_private_key.etcd-ca.*",
                        "tls_self_signed_cert.etcd-ca.*"
                    ],
                    "primary": {
                        "id": "56399194051230687216964006573764952082",
                        "attributes": {
                            "allowed_uses.#": "4",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "server_auth",
                            "allowed_uses.3": "client_auth",
                            "ca_cert_pem": "cf6c3485fc424b9d87572c0611243dd616ac4463",
                            "ca_key_algorithm": "RSA",
                            "ca_private_key_pem": "922b8d83243e4f982b7f4193b7e9d5badb1312d0",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDQzCCAiugAwIBAgIQKm4W9F4qEwkADfmwGCbAEjANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwOTEzMjMx\nNFoXDTE5MDQwOTEzMjMxNFowIzENMAsGA1UEChMEZXRjZDESMBAGA1UEAxMJZXRj\nZC1wZWVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzAx+wfXWchY1\nLsGGenUuZN3ssrV3wcRZ+aT2JiHo6LTNRPOpbYc4Chf9nPwoF7JTsUedV6AuGpdZ\nT1+lliIWjg/r1ewrOVmsHNu7gwKBzut4mlesZ+I7NwaxFaFM6dcJ5NygwjNjvNjZ\nt2zPqkchMxz4D4oCaMnrTP+HuuJ3GgNTo/U9O+c4SkK894qBbplyk2uSCTxg6kQn\n0GFBxPiZfo0YfWTPHP5JnTC/Q1W0RmbZIrIGDjQuXhWqT6xrhiaXs5xGs/muylqR\n59xoKnsllo8/vnvF1Q1B26rX0gVfXvc7uX4+dslLJ+hsRX/QmNJoNtcozqSmnIjP\nELFV9L06twIDAQABo3UwczAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYB\nBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUHLB2+UfR\nv6M8eg+hRTHy7M4EU1MwEwYDVR0RBAwwCoIIbjIuc3RldmUwDQYJKoZIhvcNAQEL\nBQADggEBAFOYzm8RW3u4y+qdPIgip4jA3HYJ5BZrG/pp51JBOze8kwYTaM2rlnOy\nE9jAZZPJkc5SS4noYUyr6uPADuX/Fk673KaxCUkXqwJySO8E+Asz3zPBEBPiwPet\nBXlaaTygGxYb2nPWDoVD2CLNdgWPNolpVvcy2mUkLjcLfjTE+gOpCg+nyboDjVDt\nDqCSfY5s5K9RZxuAiBY/ekp7gySqeFU0XcrFuTOBrW0cpxUPeIbXl5UAaImiXbda\ngIqeJsQM9pSxV65yc9EpwnNcECvGIyIk9nVUCvLvfZe92iO3SIlFf+zLwx+03L0t\n2zuBs92ngQMp7rMEQWhPMfOwoxbSBTA=\n-----END CERTIFICATE-----\n",
                            "cert_request_pem": "eefddd4cc974ff45c251e6745df080a040d43cf2",
                            "early_renewal_hours": "0",
                            "id": "56399194051230687216964006573764952082",
                            "validity_end_time": "2019-04-09T13:23:14.323953194Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-09T13:23:14.323953194Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_locally_signed_cert.server": {
                    "type": "tls_locally_signed_cert",
                    "depends_on": [
                        "tls_cert_request.server",
                        "tls_private_key.etcd-ca.*",
                        "tls_self_signed_cert.etcd-ca.*"
                    ],
                    "primary": {
                        "id": "47469186609591569820842257681581390405",
                        "attributes": {
                            "allowed_uses.#": "4",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "server_auth",
                            "allowed_uses.3": "client_auth",
                            "ca_cert_pem": "cf6c3485fc424b9d87572c0611243dd616ac4463",
                            "ca_key_algorithm": "RSA",
                            "ca_private_key_pem": "922b8d83243e4f982b7f4193b7e9d5badb1312d0",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDWDCCAkCgAwIBAgIQI7Y7mE2b7waEO8QVNPC6RTANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwOTEzMjMx\nM1oXDTE5MDQwOTEzMjMxM1owJTENMAsGA1UEChMEZXRjZDEUMBIGA1UEAxMLZXRj\nZC1zZXJ2ZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC1oAxiaZIt\nqOa9oE2pm2AtxAbvAyLKpu5GFlrATG2C10/yuD0/422yh7zTjXSrmUpyZjW46sGp\nozXMjA6tRD+DDbU7zNDolrRvQ3uVXM4+82+ce/CyFgVpC9+mpeO3IXTICZfH48a+\nN/Ou+Gwzttaq7k3itZJTrmlhOGK0eknHJQkugU7P2tpn2S1eiOEZn4L1lLev58hK\neyow4wqEznKwl02D8JJWXVRUkwHqjC4MHCVN3aF7tk6ZKUlx6JbkXgdgHZeKgSVJ\nRnlrsnieR2XFglD3NLncpCrcBFen0NXuMXgqR5za3PO6fm47mxvM15Fj73L+kpAX\nkZ7lbbUsIBI9AgMBAAGjgYcwgYQwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQG\nCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFByw\ndvlH0b+jPHoPoUUx8uzOBFNTMCQGA1UdEQQdMBuCCG4yLnN0ZXZlgglsb2NhbGhv\nc3SHBH8AAAEwDQYJKoZIhvcNAQELBQADggEBAFqTWBrMMN270qQVx18kMgJu6Uos\n3AIsQ3A+DZa+qi161VtoQKErmEbCmN9iJhUMjIHDpRiVNg9j3i6U4kOrEWj4PfFb\nQVqxNKBGIJspBVBVcstrymVSa/QCMn4kw8vP+1+5AGZUPXa5eu2yiP88pN+KdNoF\nzSxAki7LfwcU86D1YyKrVZUL2xdCLPHuFF+fPAkbyG90e2q69nr+uQJ3eODK3ylh\noUzaZe3VpE5U4K+RNcGnzqzPw9XfR1LjFrchv/UgH2joCWqEbkGBBomEgwXIRI0O\nxwv/sDWlmVManAVXXxgJMJ3GtETQMTkftfzFTUpbEa7ooJGffr1jYboec4s=\n-----END CERTIFICATE-----\n",
                            "cert_request_pem": "bffbe9804a73063671504ba4f0ff9116a5c44208",
                            "early_renewal_hours": "0",
                            "id": "47469186609591569820842257681581390405",
                            "validity_end_time": "2019-04-09T13:23:13.674775525Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-09T13:23:13.674775525Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.apiserver": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "7fa14a2c669eb8f858aad55751b665640356a005",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "7fa14a2c669eb8f858aad55751b665640356a005",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAsi05+Nvb9XaY1UWfT/2+iyKHe900cNZd7YBh0ubU6+LOKhrl\nV+Q3VThfjrLveJQWWcs+AN2gHews8hOob355+Nput1xFIg72gW3ZFEGBryodRVwB\nZxEf7o2f+y63gj8/hqdKN1FteeXk1hPyFPKamSgvZuRgCG+qFr8VuFjqzA0WBIO9\nLEhlhbA4DZqJPHet66FGsJEIx3S+Itegou/s0zWoTgFEwSMpfbE2EEiiSUBLs8E8\nFcwjDaKxNzT+mDE3wYejmkqOUDouDzFMZnSgSnU6JKFwIlBLGQ3rkJzmP5JGPzxk\niAuOQY1o3rjTNAxQLsZseVuLrWLYGmjIHrit2QIDAQABAoIBADtcSfYY+X0b1+sl\n2N/Df9nG1TB1D+WP5ZccsHqdIM69r0Xj1AimJbEkqOFXx+R6IcAksDGFpLSTXJ4B\n4pnSnzxDOaOo//dK2OFiAXJ4KIZ9F2dmMalu0R6e3G/Irqab/8QSs+0eGcUEzGpu\nFrbX5J2l/7Td3Qiyew489zWFmiQEoaQNXMee1p/J6j6YOYzbLSGAHe/XiZyhYI3E\nqe1/GmHxTLWsjuoh8h8SFiSaD+cs+9q5sFIgh7AuiPCzvtfls/iJhrYU0gLoZBdN\nFpZjUMHUX7uZgTcbw3UTaiPqmm1BvasBU+CveIpTaVME07LlnbuPnXaDOOHIoeuz\nSoAc5QkCgYEA3sTFZWWtBAi83dw1vCNVHj2ZFVzRdSWzGi0MW9hUdKSL+96XYs8u\nbQJ4vNzpEFXCCTTL9OEL09GaBKR7K6DhbPWvDzscrXRLR4xJPyCmWcgmZ2fGXA/O\nYUXiv/bF9+oiIakgQsy/Td4D7r3OQrc4rVZv+N6BYiIIiS1v2Bz3KncCgYEAzMGM\nkqt67HGGN5lFMHcW3Coo710cZZkjh2iQ2/IzosEuFhCFedgOtyt3QeX2rIFObw2/\nnPCwt7fGcGkGOnohhwwgoDHtRgAugfZ53Pj2XGXHpBi9kbVamugrV/m9b+sRgz5x\ngGvVpvXFCxbgxwjmS28yccA5Efc0FryC3bkdri8CgYEAhz6XSRQNkmFrqJZE2U/q\nIU3sXpfXYnPc5Its8WXJAHfVtLhS2F5IJU5W1vKXXJ90CfrPyH/ImnSqOR9S2A34\nThpqiaitpHDyMyHsZjMAS4nEJwtN1h6SgWPYYgsD7Ztr1VvEhkmf6zpa0NrTGpX6\nBuJvYHxVuKpI3F+Fg4MyW8kCgYB4vOTck/uPMz4WyO1wr7iuKLoss3YMPuohbbqF\nx+NE5K79Wc6rU4kR37KaDDWR8UnD2JKVw6QhIWAFZxjCIMRmcvNGI0qrzW2fOy0O\n7Uuwnl/D1sbqBcugrqjoXp6jQTT5dDfPp0a8Bg6kBGCVXR0XfEF9rAC7JE713UE5\n52+mBwKBgQCfT7+klM94OSyS7srish93AldvPqZUHmRC1wN+i7lYQHTjIiYAgLaO\n4hroFD206DpsoquxH00DhnJqfOCw2HeUzQZkEupnvn8CruDsGNC9sKZ8+nokc8uN\nieByyuvR0TAcX9co8ooxZPjAnodd04+TNG5wq9A8maYhZpee8YYpCw==\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCyLTn429v1dpjVRZ9P/b6LIod73TRw1l3tgGHS5tTr4s4qGuVX5DdVOF+Osu94lBZZyz4A3aAd7CzyE6hvfnn42m63XEUiDvaBbdkUQYGvKh1FXAFnER/ujZ/7LreCPz+Gp0o3UW155eTWE/IU8pqZKC9m5GAIb6oWvxW4WOrMDRYEg70sSGWFsDgNmok8d63roUawkQjHdL4i16Ci7+zTNahOAUTBIyl9sTYQSKJJQEuzwTwVzCMNorE3NP6YMTfBh6OaSo5QOi4PMUxmdKBKdTokoXAiUEsZDeuQnOY/kkY/PGSIC45BjWjeuNM0DFAuxmx5W4utYtgaaMgeuK3Z\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsi05+Nvb9XaY1UWfT/2+\niyKHe900cNZd7YBh0ubU6+LOKhrlV+Q3VThfjrLveJQWWcs+AN2gHews8hOob355\n+Nput1xFIg72gW3ZFEGBryodRVwBZxEf7o2f+y63gj8/hqdKN1FteeXk1hPyFPKa\nmSgvZuRgCG+qFr8VuFjqzA0WBIO9LEhlhbA4DZqJPHet66FGsJEIx3S+Itegou/s\n0zWoTgFEwSMpfbE2EEiiSUBLs8E8FcwjDaKxNzT+mDE3wYejmkqOUDouDzFMZnSg\nSnU6JKFwIlBLGQ3rkJzmP5JGPzxkiAuOQY1o3rjTNAxQLsZseVuLrWLYGmjIHrit\n2QIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.client": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "499575290ea8a0e520c1a22cfc347540e6769462",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "499575290ea8a0e520c1a22cfc347540e6769462",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAyCCyJEXW+llPYBvvwT+reP7qNp165HYwTFOMTab8/Ojszf42\nTrz9uQpUMoF9/MQLPZ801Q3jf3Zjjr44bYu5vLpcqfJ4TnA51/3FtunWjshuLoj4\nsJIUVmUYxfRs+bn5W3pqvnhBPAhvPDO6oNV40FW3p1zUOI0p0Fpy+1yTDkJoZsbS\nm01pXYHsOaNc7+w1RfWp/TQ6euA8f0HjcocAb4CLdG3WM40KSR5Zng/uNagcLJCk\ndfafIOZq/2Mz6vmiSSEnp0UfUcfmRFKjeV0zmj+/JkuY6hMj7dn9jYabFHmJ8iP7\nq/AsdeRcytSOaA7TsDy7pVzx9+RXB/PMWpRcOQIDAQABAoIBAQDCuc2cLbh3796k\nDYrD5kfae285pRGmqrlkCwdBp3ISRDHmXaxKAOp/2eUDH6yO/dJSK08k31a092T3\nx27waDxZvpvbYOpeqCQgXfS7fdwfIjbTYMNaS0kupz/rnWFLvAE9WWfz3N7covhZ\nA5xcUloznLQOTOzR+cjtypSGsBUGkSwHb6nh1BxHIr13BV+VvHl2aQJporaCUhU0\n8xY5cJFw0jd1N7LTuxgh/lBHmKTf927kvA2LDq/gMzZNPpAOVJQUptwyUFfDH71b\nUzaa2EfPaBFOuuXXNQNydznmGkyCDmzNLD3JnZ2Vv6At3SWoejM6E/BshErsTGcL\nQDgUP4ABAoGBAMqmdf0XffputPdWWxN1h+rN9CDVlfnyBhFzuZO1b77+asPHWaAP\n42w5wMlAbVYVkCe2+XnJlC4VSKPLEaDKA+m8RRFas6X+9jKQ2jmG9kXAQUHbo3J9\n5IQH9D7m6CVv1Xw1DwHfRzOZitEyQVqIii1Z0tgDpWjs5mom1OTzw3I5AoGBAPzQ\nOw3G4J+LRphadHwc+xziTSqoWjJiFdekgHZbROGqPNUaX+Cp6uUEUtwrPaJmcYAF\nRH1oqof7ING0YSFBosEnCfIp1QndmKEPrKCd6IIaKceMtBQ8ek/2XMhkkh3Jh+Rj\n7C0Q3JYfERlV+e3N+7DCGnSKBzfqG3250CxWcDoBAoGADz6KbamQvoAJePm0DDix\nKsancLjgeVbtge6UrTne2B1HZsbeRR4s231UtU71ap5go7wt9C1nyjerqTajctb/\niFuzTmTmUrxlRNSEtgMjD4gw4IVnPDugLxZyFzFDkV1iT9+l61wifQ011hrTs73F\ntzeklr9feA8qHh4hsb9smnECgYEAkED04UiQlRiwgHBktQkIVBPgui1zwfnrwq8P\nyfkMFcPAkExLVvM9n83WxeA6e/b+XnEjAnf9jjfCI0ZMgeBk0NfIuhAailWSKJy8\nAK35pHrvSfjELCPSGtxVVtbj9PEwhCZr9c8APvydEhrX0FRPgC1RURwNQF9prlSf\nLx1nTgECgYA/MxB0PUBF9VKSVdvokEZTm1uxht+w8/R0Xo5iOZSIuL2XYk3oWF28\nX0BnoVMWGF8ug29rk2Q84nx6WW1Z+LjGRV9YgNMD2eyvGhg4moOsij1hIl1Mrvqh\nkJkkiusfrZhJtMk4wJfX/KAshRjBSDvHLrWu5Z3PI4O1Rme5OCHYtg==\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDIILIkRdb6WU9gG+/BP6t4/uo2nXrkdjBMU4xNpvz86OzN/jZOvP25ClQygX38xAs9nzTVDeN/dmOOvjhti7m8ulyp8nhOcDnX/cW26daOyG4uiPiwkhRWZRjF9Gz5uflbemq+eEE8CG88M7qg1XjQVbenXNQ4jSnQWnL7XJMOQmhmxtKbTWldgew5o1zv7DVF9an9NDp64Dx/QeNyhwBvgIt0bdYzjQpJHlmeD+41qBwskKR19p8g5mr/YzPq+aJJISenRR9Rx+ZEUqN5XTOaP78mS5jqEyPt2f2NhpsUeYnyI/ur8Cx15FzK1I5oDtOwPLulXPH35FcH88xalFw5\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyCCyJEXW+llPYBvvwT+r\neP7qNp165HYwTFOMTab8/Ojszf42Trz9uQpUMoF9/MQLPZ801Q3jf3Zjjr44bYu5\nvLpcqfJ4TnA51/3FtunWjshuLoj4sJIUVmUYxfRs+bn5W3pqvnhBPAhvPDO6oNV4\n0FW3p1zUOI0p0Fpy+1yTDkJoZsbSm01pXYHsOaNc7+w1RfWp/TQ6euA8f0HjcocA\nb4CLdG3WM40KSR5Zng/uNagcLJCkdfafIOZq/2Mz6vmiSSEnp0UfUcfmRFKjeV0z\nmj+/JkuY6hMj7dn9jYabFHmJ8iP7q/AsdeRcytSOaA7TsDy7pVzx9+RXB/PMWpRc\nOQIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.etcd-ca": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "846d51a037bbfb3586c2d51acbbf1dfbb846ca72",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "846d51a037bbfb3586c2d51acbbf1dfbb846ca72",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEArVP7rMxsUNdfCDGGLYU0FGx1BKBWIJR4lGhu8lCE22Inq5iI\nwkrzT7coFjtBV3XThR7xHRx04B+A8OmoKxn4N5yhsEfUi7Jn4OUxpAo4Jggah1cs\nBJb1nwKXtEbUaYXaPcaG2zgpToF7ST49z9cuS6MW0UgI5ZpNY8eXFIvYv+R6Se9M\n676KkY97IDt2QGg5tlDUfNLWS+n2urAlSEDIKajnMJyLLi5Winqh1RYD/UfYPh4O\nyjHifbwqz9tAa6M3iFNJyzEO6QZn33IKBFTITe5bETvi2pWWl+gqhoY6k8nytL2z\nhuUoGHsBy5CJ+jhybAoiFg4fVFFXM34cf93vZwIDAQABAoIBADRnHcIik+TlGIA7\nqNt+WD6Mg9yANUnoWYRVBqYQHfrN9Dx3A3HqgyFouJ/wDlNI9khbEH7CqbtRCwTL\nP+K4GUmG+4N2VBZgO/PMl3OG+27UKGEew9onYd9PQ1pnx7SXmWHv8bm5gxOPJh0A\nymNaJU8M4csoQjhYrGksYMr/dOqew2tyqa02pJS2Hl1mQ7YXNhUBV7hRVEdGQk/0\nWJ+9wqg8acFVyrm6gvsc6Uww542qtu7F2YZVv7TJPNtGoy+3kTu8c+bh+sljT2p7\nAZ/hcx/qi4U15RpPbNNtMXVXXv39t2aIQmY8gqIjOuOCi8eKJ05hpz243Rr2+vqK\nwX3qDcECgYEAwogyZHBbD3fWE1RzbXUq/xhzm8H56LfdncLdRB0Di1B9qe99r6lD\n5vE6DTe6gFBjSMt3xNT3SGGcRFWdzFgE+Hd1fojxcy8ERMOajwWyeRAYbq7hyyxo\nHgrwOAaBg10YgKBiXYJ0qth/x8mwy1qtcalg62/NGJ+QlQqxZDXFrVcCgYEA5BiW\nDjx9OHDZR0uNuWhp9NG1Dm8EsZ74xBLK4y7t7bmue3sp6pceAQhkkh6o6M6VypO9\nq6hjoskJKlp2h1lTWU2EhTbau2Ofd+tcHg+5913oYXGoLYnkGHciG3M3fNKhWt8n\n7XYFjQEP3BgUAL9acCatLALj4xMRqkoCByvXdHECgYAPbpyIyT0AEiKib+2kPkpF\n6FurfIzlwEhNbpr8/0w7rgv6Aiy3Vbc0R+iyCby61yW5LaL3s2lWjZ/G7//PqR/j\n0h45BoYY/B7bkaTeObZ50iQOC8OPyZsM3xNFboaxtB3wfkivYFz+/KPOZpqm1y+x\nN52fr8PWczoWCL4f1AA1iwKBgQDAuJlIjAlNP+QFniuv5S3pQaqV+G1h2izcFfjA\nvS0g+AsZn/XJlUcvnjTDVQ5oLexYDj5qpEsTBoMs+uQ89dc7lAiNOczUGZdqjjz1\n1VnOTNUESDDN0T0dAsOZp97RI3JbwkMNGvQTsDsDPoDgJM24BqW4kvSTLtB1LjTK\ndFuFsQKBgQCB8Fs7I/5TYqrn3f6BaQZA1eDTjrwPQGmxAnomC9rm9jamuphdvHcq\nb0Jf5RgTasrcBr33SUYfELQFPU4+xYrOKKTYnPnZt0/ef5Lri6spvqh7fS55oncS\nF45i8MSYAWWkL0xhpqJSDOTnYHwV+B6hyyx1Cl/Ff/sLs6ZTMowLgg==\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCtU/uszGxQ118IMYYthTQUbHUEoFYglHiUaG7yUITbYiermIjCSvNPtygWO0FXddOFHvEdHHTgH4Dw6agrGfg3nKGwR9SLsmfg5TGkCjgmCBqHVywElvWfApe0RtRphdo9xobbOClOgXtJPj3P1y5LoxbRSAjlmk1jx5cUi9i/5HpJ70zrvoqRj3sgO3ZAaDm2UNR80tZL6fa6sCVIQMgpqOcwnIsuLlaKeqHVFgP9R9g+Hg7KMeJ9vCrP20BrozeIU0nLMQ7pBmffcgoEVMhN7lsRO+LalZaX6CqGhjqTyfK0vbOG5SgYewHLkIn6OHJsCiIWDh9UUVczfhx/3e9n\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArVP7rMxsUNdfCDGGLYU0\nFGx1BKBWIJR4lGhu8lCE22Inq5iIwkrzT7coFjtBV3XThR7xHRx04B+A8OmoKxn4\nN5yhsEfUi7Jn4OUxpAo4Jggah1csBJb1nwKXtEbUaYXaPcaG2zgpToF7ST49z9cu\nS6MW0UgI5ZpNY8eXFIvYv+R6Se9M676KkY97IDt2QGg5tlDUfNLWS+n2urAlSEDI\nKajnMJyLLi5Winqh1RYD/UfYPh4OyjHifbwqz9tAa6M3iFNJyzEO6QZn33IKBFTI\nTe5bETvi2pWWl+gqhoY6k8nytL2zhuUoGHsBy5CJ+jhybAoiFg4fVFFXM34cf93v\nZwIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.kube-ca": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "93b9895204fedd0f62e377b1654f9f6bd1ca96db",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "93b9895204fedd0f62e377b1654f9f6bd1ca96db",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAwCIDT4d9K1QkViNHMKMLlh/jd5IKywQzw5TWnLgU3uQXkyi9\nCcAc435Xq31Ut2sl1mFodV/phemOkxCtReOL9QkwrgijgSgP3i92ZWjRqT5eUL2G\nmAIXyhD6aL4ZrZZzo+yxk61Qp7ilmetBFRs9RPphJ3yQKhnf20hkh9UDyoFs2GtT\nT26sNKLQ3tuWSY9r8rEB618tjKK6cbHfWt1IrG2ohIfzIxSgA+ippjOB8DidneqC\naE8GPNhfyG1/jpTc4enCjBhjHboW+4RrR1uQvd4B7a5D7A0pV1RsqekjJjMuTKpD\niLpYhlID+x4ciPfXuEdzggsFh7TiUdRqQ07H5QIDAQABAoIBAHJNieSteWTmmPt5\n32drCICWlg/TnYIsDNOlX4w644e68N+Gk/gSB927k1KdrGG2Z/tDVg7GMbqOOVj6\nyerTNbdgcUqILyWufMo1OF2aX2kthpTIPCOA00BOm3rm5YXlBQUX0olFyb8OVc7d\nK4nv+6JmxpfkPiwd2pStW8mHi8rT7n8/LF3/rM1zzCr9igahvyk32LKfpHLfmg7P\nAIUfLluhodg70VOlnIjiISOu+H82vMsUbrDmmRmthiWsfiuKitckZgfl7i2nL2uI\nH0867IjX/FMIPo/V9BUh1R8aXAwhAGIKoDbqEqPdyn04p/97IApqwwTDr2fIYoeO\nXmbbUv0CgYEA0rKLiNB76Aw1ok+ViPu0O3sENL4+EOL3U1sAtAHXQh4UCHKIrSUg\nxGPJmr57hcUnz4qfWFYN6HKJtYH6tEhurfeTduBJxCv3m2tdDIgf1VbfjfmrVzHK\nzTjjzh9t7n07U3g3WaSD4n42xK5w/1VEQXp0c/nqLQiC2lygNwpvCMMCgYEA6XGd\nWJhbt79XTM923qbirrRqpmhl4h+38AMqHl20/6MDYoj5dyXz6MRrjStwcPL272EL\n0UjGsbMgGA6AlWTBRMMrazSYjLuvyfZjgjvSHsXjZm1cEsbZbgscPRHcjTLfYv6O\naQE5zlnIuVjvFK2u2XJx7/eMRSkLgADpY0vuIjcCgYEAybO5FpGXfK5rjeWoHonv\noV2DykYxPpM49+hPhQOaIaaPwQJ8S10WwEtTDbu6nnX+RZXMM5G2IMe9gzBaY8pP\ngmVXG19d3tnEYVnnqv6Jkv9mZhEUcRWussX6dzHpWH00lRSp0DxJMUNohOMGM7lZ\n7WEgKIKgJtpWAlrX2bk4UGcCgYBsmFzA9QddoBYldjFu/CVhbi5awR/8JBM2BNLY\nE3F6pkOR1/Rs1+vyMUVzA20oLe5vhy6vKfK8gX6BkmWAmcFKkpwlH++DMGBjTEoY\nMGnbxOS3JlJ5raVCCssVIbT+vlaqv45SDK7ublfw2Q1HClDXeOTF49uN5L0jy8jG\nV3Es2wKBgD4KMV2oNrHmuGHkYBj0419DX0SJPjMSZS6Qfl+37QLBQkcqOcul9rKL\nILdPgJV+//VaMSm0YNVwgq8mu+xPMs5RTr1whT/dNXwAAQMcLAg1n2Gfu2e9KNPn\n9sFio5ZVFcSTFFFZT9SlwupXE2ae7LjNCz8de/1eYSemSPZ6ITlM\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAIgNPh30rVCRWI0cwowuWH+N3kgrLBDPDlNacuBTe5BeTKL0JwBzjflerfVS3ayXWYWh1X+mF6Y6TEK1F44v1CTCuCKOBKA/eL3ZlaNGpPl5QvYaYAhfKEPpovhmtlnOj7LGTrVCnuKWZ60EVGz1E+mEnfJAqGd/bSGSH1QPKgWzYa1NPbqw0otDe25ZJj2vysQHrXy2Morpxsd9a3UisbaiEh/MjFKAD6KmmM4HwOJ2d6oJoTwY82F/IbX+OlNzh6cKMGGMduhb7hGtHW5C93gHtrkPsDSlXVGyp6SMmMy5MqkOIuliGUgP7HhyI99e4R3OCCwWHtOJR1GpDTsfl\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwCIDT4d9K1QkViNHMKML\nlh/jd5IKywQzw5TWnLgU3uQXkyi9CcAc435Xq31Ut2sl1mFodV/phemOkxCtReOL\n9QkwrgijgSgP3i92ZWjRqT5eUL2GmAIXyhD6aL4ZrZZzo+yxk61Qp7ilmetBFRs9\nRPphJ3yQKhnf20hkh9UDyoFs2GtTT26sNKLQ3tuWSY9r8rEB618tjKK6cbHfWt1I\nrG2ohIfzIxSgA+ippjOB8DidneqCaE8GPNhfyG1/jpTc4enCjBhjHboW+4RrR1uQ\nvd4B7a5D7A0pV1RsqekjJjMuTKpDiLpYhlID+x4ciPfXuEdzggsFh7TiUdRqQ07H\n5QIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.kubelet": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "a736c3244ebc60fc096209af58ab464c5abb63cf",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "a736c3244ebc60fc096209af58ab464c5abb63cf",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEArexEsMu1uR9xzftxuu07wdnb3m8Qd0sfnseXCw31e4fjUBdu\nc26CCbyZZvmMoEQQw+Ge6KsqG/y+UoHB6OIc4cRAxgKjIPnejVnPN40XMjKnSWyL\neDshJrBpYjKZJX2UswaztehNqzCR7rm7DyEtDgRfT4wqVEFP6SQUP9kzK571uCin\nriEWwKzOGos0MtUP2I/EcCTn3DBjszvTzo7pAahny1HQZrks/vY81J2vBe+NqezC\nucUuWP5ZhDKLYk1LeRWIBc4QG0P3vGl3xYQPz/svZChQkrFyHUWExdnBcrvJyCO8\nNVGOe0peS/GnB9BfteO6p34oigYlh1OK4/iLJQIDAQABAoIBADp1+ZznzHyeejV/\nuHnZtkVxwnshIArJQKaxdi7sEUDlq13HkoPQeHtnXrUDWuagGnaNR0n0BuKDcUHw\nhcqO/qBQxGkKh+TUuJ8Quht1HH/uENcYWkUeswT7NWEhmuLENJB8xzl1DW5mlBcH\nbT4nq6pTg+oMNko97etzCi9wBcg6R265MRks3m/+aislcMCoea1APClahWHwFlwM\nxPkoWXDHt08TMqKH1HSFYfWswUep0Bvv+qqZbllTaCbgtJQPowJyb9GkvK4hlv3/\naEm5xSXL3YWwGMw+3JehwetVgDj6dqGmXbb88zD5i9tzI4E/5EcT3XLzUwvYpZ/l\n3YvypJ0CgYEAyxZubGNLCrsk6nQXXU0Y7URt3EwdM/2P1Nha/BvycBrZrHSdepxj\n9+ew08hi9UKBneWEuslgZhtcpQaoKo8FxDX1zOZZKgcHPvLJEbeKJEB7NbIxDGgj\nekxdKCwHDsiAxyn5chpWEgpW7HNwCMnvheHh252nzrVsUOqROJnXxmsCgYEA2zyb\nAgf7Co8XQZaVK3ZtBtem2MVYct4oKRl6t3BDTwSRNX1rfHTspDIVMGT+h3ZwXjdu\nMdxtdrXXs9YYNTDlY0hQOPRh8OlRSiX/YsCvGvfDhlmRq2Ff/z9ubWRoZ8X8NvIy\nbnydWoI2FOyEjwxqH8mGAg4GBT0otK7Y61FRuK8CgYB7U7Xe0DVj4N28Gp+NoyH+\nA84LN5WMWvCbOn+WFYqWFVgWaAKx0ILMqsAw+8FMWwTHU/fUTjHiD7+k33QD1DKW\nQoZv1XpUEUyPJ3R+88xJ03Z+1yT9+ceBnxn7KTFoAs5hI9Y9Ok0GS40ZrchdLfPs\ng41ahlS/LGEIikmB67qi3QKBgQCp3v/MRxrBR7YhX+gdURmRX68r711lQ7WigteP\nIzFEHKnW5GNQf9iMMTIx2U9O7vqKRjDf+Yfnn2aPNah0LnrOvs1KFDF/VYljBqYn\ngl0rbCbYBrbUMBMN17xcjpxHLCUM/gUNjwjthE8bT1g27sub7a4kEXGgxY6w0XnK\ne6vyiQKBgAF6o4ydJw1dVKJM/GzIAkkuNlSLYm7CGLzFVQWIbiMO7Sbd7DFFQKee\n6bQT0983jboZg1zuBOIQCpWSToIifX/kXIhPN5hESCwgRyUXIp3/6iVyzcF6FICN\npv+Qc1Q9pNla8u9s4j+vB+1xLh7vTp0hcjmxCT8VEZD7KJtLmwNG\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCt7ESwy7W5H3HN+3G67TvB2dvebxB3Sx+ex5cLDfV7h+NQF25zboIJvJlm+YygRBDD4Z7oqyob/L5SgcHo4hzhxEDGAqMg+d6NWc83jRcyMqdJbIt4OyEmsGliMpklfZSzBrO16E2rMJHuubsPIS0OBF9PjCpUQU/pJBQ/2TMrnvW4KKeuIRbArM4aizQy1Q/Yj8RwJOfcMGOzO9POjukBqGfLUdBmuSz+9jzUna8F742p7MK5xS5Y/lmEMotiTUt5FYgFzhAbQ/e8aXfFhA/P+y9kKFCSsXIdRYTF2cFyu8nII7w1UY57Sl5L8acH0F+147qnfiiKBiWHU4rj+Isl\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArexEsMu1uR9xzftxuu07\nwdnb3m8Qd0sfnseXCw31e4fjUBduc26CCbyZZvmMoEQQw+Ge6KsqG/y+UoHB6OIc\n4cRAxgKjIPnejVnPN40XMjKnSWyLeDshJrBpYjKZJX2UswaztehNqzCR7rm7DyEt\nDgRfT4wqVEFP6SQUP9kzK571uCinriEWwKzOGos0MtUP2I/EcCTn3DBjszvTzo7p\nAahny1HQZrks/vY81J2vBe+NqezCucUuWP5ZhDKLYk1LeRWIBc4QG0P3vGl3xYQP\nz/svZChQkrFyHUWExdnBcrvJyCO8NVGOe0peS/GnB9BfteO6p34oigYlh1OK4/iL\nJQIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.peer": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "dd554240774ad16760068f305ef88a3324cdfc6e",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "dd554240774ad16760068f305ef88a3324cdfc6e",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAzAx+wfXWchY1LsGGenUuZN3ssrV3wcRZ+aT2JiHo6LTNRPOp\nbYc4Chf9nPwoF7JTsUedV6AuGpdZT1+lliIWjg/r1ewrOVmsHNu7gwKBzut4mles\nZ+I7NwaxFaFM6dcJ5NygwjNjvNjZt2zPqkchMxz4D4oCaMnrTP+HuuJ3GgNTo/U9\nO+c4SkK894qBbplyk2uSCTxg6kQn0GFBxPiZfo0YfWTPHP5JnTC/Q1W0RmbZIrIG\nDjQuXhWqT6xrhiaXs5xGs/muylqR59xoKnsllo8/vnvF1Q1B26rX0gVfXvc7uX4+\ndslLJ+hsRX/QmNJoNtcozqSmnIjPELFV9L06twIDAQABAoIBAB0cc0Es16lzLac8\nCPmTmkjduJVOeoV0g/mv5UZPdDEvClIaCUQNFJusDIzHFNk8oeAa/YGw4qL8kMtY\nNAGVX25pKxZcGVaXSozbdIceZnKk+ZHbjEdN6XDSTZVua9C40zqJl43dUw9wSK94\noLAEceIe8e0VnX5hwGY91pl9EczuB1tl//eRBqHngnSuOLVbovq4Up4B6JxjvIxY\nGTcw4co1b3jLHm4v33Uisf0u6DaMM93Jwy7nZEcuy4LXSmxR6pJSl28FFvRZLQr+\npcdf8WyevahYWMnkfpi03oFv+UGxtliTzm/1R0hZSsDZFmC7BG2AhSG5sAFoiUu9\nyDIpvyECgYEA4yIedBG96EGP3T1eUVm4+A3mn6lsAb1OLIbTJhWpNN/4iwUh0raQ\njpTDVaiKodfN9sHHnxgk1aty/nqA5HK0rbEp/rmcbpKjpvWTABlSOJdLRp5+oAkQ\nGPyFdBb1ZvvLV78FvLbpgUCAwbXte+Hop10fXVUGvcY0/7r1qvkaNZ8CgYEA5ftQ\nGFvNCaSKO42wgM7wkZDDnBCCDIkcgaoiBnUnLD4BiFDtoylPEzj+qIbIE6bS3PUo\nzR+3UNn6YHBkDzfnyV3O1MZiIAjWQbw/a0wWq0U+U0isyN0X7HBv8EoirdBx0TAh\nd2gMRinB7yuj4Ab84yucq+1NCY2lmeHVL/60c+kCgYEAwdPg9x4Y2PXyBlQThAq0\nLYL3VzMmh4l8B8V6tRpxDj0/hat4hK/lRreuxg+RVrGqAzS03JCnBmxMMtxp2AoH\nI953Pvg4hae/3n/c1Y3GO6LoyzgASSPSx+/fFwVsoFip25SZGcViGTnpZuWQ51IO\nz5xJYsVnflWB7uYmNaRkeHMCgYAazoNUg4bPw+0U6fwT14s0/HHAhDAUc/rtpj4X\nEJrDTmrxT7WTWiJMdE1CqYsytzRG6xCZcEP22aGUkiUnnPWYhCWyqXkQkNcgjGe8\nAv91cTnFjWgOda7vMV/q20lVh0FtB7Yu6+LaXs2rKiQM3eOmOxQk+iELpwYRfMBT\nutWf2QKBgB8cGwa0CIMtg1CCJ+hg47+lis1G6nRY3gzQxiwNuj8wuQJMImQvZzYo\naJBnQOpkHygqB9a4xYky6Xjlo+OmDl23NZC+55GK3pafQVj5Ly6eAevcuOjnPTS3\nzPUgNlJC8vvtifRTkH1DywYaUOyGSCSRG6kMcM0rPFP1FsjtLpzY\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMDH7B9dZyFjUuwYZ6dS5k3eyytXfBxFn5pPYmIejotM1E86lthzgKF/2c/CgXslOxR51XoC4al1lPX6WWIhaOD+vV7Cs5Wawc27uDAoHO63iaV6xn4js3BrEVoUzp1wnk3KDCM2O82Nm3bM+qRyEzHPgPigJoyetM/4e64ncaA1Oj9T075zhKQrz3ioFumXKTa5IJPGDqRCfQYUHE+Jl+jRh9ZM8c/kmdML9DVbRGZtkisgYONC5eFapPrGuGJpeznEaz+a7KWpHn3GgqeyWWjz++e8XVDUHbqtfSBV9e9zu5fj52yUsn6GxFf9CY0mg21yjOpKaciM8QsVX0vTq3\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzAx+wfXWchY1LsGGenUu\nZN3ssrV3wcRZ+aT2JiHo6LTNRPOpbYc4Chf9nPwoF7JTsUedV6AuGpdZT1+lliIW\njg/r1ewrOVmsHNu7gwKBzut4mlesZ+I7NwaxFaFM6dcJ5NygwjNjvNjZt2zPqkch\nMxz4D4oCaMnrTP+HuuJ3GgNTo/U9O+c4SkK894qBbplyk2uSCTxg6kQn0GFBxPiZ\nfo0YfWTPHP5JnTC/Q1W0RmbZIrIGDjQuXhWqT6xrhiaXs5xGs/muylqR59xoKnsl\nlo8/vnvF1Q1B26rX0gVfXvc7uX4+dslLJ+hsRX/QmNJoNtcozqSmnIjPELFV9L06\ntwIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.server": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "a3dca51659f0c2167d123f3010390262553d1763",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "a3dca51659f0c2167d123f3010390262553d1763",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAtaAMYmmSLajmvaBNqZtgLcQG7wMiyqbuRhZawExtgtdP8rg9\nP+Ntsoe80410q5lKcmY1uOrBqaM1zIwOrUQ/gw21O8zQ6Ja0b0N7lVzOPvNvnHvw\nshYFaQvfpqXjtyF0yAmXx+PGvjfzrvhsM7bWqu5N4rWSU65pYThitHpJxyUJLoFO\nz9raZ9ktXojhGZ+C9ZS3r+fISnsqMOMKhM5ysJdNg/CSVl1UVJMB6owuDBwlTd2h\ne7ZOmSlJceiW5F4HYB2XioElSUZ5a7J4nkdlxYJQ9zS53KQq3ARXp9DV7jF4Kkec\n2tzzun5uO5sbzNeRY+9y/pKQF5Ge5W21LCASPQIDAQABAoIBADpM9sy8UKUBe5fR\nFjzkWDo4m3Urj4Z3kTLESDtEDT8buFkUVOzmJzdQpQdPd+0BVslkD8ic6q92aXWQ\nW8G4j56UzuE0PLb8cUzp34ixcq74W5Jion+32+K9YfxPcco+Hgt8MNGERy6WLU20\nBp+PCFd0CWJFoIPmD4OaouyF+JrIuTuV7WdaJdHhSnzdV01LxEgUHsfH+GffJx3y\n5g4poItVuN8iEhRxpiqBqwqtc2dufA7IHjHaZuZn1cbX7gML8BcZfP9qP3u9YGQq\ne/6k9+HFFYPoH0f5o8BAYFdBj7x/UvmvkzDGSl8CM0v9DsG7xxYW6EilrnpPoebK\niiDNoUECgYEA1vdSCwHEJ1DW/7On1R9DfSs+Joij1W63qkIabXpbL9G+Knq4nTCb\n3QlMQQW3aYOkYY6XyTLMBG/updPbbctEDMIg7cKifetd6DiAnWlf+rHlJMMW2BJv\nNZi+CJpDXydYpLG4HYtt4SwlSsNSJZuklUICOFVB66FXDTf2dPpxcjECgYEA2Et3\n7SI+NdiIBWkSLu6N/mr264vSOgyad0RkgsqdhyCIjQ3tv4x9ciHqdPRzPnr8Y5WO\nJDIULbM0bkKUkTE4m1VIODVTxRJUCuI8VPTPY+NNpQF2ISo+8KPPX6TQnOCVcLs0\nIjmfASmw7za2xBhFPZqCfXA0xhjd2b/ooXHgcc0CgYAg8ReOfj/L8pRv7N0MSNUz\nyjuk9g19OJFGswiPvE9a/Z5Rriq6U+eesL0RvcmEjtrS5GIYQAOJrol4ugWHRr3v\n4pPfO5NhDn9+haIX/TzrEvXVc1v90p1eLkD42oL2gvYPjvhy9pnpBrXURihBgR9w\njAQBE/edH0VSzj+jX3mhEQKBgQCEyhhvemVtE2m2wKIMNCLyvmKni6jeQJyYemGm\ntpPtwLh0uMdsoOjnKBFUCjuycTkAPnIMoL4orGuVAcVKOkjBfKMg9wRd6fm00N4v\nXjjw3zzs/6+xfskzXa5TztDQb0Tv985y8KNAyIK66gFc9HWV84UHU9rif6O8Koi8\njTg5RQKBgQC18/nBnMo2j4jC7w6o8YnDZTUhXQMz7WQh20AdHCPHSNeMPGYM1qs/\nTfwRsgmYcH0VyxB/Zf9RO2cY5hV4o9bnxhiwLRtVs5ByUxejkPzVx3/vwHcq7oV0\n/Ybhehkm7GMx1DUoWNFWmNgzMuOTK0Xb6i9/LxhaHF2N5/lWK0ndvw==\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC1oAxiaZItqOa9oE2pm2AtxAbvAyLKpu5GFlrATG2C10/yuD0/422yh7zTjXSrmUpyZjW46sGpozXMjA6tRD+DDbU7zNDolrRvQ3uVXM4+82+ce/CyFgVpC9+mpeO3IXTICZfH48a+N/Ou+Gwzttaq7k3itZJTrmlhOGK0eknHJQkugU7P2tpn2S1eiOEZn4L1lLev58hKeyow4wqEznKwl02D8JJWXVRUkwHqjC4MHCVN3aF7tk6ZKUlx6JbkXgdgHZeKgSVJRnlrsnieR2XFglD3NLncpCrcBFen0NXuMXgqR5za3PO6fm47mxvM15Fj73L+kpAXkZ7lbbUsIBI9\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtaAMYmmSLajmvaBNqZtg\nLcQG7wMiyqbuRhZawExtgtdP8rg9P+Ntsoe80410q5lKcmY1uOrBqaM1zIwOrUQ/\ngw21O8zQ6Ja0b0N7lVzOPvNvnHvwshYFaQvfpqXjtyF0yAmXx+PGvjfzrvhsM7bW\nqu5N4rWSU65pYThitHpJxyUJLoFOz9raZ9ktXojhGZ+C9ZS3r+fISnsqMOMKhM5y\nsJdNg/CSVl1UVJMB6owuDBwlTd2he7ZOmSlJceiW5F4HYB2XioElSUZ5a7J4nkdl\nxYJQ9zS53KQq3ARXp9DV7jF4Kkec2tzzun5uO5sbzNeRY+9y/pKQF5Ge5W21LCAS\nPQIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.service-account": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "235b3c08b72c9f96861165fe1e0e60c6a87b6f4e",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "235b3c08b72c9f96861165fe1e0e60c6a87b6f4e",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAtekvoa1szKXZ5RgNkg+7kYB0d5pGZkDtkhZ226/Ev4IZkmb8\n35xobsP6iae9LEdtXPGlaJs5QU32cBtgkuiQHWYn7568CONpV1PF/4MfkhUT2VOF\n9a7P0bOf7GFyK1Eyfwe/qwnqguPMulmzDzTGDQCvZk/YmRMbYg127WHSwUxCtgYN\nfyf3rhQYvXhda0Ql6tVK8WaIoJeNS/jThFT3bzPerUzbarNyHxubE7OAesFJ8yc7\nOb1F8SwGPkKDvpQBqDYo+xhp52EsuLR/f5HQN6DXNmj/DX6xcgljZsLbgfYD2Kxn\nqaS3BMX3qn0S9KgbnuEXs93c8MNXIZUMq9L92QIDAQABAoIBAQChIzdbKylWOo/C\nXMUgnikToUsJ6zHzQA5xus58mb1Zut/2DJ5xYbYscBONPnXXNEpO64sPF3jnPS1Q\nbx/j4nhOYoB7xQthgDh+76lTRg6AM4WKnG7si3ZxloDSPhuI/XsShYWl97mxSiK+\n69guXxwUxoeYxJ/kMMWv3Kd9bYroR6vxDbSnCeNfE8jX0Vuqvk7SedEGdNq7V2Fm\nK0g2gg+FcbUgJtlR6eQ9vIzkbbmqj4yR/01hvGz+3DhmggR8GppWnc1tZC0zRUn4\nJHogSDqvuUmkudGtjkA04UdPUrPNdYEJod52ZtNsyJyzRC1wU7ygTwl3zU9mJ80D\nO+8SxxKBAoGBANS6cx3qIMoDWm86Td9aD+8rsl9Rs6txKD2tK2R2ywn9usXB8wq7\nNHVZ08qAcKHUlUFhX2Zm8pof8/DiXx9hBWpAgHC3jDlHpdhHCbF7mogva/Jo0agM\nJblQXZxdzlWezMVfQ1RnP+IGedxnossIIlwCWHEYMsYKFWUMLU73wcTJAoGBANrp\n9WF3JSU0Z/wgatHnudBf+s6Wt26DOWceFlj5YEpXbY8TPd5RMTvXOGm/m4OtyEVU\nRPTq4O/vAY45EkJRL+3zPjKGEPTcYakhsbWRnoRzT6II6MXvhOjBDQr0ttxYLoCw\nz4tjkTeP5hEcQ2t6ROTwncHF3uhfIrzLvqo46kiRAoGACxM58xDBbEMIbkoGy94Q\nfk80FipWxFI72hot7CkTIQ4Ir0sNsD1W2dU3ZY+STZqXurOrF9W8Q7HuLVhbw3J1\nqbZ5+WRU9JZ6V+w64PaicPynDhPO9oTLYf6BISbxGxwNZSk0hCxr8wSLS6JJo3Bk\n+Y1VtW2hFxZnTr93jGjxuaECgYAXGtxYNiAIhjh3ZuB/WQrGkGrDRSsFEfqMBKPt\nLhzYm9OnZyt/fGhK3ZNJrfx28G+Tyaohg2zMRhiO7z0bHMCHR8YHxRijD2OLW1AL\nTtxBNH5yJqiSw43ulvmOb3ehV/lIgeDV4GNiTuDEa4w+GsCMvUyZOA4nzmq3LHXq\nN2ma0QKBgBMxFWpGaH53OeMUmmTwqdZNwjNSYGChPpV+QsPlNwx7XFR8lMB+h64e\n2GdyrcnfumxE/45SSPsMzKNq0hxWPLKl5rUv5Kv9dvvwBQJ6CvUstOnvBpPbkM7d\n7sDy6KDKKzFMdWqj3tEGJgQLonzpCg+hteDNqbwy4+k244PIr1uM\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC16S+hrWzMpdnlGA2SD7uRgHR3mkZmQO2SFnbbr8S/ghmSZvzfnGhuw/qJp70sR21c8aVomzlBTfZwG2CS6JAdZifvnrwI42lXU8X/gx+SFRPZU4X1rs/Rs5/sYXIrUTJ/B7+rCeqC48y6WbMPNMYNAK9mT9iZExtiDXbtYdLBTEK2Bg1/J/euFBi9eF1rRCXq1UrxZoigl41L+NOEVPdvM96tTNtqs3IfG5sTs4B6wUnzJzs5vUXxLAY+QoO+lAGoNij7GGnnYSy4tH9/kdA3oNc2aP8NfrFyCWNmwtuB9gPYrGeppLcExfeqfRL0qBue4Rez3dzww1chlQyr0v3Z\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtekvoa1szKXZ5RgNkg+7\nkYB0d5pGZkDtkhZ226/Ev4IZkmb835xobsP6iae9LEdtXPGlaJs5QU32cBtgkuiQ\nHWYn7568CONpV1PF/4MfkhUT2VOF9a7P0bOf7GFyK1Eyfwe/qwnqguPMulmzDzTG\nDQCvZk/YmRMbYg127WHSwUxCtgYNfyf3rhQYvXhda0Ql6tVK8WaIoJeNS/jThFT3\nbzPerUzbarNyHxubE7OAesFJ8yc7Ob1F8SwGPkKDvpQBqDYo+xhp52EsuLR/f5HQ\nN6DXNmj/DX6xcgljZsLbgfYD2KxnqaS3BMX3qn0S9KgbnuEXs93c8MNXIZUMq9L9\n2QIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_self_signed_cert.etcd-ca": {
                    "type": "tls_self_signed_cert",
                    "depends_on": [
                        "tls_private_key.etcd-ca"
                    ],
                    "primary": {
                        "id": "231707417643467557213953073682500376653",
                        "attributes": {
                            "allowed_uses.#": "3",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "cert_signing",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDDzCCAfegAwIBAgIRAK5RObOoi7TKD6WHjkWJWE0wDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDkxMzIz\nMTBaFw0xOTA0MDkxMzIzMTBaMCExDTALBgNVBAoTBGV0Y2QxEDAOBgNVBAMTB2V0\nY2QtY2EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtU/uszGxQ118I\nMYYthTQUbHUEoFYglHiUaG7yUITbYiermIjCSvNPtygWO0FXddOFHvEdHHTgH4Dw\n6agrGfg3nKGwR9SLsmfg5TGkCjgmCBqHVywElvWfApe0RtRphdo9xobbOClOgXtJ\nPj3P1y5LoxbRSAjlmk1jx5cUi9i/5HpJ70zrvoqRj3sgO3ZAaDm2UNR80tZL6fa6\nsCVIQMgpqOcwnIsuLlaKeqHVFgP9R9g+Hg7KMeJ9vCrP20BrozeIU0nLMQ7pBmff\ncgoEVMhN7lsRO+LalZaX6CqGhjqTyfK0vbOG5SgYewHLkIn6OHJsCiIWDh9UUVcz\nfhx/3e9nAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/\nMB0GA1UdDgQWBBQcsHb5R9G/ozx6D6FFMfLszgRTUzANBgkqhkiG9w0BAQsFAAOC\nAQEAC2OMbsBS0K6XAxvT+IYr0OLfSiKGwVN5O1c37x632CULgDrFbbVQYi+NDEY3\n0MkHtq6SrKGjxP8HKxiVh1QMI0a70GnB2vRyH/yr9Kh7aMiKwuNtUyi7vlePjziM\nPz3rDII0RkgtF38mpQJOkpC4ld2qgSRVN8K+TpmZhZBUTG4tGzO8VcOGCexewvkZ\n34L03Byy3N6Cc0bpB8nxNr1miKnbzVwHKBnk6aRK76iT4B3nY+VBNKATfQuVrwgf\npx89pHBys6+zgRoB8gIKs6jZZHopUdBxGMZjuPxscJxuTULmQZbFSWXSYPmORoZa\n9cHiDQVL8xs5r2k261sOkPbmpQ==\n-----END CERTIFICATE-----\n",
                            "early_renewal_hours": "0",
                            "id": "231707417643467557213953073682500376653",
                            "is_ca_certificate": "true",
                            "key_algorithm": "RSA",
                            "private_key_pem": "922b8d83243e4f982b7f4193b7e9d5badb1312d0",
                            "subject.#": "1",
                            "subject.0.common_name": "etcd-ca",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "etcd",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0",
                            "validity_end_time": "2019-04-09T13:23:10.612092472Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-09T13:23:10.612092472Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_self_signed_cert.kube-ca": {
                    "type": "tls_self_signed_cert",
                    "depends_on": [
                        "tls_private_key.kube-ca"
                    ],
                    "primary": {
                        "id": "56713199689992560129356436778917697263",
                        "attributes": {
                            "allowed_uses.#": "3",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "cert_signing",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDFjCCAf6gAwIBAgIQKqqQoLoSOaGd1ArpB6oW7zANBgkqhkiG9w0BAQsFADAl\nMREwDwYDVQQKEwhib290a3ViZTEQMA4GA1UEAxMHa3ViZS1jYTAeFw0xODA0MDkx\nMzIzMTJaFw0xOTA0MDkxMzIzMTJaMCUxETAPBgNVBAoTCGJvb3RrdWJlMRAwDgYD\nVQQDEwdrdWJlLWNhMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwCID\nT4d9K1QkViNHMKMLlh/jd5IKywQzw5TWnLgU3uQXkyi9CcAc435Xq31Ut2sl1mFo\ndV/phemOkxCtReOL9QkwrgijgSgP3i92ZWjRqT5eUL2GmAIXyhD6aL4ZrZZzo+yx\nk61Qp7ilmetBFRs9RPphJ3yQKhnf20hkh9UDyoFs2GtTT26sNKLQ3tuWSY9r8rEB\n618tjKK6cbHfWt1IrG2ohIfzIxSgA+ippjOB8DidneqCaE8GPNhfyG1/jpTc4enC\njBhjHboW+4RrR1uQvd4B7a5D7A0pV1RsqekjJjMuTKpDiLpYhlID+x4ciPfXuEdz\nggsFh7TiUdRqQ07H5QIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAqQwDwYDVR0TAQH/\nBAUwAwEB/zAdBgNVHQ4EFgQUDiWMVfOpGy6t7G+hal/g1LPCBx0wDQYJKoZIhvcN\nAQELBQADggEBAGoN4yNtYtyVFArAUOfFX6Z6ohOgZ6hzTFHQIJG9mYCgtfTnkzYo\nAwwX6ApiD7XuVdfMzh2slWQ174a0oWZfuLNpbE8BAkltm1XSogMC8OqG7ACmaSPb\nYNqd07o3lUTjOzY7gnqcilgtWK5Svx6wAesCJ+bl9xMHg7nzU4NNxQp5dL/C56a0\nCssVxeXxQasxEq9TpnglFaTnIITQsq0sEPWOcP7truC93grnaDCSUrrJU+4ZRXNe\nSxr2SKjxgSddaQmgt39Px3qdX7dMhuwbT9SPqVv6rsHFm4WVywAKDPGXIT0WyZhR\n45rNgsRkfujlk6wY77UNaPf7BYzS2odow0o=\n-----END CERTIFICATE-----\n",
                            "early_renewal_hours": "0",
                            "id": "56713199689992560129356436778917697263",
                            "is_ca_certificate": "true",
                            "key_algorithm": "RSA",
                            "private_key_pem": "adc37212dd245fe5056440827fe30ea8aa1d8385",
                            "subject.#": "1",
                            "subject.0.common_name": "kube-ca",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "bootkube",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0",
                            "validity_end_time": "2019-04-09T13:23:12.432571871Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-09T13:23:12.432571871Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                }
            },
            "depends_on": []
        }
    ]
}
