# storage:
#   disks:
#   - device: /dev/sda
#     wipe_table: true
#     partitions:
#     - label: ROOT
#   filesystems:
#   - mount:
#       device: /dev/disk/by-partlabel/ROOT
#       format: ext4
#       create:
#         force: true
#         options: [-L, ROOT]

passwd:
  users:
    - name: core
      password_hash: "$6$rounds=4096$LP6daiKkb6c$MGeaex639HmrfnglLpYsxPPruEovlzmkqgvbrouiDmv9XH/zEo7rM9ja/y9ur89OveohZ8VUf8NbdgjGRyEOi1"
      ssh_authorized_keys:
        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCk8CU3Bi1KFNcfQXpEdxz7HyfY1rh0MnuSVDFRTKcIIfboE5uMj0k7S/K1odIYFafs2Q8QgR/WmaZ15VAu9MvYfnmE9iPuB9PUa8YVkGeAxjIq929RICbYJCAgNen0lWqV9QQiulhU8A76Ot1CbNSIJgND4KbBUfZqjrCTO4lWbkisYwickbyi1j8FSTLcVmHkMYSOcFbueVXQrO6OXZQtLGa8HwRbY6kA3O6klzei1eMMzADLSjCuLKX7q0taYSQk80Joll2txD5bwId3SRvxZAenHrLZLkXzD7k68hxbpmTltMrwdAtOouNzyNuNCLaxEHUygQLxIBGEcOkFNA6e954GPMIf/IV6X4wmAnA9kqBbxGCC6b7KA+e2s8eusEWCA4lie1kJt4aQqImpquqpbft9wHDx16Qsh/Tqj7ZKG7bbPox82N2MRSl+RpxnOIjc8/xIFdrjELOH/zjI4milIT8BiSdGhQjk0ABTZWcVF9nf8eGxtw3oMKyYfhMrZ3+WRny0ut/4cyLwQJdbqi3so4sLJ51A6YLB4kpGRYRb8gChZZFh6uiwMPj057J9VOEbZE6hpQnXgatUMvmNfCFztj4+RmRiFo7l0YXz6DmocxqlEtXR2bOEVYq77Edc/YNDM5lIh5Wl3Bno0qsZ+KXoG7BASgP1qWBY5x25+nXwLQ== alexisvincent@Zeus.local

storage:
  files:
    - path: /etc/dnsmasq.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
${dnsmasq_conf}

    - path: /etc/hostname
      filesystem: root
      mode: 0644
      contents:
        inline: {{.hostname}}

    - path: /etc/check-asset-status.sh
      filesystem: root
      mode: 0644
      contents:
        inline: |
          if [ ! -e /opt/cluster-config/assets.ready.processed ]
          then
            while [ ! -e /opt/cluster-config/assets.ready ]
            do
              sleep 1
            done
          else
            touch /opt/cluster-config/assets.ready
          fi

    # - path: /root/.ssh/known_hosts
    #   filesystem: root
    #   mode: 0644
    #   contents:
    #     inline: ""

    # - path: /root/.ssh/id_rsa
    #   filesystem: root
    #   mode: 0600
    #   contents:
    #     remote:
    #       url: http://{|network.bootstrapper.address.internal|}:8080/assets/keys/bootstrapper

    # - path: /root/.ssh/id_rsa.pub
    #   filesystem: root
    #   mode: 0600
    #   contents:
    #     remote:
    #       url: http://{|network.bootstrapper.address.internal|}:8080/assets/keys/bootstrapper.pub

networkd:
  units:
    - name: gateway.network
      contents: |
        [Match]
        Name={{.interface_internal}}

        [Network]
        Address={{.address_internal}}/${subnet_short}
        Address=${gateway_address}/${subnet_short}
        DNS={{.address_internal}}
        IPForward=ipv4
        IPMasquerade=yes

systemd:
  units:
    - name: assets.service
      enable: true
      contents: |
        [Unit]
        Description=Wait for assets to be pushed (assets.path)

        [Service]
        Type=oneshot
        ExecStartPre=/usr/bin/bash /etc/check-asset-status.sh
        ExecStart=/usr/bin/mv /opt/cluster-config/assets.ready /opt/cluster-config/assets.ready.processed
        RemainAfterExit=true

        [Install]
        WantedBy=multi-user.target

    - name: matchbox.service
      enable: true
      contents: |
        [Unit]
        Description=CoreOS matchbox Server
        After=docker.service assets.service
        Requires=docker.service assets.service

        [Service]
        ExecStartPre=-/usr/bin/docker kill matchbox
        ExecStartPre=-/usr/bin/docker rm matchbox
        ExecStartPre=/usr/bin/docker pull quay.io/coreos/matchbox
        ExecStart=/usr/bin/docker run --name=matchbox --net=host \
          -v /opt/cluster-config/matchbox:/var/lib/matchbox:Z \
          -v /opt/cluster-config/matchbox/etc/tls:/etc/matchbox:Z,ro \
          quay.io/coreos/matchbox \
            -address=${gateway_address}:8080 \
            -rpc-address=${gateway_address}:8081 \
            -log-level=debug \
            -assets-path=/var/lib/matchbox/assets
        ExecStop=/usr/bin/docker stop matchbox
        Restart=always

        [Install]
        WantedBy=multi-user.target

    - name: dnsmasq.service
      enable: true
      contents: |
        [Unit]
        Description=Run dnsmasq, providing dhcp, dns and network book
        After=docker.service assets.service
        Requires=docker.service assets.service

        [Service]
        ExecStartPre=-/usr/bin/docker kill dnsmasq
        ExecStartPre=-/usr/bin/docker rm dnsmasq
        ExecStartPre=/usr/bin/docker pull quay.io/coreos/dnsmasq
        ExecStart=/usr/bin/docker run \
          --name=dnsmasq --cap-add=NET_ADMIN --net=host \
          -v /etc/dnsmasq.conf:/etc/dnsmasq.conf quay.io/coreos/dnsmasq -d -q \
            --interface={{.interface_internal}} \
            --dhcp-option=3,${gateway_address} \
            --dhcp-range={{.interface_internal}},${dhcp_start},${dhcp_end},12h \
            --enable-tftp --tftp-root=/var/lib/tftpboot \
            --dhcp-userclass=set:ipxe,iPXE \
            --dhcp-boot=tag:#ipxe,undionly.kpxe \
            --dhcp-boot=tag:ipxe,http://${gateway_address}:8080/boot.ipxe \
            --log-queries \
            --log-dhcp
        ExecStop=/usr/bin/docker stop dnsmasq
        Restart=always

        [Install]
        WantedBy=multi-user.target
