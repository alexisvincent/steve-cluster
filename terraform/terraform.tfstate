{
    "version": 3,
    "terraform_version": "0.11.5",
    "serial": 1,
    "lineage": "2d0c732d-1bc8-739c-ed8d-5b0e7698c9f4",
    "modules": [
        {
            "path": [
                "root"
            ],
            "outputs": {},
            "resources": {
                "data.template_file.cl_gateway": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "32cb99d1495210bcc96a37210445d6c23072b7e651b7ab1ee20b473e5ef182dd",
                        "attributes": {
                            "id": "32cb99d1495210bcc96a37210445d6c23072b7e651b7ab1ee20b473e5ef182dd",
                            "rendered": "# storage:\n#   disks:\n#   - device: /dev/sda\n#     wipe_table: true\n#     partitions:\n#     - label: ROOT\n#   filesystems:\n#   - mount:\n#       device: /dev/disk/by-partlabel/ROOT\n#       format: ext4\n#       create:\n#         force: true\n#         options: [-L, ROOT]\n\npasswd:\n  users:\n    - name: core\n      password_hash: \"$6$rounds=4096$LP6daiKkb6c$MGeaex639HmrfnglLpYsxPPruEovlzmkqgvbrouiDmv9XH/zEo7rM9ja/y9ur89OveohZ8VUf8NbdgjGRyEOi1\"\n      ssh_authorized_keys: \"\"\n\nstorage:\n  files:\n    - path: /etc/dnsmasq.conf\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          address=/gateway.steve/10.10.0.1\n\n          address=/steve/10.10.1.2\n\n          address=/n1.steve/10.10.1.1\n          address=/n2.steve/10.10.1.2\n          address=/n3.steve/10.10.1.3\n          address=/n4.steve/10.10.1.4\n          address=/n5.steve/10.10.1.5\n          address=/n6.steve/10.10.1.6\n          address=/n7.steve/10.10.1.7\n          address=/n8.steve/10.10.1.8\n          address=/n9.steve/10.10.1.9\n          address=/n10.steve/10.10.1.10\n          address=/n11.steve/10.10.1.11\n          address=/n12.steve/10.10.1.12\n          address=/n13.steve/10.10.1.13\n\n          address=/vm1.steve/10.10.10.1\n          address=/vm2.steve/10.10.10.2\n          address=/vm3.steve/10.10.10.3\n          address=/vm4.steve/10.10.10.4\n          address=/vm5.steve/10.10.10.5\n          address=/vm6.steve/10.10.10.6\n          address=/vm7.steve/10.10.10.7\n          address=/vm8.steve/10.10.10.8\n          address=/vm9.steve/10.10.10.9\n          address=/vm10.steve/10.10.10.10\n\n          dhcp-host=00:22:19:8E:26:AC,10.10.1.1\n          dhcp-host=00:1E:4F:28:30:12,10.10.1.2\n          dhcp-host=00:22:19:AB:7E:78,10.10.1.3\n          dhcp-host=00:22:19:8E:15:77,10.10.1.4\n          dhcp-host=00:1E:C9:D0:AA:9E,10.10.1.5\n          dhcp-host=00:22:19:8E:26:B6,10.10.1.6\n          dhcp-host=00:22:19:8E:25:A1,10.10.1.7\n          dhcp-host=00:1E:C9:D0:9E:E4,10.10.1.8\n          dhcp-host=00:1E:C9:D0:AA:BC,10.10.1.9\n          dhcp-host=00:1A:A0:15:E3:76,10.10.1.10\n          dhcp-host=00:1D:09:05:9A:C0,10.10.1.11\n          dhcp-host=00:1A:A0:26:DA:B6,10.10.1.12\n          dhcp-host=00:1D:09:05:98:DC,10.10.1.13\n\n          dhcp-host=00:0C:29:90:A9:F3,10.10.10.1\n          dhcp-host=00:50:56:30:35:90,10.10.10.2\n          dhcp-host=00:50:56:30:35:91,10.10.10.3\n\n\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: {{.hostname}}\n\n    - path: /etc/check-asset-status.sh\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          if [ ! -e /opt/cluster-config/assets.ready.processed ]\n          then\n            while [ ! -e /opt/cluster-config/assets.ready ]\n            do\n              sleep 1\n            done\n          else\n            touch /opt/cluster-config/assets.ready\n          fi\n\n    # - path: /root/.ssh/known_hosts\n    #   filesystem: root\n    #   mode: 0644\n    #   contents:\n    #     inline: \"\"\n\n    # - path: /root/.ssh/id_rsa\n    #   filesystem: root\n    #   mode: 0600\n    #   contents:\n    #     remote:\n    #       url: http://{|network.bootstrapper.address.internal|}:8080/assets/keys/bootstrapper\n\n    # - path: /root/.ssh/id_rsa.pub\n    #   filesystem: root\n    #   mode: 0600\n    #   contents:\n    #     remote:\n    #       url: http://{|network.bootstrapper.address.internal|}:8080/assets/keys/bootstrapper.pub\n\nnetworkd:\n  units:\n    - name: gateway.network\n      contents: |\n        [Match]\n        Name={{.interface_internal}}\n\n        [Network]\n        Address={{.address_internal}}/16\n        Address=10.10.0.1/16\n        DNS={{.address_internal}}\n        IPForward=ipv4\n        IPMasquerade=yes\n\nsystemd:\n  units:\n    - name: assets.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for assets to be pushed (assets.path)\n\n        [Service]\n        Type=oneshot\n        ExecStartPre=/usr/bin/bash /etc/check-asset-status.sh\n        ExecStart=/usr/bin/mv /opt/cluster-config/assets.ready /opt/cluster-config/assets.ready.processed\n        RemainAfterExit=true\n\n        [Install]\n        WantedBy=multi-user.target\n\n    - name: matchbox.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=CoreOS matchbox Server\n        After=docker.service assets.service\n        Requires=docker.service assets.service\n\n        [Service]\n        ExecStartPre=-/usr/bin/docker kill matchbox\n        ExecStartPre=-/usr/bin/docker rm matchbox\n        ExecStartPre=/usr/bin/docker pull quay.io/coreos/matchbox\n        ExecStart=/usr/bin/docker run --name=matchbox --net=host \\\n          -v /opt/cluster-config/matchbox:/var/lib/matchbox:Z \\\n          -v /opt/cluster-config/matchbox/etc/tls:/etc/matchbox:Z,ro \\\n          quay.io/coreos/matchbox \\\n            -address=10.10.0.1:8080 \\\n            -rpc-address=10.10.0.1:8081 \\\n            -log-level=debug \\\n            -assets-path=/var/lib/matchbox/assets\n        ExecStop=/usr/bin/docker stop matchbox\n        Restart=always\n\n        [Install]\n        WantedBy=multi-user.target\n\n    - name: dnsmasq.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Run dnsmasq, providing dhcp, dns and network book\n        After=docker.service assets.service\n        Requires=docker.service assets.service\n\n        [Service]\n        ExecStartPre=-/usr/bin/docker kill dnsmasq\n        ExecStartPre=-/usr/bin/docker rm dnsmasq\n        ExecStartPre=/usr/bin/docker pull quay.io/coreos/dnsmasq\n        ExecStart=/usr/bin/docker run \\\n          --name=dnsmasq --cap-add=NET_ADMIN --net=host \\\n          -v /etc/dnsmasq.conf:/etc/dnsmasq.conf quay.io/coreos/dnsmasq -d -q \\\n            --interface={{.interface_internal}} \\\n            --dhcp-option=3,10.10.0.1 \\\n            --dhcp-range={{.interface_internal}},10.10.100.50,10.10.100.100,12h \\\n            --enable-tftp --tftp-root=/var/lib/tftpboot \\\n            --dhcp-userclass=set:ipxe,iPXE \\\n            --dhcp-boot=tag:#ipxe,undionly.kpxe \\\n            --dhcp-boot=tag:ipxe,http://10.10.0.1:8080/boot.ipxe \\\n            --log-queries \\\n            --log-dhcp\n        ExecStop=/usr/bin/docker stop dnsmasq\n        Restart=always\n\n        [Install]\n        WantedBy=multi-user.target\n",
                            "template": "# storage:\n#   disks:\n#   - device: /dev/sda\n#     wipe_table: true\n#     partitions:\n#     - label: ROOT\n#   filesystems:\n#   - mount:\n#       device: /dev/disk/by-partlabel/ROOT\n#       format: ext4\n#       create:\n#         force: true\n#         options: [-L, ROOT]\n\npasswd:\n  users:\n    - name: core\n      password_hash: \"$6$rounds=4096$LP6daiKkb6c$MGeaex639HmrfnglLpYsxPPruEovlzmkqgvbrouiDmv9XH/zEo7rM9ja/y9ur89OveohZ8VUf8NbdgjGRyEOi1\"\n      ssh_authorized_keys: \"\"\n\nstorage:\n  files:\n    - path: /etc/dnsmasq.conf\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n${dnsmasq_conf}\n\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: {{.hostname}}\n\n    - path: /etc/check-asset-status.sh\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          if [ ! -e /opt/cluster-config/assets.ready.processed ]\n          then\n            while [ ! -e /opt/cluster-config/assets.ready ]\n            do\n              sleep 1\n            done\n          else\n            touch /opt/cluster-config/assets.ready\n          fi\n\n    # - path: /root/.ssh/known_hosts\n    #   filesystem: root\n    #   mode: 0644\n    #   contents:\n    #     inline: \"\"\n\n    # - path: /root/.ssh/id_rsa\n    #   filesystem: root\n    #   mode: 0600\n    #   contents:\n    #     remote:\n    #       url: http://{|network.bootstrapper.address.internal|}:8080/assets/keys/bootstrapper\n\n    # - path: /root/.ssh/id_rsa.pub\n    #   filesystem: root\n    #   mode: 0600\n    #   contents:\n    #     remote:\n    #       url: http://{|network.bootstrapper.address.internal|}:8080/assets/keys/bootstrapper.pub\n\nnetworkd:\n  units:\n    - name: gateway.network\n      contents: |\n        [Match]\n        Name={{.interface_internal}}\n\n        [Network]\n        Address={{.address_internal}}/${subnet_short}\n        Address=${gateway_address}/${subnet_short}\n        DNS={{.address_internal}}\n        IPForward=ipv4\n        IPMasquerade=yes\n\nsystemd:\n  units:\n    - name: assets.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for assets to be pushed (assets.path)\n\n        [Service]\n        Type=oneshot\n        ExecStartPre=/usr/bin/bash /etc/check-asset-status.sh\n        ExecStart=/usr/bin/mv /opt/cluster-config/assets.ready /opt/cluster-config/assets.ready.processed\n        RemainAfterExit=true\n\n        [Install]\n        WantedBy=multi-user.target\n\n    - name: matchbox.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=CoreOS matchbox Server\n        After=docker.service assets.service\n        Requires=docker.service assets.service\n\n        [Service]\n        ExecStartPre=-/usr/bin/docker kill matchbox\n        ExecStartPre=-/usr/bin/docker rm matchbox\n        ExecStartPre=/usr/bin/docker pull quay.io/coreos/matchbox\n        ExecStart=/usr/bin/docker run --name=matchbox --net=host \\\n          -v /opt/cluster-config/matchbox:/var/lib/matchbox:Z \\\n          -v /opt/cluster-config/matchbox/etc/tls:/etc/matchbox:Z,ro \\\n          quay.io/coreos/matchbox \\\n            -address=${gateway_address}:8080 \\\n            -rpc-address=${gateway_address}:8081 \\\n            -log-level=debug \\\n            -assets-path=/var/lib/matchbox/assets\n        ExecStop=/usr/bin/docker stop matchbox\n        Restart=always\n\n        [Install]\n        WantedBy=multi-user.target\n\n    - name: dnsmasq.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Run dnsmasq, providing dhcp, dns and network book\n        After=docker.service assets.service\n        Requires=docker.service assets.service\n\n        [Service]\n        ExecStartPre=-/usr/bin/docker kill dnsmasq\n        ExecStartPre=-/usr/bin/docker rm dnsmasq\n        ExecStartPre=/usr/bin/docker pull quay.io/coreos/dnsmasq\n        ExecStart=/usr/bin/docker run \\\n          --name=dnsmasq --cap-add=NET_ADMIN --net=host \\\n          -v /etc/dnsmasq.conf:/etc/dnsmasq.conf quay.io/coreos/dnsmasq -d -q \\\n            --interface={{.interface_internal}} \\\n            --dhcp-option=3,${gateway_address} \\\n            --dhcp-range={{.interface_internal}},${dhcp_start},${dhcp_end},12h \\\n            --enable-tftp --tftp-root=/var/lib/tftpboot \\\n            --dhcp-userclass=set:ipxe,iPXE \\\n            --dhcp-boot=tag:#ipxe,undionly.kpxe \\\n            --dhcp-boot=tag:ipxe,http://${gateway_address}:8080/boot.ipxe \\\n            --log-queries \\\n            --log-dhcp\n        ExecStop=/usr/bin/docker stop dnsmasq\n        Restart=always\n\n        [Install]\n        WantedBy=multi-user.target\n",
                            "vars.%": "7",
                            "vars.dhcp_end": "10.10.100.100",
                            "vars.dhcp_start": "10.10.100.50",
                            "vars.dnsmasq_conf": "          address=/gateway.steve/10.10.0.1\n\n          address=/steve/10.10.1.2\n\n          address=/n1.steve/10.10.1.1\n          address=/n2.steve/10.10.1.2\n          address=/n3.steve/10.10.1.3\n          address=/n4.steve/10.10.1.4\n          address=/n5.steve/10.10.1.5\n          address=/n6.steve/10.10.1.6\n          address=/n7.steve/10.10.1.7\n          address=/n8.steve/10.10.1.8\n          address=/n9.steve/10.10.1.9\n          address=/n10.steve/10.10.1.10\n          address=/n11.steve/10.10.1.11\n          address=/n12.steve/10.10.1.12\n          address=/n13.steve/10.10.1.13\n\n          address=/vm1.steve/10.10.10.1\n          address=/vm2.steve/10.10.10.2\n          address=/vm3.steve/10.10.10.3\n          address=/vm4.steve/10.10.10.4\n          address=/vm5.steve/10.10.10.5\n          address=/vm6.steve/10.10.10.6\n          address=/vm7.steve/10.10.10.7\n          address=/vm8.steve/10.10.10.8\n          address=/vm9.steve/10.10.10.9\n          address=/vm10.steve/10.10.10.10\n\n          dhcp-host=00:22:19:8E:26:AC,10.10.1.1\n          dhcp-host=00:1E:4F:28:30:12,10.10.1.2\n          dhcp-host=00:22:19:AB:7E:78,10.10.1.3\n          dhcp-host=00:22:19:8E:15:77,10.10.1.4\n          dhcp-host=00:1E:C9:D0:AA:9E,10.10.1.5\n          dhcp-host=00:22:19:8E:26:B6,10.10.1.6\n          dhcp-host=00:22:19:8E:25:A1,10.10.1.7\n          dhcp-host=00:1E:C9:D0:9E:E4,10.10.1.8\n          dhcp-host=00:1E:C9:D0:AA:BC,10.10.1.9\n          dhcp-host=00:1A:A0:15:E3:76,10.10.1.10\n          dhcp-host=00:1D:09:05:9A:C0,10.10.1.11\n          dhcp-host=00:1A:A0:26:DA:B6,10.10.1.12\n          dhcp-host=00:1D:09:05:98:DC,10.10.1.13\n\n          dhcp-host=00:0C:29:90:A9:F3,10.10.10.1\n          dhcp-host=00:50:56:30:35:90,10.10.10.2\n          dhcp-host=00:50:56:30:35:91,10.10.10.3\n",
                            "vars.gateway_address": "10.10.0.1",
                            "vars.network_domain": "steve",
                            "vars.subnet_long": "255.255.0.0",
                            "vars.subnet_short": "16"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "matchbox_group.install-reboot-n1": {
                    "type": "matchbox_group",
                    "depends_on": [],
                    "primary": {
                        "id": "install-reboot-n1",
                        "attributes": {
                            "id": "install-reboot-n1",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "install-reboot-n1",
                            "profile": "steve-cached-container-linux-install-n1",
                            "selector.%": "1",
                            "selector.mac": "00:22:19:8E:26:AC"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.install-reboot-vm1": {
                    "type": "matchbox_group",
                    "depends_on": [],
                    "primary": {
                        "id": "install-reboot-vm1",
                        "attributes": {
                            "id": "install-reboot-vm1",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "install-reboot-vm1",
                            "profile": "steve-cached-container-linux-install-vm2",
                            "selector.%": "1",
                            "selector.mac": "08:00:27:FE:45:EF"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.n1": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.gateway"
                    ],
                    "primary": {
                        "id": "n1",
                        "attributes": {
                            "id": "n1",
                            "metadata.%": "5",
                            "metadata.address_internal": "10.10.1.1",
                            "metadata.hostname": "n1",
                            "metadata.interface_external": "eno2",
                            "metadata.interface_internal": "eno1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "n1",
                            "profile": "gateway",
                            "selector.%": "2",
                            "selector.mac": "00:22:19:8E:26:AC",
                            "selector.os": "installing"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.vm1": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.gateway"
                    ],
                    "primary": {
                        "id": "vm1",
                        "attributes": {
                            "id": "vm1",
                            "metadata.%": "5",
                            "metadata.address_internal": "10.10.10.1",
                            "metadata.hostname": "vm1",
                            "metadata.interface_external": "enp0s8",
                            "metadata.interface_internal": "enp0s3",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "vm1",
                            "profile": "gateway",
                            "selector.%": "2",
                            "selector.mac": "08:00:27:FE:45:EF",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.vm2": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.gateway"
                    ],
                    "primary": {
                        "id": "vm2",
                        "attributes": {
                            "id": "vm2",
                            "metadata.%": "5",
                            "metadata.address_internal": "10.10.10.1",
                            "metadata.hostname": "vm1",
                            "metadata.interface_external": "enp0s8",
                            "metadata.interface_internal": "enp0s3",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "vm2",
                            "profile": "gateway",
                            "selector.%": "2",
                            "selector.mac": "08:00:27:3A:40:26",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.gateway": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cl_gateway"
                    ],
                    "primary": {
                        "id": "gateway",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "coreos.config.url=http://http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.1": "coreos.first_boot=yes",
                            "args.2": "console=tty0",
                            "args.3": "console=ttyS0",
                            "args.4": "coreos.autologin",
                            "container_linux_config": "# storage:\n#   disks:\n#   - device: /dev/sda\n#     wipe_table: true\n#     partitions:\n#     - label: ROOT\n#   filesystems:\n#   - mount:\n#       device: /dev/disk/by-partlabel/ROOT\n#       format: ext4\n#       create:\n#         force: true\n#         options: [-L, ROOT]\n\npasswd:\n  users:\n    - name: core\n      password_hash: \"$6$rounds=4096$LP6daiKkb6c$MGeaex639HmrfnglLpYsxPPruEovlzmkqgvbrouiDmv9XH/zEo7rM9ja/y9ur89OveohZ8VUf8NbdgjGRyEOi1\"\n      ssh_authorized_keys: \"\"\n\nstorage:\n  files:\n    - path: /etc/dnsmasq.conf\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          address=/gateway.steve/10.10.0.1\n\n          address=/steve/10.10.1.2\n\n          address=/n1.steve/10.10.1.1\n          address=/n2.steve/10.10.1.2\n          address=/n3.steve/10.10.1.3\n          address=/n4.steve/10.10.1.4\n          address=/n5.steve/10.10.1.5\n          address=/n6.steve/10.10.1.6\n          address=/n7.steve/10.10.1.7\n          address=/n8.steve/10.10.1.8\n          address=/n9.steve/10.10.1.9\n          address=/n10.steve/10.10.1.10\n          address=/n11.steve/10.10.1.11\n          address=/n12.steve/10.10.1.12\n          address=/n13.steve/10.10.1.13\n\n          address=/vm1.steve/10.10.10.1\n          address=/vm2.steve/10.10.10.2\n          address=/vm3.steve/10.10.10.3\n          address=/vm4.steve/10.10.10.4\n          address=/vm5.steve/10.10.10.5\n          address=/vm6.steve/10.10.10.6\n          address=/vm7.steve/10.10.10.7\n          address=/vm8.steve/10.10.10.8\n          address=/vm9.steve/10.10.10.9\n          address=/vm10.steve/10.10.10.10\n\n          dhcp-host=00:22:19:8E:26:AC,10.10.1.1\n          dhcp-host=00:1E:4F:28:30:12,10.10.1.2\n          dhcp-host=00:22:19:AB:7E:78,10.10.1.3\n          dhcp-host=00:22:19:8E:15:77,10.10.1.4\n          dhcp-host=00:1E:C9:D0:AA:9E,10.10.1.5\n          dhcp-host=00:22:19:8E:26:B6,10.10.1.6\n          dhcp-host=00:22:19:8E:25:A1,10.10.1.7\n          dhcp-host=00:1E:C9:D0:9E:E4,10.10.1.8\n          dhcp-host=00:1E:C9:D0:AA:BC,10.10.1.9\n          dhcp-host=00:1A:A0:15:E3:76,10.10.1.10\n          dhcp-host=00:1D:09:05:9A:C0,10.10.1.11\n          dhcp-host=00:1A:A0:26:DA:B6,10.10.1.12\n          dhcp-host=00:1D:09:05:98:DC,10.10.1.13\n\n          dhcp-host=00:0C:29:90:A9:F3,10.10.10.1\n          dhcp-host=00:50:56:30:35:90,10.10.10.2\n          dhcp-host=00:50:56:30:35:91,10.10.10.3\n\n\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: {{.hostname}}\n\n    - path: /etc/check-asset-status.sh\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          if [ ! -e /opt/cluster-config/assets.ready.processed ]\n          then\n            while [ ! -e /opt/cluster-config/assets.ready ]\n            do\n              sleep 1\n            done\n          else\n            touch /opt/cluster-config/assets.ready\n          fi\n\n    # - path: /root/.ssh/known_hosts\n    #   filesystem: root\n    #   mode: 0644\n    #   contents:\n    #     inline: \"\"\n\n    # - path: /root/.ssh/id_rsa\n    #   filesystem: root\n    #   mode: 0600\n    #   contents:\n    #     remote:\n    #       url: http://{|network.bootstrapper.address.internal|}:8080/assets/keys/bootstrapper\n\n    # - path: /root/.ssh/id_rsa.pub\n    #   filesystem: root\n    #   mode: 0600\n    #   contents:\n    #     remote:\n    #       url: http://{|network.bootstrapper.address.internal|}:8080/assets/keys/bootstrapper.pub\n\nnetworkd:\n  units:\n    - name: gateway.network\n      contents: |\n        [Match]\n        Name={{.interface_internal}}\n\n        [Network]\n        Address={{.address_internal}}/16\n        Address=10.10.0.1/16\n        DNS={{.address_internal}}\n        IPForward=ipv4\n        IPMasquerade=yes\n\nsystemd:\n  units:\n    - name: assets.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for assets to be pushed (assets.path)\n\n        [Service]\n        Type=oneshot\n        ExecStartPre=/usr/bin/bash /etc/check-asset-status.sh\n        ExecStart=/usr/bin/mv /opt/cluster-config/assets.ready /opt/cluster-config/assets.ready.processed\n        RemainAfterExit=true\n\n        [Install]\n        WantedBy=multi-user.target\n\n    - name: matchbox.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=CoreOS matchbox Server\n        After=docker.service assets.service\n        Requires=docker.service assets.service\n\n        [Service]\n        ExecStartPre=-/usr/bin/docker kill matchbox\n        ExecStartPre=-/usr/bin/docker rm matchbox\n        ExecStartPre=/usr/bin/docker pull quay.io/coreos/matchbox\n        ExecStart=/usr/bin/docker run --name=matchbox --net=host \\\n          -v /opt/cluster-config/matchbox:/var/lib/matchbox:Z \\\n          -v /opt/cluster-config/matchbox/etc/tls:/etc/matchbox:Z,ro \\\n          quay.io/coreos/matchbox \\\n            -address=10.10.0.1:8080 \\\n            -rpc-address=10.10.0.1:8081 \\\n            -log-level=debug \\\n            -assets-path=/var/lib/matchbox/assets\n        ExecStop=/usr/bin/docker stop matchbox\n        Restart=always\n\n        [Install]\n        WantedBy=multi-user.target\n\n    - name: dnsmasq.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Run dnsmasq, providing dhcp, dns and network book\n        After=docker.service assets.service\n        Requires=docker.service assets.service\n\n        [Service]\n        ExecStartPre=-/usr/bin/docker kill dnsmasq\n        ExecStartPre=-/usr/bin/docker rm dnsmasq\n        ExecStartPre=/usr/bin/docker pull quay.io/coreos/dnsmasq\n        ExecStart=/usr/bin/docker run \\\n          --name=dnsmasq --cap-add=NET_ADMIN --net=host \\\n          -v /etc/dnsmasq.conf:/etc/dnsmasq.conf quay.io/coreos/dnsmasq -d -q \\\n            --interface={{.interface_internal}} \\\n            --dhcp-option=3,10.10.0.1 \\\n            --dhcp-range={{.interface_internal}},10.10.100.50,10.10.100.100,12h \\\n            --enable-tftp --tftp-root=/var/lib/tftpboot \\\n            --dhcp-userclass=set:ipxe,iPXE \\\n            --dhcp-boot=tag:#ipxe,undionly.kpxe \\\n            --dhcp-boot=tag:ipxe,http://10.10.0.1:8080/boot.ipxe \\\n            --log-queries \\\n            --log-dhcp\n        ExecStop=/usr/bin/docker stop dnsmasq\n        Restart=always\n\n        [Install]\n        WantedBy=multi-user.target\n",
                            "id": "gateway",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "gateway"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "kubernetes"
            ],
            "outputs": {
                "kubeconfig": {
                    "sensitive": false,
                    "type": "string",
                    "value": "apiVersion: v1\nkind: Config\nclusters:\n- name: local\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRZW1IbVZSd0ExTVZISG9CTjVHL1BLakFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURrdwpOakU1TVRaYUZ3MHhPVEEwTURrd05qRTVNVFphTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXpURFYKNkh2UTZUaFZKdVBKMWxxZzFFdUFCTzVScWU0MW1ncHUvZ3BheHN1WTV0SEJpRUpMNVpZMWpoY1NwcWljRTJpRQpReFlyUDJzaXBEazIwRVdwMnFzMkZaUUJidkt1czJSQ3NqOFdqQTZvbFpXaUdYREZMRjFUMzRYMXpWVFp6bzlPCm9wOERqeXBEYytHTGRBaGwwM3VuR0lZMjliWlZVN2lhdjJ3THBKSWFMcjU4Rjd0c2g5bEpnVVNLTE1rejhjN3MKdEIzTmVXOW1JcUs0ZEZjUzdRUE0wYWpkNWI2bGRVL3c3ZjJNU2UxczFNc2ZBZkZZUEhiRVFnRktVcFNnQkVIWAo0QnB1NXk5NXBGR0wzTkQyWXVPWlI2Z0F1bzF5R2c2ZlFOaE9rNUdyVG9VQUNzRm9RNXhkUDgwandJbnZPZmdWCjZhMnMrSGhKc2VhTitIVGtQd0lEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVTDFsM21BaWtaZWtQL1dnWVM4TEtRVXJ5N0Zrd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQmJZM096TS9WYkZicytwamhWOEo3RFUrU2VNRWFDbzR6Y1NEcUNHbmIvUit6Q2J5T2RYCmNKU0xQR1NpdmFYVVBROE1Ic0R6c2p0YlEzMHYwR2R1TElDbUdDU1IybnZBeDl2UDRYZzNsTmR4RlFPVE0zYVcKbC9LWHoyTzVhdHkvTytDWDZ5SVdsWW1iaW1tdjY2VENUeUVjR3pWK1VGL2pYRDNERzI1M2JoUUdSMU42cHdpSwplRHhaSDI4YXZsbjN0MDJwV1hkK3hxRkhGN09WWmhURjdGQnF1REJSQWVqb0NySExZcjc3N1dLTUNkKzlLaGprCjN2ZURBUnhmVVBpZ1lTSSt6b285Y0lVeU1sb04xSS9Qa0QrbFVyS3ExRmkxa2NUOWJkTkVlRVFsVlorRmR3d2sKL2VSZnd3ZGJqTHZOc3VTUjhRQWJUNTM2Z1BuVElrSm5yRkE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: kubelet\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQUpxdWYvWldLL0RXVXdtUWRESStzdVV3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBNQpNRFl4T1RFMldoY05NVGt3TkRBNU1EWXhPVEUyV2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFOKzJ3MkNlU3VSaWdFRnh2d3lyd3pYR1lieENta0o3bUU3ZlFVUGVPZG1oV21BZys4amtYNFFJWlF1OAppVEtvTFNBZVdVUklNd3d5MzJ6ZmFqeFJ4bzlMYmpBeTUxWklWQVhJQjdqcjB0elJXYnIxaUxCa0xsZDFTVlpLCjUwUzlrMUh1QXFETkhpUEZEV1Q4QlZKV1BoTk9SLzNvQW16TFpWcXJVRWRyZVFYeXF2djQ5OEdFQ0RwanNYRUEKaHNrYlFQWUF2QlZuZUhzTlR6L2Z6OXFNc1pMbFZwQWJheVFnY3VWdTZPWUpqV212akMwQ2lkeWFiUUU5aVRBTApSYTZnbXp3TjdoL2RLZ0dTblc3LzlQS1FyYm9LWGR1TjFRODZ1UXNablBNejk5YWZIT0I4US9vT2hLc0hmOXViCml3enNwanZwYld4bkJzd25ieEYyVCtEN1ZxY0NBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZDOVpkNWdJcEdYcEQvMW9HRXZDeWtGSzh1eFpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJzCjlkREVhckpJUlhYZGlZakZiRWVMS1U1WHNzMnNBWk5OYnZkbkYrUnJLYllZZk5FNUU0M3V0WFdDNkFTMzRsNloKUFFvaTg5cWZtZVNHNVhkcURESno5YUNqTXFjVHZwaUhvL0ZqSVBmYnZzcXNPM2JiL0xpVlJXRnB0RUxqcWlUdApZa2UycTQ2Y2QvczBZWnRtOTREVDl2SmhDWVNtZUc2VHZCUkUzbGhXUnFRWGVsNGlORE04eURURXp1R3Z6RlUrCjFpRDNtWG1nNnpoVldRem1hVmpGVkZqSEc1OEhKb3ZONCt4V2tTcHhRTFBMMkdGTGpMaytGSHNPKzVzTU0wYXAKL25KaVdyNHN4N3lxNkwra0lObVg0MmtBSUFpSklwY05yellQNHVFZXR2WUQwaDRKd2ZTWmQySk5aR1c4SXdKdwo1ckNsV290T1FMSTJIRWhMTmJ1VAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMzdiRFlKNUs1R0tBUVhHL0RLdkROY1podkVLYVFudVlUdDlCUTk0NTJhRmFZQ0Q3CnlPUmZoQWhsQzd5Sk1xZ3RJQjVaUkVnekRETGZiTjlxUEZIR2owdHVNRExuVmtoVUJjZ0h1T3ZTM05GWnV2V0kKc0dRdVYzVkpWa3JuUkwyVFVlNENvTTBlSThVTlpQd0ZVbFkrRTA1SC9lZ0NiTXRsV3F0UVIydDVCZktxKy9qMwp3WVFJT21PeGNRQ0d5UnRBOWdDOEZXZDRldzFQUDkvUDJveXhrdVZXa0J0ckpDQnk1VzdvNWdtTmFhK01MUUtKCjNKcHRBVDJKTUF0RnJxQ2JQQTN1SDkwcUFaS2Ridi8wOHBDdHVncGQyNDNWRHpxNUN4bWM4elAzMXA4YzRIeEQKK2c2RXF3ZC8yNXVMRE95bU8rbHRiR2NHekNkdkVYWlA0UHRXcHdJREFRQUJBb0lCQVFDbGJKTEtoaUpoQVFsUAoyMWxuZURkUU0xS2dFQ3ZiVDJOUHB6eXVmOHdOUm9mNm4wa3Z3dGR5WFhiQ2wvWm5zLzR5U3Q2OVpCb0RRamIrClhiSkR5a0JtUTJQR1ZrM0QrcFhPOUp2cFBOQmVvcHVVYU8xYmFhanUyUGFTemE1M29Tc25vVFRtVE9hbGtwZVYKL2RtOWliSTdPbDUzdlREVjNBMGxYNXBzUldkbllpanFwL1JKaDVkVW5VQU9hS0V6SHBRc2lQMWlGN0Z4SUlHcgpwQVpZczRqOS9xTjBWd2YzMk5WSXJjZGVPbmFHMEVOSHJrZTE3VUo5YUpjakhyYnBhRGhqcytCbTVWcEFZNGxyCjhPNitpc1IwYlpiUWRZQlgxbnZvYXQ0Nk9QaFJQVzlLbERYeE1zZEw0VnN2Qld4UzBsQmZOYzdlUWlwTVFYSW0KalVFRnFqSWhBb0dCQU82c3RYVy84OXFlRndyUFc3SGRiRG1lZU1hd3J5MDRwd3FNOHFiM3dUa0NRcVFBODZoLwo3dEdnWHRIRFZ0QVRUaFI2WDBLdlA1N1I1M3UvcGhzVFltOENLOThLeU0yYmd6MUxGbVltWkxxSHV1blViUVhrCllzNmtRaExVcG83aVk2d2dtYS9mUmx4MFN5RDM2Z2dlV1Yvc3hjNUdOaHl1R0ZhZGdxUkc1cG9YQW9HQkFPLzAKQ2dpUk1wdTFtWmxXUUpYKzR4cGRMQXF5bmQ5MVZhWitzWlVuZXRLNXZ5V3UxOUtKa0xvQ3dWNXNsamhiYStPLwpsUjVjMnlJa20xUzFScGlLdStwZnB2ZWJrTEpaRU9TRkNVd2M0R05CV0NzUjB1R2ppUzRLWnlkMHJjZGxMT3B2CkkwMnZkNlJ6cHJ1WTEwL1pFUVByZ2lYb2JUL2FEVm1oTUp0NjFWSHhBb0dBR3BQOCtRblJHKzB5MzY5THBMamwKamwwSlVnYm0yd0JPQ2F5OGNMOXlNdWovaHNmY1drMDB5UDgweitNU3pjVDRrdXMxcEhWamZrb2Rudmd1aFNGWgplc2NoSDR0UjVTT0dMOU1td1dWUkhqeHpJZ3JYd1NvM25vOUlGRlM5MzNkeVpmNlRYclJjWDN0THluWVJCNnBwCmhYY1daK3dGcHBmMGVlQzhaWkxIcHkwQ2dZQkxDZ2RsUEhzV0pNbC9JWEViTjFXd05ma0M4MjdacGVqK0kxckgKcVV3SXdGdmRuZnNTZFVEVVd1NDc2RHRtTG5qa0JWTE41djRFaEd3ckpuR0lYTUo5ZmlKS0J0Vk9ZUG9lYk5oRwpmRFZUOU9oc3Q2czZNeGxBVTdLRXJVRjNQTlc2RHIxOG11WVFnTFpncm1DUE1QUFlSUHN6ZmFkRXM1MC9MV0IxCkR3bk5FUUtCZ1FDRDhVbFFpN2R1ZVUveWk5dHZaeVhRRzN6SENEVHBoTC9JTzJvR1BQUE9pOXJjRjlIQStLL3UKK0lFZTlyWCtLNUxrMWZmeDNqRjFHWEl6VUJzeTNwSXJmS1hjNjZDNklxUWJkNllNMTQzaGhZeXZlcUNtekplSAphTGdOQUJkVjErYmpFMTY1bmtWV0V6ZUhWVmZ3Z3I5Z1puZzgyZlEwUUlyK004Zm54UTR0eGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\ncontexts:\n- context:\n    cluster: local\n    user: kubelet\n"
                }
            },
            "resources": {
                "data.template_file.cached-container-linux-install-configs.0": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.1": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.10": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.11": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.2": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.3": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.4": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.5": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.6": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.7": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.8": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.9": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.0": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.1": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.10": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.11": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.2": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.3": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.4": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.5": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.6": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.7": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.8": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.9": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.controller-configs": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "9250341ca0735a28a05362b4c5bf8b816149edbed1e076aa976e45e5e03a3679",
                        "attributes": {
                            "id": "9250341ca0735a28a05362b4c5bf8b816149edbed1e076aa976e45e5e03a3679",
                            "rendered": "---\nsystemd:\n  units:\n    - name: etcd-member.service\n      enable: true\n      dropins:\n        - name: 40-etcd-cluster.conf\n          contents: |\n            [Service]\n            Environment=\"ETCD_IMAGE_TAG=v3.3.2\"\n            Environment=\"ETCD_NAME=n2\"\n            Environment=\"ETCD_ADVERTISE_CLIENT_URLS=https://n2.steve:2379\"\n            Environment=\"ETCD_INITIAL_ADVERTISE_PEER_URLS=https://n2.steve:2380\"\n            Environment=\"ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379\"\n            Environment=\"ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380\"\n            Environment=\"ETCD_INITIAL_CLUSTER=n2=https://n2.steve:2380\"\n            Environment=\"ETCD_STRICT_RECONFIG_CHECK=true\"\n            Environment=\"ETCD_SSL_DIR=/etc/ssl/etcd\"\n            Environment=\"ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/server-ca.crt\"\n            Environment=\"ETCD_CERT_FILE=/etc/ssl/certs/etcd/server.crt\"\n            Environment=\"ETCD_KEY_FILE=/etc/ssl/certs/etcd/server.key\"\n            Environment=\"ETCD_CLIENT_CERT_AUTH=true\"\n            Environment=\"ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/peer-ca.crt\"\n            Environment=\"ETCD_PEER_CERT_FILE=/etc/ssl/certs/etcd/peer.crt\"\n            Environment=\"ETCD_PEER_KEY_FILE=/etc/ssl/certs/etcd/peer.key\"\n            Environment=\"ETCD_PEER_CLIENT_CERT_AUTH=true\"\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n        RequiredBy=etcd-member.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n2.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/master \\\n          --node-labels=node-role.kubernetes.io/controller=\"true\" \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --register-with-taints=node-role.kubernetes.io/master=:NoSchedule \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=10\n        [Install]\n        WantedBy=multi-user.target\n    - name: bootkube.service\n      contents: |\n        [Unit]\n        Description=Bootstrap a Kubernetes control plane with a temp api-server\n        ConditionPathExists=!/opt/bootkube/init_bootkube.done\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        WorkingDirectory=/opt/bootkube\n        ExecStart=/opt/bootkube/bootkube-start\n        ExecStartPost=/bin/touch /opt/bootkube/init_bootkube.done\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n2.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\n    - path: /opt/bootkube/bootkube-start\n      filesystem: root\n      mode: 0544\n      user:\n        id: 500\n      group:\n        id: 500\n      contents:\n        inline: |\n          #!/bin/bash\n          # Wrapper for bootkube start\n          set -e\n          # Move experimental manifests\n          [ -n \"$(ls /opt/bootkube/assets/manifests-*/* 2\u003e/dev/null)\" ] \u0026\u0026 mv /opt/bootkube/assets/manifests-*/* /opt/bootkube/assets/manifests \u0026\u0026 rm -rf /opt/bootkube/assets/manifests-*\n          BOOTKUBE_ACI=\"${BOOTKUBE_ACI:-quay.io/coreos/bootkube}\"\n          BOOTKUBE_VERSION=\"${BOOTKUBE_VERSION:-v0.11.0}\"\n          BOOTKUBE_ASSETS=\"${BOOTKUBE_ASSETS:-/opt/bootkube/assets}\"\n          exec /usr/bin/rkt run \\\n            --trust-keys-from-https \\\n            --volume assets,kind=host,source=$BOOTKUBE_ASSETS \\\n            --mount volume=assets,target=/assets \\\n            --volume bootstrap,kind=host,source=/etc/kubernetes \\\n            --mount volume=bootstrap,target=/etc/kubernetes \\\n            $RKT_OPTS \\\n            ${BOOTKUBE_ACI}:${BOOTKUBE_VERSION} \\\n            --net=host \\\n            --dns=host \\\n            --exec=/bootkube -- start --asset-dir=/assets \"$@\"\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n",
                            "template": "---\nsystemd:\n  units:\n    - name: etcd-member.service\n      enable: true\n      dropins:\n        - name: 40-etcd-cluster.conf\n          contents: |\n            [Service]\n            Environment=\"ETCD_IMAGE_TAG=v3.3.2\"\n            Environment=\"ETCD_NAME=${etcd_name}\"\n            Environment=\"ETCD_ADVERTISE_CLIENT_URLS=https://${domain_name}:2379\"\n            Environment=\"ETCD_INITIAL_ADVERTISE_PEER_URLS=https://${domain_name}:2380\"\n            Environment=\"ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379\"\n            Environment=\"ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380\"\n            Environment=\"ETCD_INITIAL_CLUSTER=${etcd_initial_cluster}\"\n            Environment=\"ETCD_STRICT_RECONFIG_CHECK=true\"\n            Environment=\"ETCD_SSL_DIR=/etc/ssl/etcd\"\n            Environment=\"ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/server-ca.crt\"\n            Environment=\"ETCD_CERT_FILE=/etc/ssl/certs/etcd/server.crt\"\n            Environment=\"ETCD_KEY_FILE=/etc/ssl/certs/etcd/server.key\"\n            Environment=\"ETCD_CLIENT_CERT_AUTH=true\"\n            Environment=\"ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/peer-ca.crt\"\n            Environment=\"ETCD_PEER_CERT_FILE=/etc/ssl/certs/etcd/peer.crt\"\n            Environment=\"ETCD_PEER_KEY_FILE=/etc/ssl/certs/etcd/peer.key\"\n            Environment=\"ETCD_PEER_CLIENT_CERT_AUTH=true\"\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n        RequiredBy=etcd-member.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/master \\\n          --node-labels=node-role.kubernetes.io/controller=\"true\" \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --register-with-taints=node-role.kubernetes.io/master=:NoSchedule \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=10\n        [Install]\n        WantedBy=multi-user.target\n    - name: bootkube.service\n      contents: |\n        [Unit]\n        Description=Bootstrap a Kubernetes control plane with a temp api-server\n        ConditionPathExists=!/opt/bootkube/init_bootkube.done\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        WorkingDirectory=/opt/bootkube\n        ExecStart=/opt/bootkube/bootkube-start\n        ExecStartPost=/bin/touch /opt/bootkube/init_bootkube.done\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\n    - path: /opt/bootkube/bootkube-start\n      filesystem: root\n      mode: 0544\n      user:\n        id: 500\n      group:\n        id: 500\n      contents:\n        inline: |\n          #!/bin/bash\n          # Wrapper for bootkube start\n          set -e\n          # Move experimental manifests\n          [ -n \"$(ls /opt/bootkube/assets/manifests-*/* 2\u003e/dev/null)\" ] \u0026\u0026 mv /opt/bootkube/assets/manifests-*/* /opt/bootkube/assets/manifests \u0026\u0026 rm -rf /opt/bootkube/assets/manifests-*\n          BOOTKUBE_ACI=\"$${BOOTKUBE_ACI:-quay.io/coreos/bootkube}\"\n          BOOTKUBE_VERSION=\"$${BOOTKUBE_VERSION:-v0.11.0}\"\n          BOOTKUBE_ASSETS=\"$${BOOTKUBE_ASSETS:-/opt/bootkube/assets}\"\n          exec /usr/bin/rkt run \\\n            --trust-keys-from-https \\\n            --volume assets,kind=host,source=$BOOTKUBE_ASSETS \\\n            --mount volume=assets,target=/assets \\\n            --volume bootstrap,kind=host,source=/etc/kubernetes \\\n            --mount volume=bootstrap,target=/etc/kubernetes \\\n            $$RKT_OPTS \\\n            $${BOOTKUBE_ACI}:$${BOOTKUBE_VERSION} \\\n            --net=host \\\n            --dns=host \\\n            --exec=/bootkube -- start --asset-dir=/assets \"$@\"\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n",
                            "vars.%": "7",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n2.steve",
                            "vars.etcd_initial_cluster": "n2=https://n2.steve:2380",
                            "vars.etcd_name": "n2",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.0": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "b525544cc5a1daf4cc9395a65ba8f01fb4841f48c0123449b7d1cc5d6c18f567",
                        "attributes": {
                            "id": "b525544cc5a1daf4cc9395a65ba8f01fb4841f48c0123449b7d1cc5d6c18f567",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n3.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n3.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n3.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.1": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "5421432c45ff3f61a385d7eb9f6b39a3b5ae7581861f2fbc844fe43f34ce7e19",
                        "attributes": {
                            "id": "5421432c45ff3f61a385d7eb9f6b39a3b5ae7581861f2fbc844fe43f34ce7e19",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n4.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n4.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n4.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.10": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "daa7c156ef1cd22d9382a483a9e23248226e48d0de9d5b1494abe9da8c713cbf",
                        "attributes": {
                            "id": "daa7c156ef1cd22d9382a483a9e23248226e48d0de9d5b1494abe9da8c713cbf",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n13.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n13.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n13.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.2": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "19806878f472b9a3f207c60e6508347ac578f0fd4946b693d59bc8e4fb33c739",
                        "attributes": {
                            "id": "19806878f472b9a3f207c60e6508347ac578f0fd4946b693d59bc8e4fb33c739",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n5.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n5.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n5.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.3": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "baa9bbe6e7d0453b15ef05a348d8baab444456c0ebd6072b010c2be7ac7dca65",
                        "attributes": {
                            "id": "baa9bbe6e7d0453b15ef05a348d8baab444456c0ebd6072b010c2be7ac7dca65",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n6.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n6.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n6.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.4": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "f916c88bf0aa58b63c9aa218a430b344906c51d0f841a29876291eb56cc27f2c",
                        "attributes": {
                            "id": "f916c88bf0aa58b63c9aa218a430b344906c51d0f841a29876291eb56cc27f2c",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n7.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n7.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n7.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.5": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "bc3062f535ec36ad91fdd78275776e839b242f46610e1f5291c43ad8fbbb5f44",
                        "attributes": {
                            "id": "bc3062f535ec36ad91fdd78275776e839b242f46610e1f5291c43ad8fbbb5f44",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n8.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n8.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n8.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.6": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "78f9e27fac7ef52cbc93ded6d65a7ca6c677d2df59de76ef0f2d7ed98bbb1d0c",
                        "attributes": {
                            "id": "78f9e27fac7ef52cbc93ded6d65a7ca6c677d2df59de76ef0f2d7ed98bbb1d0c",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n9.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n9.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n9.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.7": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "194281c4ae2617996e239f4940d495e5c6a0ca5d5e1b570fc4e1a837b4006ad1",
                        "attributes": {
                            "id": "194281c4ae2617996e239f4940d495e5c6a0ca5d5e1b570fc4e1a837b4006ad1",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n10.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n10.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n10.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.8": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "986aad1d961da936bf3cd3cb122ea09b402ed26e84a729584b7400b1ceb49c3a",
                        "attributes": {
                            "id": "986aad1d961da936bf3cd3cb122ea09b402ed26e84a729584b7400b1ceb49c3a",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n11.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n11.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n11.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.9": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "03305aa6783f8c1add12cbb03eca1a97d389639b4f34c45dbf27d2793c8b6d62",
                        "attributes": {
                            "id": "03305aa6783f8c1add12cbb03eca1a97d389639b4f34c45dbf27d2793c8b6d62",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n12.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n12.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n12.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "matchbox_group.container-linux-install.0": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n2",
                        "attributes": {
                            "id": "container-linux-install-n2",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "container-linux-install-n2",
                            "profile": "steve-cached-container-linux-install-n2",
                            "selector.%": "1",
                            "selector.mac": "00:1E:4F:28:30:12"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.1": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n3",
                        "attributes": {
                            "id": "container-linux-install-n3",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "container-linux-install-n3",
                            "profile": "steve-cached-container-linux-install-n3",
                            "selector.%": "1",
                            "selector.mac": "00:22:19:AB:7E:78"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.10": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n12",
                        "attributes": {
                            "id": "container-linux-install-n12",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "container-linux-install-n12",
                            "profile": "steve-cached-container-linux-install-n12",
                            "selector.%": "1",
                            "selector.mac": "00:1A:A0:26:DA:B6"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.11": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n13",
                        "attributes": {
                            "id": "container-linux-install-n13",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "container-linux-install-n13",
                            "profile": "steve-cached-container-linux-install-n13",
                            "selector.%": "1",
                            "selector.mac": "00:1D:09:05:98:DC"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.2": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n4",
                        "attributes": {
                            "id": "container-linux-install-n4",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "container-linux-install-n4",
                            "profile": "steve-cached-container-linux-install-n4",
                            "selector.%": "1",
                            "selector.mac": "00:22:19:8E:15:77"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.3": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n5",
                        "attributes": {
                            "id": "container-linux-install-n5",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "container-linux-install-n5",
                            "profile": "steve-cached-container-linux-install-n5",
                            "selector.%": "1",
                            "selector.mac": "00:1E:C9:D0:AA:9E"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.4": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n6",
                        "attributes": {
                            "id": "container-linux-install-n6",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "container-linux-install-n6",
                            "profile": "steve-cached-container-linux-install-n6",
                            "selector.%": "1",
                            "selector.mac": "00:22:19:8E:26:B6"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.5": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n7",
                        "attributes": {
                            "id": "container-linux-install-n7",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "container-linux-install-n7",
                            "profile": "steve-cached-container-linux-install-n7",
                            "selector.%": "1",
                            "selector.mac": "00:22:19:8E:25:A1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.6": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n8",
                        "attributes": {
                            "id": "container-linux-install-n8",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "container-linux-install-n8",
                            "profile": "steve-cached-container-linux-install-n8",
                            "selector.%": "1",
                            "selector.mac": "00:22:19:8E:26:00"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.7": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n9",
                        "attributes": {
                            "id": "container-linux-install-n9",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "container-linux-install-n9",
                            "profile": "steve-cached-container-linux-install-n9",
                            "selector.%": "1",
                            "selector.mac": "00:1E:C9:D0:AA:BC"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.8": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n10",
                        "attributes": {
                            "id": "container-linux-install-n10",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "container-linux-install-n10",
                            "profile": "steve-cached-container-linux-install-n10",
                            "selector.%": "1",
                            "selector.mac": "00:1A:A0:15:E3:76"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.9": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n11",
                        "attributes": {
                            "id": "container-linux-install-n11",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "container-linux-install-n11",
                            "profile": "steve-cached-container-linux-install-n11",
                            "selector.%": "1",
                            "selector.mac": "00:1D:09:05:9A:C0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.controller": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.controllers.*"
                    ],
                    "primary": {
                        "id": "steve-n2",
                        "attributes": {
                            "id": "steve-n2",
                            "name": "steve-n2",
                            "profile": "steve-controller-n2",
                            "selector.%": "2",
                            "selector.mac": "00:1E:4F:28:30:12",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.0": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n3",
                        "attributes": {
                            "id": "steve-n3",
                            "name": "steve-n3",
                            "profile": "steve-worker-n3",
                            "selector.%": "2",
                            "selector.mac": "00:22:19:AB:7E:78",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.1": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n4",
                        "attributes": {
                            "id": "steve-n4",
                            "name": "steve-n4",
                            "profile": "steve-worker-n4",
                            "selector.%": "2",
                            "selector.mac": "00:22:19:8E:15:77",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.10": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n13",
                        "attributes": {
                            "id": "steve-n13",
                            "name": "steve-n13",
                            "profile": "steve-worker-n13",
                            "selector.%": "2",
                            "selector.mac": "00:1D:09:05:98:DC",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.2": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n5",
                        "attributes": {
                            "id": "steve-n5",
                            "name": "steve-n5",
                            "profile": "steve-worker-n5",
                            "selector.%": "2",
                            "selector.mac": "00:1E:C9:D0:AA:9E",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.3": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n6",
                        "attributes": {
                            "id": "steve-n6",
                            "name": "steve-n6",
                            "profile": "steve-worker-n6",
                            "selector.%": "2",
                            "selector.mac": "00:22:19:8E:26:B6",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.4": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n7",
                        "attributes": {
                            "id": "steve-n7",
                            "name": "steve-n7",
                            "profile": "steve-worker-n7",
                            "selector.%": "2",
                            "selector.mac": "00:22:19:8E:25:A1",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.5": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n8",
                        "attributes": {
                            "id": "steve-n8",
                            "name": "steve-n8",
                            "profile": "steve-worker-n8",
                            "selector.%": "2",
                            "selector.mac": "00:22:19:8E:26:00",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.6": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n9",
                        "attributes": {
                            "id": "steve-n9",
                            "name": "steve-n9",
                            "profile": "steve-worker-n9",
                            "selector.%": "2",
                            "selector.mac": "00:1E:C9:D0:AA:BC",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.7": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n10",
                        "attributes": {
                            "id": "steve-n10",
                            "name": "steve-n10",
                            "profile": "steve-worker-n10",
                            "selector.%": "2",
                            "selector.mac": "00:1A:A0:15:E3:76",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.8": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n11",
                        "attributes": {
                            "id": "steve-n11",
                            "name": "steve-n11",
                            "profile": "steve-worker-n11",
                            "selector.%": "2",
                            "selector.mac": "00:1D:09:05:9A:C0",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.9": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n12",
                        "attributes": {
                            "id": "steve-n12",
                            "name": "steve-n12",
                            "profile": "steve-worker-n12",
                            "selector.%": "2",
                            "selector.mac": "00:1A:A0:26:DA:B6",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.0": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n2",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n2",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n2"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.1": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n3",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n3",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n3"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.10": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n12",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n12",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n12"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.11": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n13",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n13",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n13"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.2": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n4",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n4",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n4"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.3": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n5",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n5",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n5"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.4": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n6",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n6",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n6"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.5": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n7",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n7",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n7"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.6": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n8",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n8",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n8"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.7": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n9",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n9",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n9"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.8": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n10",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n10",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n10"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.9": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n11",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n11",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n11"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.0": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n2",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n2",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n2"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.1": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n3",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n3",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n3"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.10": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n12",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n12",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n12"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.11": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n13",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n13",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n13"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.2": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n4",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n4",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n4"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.3": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n5",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n5",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n5"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.4": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n6",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n6",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n6"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.5": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n7",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n7",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n7"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.6": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n8",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n8",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n8"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.7": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n9",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n9",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n9"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.8": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n10",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n10",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n10"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.9": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n11",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n11",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n11"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.controllers": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.controller-configs.*"
                    ],
                    "primary": {
                        "id": "steve-controller-n2",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: etcd-member.service\n      enable: true\n      dropins:\n        - name: 40-etcd-cluster.conf\n          contents: |\n            [Service]\n            Environment=\"ETCD_IMAGE_TAG=v3.3.2\"\n            Environment=\"ETCD_NAME=n2\"\n            Environment=\"ETCD_ADVERTISE_CLIENT_URLS=https://n2.steve:2379\"\n            Environment=\"ETCD_INITIAL_ADVERTISE_PEER_URLS=https://n2.steve:2380\"\n            Environment=\"ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379\"\n            Environment=\"ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380\"\n            Environment=\"ETCD_INITIAL_CLUSTER=n2=https://n2.steve:2380\"\n            Environment=\"ETCD_STRICT_RECONFIG_CHECK=true\"\n            Environment=\"ETCD_SSL_DIR=/etc/ssl/etcd\"\n            Environment=\"ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/server-ca.crt\"\n            Environment=\"ETCD_CERT_FILE=/etc/ssl/certs/etcd/server.crt\"\n            Environment=\"ETCD_KEY_FILE=/etc/ssl/certs/etcd/server.key\"\n            Environment=\"ETCD_CLIENT_CERT_AUTH=true\"\n            Environment=\"ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/peer-ca.crt\"\n            Environment=\"ETCD_PEER_CERT_FILE=/etc/ssl/certs/etcd/peer.crt\"\n            Environment=\"ETCD_PEER_KEY_FILE=/etc/ssl/certs/etcd/peer.key\"\n            Environment=\"ETCD_PEER_CLIENT_CERT_AUTH=true\"\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n        RequiredBy=etcd-member.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n2.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/master \\\n          --node-labels=node-role.kubernetes.io/controller=\"true\" \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --register-with-taints=node-role.kubernetes.io/master=:NoSchedule \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=10\n        [Install]\n        WantedBy=multi-user.target\n    - name: bootkube.service\n      contents: |\n        [Unit]\n        Description=Bootstrap a Kubernetes control plane with a temp api-server\n        ConditionPathExists=!/opt/bootkube/init_bootkube.done\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        WorkingDirectory=/opt/bootkube\n        ExecStart=/opt/bootkube/bootkube-start\n        ExecStartPost=/bin/touch /opt/bootkube/init_bootkube.done\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n2.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\n    - path: /opt/bootkube/bootkube-start\n      filesystem: root\n      mode: 0544\n      user:\n        id: 500\n      group:\n        id: 500\n      contents:\n        inline: |\n          #!/bin/bash\n          # Wrapper for bootkube start\n          set -e\n          # Move experimental manifests\n          [ -n \"$(ls /opt/bootkube/assets/manifests-*/* 2\u003e/dev/null)\" ] \u0026\u0026 mv /opt/bootkube/assets/manifests-*/* /opt/bootkube/assets/manifests \u0026\u0026 rm -rf /opt/bootkube/assets/manifests-*\n          BOOTKUBE_ACI=\"${BOOTKUBE_ACI:-quay.io/coreos/bootkube}\"\n          BOOTKUBE_VERSION=\"${BOOTKUBE_VERSION:-v0.11.0}\"\n          BOOTKUBE_ASSETS=\"${BOOTKUBE_ASSETS:-/opt/bootkube/assets}\"\n          exec /usr/bin/rkt run \\\n            --trust-keys-from-https \\\n            --volume assets,kind=host,source=$BOOTKUBE_ASSETS \\\n            --mount volume=assets,target=/assets \\\n            --volume bootstrap,kind=host,source=/etc/kubernetes \\\n            --mount volume=bootstrap,target=/etc/kubernetes \\\n            $RKT_OPTS \\\n            ${BOOTKUBE_ACI}:${BOOTKUBE_VERSION} \\\n            --net=host \\\n            --dns=host \\\n            --exec=/bootkube -- start --asset-dir=/assets \"$@\"\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n",
                            "id": "steve-controller-n2",
                            "name": "steve-controller-n2"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.0": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n3",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n3.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n3.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "id": "steve-worker-n3",
                            "name": "steve-worker-n3"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.1": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n4",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n4.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n4.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "id": "steve-worker-n4",
                            "name": "steve-worker-n4"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.10": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n13",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n13.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n13.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "id": "steve-worker-n13",
                            "name": "steve-worker-n13"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.2": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n5",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n5.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n5.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "id": "steve-worker-n5",
                            "name": "steve-worker-n5"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.3": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n6",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n6.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n6.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "id": "steve-worker-n6",
                            "name": "steve-worker-n6"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.4": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n7",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n7.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n7.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "id": "steve-worker-n7",
                            "name": "steve-worker-n7"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.5": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n8",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n8.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n8.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "id": "steve-worker-n8",
                            "name": "steve-worker-n8"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.6": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n9",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n9.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n9.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "id": "steve-worker-n9",
                            "name": "steve-worker-n9"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.7": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n10",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n10.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n10.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "id": "steve-worker-n10",
                            "name": "steve-worker-n10"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.8": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n11",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n11.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n11.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "id": "steve-worker-n11",
                            "name": "steve-worker-n11"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.9": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n12",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n12.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n12.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "id": "steve-worker-n12",
                            "name": "steve-worker-n12"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "null_resource.copy-controller-secrets": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "7002079177460270844",
                        "attributes": {
                            "id": "7002079177460270844"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.0": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "3031931456332603525",
                        "attributes": {
                            "id": "3031931456332603525"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.10": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "1348428433061146424",
                        "attributes": {
                            "id": "1348428433061146424"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.2": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "5979626861978553207",
                        "attributes": {
                            "id": "5979626861978553207"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.3": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "2793884141360127144",
                        "attributes": {
                            "id": "2793884141360127144"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.4": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "9089485726034960581",
                        "attributes": {
                            "id": "9089485726034960581"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.5": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "3134161848583780367",
                        "attributes": {
                            "id": "3134161848583780367"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.6": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "1441227222068702050",
                        "attributes": {
                            "id": "1441227222068702050"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.7": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "482291189302700033",
                        "attributes": {
                            "id": "482291189302700033"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.8": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "3498281967626034467",
                        "attributes": {
                            "id": "3498281967626034467"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "kubernetes",
                "bootkube"
            ],
            "outputs": {
                "ca_cert": {
                    "sensitive": false,
                    "type": "string",
                    "value": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRZW1IbVZSd0ExTVZISG9CTjVHL1BLakFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURrdwpOakU1TVRaYUZ3MHhPVEEwTURrd05qRTVNVFphTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXpURFYKNkh2UTZUaFZKdVBKMWxxZzFFdUFCTzVScWU0MW1ncHUvZ3BheHN1WTV0SEJpRUpMNVpZMWpoY1NwcWljRTJpRQpReFlyUDJzaXBEazIwRVdwMnFzMkZaUUJidkt1czJSQ3NqOFdqQTZvbFpXaUdYREZMRjFUMzRYMXpWVFp6bzlPCm9wOERqeXBEYytHTGRBaGwwM3VuR0lZMjliWlZVN2lhdjJ3THBKSWFMcjU4Rjd0c2g5bEpnVVNLTE1rejhjN3MKdEIzTmVXOW1JcUs0ZEZjUzdRUE0wYWpkNWI2bGRVL3c3ZjJNU2UxczFNc2ZBZkZZUEhiRVFnRktVcFNnQkVIWAo0QnB1NXk5NXBGR0wzTkQyWXVPWlI2Z0F1bzF5R2c2ZlFOaE9rNUdyVG9VQUNzRm9RNXhkUDgwandJbnZPZmdWCjZhMnMrSGhKc2VhTitIVGtQd0lEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVTDFsM21BaWtaZWtQL1dnWVM4TEtRVXJ5N0Zrd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQmJZM096TS9WYkZicytwamhWOEo3RFUrU2VNRWFDbzR6Y1NEcUNHbmIvUit6Q2J5T2RYCmNKU0xQR1NpdmFYVVBROE1Ic0R6c2p0YlEzMHYwR2R1TElDbUdDU1IybnZBeDl2UDRYZzNsTmR4RlFPVE0zYVcKbC9LWHoyTzVhdHkvTytDWDZ5SVdsWW1iaW1tdjY2VENUeUVjR3pWK1VGL2pYRDNERzI1M2JoUUdSMU42cHdpSwplRHhaSDI4YXZsbjN0MDJwV1hkK3hxRkhGN09WWmhURjdGQnF1REJSQWVqb0NySExZcjc3N1dLTUNkKzlLaGprCjN2ZURBUnhmVVBpZ1lTSSt6b285Y0lVeU1sb04xSS9Qa0QrbFVyS3ExRmkxa2NUOWJkTkVlRVFsVlorRmR3d2sKL2VSZnd3ZGJqTHZOc3VTUjhRQWJUNTM2Z1BuVElrSm5yRkE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
                },
                "content_hash": {
                    "sensitive": false,
                    "type": "string",
                    "value": "a98d06ec542f3a58f894801515e53297f23fb7b7"
                },
                "etcd_ca_cert": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN CERTIFICATE-----\nMIIDDzCCAfegAwIBAgIRAIWMwA90ymeWVjbWW95Rqt8wDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDkwNjE5\nMTVaFw0xOTA0MDkwNjE5MTVaMCExDTALBgNVBAoTBGV0Y2QxEDAOBgNVBAMTB2V0\nY2QtY2EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDCuwNvulwMkGc7\nF5dliDWrlIgjjS3HpJm16X7ULxtR1T0oEc6MwGanzUf245qegeb3NbQuHbIjTsrP\nhBPz1OsnIAijAcqHMRjrK/k85BNOFu6GWPNmtxXwfNF0pQOSt+B1UiJEGvJPqa87\nZ1GLntNlqHUHSqg7RwpPFNMG6La52KalN8EbIkccwxyph8EzmFTQcnIIw2YEO2BL\ncfUe8eH45zYZ5S824qOlWjvs6JOz8fjST66cE9Lkm4I0HjtmZOIDTHLv2OeiIi0S\nJwxvKIAZhPZadsFl0YtacEdNRuea7kA0NIhLQRpJRKqrRbB/nL0U49mvmsgLZc/h\nmee+KBvBAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/\nMB0GA1UdDgQWBBTbZJWbLUA3LeExqczu5WgJcKcEEjANBgkqhkiG9w0BAQsFAAOC\nAQEAf9kb1jzl5BWv2i0GHFz828RqbsNVqiHMVhZKpGmj79+uDypTIvbLSRzvQnQw\nOdNIoEnJ31KJhZXS5yBHlYzpcy9Hnj9NVD6vwfOGkwagwYAvIMa6hLB9ndWA9pEx\nEUK6TNf1d1FiUBZoLND5oe+uyqbWyKIkYPWBpW9/nYgNNrGtA9bJyYy4+LN9REi3\na5FubMS+jyHvtNxZe8FGcbV/GWX9/Z8yH2XzfSPOL/c415FNPs70w/8JI/LUiffH\nYvAZ9V/0k56015ttuE67KGVDpDgG9i4KnfE2G4EuwHukmd+0IQA2C4abveG/kAw0\nacYPwpLCKUx7JnHhrP+bjW7uYw==\n-----END CERTIFICATE-----\n"
                },
                "etcd_client_cert": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN CERTIFICATE-----\nMIIDWDCCAkCgAwIBAgIQSlOy4ZC1JRaNYWuo//uCLzANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwOTA2MTkx\nNVoXDTE5MDQwOTA2MTkxNVowJTENMAsGA1UEChMEZXRjZDEUMBIGA1UEAxMLZXRj\nZC1jbGllbnQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCzYiC9ApMV\ns4/zC1gkJbHPU+k+dVR4+I4eNwXG76VRKZvzZspcywMudMZLNUKAl01SFZyXQnAn\nXQuOSwr6rFlP++o6hf+yxTEY4EsEj77oNKc4Q8yuaBlDbHg/WryuteTHkJE5JjHG\nZJixBwp+VnpvMHWFj57gUpfbdIhfUR6Odk11vLYEe7103dESAM68VH45qSSKJDsO\nXKHzrzkTfE2GyU9RClMIFSW8cOXiIzaYaZUzMzSSd/luLqk3JdDZ5E+qBCa8eZv/\nA9s1jK1Fq7o0nXRE0b8temeoAvYVOJ9T6FfDpKf9QqVIbbvhhRfPYvVJ2SGW1yAJ\n9diNPr2D9JPBAgMBAAGjgYcwgYQwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQG\nCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFNtk\nlZstQDct4TGpzO7laAlwpwQSMCQGA1UdEQQdMBuCCG4yLnN0ZXZlgglsb2NhbGhv\nc3SHBH8AAAEwDQYJKoZIhvcNAQELBQADggEBAA0dcpX++8hNdD1oiavq3+s4QtF3\nodWjnFM2rM2PJer4BVw0TMsH+k0xdUENIHqphMMWZCOMAbRQirjKW44wHm/lR0Ve\n/CiyMwvbTeVCqP4HrmDmdAL5rPz78B1Yd3yD3JjAvvlhcqgT3Ei3kTZ21krGUTp5\nMVAczf5CxZMHwx4FPKIeg4xuvV2knI6n1nR7kgTtIYxa/1jtw4BA4M1/eA4klIkJ\nlMSwncX1hcUFbAkx/nAEM0UOFmrCEOd35D1MAI5i4tjFnQYToukTjznoBJ+Yqau3\n4aXF3mkn4YuFKLcLC+H8ZEPXsGzROcmDm0TmuzLSHIrwZq+YzsoobiiCVoE=\n-----END CERTIFICATE-----\n"
                },
                "etcd_client_key": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAs2IgvQKTFbOP8wtYJCWxz1PpPnVUePiOHjcFxu+lUSmb82bK\nXMsDLnTGSzVCgJdNUhWcl0JwJ10LjksK+qxZT/vqOoX/ssUxGOBLBI++6DSnOEPM\nrmgZQ2x4P1q8rrXkx5CROSYxxmSYsQcKflZ6bzB1hY+e4FKX23SIX1EejnZNdby2\nBHu9dN3REgDOvFR+OakkiiQ7Dlyh8685E3xNhslPUQpTCBUlvHDl4iM2mGmVMzM0\nknf5bi6pNyXQ2eRPqgQmvHmb/wPbNYytRau6NJ10RNG/LXpnqAL2FTifU+hXw6Sn\n/UKlSG274YUXz2L1SdkhltcgCfXYjT69g/STwQIDAQABAoIBAAjJQ6U+XQnxE5np\n8lVC62SmTYRbptmOAxgDxeqqjkRdb2AKptrIrs01twi0AR/fSVA98r+N54RmEEzV\n7CG/E1jRk/Vt3spY0kDPq5z7lXQ2MAKXf40DWElvJKyluxwrmJsVv6c28bUv9DKn\nj6IEhlav3vG9ySBfq0R6frt8c6yylaB0aGYMVoBDBiavOAKr+UQdyLVKTCkfWJUf\n/63P+E9OZJlITNpDr0fFtPyPWaW/66ujfW8R1T4LvbPerTzdjhU6XdGiA6/CiaXI\ngv7fGn/XSmcE5jgvpJdzeNDX9gQtoEklWi5GB3QBDgWRO1giUD+PTmrpe9Z7dAhD\nNUGjneECgYEAw7V1wEBWAxX66BEnyZZttGQx8gCJmflT3pdCe/5fU6lVD3N/Gouv\nO5C1o3mL/lPDg/Qrc7nnm3AasQ584CoetNH6CPWqF9ZHaezSiC+gg7h+w70ZG+ep\nt5cbu+lo9CAnB1EftiXDNU8HaRWvxDbAxmeIe67ZR5wacG77U6df2oUCgYEA6qUo\nvwVTJGQwE3Q3tWfvubeOGZHRYc5qFSXUMOVKbJq59ZBF/Hfjo2U7mP8iIQ1+4FB7\noBp/HbkYS8TIHTlbx5n1I1v1Nn/3L7QPGNqKtGpulJe6Ik8TxqDEwOy/AxOQeELb\ncr+3IA+wfVViF/5DaKI7Hf5UZRy6MHmPDj18/w0CgYEAvaTPL7aoImFgOxS0q2E7\neTxGMa1XqX6zSNTmNeTuVtGVfV174ytMaLn3aSvU/mQI54rpuECDMFpXYw8Y7teh\n3bJDSf9UDbk0hm5YLGOKdVmIbQCGnkXEbgTdeR/a9gVaDHsN8aFyIews0CWVptsv\nvpKA7Okn335jGGRS4mMkPUkCgYBGXVLTvcAKCLVWECLolouQENhfGJhGkUTEpLx2\nETx5Rwj+983VAQrVo/T0U4YjjU1/7QK1p1x5SFld11v/T4UTXTri6J+nQUaaGo/w\nbxDrO4N/seRSh44xoWJ/TD+Xp5VKSxpN1eoPhkTxwNoSwd/rD8NUokEitTOsd7eL\nmKrUPQKBgE/u95gvDdtu7GzZOn/FBDbnm6C9q2v0/YDvu7PkKxqzc8iGRJIq+QAM\nTFD0fPYQLI1TurDSEQDpj4XJHt73EwUfJ3OyyoqOeV4BQKGgAhykE8kt5xXttcE8\nlV5p12yrRXvO/eOSVYhnLqfv+WuVLd+ASCCZG+uuXi7PAvHhNJ+G\n-----END RSA PRIVATE KEY-----\n"
                },
                "etcd_peer_cert": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN CERTIFICATE-----\nMIIDQzCCAiugAwIBAgIQcI0Fa6C8I6+4gEVF2t1TkzANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwOTA2MTkx\nNVoXDTE5MDQwOTA2MTkxNVowIzENMAsGA1UEChMEZXRjZDESMBAGA1UEAxMJZXRj\nZC1wZWVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAo+1WbcU3Vxz2\ntYnie8iHGvnlk/dQth6n3gxZLCN1S+d0TaR/kWNE7K2P3MFmVDDNIV666yRRBnoG\nYAcVVOB3JPZrundbsxj3QVSaW8jo244C20LgqdSiwrPw+l4VDVw7+YclFPIrFZtJ\nYa/6ZvjAOa1gEgYMNml4Dg2Nu68DfjAwxH6gMCTvL8YDMgPI8r8FoL76Bk95CBrk\nROXCIov5mZEVQQgAMaZ1MZXRd4kETjCYuIr0F6lrOOrgVe3uE4GYAlOiEoqx5Wma\nOWEdzex1Avgc28AnkMOVhNwR++GJaBYb+wSV2bIUPyVJDrs7vyGNrcugVD1pxYlI\njrxXykQb6wIDAQABo3UwczAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYB\nBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAU22SVmy1A\nNy3hManM7uVoCXCnBBIwEwYDVR0RBAwwCoIIbjIuc3RldmUwDQYJKoZIhvcNAQEL\nBQADggEBADCWBMWOE6sY67w1/JOUtSOEN0lUFIFRSjHi6Fu/iJSHQ+wv3CPLOfFA\noW4bGBYXPSwP2lDwmfDCcE5bERg/4ufIln/ku2dyaXI77Nm2cTURtmrcGDxA1Stg\nM7mIOQ34ktiVUkpGJi4gwGjegntSJx/0IsOGB3ogjSNKqIKgwp83pDHfUlUDLXgW\n0cNT4kz7FzezZ1meZiQYKGAxhiU7Y/6eG6+NN9vCS6PbL4HBoakO8F9AlSRoCatI\no5aGmsTX0GfU8Tr0R9rdw0IgSxIydEyZDKYDUvffmLUq7BHZ2ylFqRfvkn3zfU4k\nH5NIGizqCwvLKqtH8LkTJKBZWQVGhlY=\n-----END CERTIFICATE-----\n"
                },
                "etcd_peer_key": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEAo+1WbcU3Vxz2tYnie8iHGvnlk/dQth6n3gxZLCN1S+d0TaR/\nkWNE7K2P3MFmVDDNIV666yRRBnoGYAcVVOB3JPZrundbsxj3QVSaW8jo244C20Lg\nqdSiwrPw+l4VDVw7+YclFPIrFZtJYa/6ZvjAOa1gEgYMNml4Dg2Nu68DfjAwxH6g\nMCTvL8YDMgPI8r8FoL76Bk95CBrkROXCIov5mZEVQQgAMaZ1MZXRd4kETjCYuIr0\nF6lrOOrgVe3uE4GYAlOiEoqx5WmaOWEdzex1Avgc28AnkMOVhNwR++GJaBYb+wSV\n2bIUPyVJDrs7vyGNrcugVD1pxYlIjrxXykQb6wIDAQABAoIBAAio0vX9gwzhBM9W\nN1aeozRzmwMT/3l/aRK7yEIipWGbGnO3it2dRtjR2lWpCcTMxylKHcmqI3WaIJgW\nB7RyHxkew1YYVAnD+dvDolvS4yol+FSo1cFi8C4k30f6jFYmVyy5TOYsXMZJa7jz\nWODzpwPk+rw5AZAmRidH5ALUHfUedOkQ/sBsb3ijcgwvEOBJKCzxrVfEpZP6pIec\npGW1Suo6nWDL4rPYNGXJLRJWzIUf96AgzKS9oOqlzg/IVlzp71QfkwwOQPl3OrNk\nanqa7O8FRIYS1feJ4Dgsck3hfU9uIOwJCl4Hl6OQqtqw/vMQwVG5vxbEuTpGttJ/\nFjaA8kECgYEAwpkyo/60P2GQV/3KJ/z+nKwVWW9nSFzWczDQANBpJuG/dONinGnl\nrPDPalR+OqsU8Pa8p7DTl4kzYGSUQa1hlBmjEZDTxj6AV2Lep+rWliv1GeJFAIDX\n1HkhQ9PyxXWYFO+cp8FMHeDgv6qWeirnSrbcnTKRRGESJabZzr4nsPECgYEA16al\nLVYHizJphyVah7fuOOIv5DeEj0XyB1E5sSy+ECDbRLd4d8P9GqEVdhwZzx1g0B/V\nVxV5kWkehxJyzeC0evULuhdurGAOXph15jWBRhJy/8UG6C5AEfBSEBdiVBLGLCc2\nW07TR1O+qfmGZBtsEpGMmq6gdoLJlBnhAQR7mpsCgYAjIfV6limEp+CfgjpVLd/p\n+UeBdhN3hQtSkKV9ACN72ZXvTH4pLxVAO9m2oLqJbQnC10kIHWyWFzcnWAFMOjk7\nu8UtDrCtQet522fHeSZ0xkrh+W/rv1c4DQZscH+MFsb2QKxPvR445ris4ed49vX7\nDziVSOPhLIVSNuVr5fjUgQKBgHJGy9cndJ3t3AAS6lNrQ6D/M5PDW8q0rRn1kBX0\neM+BKdDTTNJimHiJDh9lqsOXdNs1U09vgNlulA/N1eqFff5+ZnV5v1s3F8ZHEoso\npVWlpy0kkpFtGOSorkP6sE+PF1cEfIiMT+fHWA0ovm/EHFQGrzS0/zFuAzYpNJPe\ndUWrAoGAf0C73k8nH/MqGPnbrponHPHFnRFJ+WGdVYD+Tc46/reVtxpdFysJeU6b\nsA0cdbI5iucwqifiH87gerrvrINIPau+EnqS2q2lL6gzTaTlU8qUPCJsfZ3d5P+T\nsoxvlaIcGycP4dcbz3L6XS0zKha5AcvCladXQa2lKvISS9O62LI=\n-----END RSA PRIVATE KEY-----\n"
                },
                "etcd_server_cert": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN CERTIFICATE-----\nMIIDWDCCAkCgAwIBAgIQKZ6Rbwyiawh1Tg9r80EuJDANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwOTA2MTkx\nNVoXDTE5MDQwOTA2MTkxNVowJTENMAsGA1UEChMEZXRjZDEUMBIGA1UEAxMLZXRj\nZC1zZXJ2ZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDIeScMPZe9\nerpuflfnCT+WGTZdeZBnRzkElBdcsJaIA8UUvR0EPGRi6oDQIn+cAzTYSDwlROKk\nutzeVUXmYhDPcCGo4ad37CMpKH1kuESvMC3PY3gpx21XRZKlFs59LCDADjRYf+XM\n2EJcKFtuFPd5j3CS09Zr4PU7chlgjGx0YQj1fpf+1f1ltGT7JQk5RqkAi90ZzLUu\nTUGF8T9rvt52TZwLt/4cJfx20F/Pn7NOq1g2MAIgVWDn8vr5rHP7PSyIRT30bNzS\n4lx2Bp0Nqz/cpaBp2CCXrybDDoFL7uWuSgOwCMwZCByaUowp6A1f0UNWVffS1E4m\n3buBLEYe6UB5AgMBAAGjgYcwgYQwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQG\nCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFNtk\nlZstQDct4TGpzO7laAlwpwQSMCQGA1UdEQQdMBuCCG4yLnN0ZXZlgglsb2NhbGhv\nc3SHBH8AAAEwDQYJKoZIhvcNAQELBQADggEBABTJ5NiJnJ3HDok4dLanbM0nyIEw\npN+TWLeBVDlq3qJQSUgBu90N15qapujzRohgWIiddKc4mVZWUw4HndR5682GQLdL\noaV8WlPNWaEJHPttCXNOg+rvTLDaVtpWMITLRUtlVhwhlMQJHZfmtO3OQxBf/ctI\naIpx4mgamzU+nXmapZ7uO7hj5fvYokG0j5sOE771VHcDMWdqrIsWEmYrBe9CgTSP\nM7LKdq3v3Hk7od+odamYAcKQeD7DKaqRFaFAvoDXmlgZinuY2dhA+Y95pK9bTAht\npnhjI5W8pRRL5u1IcEi+YvEIM8r2kFMqW5rgQRbu0x0m6F6n0c7dUx79DiI=\n-----END CERTIFICATE-----\n"
                },
                "etcd_server_key": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAyHknDD2XvXq6bn5X5wk/lhk2XXmQZ0c5BJQXXLCWiAPFFL0d\nBDxkYuqA0CJ/nAM02Eg8JUTipLrc3lVF5mIQz3AhqOGnd+wjKSh9ZLhErzAtz2N4\nKcdtV0WSpRbOfSwgwA40WH/lzNhCXChbbhT3eY9wktPWa+D1O3IZYIxsdGEI9X6X\n/tX9ZbRk+yUJOUapAIvdGcy1Lk1BhfE/a77edk2cC7f+HCX8dtBfz5+zTqtYNjAC\nIFVg5/L6+axz+z0siEU99Gzc0uJcdgadDas/3KWgadggl68mww6BS+7lrkoDsAjM\nGQgcmlKMKegNX9FDVlX30tROJt27gSxGHulAeQIDAQABAoIBAHr5prRhjBWVlYt2\nQWHeUH041hqdGbHhBN8EIRig0pZ5CYphP817ZnEvPPlwUCtZ5C7QkOSjzwwR/K7+\nTDS472rwdBVu5xYvapoy1kjUqH125oMTl4C5bx9b9EsFJIGwch6eGAo52rO/7WUu\n9HcgsXaGQR4wiJYAly5yHZMWUOlKDw8LYf+wa/Ghk5mhPX3N+Y9RY8wSeCKTNjAA\nL6H99ktO8whMNLujs8UImb9x+ygK7biyZr8az0j2GbqJ4IwKeV1ZWuV4nd62jmwi\nVsLfLTPArbDlYSWw3RKOsBpNUCIPG4dWjEg7L4gyJQ8q+tfDQRfSg0UNHa12Z1fq\nYXlxkQECgYEA4ncSo59ljFlQrDdFlJ+Bc9Dj8IEKSr5nAdEFGD9TjM7AAyrr1mdD\nYWJUY0SBuAPlHQOcu6X52CkvOlQQBriGY845JBeoZao0oLj52QDYzuucy2XQDTpd\ngDY09cGahBbOtSUImtsFBIMTWoButIX8777tGignJp4YZSXtvjosYhECgYEA4p5L\n2qCN2cLHw/O9r5+4p4gZZ6B5vqBGETn7hv7kR9pIvvMqzNalC5UWP7YNA4tu0KP1\n1x7Kcl66kNICmSk5METclSa6BsINQamcQMnVLcsIL6VFb5bsISxNVW7Pv8AqDkaf\nU8BAJoY3Bb2ysh+Rw68gQLcDymhBkZ0QZLF1D+kCgYEAvGfpxtymhCQOPKhjJ+mn\nri3cZMtGP7a2RcmaXnjYzq13C2ua9y3D3fILWOa2sNv0sbW+oFLOUCq7UuB60MyV\nadU4rrFL9QCsdgZOPl45AbT9Ji6W71peTXtLhiXCoh/DaurbhNGwE/fkkweEkoVi\nUCbcZUWAhN1EWGo8p2UIZbECgYA0EY74Mr+k8x4XJd/FhHtW8uxzZOnUJNs0hhAG\n2nX1FHB2f0SsP/04Bg9QoDGpSNYzVhjcTpTRZnaTY815B4G+V3QfSQChIOEO3zup\nnzY+CVJeMCkeFJ04mgdCw+0z76E6GnvtMFUNBPWLeiSezKYfQhO1CtfyH7ZBEMd9\ne1CcUQKBgQC2oIbkjYp2pZOkMMi5g5xlCOkw9/PFJ8oi0XvnXcRCkg+bdcOEDnsb\nHT5cHK4/GdYC+ThU5wWnV65ltxwiAcDP4xAiXkBmws+paBSQi06zkM5oMySwNCrC\n6aSU+Y+eqUqJND+pKRukyZa/ZGKJKmSKr/DXzv5AwGySAu3k4xMssg==\n-----END RSA PRIVATE KEY-----\n"
                },
                "id": {
                    "sensitive": false,
                    "type": "string",
                    "value": "73dc1903369a0007ff4d9b5b6388eb2899be5743"
                },
                "kube_dns_service_ip": {
                    "sensitive": false,
                    "type": "string",
                    "value": "10.3.0.10"
                },
                "kubeconfig": {
                    "sensitive": false,
                    "type": "string",
                    "value": "apiVersion: v1\nkind: Config\nclusters:\n- name: local\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRZW1IbVZSd0ExTVZISG9CTjVHL1BLakFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURrdwpOakU1TVRaYUZ3MHhPVEEwTURrd05qRTVNVFphTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXpURFYKNkh2UTZUaFZKdVBKMWxxZzFFdUFCTzVScWU0MW1ncHUvZ3BheHN1WTV0SEJpRUpMNVpZMWpoY1NwcWljRTJpRQpReFlyUDJzaXBEazIwRVdwMnFzMkZaUUJidkt1czJSQ3NqOFdqQTZvbFpXaUdYREZMRjFUMzRYMXpWVFp6bzlPCm9wOERqeXBEYytHTGRBaGwwM3VuR0lZMjliWlZVN2lhdjJ3THBKSWFMcjU4Rjd0c2g5bEpnVVNLTE1rejhjN3MKdEIzTmVXOW1JcUs0ZEZjUzdRUE0wYWpkNWI2bGRVL3c3ZjJNU2UxczFNc2ZBZkZZUEhiRVFnRktVcFNnQkVIWAo0QnB1NXk5NXBGR0wzTkQyWXVPWlI2Z0F1bzF5R2c2ZlFOaE9rNUdyVG9VQUNzRm9RNXhkUDgwandJbnZPZmdWCjZhMnMrSGhKc2VhTitIVGtQd0lEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVTDFsM21BaWtaZWtQL1dnWVM4TEtRVXJ5N0Zrd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQmJZM096TS9WYkZicytwamhWOEo3RFUrU2VNRWFDbzR6Y1NEcUNHbmIvUit6Q2J5T2RYCmNKU0xQR1NpdmFYVVBROE1Ic0R6c2p0YlEzMHYwR2R1TElDbUdDU1IybnZBeDl2UDRYZzNsTmR4RlFPVE0zYVcKbC9LWHoyTzVhdHkvTytDWDZ5SVdsWW1iaW1tdjY2VENUeUVjR3pWK1VGL2pYRDNERzI1M2JoUUdSMU42cHdpSwplRHhaSDI4YXZsbjN0MDJwV1hkK3hxRkhGN09WWmhURjdGQnF1REJSQWVqb0NySExZcjc3N1dLTUNkKzlLaGprCjN2ZURBUnhmVVBpZ1lTSSt6b285Y0lVeU1sb04xSS9Qa0QrbFVyS3ExRmkxa2NUOWJkTkVlRVFsVlorRmR3d2sKL2VSZnd3ZGJqTHZOc3VTUjhRQWJUNTM2Z1BuVElrSm5yRkE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: kubelet\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQUpxdWYvWldLL0RXVXdtUWRESStzdVV3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBNQpNRFl4T1RFMldoY05NVGt3TkRBNU1EWXhPVEUyV2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFOKzJ3MkNlU3VSaWdFRnh2d3lyd3pYR1lieENta0o3bUU3ZlFVUGVPZG1oV21BZys4amtYNFFJWlF1OAppVEtvTFNBZVdVUklNd3d5MzJ6ZmFqeFJ4bzlMYmpBeTUxWklWQVhJQjdqcjB0elJXYnIxaUxCa0xsZDFTVlpLCjUwUzlrMUh1QXFETkhpUEZEV1Q4QlZKV1BoTk9SLzNvQW16TFpWcXJVRWRyZVFYeXF2djQ5OEdFQ0RwanNYRUEKaHNrYlFQWUF2QlZuZUhzTlR6L2Z6OXFNc1pMbFZwQWJheVFnY3VWdTZPWUpqV212akMwQ2lkeWFiUUU5aVRBTApSYTZnbXp3TjdoL2RLZ0dTblc3LzlQS1FyYm9LWGR1TjFRODZ1UXNablBNejk5YWZIT0I4US9vT2hLc0hmOXViCml3enNwanZwYld4bkJzd25ieEYyVCtEN1ZxY0NBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZDOVpkNWdJcEdYcEQvMW9HRXZDeWtGSzh1eFpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJzCjlkREVhckpJUlhYZGlZakZiRWVMS1U1WHNzMnNBWk5OYnZkbkYrUnJLYllZZk5FNUU0M3V0WFdDNkFTMzRsNloKUFFvaTg5cWZtZVNHNVhkcURESno5YUNqTXFjVHZwaUhvL0ZqSVBmYnZzcXNPM2JiL0xpVlJXRnB0RUxqcWlUdApZa2UycTQ2Y2QvczBZWnRtOTREVDl2SmhDWVNtZUc2VHZCUkUzbGhXUnFRWGVsNGlORE04eURURXp1R3Z6RlUrCjFpRDNtWG1nNnpoVldRem1hVmpGVkZqSEc1OEhKb3ZONCt4V2tTcHhRTFBMMkdGTGpMaytGSHNPKzVzTU0wYXAKL25KaVdyNHN4N3lxNkwra0lObVg0MmtBSUFpSklwY05yellQNHVFZXR2WUQwaDRKd2ZTWmQySk5aR1c4SXdKdwo1ckNsV290T1FMSTJIRWhMTmJ1VAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMzdiRFlKNUs1R0tBUVhHL0RLdkROY1podkVLYVFudVlUdDlCUTk0NTJhRmFZQ0Q3CnlPUmZoQWhsQzd5Sk1xZ3RJQjVaUkVnekRETGZiTjlxUEZIR2owdHVNRExuVmtoVUJjZ0h1T3ZTM05GWnV2V0kKc0dRdVYzVkpWa3JuUkwyVFVlNENvTTBlSThVTlpQd0ZVbFkrRTA1SC9lZ0NiTXRsV3F0UVIydDVCZktxKy9qMwp3WVFJT21PeGNRQ0d5UnRBOWdDOEZXZDRldzFQUDkvUDJveXhrdVZXa0J0ckpDQnk1VzdvNWdtTmFhK01MUUtKCjNKcHRBVDJKTUF0RnJxQ2JQQTN1SDkwcUFaS2Ridi8wOHBDdHVncGQyNDNWRHpxNUN4bWM4elAzMXA4YzRIeEQKK2c2RXF3ZC8yNXVMRE95bU8rbHRiR2NHekNkdkVYWlA0UHRXcHdJREFRQUJBb0lCQVFDbGJKTEtoaUpoQVFsUAoyMWxuZURkUU0xS2dFQ3ZiVDJOUHB6eXVmOHdOUm9mNm4wa3Z3dGR5WFhiQ2wvWm5zLzR5U3Q2OVpCb0RRamIrClhiSkR5a0JtUTJQR1ZrM0QrcFhPOUp2cFBOQmVvcHVVYU8xYmFhanUyUGFTemE1M29Tc25vVFRtVE9hbGtwZVYKL2RtOWliSTdPbDUzdlREVjNBMGxYNXBzUldkbllpanFwL1JKaDVkVW5VQU9hS0V6SHBRc2lQMWlGN0Z4SUlHcgpwQVpZczRqOS9xTjBWd2YzMk5WSXJjZGVPbmFHMEVOSHJrZTE3VUo5YUpjakhyYnBhRGhqcytCbTVWcEFZNGxyCjhPNitpc1IwYlpiUWRZQlgxbnZvYXQ0Nk9QaFJQVzlLbERYeE1zZEw0VnN2Qld4UzBsQmZOYzdlUWlwTVFYSW0KalVFRnFqSWhBb0dCQU82c3RYVy84OXFlRndyUFc3SGRiRG1lZU1hd3J5MDRwd3FNOHFiM3dUa0NRcVFBODZoLwo3dEdnWHRIRFZ0QVRUaFI2WDBLdlA1N1I1M3UvcGhzVFltOENLOThLeU0yYmd6MUxGbVltWkxxSHV1blViUVhrCllzNmtRaExVcG83aVk2d2dtYS9mUmx4MFN5RDM2Z2dlV1Yvc3hjNUdOaHl1R0ZhZGdxUkc1cG9YQW9HQkFPLzAKQ2dpUk1wdTFtWmxXUUpYKzR4cGRMQXF5bmQ5MVZhWitzWlVuZXRLNXZ5V3UxOUtKa0xvQ3dWNXNsamhiYStPLwpsUjVjMnlJa20xUzFScGlLdStwZnB2ZWJrTEpaRU9TRkNVd2M0R05CV0NzUjB1R2ppUzRLWnlkMHJjZGxMT3B2CkkwMnZkNlJ6cHJ1WTEwL1pFUVByZ2lYb2JUL2FEVm1oTUp0NjFWSHhBb0dBR3BQOCtRblJHKzB5MzY5THBMamwKamwwSlVnYm0yd0JPQ2F5OGNMOXlNdWovaHNmY1drMDB5UDgweitNU3pjVDRrdXMxcEhWamZrb2Rudmd1aFNGWgplc2NoSDR0UjVTT0dMOU1td1dWUkhqeHpJZ3JYd1NvM25vOUlGRlM5MzNkeVpmNlRYclJjWDN0THluWVJCNnBwCmhYY1daK3dGcHBmMGVlQzhaWkxIcHkwQ2dZQkxDZ2RsUEhzV0pNbC9JWEViTjFXd05ma0M4MjdacGVqK0kxckgKcVV3SXdGdmRuZnNTZFVEVVd1NDc2RHRtTG5qa0JWTE41djRFaEd3ckpuR0lYTUo5ZmlKS0J0Vk9ZUG9lYk5oRwpmRFZUOU9oc3Q2czZNeGxBVTdLRXJVRjNQTlc2RHIxOG11WVFnTFpncm1DUE1QUFlSUHN6ZmFkRXM1MC9MV0IxCkR3bk5FUUtCZ1FDRDhVbFFpN2R1ZVUveWk5dHZaeVhRRzN6SENEVHBoTC9JTzJvR1BQUE9pOXJjRjlIQStLL3UKK0lFZTlyWCtLNUxrMWZmeDNqRjFHWEl6VUJzeTNwSXJmS1hjNjZDNklxUWJkNllNMTQzaGhZeXZlcUNtekplSAphTGdOQUJkVjErYmpFMTY1bmtWV0V6ZUhWVmZ3Z3I5Z1puZzgyZlEwUUlyK004Zm54UTR0eGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\ncontexts:\n- context:\n    cluster: local\n    user: kubelet\n"
                },
                "kubelet_cert": {
                    "sensitive": false,
                    "type": "string",
                    "value": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQUpxdWYvWldLL0RXVXdtUWRESStzdVV3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBNQpNRFl4T1RFMldoY05NVGt3TkRBNU1EWXhPVEUyV2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFOKzJ3MkNlU3VSaWdFRnh2d3lyd3pYR1lieENta0o3bUU3ZlFVUGVPZG1oV21BZys4amtYNFFJWlF1OAppVEtvTFNBZVdVUklNd3d5MzJ6ZmFqeFJ4bzlMYmpBeTUxWklWQVhJQjdqcjB0elJXYnIxaUxCa0xsZDFTVlpLCjUwUzlrMUh1QXFETkhpUEZEV1Q4QlZKV1BoTk9SLzNvQW16TFpWcXJVRWRyZVFYeXF2djQ5OEdFQ0RwanNYRUEKaHNrYlFQWUF2QlZuZUhzTlR6L2Z6OXFNc1pMbFZwQWJheVFnY3VWdTZPWUpqV212akMwQ2lkeWFiUUU5aVRBTApSYTZnbXp3TjdoL2RLZ0dTblc3LzlQS1FyYm9LWGR1TjFRODZ1UXNablBNejk5YWZIT0I4US9vT2hLc0hmOXViCml3enNwanZwYld4bkJzd25ieEYyVCtEN1ZxY0NBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZDOVpkNWdJcEdYcEQvMW9HRXZDeWtGSzh1eFpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJzCjlkREVhckpJUlhYZGlZakZiRWVMS1U1WHNzMnNBWk5OYnZkbkYrUnJLYllZZk5FNUU0M3V0WFdDNkFTMzRsNloKUFFvaTg5cWZtZVNHNVhkcURESno5YUNqTXFjVHZwaUhvL0ZqSVBmYnZzcXNPM2JiL0xpVlJXRnB0RUxqcWlUdApZa2UycTQ2Y2QvczBZWnRtOTREVDl2SmhDWVNtZUc2VHZCUkUzbGhXUnFRWGVsNGlORE04eURURXp1R3Z6RlUrCjFpRDNtWG1nNnpoVldRem1hVmpGVkZqSEc1OEhKb3ZONCt4V2tTcHhRTFBMMkdGTGpMaytGSHNPKzVzTU0wYXAKL25KaVdyNHN4N3lxNkwra0lObVg0MmtBSUFpSklwY05yellQNHVFZXR2WUQwaDRKd2ZTWmQySk5aR1c4SXdKdwo1ckNsV290T1FMSTJIRWhMTmJ1VAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
                },
                "kubelet_key": {
                    "sensitive": false,
                    "type": "string",
                    "value": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMzdiRFlKNUs1R0tBUVhHL0RLdkROY1podkVLYVFudVlUdDlCUTk0NTJhRmFZQ0Q3CnlPUmZoQWhsQzd5Sk1xZ3RJQjVaUkVnekRETGZiTjlxUEZIR2owdHVNRExuVmtoVUJjZ0h1T3ZTM05GWnV2V0kKc0dRdVYzVkpWa3JuUkwyVFVlNENvTTBlSThVTlpQd0ZVbFkrRTA1SC9lZ0NiTXRsV3F0UVIydDVCZktxKy9qMwp3WVFJT21PeGNRQ0d5UnRBOWdDOEZXZDRldzFQUDkvUDJveXhrdVZXa0J0ckpDQnk1VzdvNWdtTmFhK01MUUtKCjNKcHRBVDJKTUF0RnJxQ2JQQTN1SDkwcUFaS2Ridi8wOHBDdHVncGQyNDNWRHpxNUN4bWM4elAzMXA4YzRIeEQKK2c2RXF3ZC8yNXVMRE95bU8rbHRiR2NHekNkdkVYWlA0UHRXcHdJREFRQUJBb0lCQVFDbGJKTEtoaUpoQVFsUAoyMWxuZURkUU0xS2dFQ3ZiVDJOUHB6eXVmOHdOUm9mNm4wa3Z3dGR5WFhiQ2wvWm5zLzR5U3Q2OVpCb0RRamIrClhiSkR5a0JtUTJQR1ZrM0QrcFhPOUp2cFBOQmVvcHVVYU8xYmFhanUyUGFTemE1M29Tc25vVFRtVE9hbGtwZVYKL2RtOWliSTdPbDUzdlREVjNBMGxYNXBzUldkbllpanFwL1JKaDVkVW5VQU9hS0V6SHBRc2lQMWlGN0Z4SUlHcgpwQVpZczRqOS9xTjBWd2YzMk5WSXJjZGVPbmFHMEVOSHJrZTE3VUo5YUpjakhyYnBhRGhqcytCbTVWcEFZNGxyCjhPNitpc1IwYlpiUWRZQlgxbnZvYXQ0Nk9QaFJQVzlLbERYeE1zZEw0VnN2Qld4UzBsQmZOYzdlUWlwTVFYSW0KalVFRnFqSWhBb0dCQU82c3RYVy84OXFlRndyUFc3SGRiRG1lZU1hd3J5MDRwd3FNOHFiM3dUa0NRcVFBODZoLwo3dEdnWHRIRFZ0QVRUaFI2WDBLdlA1N1I1M3UvcGhzVFltOENLOThLeU0yYmd6MUxGbVltWkxxSHV1blViUVhrCllzNmtRaExVcG83aVk2d2dtYS9mUmx4MFN5RDM2Z2dlV1Yvc3hjNUdOaHl1R0ZhZGdxUkc1cG9YQW9HQkFPLzAKQ2dpUk1wdTFtWmxXUUpYKzR4cGRMQXF5bmQ5MVZhWitzWlVuZXRLNXZ5V3UxOUtKa0xvQ3dWNXNsamhiYStPLwpsUjVjMnlJa20xUzFScGlLdStwZnB2ZWJrTEpaRU9TRkNVd2M0R05CV0NzUjB1R2ppUzRLWnlkMHJjZGxMT3B2CkkwMnZkNlJ6cHJ1WTEwL1pFUVByZ2lYb2JUL2FEVm1oTUp0NjFWSHhBb0dBR3BQOCtRblJHKzB5MzY5THBMamwKamwwSlVnYm0yd0JPQ2F5OGNMOXlNdWovaHNmY1drMDB5UDgweitNU3pjVDRrdXMxcEhWamZrb2Rudmd1aFNGWgplc2NoSDR0UjVTT0dMOU1td1dWUkhqeHpJZ3JYd1NvM25vOUlGRlM5MzNkeVpmNlRYclJjWDN0THluWVJCNnBwCmhYY1daK3dGcHBmMGVlQzhaWkxIcHkwQ2dZQkxDZ2RsUEhzV0pNbC9JWEViTjFXd05ma0M4MjdacGVqK0kxckgKcVV3SXdGdmRuZnNTZFVEVVd1NDc2RHRtTG5qa0JWTE41djRFaEd3ckpuR0lYTUo5ZmlKS0J0Vk9ZUG9lYk5oRwpmRFZUOU9oc3Q2czZNeGxBVTdLRXJVRjNQTlc2RHIxOG11WVFnTFpncm1DUE1QUFlSUHN6ZmFkRXM1MC9MV0IxCkR3bk5FUUtCZ1FDRDhVbFFpN2R1ZVUveWk5dHZaeVhRRzN6SENEVHBoTC9JTzJvR1BQUE9pOXJjRjlIQStLL3UKK0lFZTlyWCtLNUxrMWZmeDNqRjFHWEl6VUJzeTNwSXJmS1hjNjZDNklxUWJkNllNMTQzaGhZeXZlcUNtekplSAphTGdOQUJkVjErYmpFMTY1bmtWV0V6ZUhWVmZ3Z3I5Z1puZzgyZlEwUUlyK004Zm54UTR0eGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
                },
                "server": {
                    "sensitive": false,
                    "type": "string",
                    "value": "https://steve:443"
                },
                "user-kubeconfig": {
                    "sensitive": false,
                    "type": "string",
                    "value": "apiVersion: v1\nkind: Config\nclusters:\n- name: steve-cluster\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRZW1IbVZSd0ExTVZISG9CTjVHL1BLakFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURrdwpOakU1TVRaYUZ3MHhPVEEwTURrd05qRTVNVFphTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXpURFYKNkh2UTZUaFZKdVBKMWxxZzFFdUFCTzVScWU0MW1ncHUvZ3BheHN1WTV0SEJpRUpMNVpZMWpoY1NwcWljRTJpRQpReFlyUDJzaXBEazIwRVdwMnFzMkZaUUJidkt1czJSQ3NqOFdqQTZvbFpXaUdYREZMRjFUMzRYMXpWVFp6bzlPCm9wOERqeXBEYytHTGRBaGwwM3VuR0lZMjliWlZVN2lhdjJ3THBKSWFMcjU4Rjd0c2g5bEpnVVNLTE1rejhjN3MKdEIzTmVXOW1JcUs0ZEZjUzdRUE0wYWpkNWI2bGRVL3c3ZjJNU2UxczFNc2ZBZkZZUEhiRVFnRktVcFNnQkVIWAo0QnB1NXk5NXBGR0wzTkQyWXVPWlI2Z0F1bzF5R2c2ZlFOaE9rNUdyVG9VQUNzRm9RNXhkUDgwandJbnZPZmdWCjZhMnMrSGhKc2VhTitIVGtQd0lEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVTDFsM21BaWtaZWtQL1dnWVM4TEtRVXJ5N0Zrd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQmJZM096TS9WYkZicytwamhWOEo3RFUrU2VNRWFDbzR6Y1NEcUNHbmIvUit6Q2J5T2RYCmNKU0xQR1NpdmFYVVBROE1Ic0R6c2p0YlEzMHYwR2R1TElDbUdDU1IybnZBeDl2UDRYZzNsTmR4RlFPVE0zYVcKbC9LWHoyTzVhdHkvTytDWDZ5SVdsWW1iaW1tdjY2VENUeUVjR3pWK1VGL2pYRDNERzI1M2JoUUdSMU42cHdpSwplRHhaSDI4YXZsbjN0MDJwV1hkK3hxRkhGN09WWmhURjdGQnF1REJSQWVqb0NySExZcjc3N1dLTUNkKzlLaGprCjN2ZURBUnhmVVBpZ1lTSSt6b285Y0lVeU1sb04xSS9Qa0QrbFVyS3ExRmkxa2NUOWJkTkVlRVFsVlorRmR3d2sKL2VSZnd3ZGJqTHZOc3VTUjhRQWJUNTM2Z1BuVElrSm5yRkE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: steve-user\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQUpxdWYvWldLL0RXVXdtUWRESStzdVV3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBNQpNRFl4T1RFMldoY05NVGt3TkRBNU1EWXhPVEUyV2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFOKzJ3MkNlU3VSaWdFRnh2d3lyd3pYR1lieENta0o3bUU3ZlFVUGVPZG1oV21BZys4amtYNFFJWlF1OAppVEtvTFNBZVdVUklNd3d5MzJ6ZmFqeFJ4bzlMYmpBeTUxWklWQVhJQjdqcjB0elJXYnIxaUxCa0xsZDFTVlpLCjUwUzlrMUh1QXFETkhpUEZEV1Q4QlZKV1BoTk9SLzNvQW16TFpWcXJVRWRyZVFYeXF2djQ5OEdFQ0RwanNYRUEKaHNrYlFQWUF2QlZuZUhzTlR6L2Z6OXFNc1pMbFZwQWJheVFnY3VWdTZPWUpqV212akMwQ2lkeWFiUUU5aVRBTApSYTZnbXp3TjdoL2RLZ0dTblc3LzlQS1FyYm9LWGR1TjFRODZ1UXNablBNejk5YWZIT0I4US9vT2hLc0hmOXViCml3enNwanZwYld4bkJzd25ieEYyVCtEN1ZxY0NBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZDOVpkNWdJcEdYcEQvMW9HRXZDeWtGSzh1eFpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJzCjlkREVhckpJUlhYZGlZakZiRWVMS1U1WHNzMnNBWk5OYnZkbkYrUnJLYllZZk5FNUU0M3V0WFdDNkFTMzRsNloKUFFvaTg5cWZtZVNHNVhkcURESno5YUNqTXFjVHZwaUhvL0ZqSVBmYnZzcXNPM2JiL0xpVlJXRnB0RUxqcWlUdApZa2UycTQ2Y2QvczBZWnRtOTREVDl2SmhDWVNtZUc2VHZCUkUzbGhXUnFRWGVsNGlORE04eURURXp1R3Z6RlUrCjFpRDNtWG1nNnpoVldRem1hVmpGVkZqSEc1OEhKb3ZONCt4V2tTcHhRTFBMMkdGTGpMaytGSHNPKzVzTU0wYXAKL25KaVdyNHN4N3lxNkwra0lObVg0MmtBSUFpSklwY05yellQNHVFZXR2WUQwaDRKd2ZTWmQySk5aR1c4SXdKdwo1ckNsV290T1FMSTJIRWhMTmJ1VAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMzdiRFlKNUs1R0tBUVhHL0RLdkROY1podkVLYVFudVlUdDlCUTk0NTJhRmFZQ0Q3CnlPUmZoQWhsQzd5Sk1xZ3RJQjVaUkVnekRETGZiTjlxUEZIR2owdHVNRExuVmtoVUJjZ0h1T3ZTM05GWnV2V0kKc0dRdVYzVkpWa3JuUkwyVFVlNENvTTBlSThVTlpQd0ZVbFkrRTA1SC9lZ0NiTXRsV3F0UVIydDVCZktxKy9qMwp3WVFJT21PeGNRQ0d5UnRBOWdDOEZXZDRldzFQUDkvUDJveXhrdVZXa0J0ckpDQnk1VzdvNWdtTmFhK01MUUtKCjNKcHRBVDJKTUF0RnJxQ2JQQTN1SDkwcUFaS2Ridi8wOHBDdHVncGQyNDNWRHpxNUN4bWM4elAzMXA4YzRIeEQKK2c2RXF3ZC8yNXVMRE95bU8rbHRiR2NHekNkdkVYWlA0UHRXcHdJREFRQUJBb0lCQVFDbGJKTEtoaUpoQVFsUAoyMWxuZURkUU0xS2dFQ3ZiVDJOUHB6eXVmOHdOUm9mNm4wa3Z3dGR5WFhiQ2wvWm5zLzR5U3Q2OVpCb0RRamIrClhiSkR5a0JtUTJQR1ZrM0QrcFhPOUp2cFBOQmVvcHVVYU8xYmFhanUyUGFTemE1M29Tc25vVFRtVE9hbGtwZVYKL2RtOWliSTdPbDUzdlREVjNBMGxYNXBzUldkbllpanFwL1JKaDVkVW5VQU9hS0V6SHBRc2lQMWlGN0Z4SUlHcgpwQVpZczRqOS9xTjBWd2YzMk5WSXJjZGVPbmFHMEVOSHJrZTE3VUo5YUpjakhyYnBhRGhqcytCbTVWcEFZNGxyCjhPNitpc1IwYlpiUWRZQlgxbnZvYXQ0Nk9QaFJQVzlLbERYeE1zZEw0VnN2Qld4UzBsQmZOYzdlUWlwTVFYSW0KalVFRnFqSWhBb0dCQU82c3RYVy84OXFlRndyUFc3SGRiRG1lZU1hd3J5MDRwd3FNOHFiM3dUa0NRcVFBODZoLwo3dEdnWHRIRFZ0QVRUaFI2WDBLdlA1N1I1M3UvcGhzVFltOENLOThLeU0yYmd6MUxGbVltWkxxSHV1blViUVhrCllzNmtRaExVcG83aVk2d2dtYS9mUmx4MFN5RDM2Z2dlV1Yvc3hjNUdOaHl1R0ZhZGdxUkc1cG9YQW9HQkFPLzAKQ2dpUk1wdTFtWmxXUUpYKzR4cGRMQXF5bmQ5MVZhWitzWlVuZXRLNXZ5V3UxOUtKa0xvQ3dWNXNsamhiYStPLwpsUjVjMnlJa20xUzFScGlLdStwZnB2ZWJrTEpaRU9TRkNVd2M0R05CV0NzUjB1R2ppUzRLWnlkMHJjZGxMT3B2CkkwMnZkNlJ6cHJ1WTEwL1pFUVByZ2lYb2JUL2FEVm1oTUp0NjFWSHhBb0dBR3BQOCtRblJHKzB5MzY5THBMamwKamwwSlVnYm0yd0JPQ2F5OGNMOXlNdWovaHNmY1drMDB5UDgweitNU3pjVDRrdXMxcEhWamZrb2Rudmd1aFNGWgplc2NoSDR0UjVTT0dMOU1td1dWUkhqeHpJZ3JYd1NvM25vOUlGRlM5MzNkeVpmNlRYclJjWDN0THluWVJCNnBwCmhYY1daK3dGcHBmMGVlQzhaWkxIcHkwQ2dZQkxDZ2RsUEhzV0pNbC9JWEViTjFXd05ma0M4MjdacGVqK0kxckgKcVV3SXdGdmRuZnNTZFVEVVd1NDc2RHRtTG5qa0JWTE41djRFaEd3ckpuR0lYTUo5ZmlKS0J0Vk9ZUG9lYk5oRwpmRFZUOU9oc3Q2czZNeGxBVTdLRXJVRjNQTlc2RHIxOG11WVFnTFpncm1DUE1QUFlSUHN6ZmFkRXM1MC9MV0IxCkR3bk5FUUtCZ1FDRDhVbFFpN2R1ZVUveWk5dHZaeVhRRzN6SENEVHBoTC9JTzJvR1BQUE9pOXJjRjlIQStLL3UKK0lFZTlyWCtLNUxrMWZmeDNqRjFHWEl6VUJzeTNwSXJmS1hjNjZDNklxUWJkNllNMTQzaGhZeXZlcUNtekplSAphTGdOQUJkVjErYmpFMTY1bmtWV0V6ZUhWVmZ3Z3I5Z1puZzgyZlEwUUlyK004Zm54UTR0eGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\ncontexts:\n- name: steve-context\n  context:\n    cluster: steve-cluster\n    user: steve-user\n"
                }
            },
            "resources": {
                "data.template_file.kubeconfig": {
                    "type": "template_file",
                    "depends_on": [
                        "tls_locally_signed_cert.kubelet",
                        "tls_private_key.kubelet",
                        "tls_self_signed_cert.kube-ca.*"
                    ],
                    "primary": {
                        "id": "65d820660d41880b0d6e18cfd1d639d8da7e199b2e27eff5197187abda11527b",
                        "attributes": {
                            "id": "65d820660d41880b0d6e18cfd1d639d8da7e199b2e27eff5197187abda11527b",
                            "rendered": "apiVersion: v1\nkind: Config\nclusters:\n- name: local\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRZW1IbVZSd0ExTVZISG9CTjVHL1BLakFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURrdwpOakU1TVRaYUZ3MHhPVEEwTURrd05qRTVNVFphTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXpURFYKNkh2UTZUaFZKdVBKMWxxZzFFdUFCTzVScWU0MW1ncHUvZ3BheHN1WTV0SEJpRUpMNVpZMWpoY1NwcWljRTJpRQpReFlyUDJzaXBEazIwRVdwMnFzMkZaUUJidkt1czJSQ3NqOFdqQTZvbFpXaUdYREZMRjFUMzRYMXpWVFp6bzlPCm9wOERqeXBEYytHTGRBaGwwM3VuR0lZMjliWlZVN2lhdjJ3THBKSWFMcjU4Rjd0c2g5bEpnVVNLTE1rejhjN3MKdEIzTmVXOW1JcUs0ZEZjUzdRUE0wYWpkNWI2bGRVL3c3ZjJNU2UxczFNc2ZBZkZZUEhiRVFnRktVcFNnQkVIWAo0QnB1NXk5NXBGR0wzTkQyWXVPWlI2Z0F1bzF5R2c2ZlFOaE9rNUdyVG9VQUNzRm9RNXhkUDgwandJbnZPZmdWCjZhMnMrSGhKc2VhTitIVGtQd0lEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVTDFsM21BaWtaZWtQL1dnWVM4TEtRVXJ5N0Zrd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQmJZM096TS9WYkZicytwamhWOEo3RFUrU2VNRWFDbzR6Y1NEcUNHbmIvUit6Q2J5T2RYCmNKU0xQR1NpdmFYVVBROE1Ic0R6c2p0YlEzMHYwR2R1TElDbUdDU1IybnZBeDl2UDRYZzNsTmR4RlFPVE0zYVcKbC9LWHoyTzVhdHkvTytDWDZ5SVdsWW1iaW1tdjY2VENUeUVjR3pWK1VGL2pYRDNERzI1M2JoUUdSMU42cHdpSwplRHhaSDI4YXZsbjN0MDJwV1hkK3hxRkhGN09WWmhURjdGQnF1REJSQWVqb0NySExZcjc3N1dLTUNkKzlLaGprCjN2ZURBUnhmVVBpZ1lTSSt6b285Y0lVeU1sb04xSS9Qa0QrbFVyS3ExRmkxa2NUOWJkTkVlRVFsVlorRmR3d2sKL2VSZnd3ZGJqTHZOc3VTUjhRQWJUNTM2Z1BuVElrSm5yRkE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: kubelet\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQUpxdWYvWldLL0RXVXdtUWRESStzdVV3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBNQpNRFl4T1RFMldoY05NVGt3TkRBNU1EWXhPVEUyV2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFOKzJ3MkNlU3VSaWdFRnh2d3lyd3pYR1lieENta0o3bUU3ZlFVUGVPZG1oV21BZys4amtYNFFJWlF1OAppVEtvTFNBZVdVUklNd3d5MzJ6ZmFqeFJ4bzlMYmpBeTUxWklWQVhJQjdqcjB0elJXYnIxaUxCa0xsZDFTVlpLCjUwUzlrMUh1QXFETkhpUEZEV1Q4QlZKV1BoTk9SLzNvQW16TFpWcXJVRWRyZVFYeXF2djQ5OEdFQ0RwanNYRUEKaHNrYlFQWUF2QlZuZUhzTlR6L2Z6OXFNc1pMbFZwQWJheVFnY3VWdTZPWUpqV212akMwQ2lkeWFiUUU5aVRBTApSYTZnbXp3TjdoL2RLZ0dTblc3LzlQS1FyYm9LWGR1TjFRODZ1UXNablBNejk5YWZIT0I4US9vT2hLc0hmOXViCml3enNwanZwYld4bkJzd25ieEYyVCtEN1ZxY0NBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZDOVpkNWdJcEdYcEQvMW9HRXZDeWtGSzh1eFpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJzCjlkREVhckpJUlhYZGlZakZiRWVMS1U1WHNzMnNBWk5OYnZkbkYrUnJLYllZZk5FNUU0M3V0WFdDNkFTMzRsNloKUFFvaTg5cWZtZVNHNVhkcURESno5YUNqTXFjVHZwaUhvL0ZqSVBmYnZzcXNPM2JiL0xpVlJXRnB0RUxqcWlUdApZa2UycTQ2Y2QvczBZWnRtOTREVDl2SmhDWVNtZUc2VHZCUkUzbGhXUnFRWGVsNGlORE04eURURXp1R3Z6RlUrCjFpRDNtWG1nNnpoVldRem1hVmpGVkZqSEc1OEhKb3ZONCt4V2tTcHhRTFBMMkdGTGpMaytGSHNPKzVzTU0wYXAKL25KaVdyNHN4N3lxNkwra0lObVg0MmtBSUFpSklwY05yellQNHVFZXR2WUQwaDRKd2ZTWmQySk5aR1c4SXdKdwo1ckNsV290T1FMSTJIRWhMTmJ1VAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMzdiRFlKNUs1R0tBUVhHL0RLdkROY1podkVLYVFudVlUdDlCUTk0NTJhRmFZQ0Q3CnlPUmZoQWhsQzd5Sk1xZ3RJQjVaUkVnekRETGZiTjlxUEZIR2owdHVNRExuVmtoVUJjZ0h1T3ZTM05GWnV2V0kKc0dRdVYzVkpWa3JuUkwyVFVlNENvTTBlSThVTlpQd0ZVbFkrRTA1SC9lZ0NiTXRsV3F0UVIydDVCZktxKy9qMwp3WVFJT21PeGNRQ0d5UnRBOWdDOEZXZDRldzFQUDkvUDJveXhrdVZXa0J0ckpDQnk1VzdvNWdtTmFhK01MUUtKCjNKcHRBVDJKTUF0RnJxQ2JQQTN1SDkwcUFaS2Ridi8wOHBDdHVncGQyNDNWRHpxNUN4bWM4elAzMXA4YzRIeEQKK2c2RXF3ZC8yNXVMRE95bU8rbHRiR2NHekNkdkVYWlA0UHRXcHdJREFRQUJBb0lCQVFDbGJKTEtoaUpoQVFsUAoyMWxuZURkUU0xS2dFQ3ZiVDJOUHB6eXVmOHdOUm9mNm4wa3Z3dGR5WFhiQ2wvWm5zLzR5U3Q2OVpCb0RRamIrClhiSkR5a0JtUTJQR1ZrM0QrcFhPOUp2cFBOQmVvcHVVYU8xYmFhanUyUGFTemE1M29Tc25vVFRtVE9hbGtwZVYKL2RtOWliSTdPbDUzdlREVjNBMGxYNXBzUldkbllpanFwL1JKaDVkVW5VQU9hS0V6SHBRc2lQMWlGN0Z4SUlHcgpwQVpZczRqOS9xTjBWd2YzMk5WSXJjZGVPbmFHMEVOSHJrZTE3VUo5YUpjakhyYnBhRGhqcytCbTVWcEFZNGxyCjhPNitpc1IwYlpiUWRZQlgxbnZvYXQ0Nk9QaFJQVzlLbERYeE1zZEw0VnN2Qld4UzBsQmZOYzdlUWlwTVFYSW0KalVFRnFqSWhBb0dCQU82c3RYVy84OXFlRndyUFc3SGRiRG1lZU1hd3J5MDRwd3FNOHFiM3dUa0NRcVFBODZoLwo3dEdnWHRIRFZ0QVRUaFI2WDBLdlA1N1I1M3UvcGhzVFltOENLOThLeU0yYmd6MUxGbVltWkxxSHV1blViUVhrCllzNmtRaExVcG83aVk2d2dtYS9mUmx4MFN5RDM2Z2dlV1Yvc3hjNUdOaHl1R0ZhZGdxUkc1cG9YQW9HQkFPLzAKQ2dpUk1wdTFtWmxXUUpYKzR4cGRMQXF5bmQ5MVZhWitzWlVuZXRLNXZ5V3UxOUtKa0xvQ3dWNXNsamhiYStPLwpsUjVjMnlJa20xUzFScGlLdStwZnB2ZWJrTEpaRU9TRkNVd2M0R05CV0NzUjB1R2ppUzRLWnlkMHJjZGxMT3B2CkkwMnZkNlJ6cHJ1WTEwL1pFUVByZ2lYb2JUL2FEVm1oTUp0NjFWSHhBb0dBR3BQOCtRblJHKzB5MzY5THBMamwKamwwSlVnYm0yd0JPQ2F5OGNMOXlNdWovaHNmY1drMDB5UDgweitNU3pjVDRrdXMxcEhWamZrb2Rudmd1aFNGWgplc2NoSDR0UjVTT0dMOU1td1dWUkhqeHpJZ3JYd1NvM25vOUlGRlM5MzNkeVpmNlRYclJjWDN0THluWVJCNnBwCmhYY1daK3dGcHBmMGVlQzhaWkxIcHkwQ2dZQkxDZ2RsUEhzV0pNbC9JWEViTjFXd05ma0M4MjdacGVqK0kxckgKcVV3SXdGdmRuZnNTZFVEVVd1NDc2RHRtTG5qa0JWTE41djRFaEd3ckpuR0lYTUo5ZmlKS0J0Vk9ZUG9lYk5oRwpmRFZUOU9oc3Q2czZNeGxBVTdLRXJVRjNQTlc2RHIxOG11WVFnTFpncm1DUE1QUFlSUHN6ZmFkRXM1MC9MV0IxCkR3bk5FUUtCZ1FDRDhVbFFpN2R1ZVUveWk5dHZaeVhRRzN6SENEVHBoTC9JTzJvR1BQUE9pOXJjRjlIQStLL3UKK0lFZTlyWCtLNUxrMWZmeDNqRjFHWEl6VUJzeTNwSXJmS1hjNjZDNklxUWJkNllNMTQzaGhZeXZlcUNtekplSAphTGdOQUJkVjErYmpFMTY1bmtWV0V6ZUhWVmZ3Z3I5Z1puZzgyZlEwUUlyK004Zm54UTR0eGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\ncontexts:\n- context:\n    cluster: local\n    user: kubelet\n",
                            "template": "apiVersion: v1\nkind: Config\nclusters:\n- name: local\n  cluster:\n    server: ${server}\n    certificate-authority-data: ${ca_cert}\nusers:\n- name: kubelet\n  user:\n    client-certificate-data: ${kubelet_cert}\n    client-key-data: ${kubelet_key}\ncontexts:\n- context:\n    cluster: local\n    user: kubelet\n",
                            "vars.%": "4",
                            "vars.ca_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRZW1IbVZSd0ExTVZISG9CTjVHL1BLakFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURrdwpOakU1TVRaYUZ3MHhPVEEwTURrd05qRTVNVFphTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXpURFYKNkh2UTZUaFZKdVBKMWxxZzFFdUFCTzVScWU0MW1ncHUvZ3BheHN1WTV0SEJpRUpMNVpZMWpoY1NwcWljRTJpRQpReFlyUDJzaXBEazIwRVdwMnFzMkZaUUJidkt1czJSQ3NqOFdqQTZvbFpXaUdYREZMRjFUMzRYMXpWVFp6bzlPCm9wOERqeXBEYytHTGRBaGwwM3VuR0lZMjliWlZVN2lhdjJ3THBKSWFMcjU4Rjd0c2g5bEpnVVNLTE1rejhjN3MKdEIzTmVXOW1JcUs0ZEZjUzdRUE0wYWpkNWI2bGRVL3c3ZjJNU2UxczFNc2ZBZkZZUEhiRVFnRktVcFNnQkVIWAo0QnB1NXk5NXBGR0wzTkQyWXVPWlI2Z0F1bzF5R2c2ZlFOaE9rNUdyVG9VQUNzRm9RNXhkUDgwandJbnZPZmdWCjZhMnMrSGhKc2VhTitIVGtQd0lEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVTDFsM21BaWtaZWtQL1dnWVM4TEtRVXJ5N0Zrd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQmJZM096TS9WYkZicytwamhWOEo3RFUrU2VNRWFDbzR6Y1NEcUNHbmIvUit6Q2J5T2RYCmNKU0xQR1NpdmFYVVBROE1Ic0R6c2p0YlEzMHYwR2R1TElDbUdDU1IybnZBeDl2UDRYZzNsTmR4RlFPVE0zYVcKbC9LWHoyTzVhdHkvTytDWDZ5SVdsWW1iaW1tdjY2VENUeUVjR3pWK1VGL2pYRDNERzI1M2JoUUdSMU42cHdpSwplRHhaSDI4YXZsbjN0MDJwV1hkK3hxRkhGN09WWmhURjdGQnF1REJSQWVqb0NySExZcjc3N1dLTUNkKzlLaGprCjN2ZURBUnhmVVBpZ1lTSSt6b285Y0lVeU1sb04xSS9Qa0QrbFVyS3ExRmkxa2NUOWJkTkVlRVFsVlorRmR3d2sKL2VSZnd3ZGJqTHZOc3VTUjhRQWJUNTM2Z1BuVElrSm5yRkE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
                            "vars.kubelet_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQUpxdWYvWldLL0RXVXdtUWRESStzdVV3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBNQpNRFl4T1RFMldoY05NVGt3TkRBNU1EWXhPVEUyV2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFOKzJ3MkNlU3VSaWdFRnh2d3lyd3pYR1lieENta0o3bUU3ZlFVUGVPZG1oV21BZys4amtYNFFJWlF1OAppVEtvTFNBZVdVUklNd3d5MzJ6ZmFqeFJ4bzlMYmpBeTUxWklWQVhJQjdqcjB0elJXYnIxaUxCa0xsZDFTVlpLCjUwUzlrMUh1QXFETkhpUEZEV1Q4QlZKV1BoTk9SLzNvQW16TFpWcXJVRWRyZVFYeXF2djQ5OEdFQ0RwanNYRUEKaHNrYlFQWUF2QlZuZUhzTlR6L2Z6OXFNc1pMbFZwQWJheVFnY3VWdTZPWUpqV212akMwQ2lkeWFiUUU5aVRBTApSYTZnbXp3TjdoL2RLZ0dTblc3LzlQS1FyYm9LWGR1TjFRODZ1UXNablBNejk5YWZIT0I4US9vT2hLc0hmOXViCml3enNwanZwYld4bkJzd25ieEYyVCtEN1ZxY0NBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZDOVpkNWdJcEdYcEQvMW9HRXZDeWtGSzh1eFpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJzCjlkREVhckpJUlhYZGlZakZiRWVMS1U1WHNzMnNBWk5OYnZkbkYrUnJLYllZZk5FNUU0M3V0WFdDNkFTMzRsNloKUFFvaTg5cWZtZVNHNVhkcURESno5YUNqTXFjVHZwaUhvL0ZqSVBmYnZzcXNPM2JiL0xpVlJXRnB0RUxqcWlUdApZa2UycTQ2Y2QvczBZWnRtOTREVDl2SmhDWVNtZUc2VHZCUkUzbGhXUnFRWGVsNGlORE04eURURXp1R3Z6RlUrCjFpRDNtWG1nNnpoVldRem1hVmpGVkZqSEc1OEhKb3ZONCt4V2tTcHhRTFBMMkdGTGpMaytGSHNPKzVzTU0wYXAKL25KaVdyNHN4N3lxNkwra0lObVg0MmtBSUFpSklwY05yellQNHVFZXR2WUQwaDRKd2ZTWmQySk5aR1c4SXdKdwo1ckNsV290T1FMSTJIRWhMTmJ1VAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
                            "vars.kubelet_key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMzdiRFlKNUs1R0tBUVhHL0RLdkROY1podkVLYVFudVlUdDlCUTk0NTJhRmFZQ0Q3CnlPUmZoQWhsQzd5Sk1xZ3RJQjVaUkVnekRETGZiTjlxUEZIR2owdHVNRExuVmtoVUJjZ0h1T3ZTM05GWnV2V0kKc0dRdVYzVkpWa3JuUkwyVFVlNENvTTBlSThVTlpQd0ZVbFkrRTA1SC9lZ0NiTXRsV3F0UVIydDVCZktxKy9qMwp3WVFJT21PeGNRQ0d5UnRBOWdDOEZXZDRldzFQUDkvUDJveXhrdVZXa0J0ckpDQnk1VzdvNWdtTmFhK01MUUtKCjNKcHRBVDJKTUF0RnJxQ2JQQTN1SDkwcUFaS2Ridi8wOHBDdHVncGQyNDNWRHpxNUN4bWM4elAzMXA4YzRIeEQKK2c2RXF3ZC8yNXVMRE95bU8rbHRiR2NHekNkdkVYWlA0UHRXcHdJREFRQUJBb0lCQVFDbGJKTEtoaUpoQVFsUAoyMWxuZURkUU0xS2dFQ3ZiVDJOUHB6eXVmOHdOUm9mNm4wa3Z3dGR5WFhiQ2wvWm5zLzR5U3Q2OVpCb0RRamIrClhiSkR5a0JtUTJQR1ZrM0QrcFhPOUp2cFBOQmVvcHVVYU8xYmFhanUyUGFTemE1M29Tc25vVFRtVE9hbGtwZVYKL2RtOWliSTdPbDUzdlREVjNBMGxYNXBzUldkbllpanFwL1JKaDVkVW5VQU9hS0V6SHBRc2lQMWlGN0Z4SUlHcgpwQVpZczRqOS9xTjBWd2YzMk5WSXJjZGVPbmFHMEVOSHJrZTE3VUo5YUpjakhyYnBhRGhqcytCbTVWcEFZNGxyCjhPNitpc1IwYlpiUWRZQlgxbnZvYXQ0Nk9QaFJQVzlLbERYeE1zZEw0VnN2Qld4UzBsQmZOYzdlUWlwTVFYSW0KalVFRnFqSWhBb0dCQU82c3RYVy84OXFlRndyUFc3SGRiRG1lZU1hd3J5MDRwd3FNOHFiM3dUa0NRcVFBODZoLwo3dEdnWHRIRFZ0QVRUaFI2WDBLdlA1N1I1M3UvcGhzVFltOENLOThLeU0yYmd6MUxGbVltWkxxSHV1blViUVhrCllzNmtRaExVcG83aVk2d2dtYS9mUmx4MFN5RDM2Z2dlV1Yvc3hjNUdOaHl1R0ZhZGdxUkc1cG9YQW9HQkFPLzAKQ2dpUk1wdTFtWmxXUUpYKzR4cGRMQXF5bmQ5MVZhWitzWlVuZXRLNXZ5V3UxOUtKa0xvQ3dWNXNsamhiYStPLwpsUjVjMnlJa20xUzFScGlLdStwZnB2ZWJrTEpaRU9TRkNVd2M0R05CV0NzUjB1R2ppUzRLWnlkMHJjZGxMT3B2CkkwMnZkNlJ6cHJ1WTEwL1pFUVByZ2lYb2JUL2FEVm1oTUp0NjFWSHhBb0dBR3BQOCtRblJHKzB5MzY5THBMamwKamwwSlVnYm0yd0JPQ2F5OGNMOXlNdWovaHNmY1drMDB5UDgweitNU3pjVDRrdXMxcEhWamZrb2Rudmd1aFNGWgplc2NoSDR0UjVTT0dMOU1td1dWUkhqeHpJZ3JYd1NvM25vOUlGRlM5MzNkeVpmNlRYclJjWDN0THluWVJCNnBwCmhYY1daK3dGcHBmMGVlQzhaWkxIcHkwQ2dZQkxDZ2RsUEhzV0pNbC9JWEViTjFXd05ma0M4MjdacGVqK0kxckgKcVV3SXdGdmRuZnNTZFVEVVd1NDc2RHRtTG5qa0JWTE41djRFaEd3ckpuR0lYTUo5ZmlKS0J0Vk9ZUG9lYk5oRwpmRFZUOU9oc3Q2czZNeGxBVTdLRXJVRjNQTlc2RHIxOG11WVFnTFpncm1DUE1QUFlSUHN6ZmFkRXM1MC9MV0IxCkR3bk5FUUtCZ1FDRDhVbFFpN2R1ZVUveWk5dHZaeVhRRzN6SENEVHBoTC9JTzJvR1BQUE9pOXJjRjlIQStLL3UKK0lFZTlyWCtLNUxrMWZmeDNqRjFHWEl6VUJzeTNwSXJmS1hjNjZDNklxUWJkNllNMTQzaGhZeXZlcUNtekplSAphTGdOQUJkVjErYmpFMTY1bmtWV0V6ZUhWVmZ3Z3I5Z1puZzgyZlEwUUlyK004Zm54UTR0eGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=",
                            "vars.server": "https://steve:443"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.user-kubeconfig": {
                    "type": "template_file",
                    "depends_on": [
                        "tls_locally_signed_cert.kubelet",
                        "tls_private_key.kubelet",
                        "tls_self_signed_cert.kube-ca.*"
                    ],
                    "primary": {
                        "id": "c1a02aa04080d3f98846103af2e25078683dcc80e36b7fde653467dd4be89b42",
                        "attributes": {
                            "id": "c1a02aa04080d3f98846103af2e25078683dcc80e36b7fde653467dd4be89b42",
                            "rendered": "apiVersion: v1\nkind: Config\nclusters:\n- name: steve-cluster\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRZW1IbVZSd0ExTVZISG9CTjVHL1BLakFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURrdwpOakU1TVRaYUZ3MHhPVEEwTURrd05qRTVNVFphTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXpURFYKNkh2UTZUaFZKdVBKMWxxZzFFdUFCTzVScWU0MW1ncHUvZ3BheHN1WTV0SEJpRUpMNVpZMWpoY1NwcWljRTJpRQpReFlyUDJzaXBEazIwRVdwMnFzMkZaUUJidkt1czJSQ3NqOFdqQTZvbFpXaUdYREZMRjFUMzRYMXpWVFp6bzlPCm9wOERqeXBEYytHTGRBaGwwM3VuR0lZMjliWlZVN2lhdjJ3THBKSWFMcjU4Rjd0c2g5bEpnVVNLTE1rejhjN3MKdEIzTmVXOW1JcUs0ZEZjUzdRUE0wYWpkNWI2bGRVL3c3ZjJNU2UxczFNc2ZBZkZZUEhiRVFnRktVcFNnQkVIWAo0QnB1NXk5NXBGR0wzTkQyWXVPWlI2Z0F1bzF5R2c2ZlFOaE9rNUdyVG9VQUNzRm9RNXhkUDgwandJbnZPZmdWCjZhMnMrSGhKc2VhTitIVGtQd0lEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVTDFsM21BaWtaZWtQL1dnWVM4TEtRVXJ5N0Zrd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQmJZM096TS9WYkZicytwamhWOEo3RFUrU2VNRWFDbzR6Y1NEcUNHbmIvUit6Q2J5T2RYCmNKU0xQR1NpdmFYVVBROE1Ic0R6c2p0YlEzMHYwR2R1TElDbUdDU1IybnZBeDl2UDRYZzNsTmR4RlFPVE0zYVcKbC9LWHoyTzVhdHkvTytDWDZ5SVdsWW1iaW1tdjY2VENUeUVjR3pWK1VGL2pYRDNERzI1M2JoUUdSMU42cHdpSwplRHhaSDI4YXZsbjN0MDJwV1hkK3hxRkhGN09WWmhURjdGQnF1REJSQWVqb0NySExZcjc3N1dLTUNkKzlLaGprCjN2ZURBUnhmVVBpZ1lTSSt6b285Y0lVeU1sb04xSS9Qa0QrbFVyS3ExRmkxa2NUOWJkTkVlRVFsVlorRmR3d2sKL2VSZnd3ZGJqTHZOc3VTUjhRQWJUNTM2Z1BuVElrSm5yRkE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: steve-user\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQUpxdWYvWldLL0RXVXdtUWRESStzdVV3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBNQpNRFl4T1RFMldoY05NVGt3TkRBNU1EWXhPVEUyV2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFOKzJ3MkNlU3VSaWdFRnh2d3lyd3pYR1lieENta0o3bUU3ZlFVUGVPZG1oV21BZys4amtYNFFJWlF1OAppVEtvTFNBZVdVUklNd3d5MzJ6ZmFqeFJ4bzlMYmpBeTUxWklWQVhJQjdqcjB0elJXYnIxaUxCa0xsZDFTVlpLCjUwUzlrMUh1QXFETkhpUEZEV1Q4QlZKV1BoTk9SLzNvQW16TFpWcXJVRWRyZVFYeXF2djQ5OEdFQ0RwanNYRUEKaHNrYlFQWUF2QlZuZUhzTlR6L2Z6OXFNc1pMbFZwQWJheVFnY3VWdTZPWUpqV212akMwQ2lkeWFiUUU5aVRBTApSYTZnbXp3TjdoL2RLZ0dTblc3LzlQS1FyYm9LWGR1TjFRODZ1UXNablBNejk5YWZIT0I4US9vT2hLc0hmOXViCml3enNwanZwYld4bkJzd25ieEYyVCtEN1ZxY0NBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZDOVpkNWdJcEdYcEQvMW9HRXZDeWtGSzh1eFpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJzCjlkREVhckpJUlhYZGlZakZiRWVMS1U1WHNzMnNBWk5OYnZkbkYrUnJLYllZZk5FNUU0M3V0WFdDNkFTMzRsNloKUFFvaTg5cWZtZVNHNVhkcURESno5YUNqTXFjVHZwaUhvL0ZqSVBmYnZzcXNPM2JiL0xpVlJXRnB0RUxqcWlUdApZa2UycTQ2Y2QvczBZWnRtOTREVDl2SmhDWVNtZUc2VHZCUkUzbGhXUnFRWGVsNGlORE04eURURXp1R3Z6RlUrCjFpRDNtWG1nNnpoVldRem1hVmpGVkZqSEc1OEhKb3ZONCt4V2tTcHhRTFBMMkdGTGpMaytGSHNPKzVzTU0wYXAKL25KaVdyNHN4N3lxNkwra0lObVg0MmtBSUFpSklwY05yellQNHVFZXR2WUQwaDRKd2ZTWmQySk5aR1c4SXdKdwo1ckNsV290T1FMSTJIRWhMTmJ1VAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMzdiRFlKNUs1R0tBUVhHL0RLdkROY1podkVLYVFudVlUdDlCUTk0NTJhRmFZQ0Q3CnlPUmZoQWhsQzd5Sk1xZ3RJQjVaUkVnekRETGZiTjlxUEZIR2owdHVNRExuVmtoVUJjZ0h1T3ZTM05GWnV2V0kKc0dRdVYzVkpWa3JuUkwyVFVlNENvTTBlSThVTlpQd0ZVbFkrRTA1SC9lZ0NiTXRsV3F0UVIydDVCZktxKy9qMwp3WVFJT21PeGNRQ0d5UnRBOWdDOEZXZDRldzFQUDkvUDJveXhrdVZXa0J0ckpDQnk1VzdvNWdtTmFhK01MUUtKCjNKcHRBVDJKTUF0RnJxQ2JQQTN1SDkwcUFaS2Ridi8wOHBDdHVncGQyNDNWRHpxNUN4bWM4elAzMXA4YzRIeEQKK2c2RXF3ZC8yNXVMRE95bU8rbHRiR2NHekNkdkVYWlA0UHRXcHdJREFRQUJBb0lCQVFDbGJKTEtoaUpoQVFsUAoyMWxuZURkUU0xS2dFQ3ZiVDJOUHB6eXVmOHdOUm9mNm4wa3Z3dGR5WFhiQ2wvWm5zLzR5U3Q2OVpCb0RRamIrClhiSkR5a0JtUTJQR1ZrM0QrcFhPOUp2cFBOQmVvcHVVYU8xYmFhanUyUGFTemE1M29Tc25vVFRtVE9hbGtwZVYKL2RtOWliSTdPbDUzdlREVjNBMGxYNXBzUldkbllpanFwL1JKaDVkVW5VQU9hS0V6SHBRc2lQMWlGN0Z4SUlHcgpwQVpZczRqOS9xTjBWd2YzMk5WSXJjZGVPbmFHMEVOSHJrZTE3VUo5YUpjakhyYnBhRGhqcytCbTVWcEFZNGxyCjhPNitpc1IwYlpiUWRZQlgxbnZvYXQ0Nk9QaFJQVzlLbERYeE1zZEw0VnN2Qld4UzBsQmZOYzdlUWlwTVFYSW0KalVFRnFqSWhBb0dCQU82c3RYVy84OXFlRndyUFc3SGRiRG1lZU1hd3J5MDRwd3FNOHFiM3dUa0NRcVFBODZoLwo3dEdnWHRIRFZ0QVRUaFI2WDBLdlA1N1I1M3UvcGhzVFltOENLOThLeU0yYmd6MUxGbVltWkxxSHV1blViUVhrCllzNmtRaExVcG83aVk2d2dtYS9mUmx4MFN5RDM2Z2dlV1Yvc3hjNUdOaHl1R0ZhZGdxUkc1cG9YQW9HQkFPLzAKQ2dpUk1wdTFtWmxXUUpYKzR4cGRMQXF5bmQ5MVZhWitzWlVuZXRLNXZ5V3UxOUtKa0xvQ3dWNXNsamhiYStPLwpsUjVjMnlJa20xUzFScGlLdStwZnB2ZWJrTEpaRU9TRkNVd2M0R05CV0NzUjB1R2ppUzRLWnlkMHJjZGxMT3B2CkkwMnZkNlJ6cHJ1WTEwL1pFUVByZ2lYb2JUL2FEVm1oTUp0NjFWSHhBb0dBR3BQOCtRblJHKzB5MzY5THBMamwKamwwSlVnYm0yd0JPQ2F5OGNMOXlNdWovaHNmY1drMDB5UDgweitNU3pjVDRrdXMxcEhWamZrb2Rudmd1aFNGWgplc2NoSDR0UjVTT0dMOU1td1dWUkhqeHpJZ3JYd1NvM25vOUlGRlM5MzNkeVpmNlRYclJjWDN0THluWVJCNnBwCmhYY1daK3dGcHBmMGVlQzhaWkxIcHkwQ2dZQkxDZ2RsUEhzV0pNbC9JWEViTjFXd05ma0M4MjdacGVqK0kxckgKcVV3SXdGdmRuZnNTZFVEVVd1NDc2RHRtTG5qa0JWTE41djRFaEd3ckpuR0lYTUo5ZmlKS0J0Vk9ZUG9lYk5oRwpmRFZUOU9oc3Q2czZNeGxBVTdLRXJVRjNQTlc2RHIxOG11WVFnTFpncm1DUE1QUFlSUHN6ZmFkRXM1MC9MV0IxCkR3bk5FUUtCZ1FDRDhVbFFpN2R1ZVUveWk5dHZaeVhRRzN6SENEVHBoTC9JTzJvR1BQUE9pOXJjRjlIQStLL3UKK0lFZTlyWCtLNUxrMWZmeDNqRjFHWEl6VUJzeTNwSXJmS1hjNjZDNklxUWJkNllNMTQzaGhZeXZlcUNtekplSAphTGdOQUJkVjErYmpFMTY1bmtWV0V6ZUhWVmZ3Z3I5Z1puZzgyZlEwUUlyK004Zm54UTR0eGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\ncontexts:\n- name: steve-context\n  context:\n    cluster: steve-cluster\n    user: steve-user\n",
                            "template": "apiVersion: v1\nkind: Config\nclusters:\n- name: ${name}-cluster\n  cluster:\n    server: ${server}\n    certificate-authority-data: ${ca_cert}\nusers:\n- name: ${name}-user\n  user:\n    client-certificate-data: ${kubelet_cert}\n    client-key-data: ${kubelet_key}\ncontexts:\n- name: ${name}-context\n  context:\n    cluster: ${name}-cluster\n    user: ${name}-user\n",
                            "vars.%": "5",
                            "vars.ca_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRZW1IbVZSd0ExTVZISG9CTjVHL1BLakFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURrdwpOakU1TVRaYUZ3MHhPVEEwTURrd05qRTVNVFphTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXpURFYKNkh2UTZUaFZKdVBKMWxxZzFFdUFCTzVScWU0MW1ncHUvZ3BheHN1WTV0SEJpRUpMNVpZMWpoY1NwcWljRTJpRQpReFlyUDJzaXBEazIwRVdwMnFzMkZaUUJidkt1czJSQ3NqOFdqQTZvbFpXaUdYREZMRjFUMzRYMXpWVFp6bzlPCm9wOERqeXBEYytHTGRBaGwwM3VuR0lZMjliWlZVN2lhdjJ3THBKSWFMcjU4Rjd0c2g5bEpnVVNLTE1rejhjN3MKdEIzTmVXOW1JcUs0ZEZjUzdRUE0wYWpkNWI2bGRVL3c3ZjJNU2UxczFNc2ZBZkZZUEhiRVFnRktVcFNnQkVIWAo0QnB1NXk5NXBGR0wzTkQyWXVPWlI2Z0F1bzF5R2c2ZlFOaE9rNUdyVG9VQUNzRm9RNXhkUDgwandJbnZPZmdWCjZhMnMrSGhKc2VhTitIVGtQd0lEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVTDFsM21BaWtaZWtQL1dnWVM4TEtRVXJ5N0Zrd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQmJZM096TS9WYkZicytwamhWOEo3RFUrU2VNRWFDbzR6Y1NEcUNHbmIvUit6Q2J5T2RYCmNKU0xQR1NpdmFYVVBROE1Ic0R6c2p0YlEzMHYwR2R1TElDbUdDU1IybnZBeDl2UDRYZzNsTmR4RlFPVE0zYVcKbC9LWHoyTzVhdHkvTytDWDZ5SVdsWW1iaW1tdjY2VENUeUVjR3pWK1VGL2pYRDNERzI1M2JoUUdSMU42cHdpSwplRHhaSDI4YXZsbjN0MDJwV1hkK3hxRkhGN09WWmhURjdGQnF1REJSQWVqb0NySExZcjc3N1dLTUNkKzlLaGprCjN2ZURBUnhmVVBpZ1lTSSt6b285Y0lVeU1sb04xSS9Qa0QrbFVyS3ExRmkxa2NUOWJkTkVlRVFsVlorRmR3d2sKL2VSZnd3ZGJqTHZOc3VTUjhRQWJUNTM2Z1BuVElrSm5yRkE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
                            "vars.kubelet_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQUpxdWYvWldLL0RXVXdtUWRESStzdVV3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBNQpNRFl4T1RFMldoY05NVGt3TkRBNU1EWXhPVEUyV2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFOKzJ3MkNlU3VSaWdFRnh2d3lyd3pYR1lieENta0o3bUU3ZlFVUGVPZG1oV21BZys4amtYNFFJWlF1OAppVEtvTFNBZVdVUklNd3d5MzJ6ZmFqeFJ4bzlMYmpBeTUxWklWQVhJQjdqcjB0elJXYnIxaUxCa0xsZDFTVlpLCjUwUzlrMUh1QXFETkhpUEZEV1Q4QlZKV1BoTk9SLzNvQW16TFpWcXJVRWRyZVFYeXF2djQ5OEdFQ0RwanNYRUEKaHNrYlFQWUF2QlZuZUhzTlR6L2Z6OXFNc1pMbFZwQWJheVFnY3VWdTZPWUpqV212akMwQ2lkeWFiUUU5aVRBTApSYTZnbXp3TjdoL2RLZ0dTblc3LzlQS1FyYm9LWGR1TjFRODZ1UXNablBNejk5YWZIT0I4US9vT2hLc0hmOXViCml3enNwanZwYld4bkJzd25ieEYyVCtEN1ZxY0NBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZDOVpkNWdJcEdYcEQvMW9HRXZDeWtGSzh1eFpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJzCjlkREVhckpJUlhYZGlZakZiRWVMS1U1WHNzMnNBWk5OYnZkbkYrUnJLYllZZk5FNUU0M3V0WFdDNkFTMzRsNloKUFFvaTg5cWZtZVNHNVhkcURESno5YUNqTXFjVHZwaUhvL0ZqSVBmYnZzcXNPM2JiL0xpVlJXRnB0RUxqcWlUdApZa2UycTQ2Y2QvczBZWnRtOTREVDl2SmhDWVNtZUc2VHZCUkUzbGhXUnFRWGVsNGlORE04eURURXp1R3Z6RlUrCjFpRDNtWG1nNnpoVldRem1hVmpGVkZqSEc1OEhKb3ZONCt4V2tTcHhRTFBMMkdGTGpMaytGSHNPKzVzTU0wYXAKL25KaVdyNHN4N3lxNkwra0lObVg0MmtBSUFpSklwY05yellQNHVFZXR2WUQwaDRKd2ZTWmQySk5aR1c4SXdKdwo1ckNsV290T1FMSTJIRWhMTmJ1VAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
                            "vars.kubelet_key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMzdiRFlKNUs1R0tBUVhHL0RLdkROY1podkVLYVFudVlUdDlCUTk0NTJhRmFZQ0Q3CnlPUmZoQWhsQzd5Sk1xZ3RJQjVaUkVnekRETGZiTjlxUEZIR2owdHVNRExuVmtoVUJjZ0h1T3ZTM05GWnV2V0kKc0dRdVYzVkpWa3JuUkwyVFVlNENvTTBlSThVTlpQd0ZVbFkrRTA1SC9lZ0NiTXRsV3F0UVIydDVCZktxKy9qMwp3WVFJT21PeGNRQ0d5UnRBOWdDOEZXZDRldzFQUDkvUDJveXhrdVZXa0J0ckpDQnk1VzdvNWdtTmFhK01MUUtKCjNKcHRBVDJKTUF0RnJxQ2JQQTN1SDkwcUFaS2Ridi8wOHBDdHVncGQyNDNWRHpxNUN4bWM4elAzMXA4YzRIeEQKK2c2RXF3ZC8yNXVMRE95bU8rbHRiR2NHekNkdkVYWlA0UHRXcHdJREFRQUJBb0lCQVFDbGJKTEtoaUpoQVFsUAoyMWxuZURkUU0xS2dFQ3ZiVDJOUHB6eXVmOHdOUm9mNm4wa3Z3dGR5WFhiQ2wvWm5zLzR5U3Q2OVpCb0RRamIrClhiSkR5a0JtUTJQR1ZrM0QrcFhPOUp2cFBOQmVvcHVVYU8xYmFhanUyUGFTemE1M29Tc25vVFRtVE9hbGtwZVYKL2RtOWliSTdPbDUzdlREVjNBMGxYNXBzUldkbllpanFwL1JKaDVkVW5VQU9hS0V6SHBRc2lQMWlGN0Z4SUlHcgpwQVpZczRqOS9xTjBWd2YzMk5WSXJjZGVPbmFHMEVOSHJrZTE3VUo5YUpjakhyYnBhRGhqcytCbTVWcEFZNGxyCjhPNitpc1IwYlpiUWRZQlgxbnZvYXQ0Nk9QaFJQVzlLbERYeE1zZEw0VnN2Qld4UzBsQmZOYzdlUWlwTVFYSW0KalVFRnFqSWhBb0dCQU82c3RYVy84OXFlRndyUFc3SGRiRG1lZU1hd3J5MDRwd3FNOHFiM3dUa0NRcVFBODZoLwo3dEdnWHRIRFZ0QVRUaFI2WDBLdlA1N1I1M3UvcGhzVFltOENLOThLeU0yYmd6MUxGbVltWkxxSHV1blViUVhrCllzNmtRaExVcG83aVk2d2dtYS9mUmx4MFN5RDM2Z2dlV1Yvc3hjNUdOaHl1R0ZhZGdxUkc1cG9YQW9HQkFPLzAKQ2dpUk1wdTFtWmxXUUpYKzR4cGRMQXF5bmQ5MVZhWitzWlVuZXRLNXZ5V3UxOUtKa0xvQ3dWNXNsamhiYStPLwpsUjVjMnlJa20xUzFScGlLdStwZnB2ZWJrTEpaRU9TRkNVd2M0R05CV0NzUjB1R2ppUzRLWnlkMHJjZGxMT3B2CkkwMnZkNlJ6cHJ1WTEwL1pFUVByZ2lYb2JUL2FEVm1oTUp0NjFWSHhBb0dBR3BQOCtRblJHKzB5MzY5THBMamwKamwwSlVnYm0yd0JPQ2F5OGNMOXlNdWovaHNmY1drMDB5UDgweitNU3pjVDRrdXMxcEhWamZrb2Rudmd1aFNGWgplc2NoSDR0UjVTT0dMOU1td1dWUkhqeHpJZ3JYd1NvM25vOUlGRlM5MzNkeVpmNlRYclJjWDN0THluWVJCNnBwCmhYY1daK3dGcHBmMGVlQzhaWkxIcHkwQ2dZQkxDZ2RsUEhzV0pNbC9JWEViTjFXd05ma0M4MjdacGVqK0kxckgKcVV3SXdGdmRuZnNTZFVEVVd1NDc2RHRtTG5qa0JWTE41djRFaEd3ckpuR0lYTUo5ZmlKS0J0Vk9ZUG9lYk5oRwpmRFZUOU9oc3Q2czZNeGxBVTdLRXJVRjNQTlc2RHIxOG11WVFnTFpncm1DUE1QUFlSUHN6ZmFkRXM1MC9MV0IxCkR3bk5FUUtCZ1FDRDhVbFFpN2R1ZVUveWk5dHZaeVhRRzN6SENEVHBoTC9JTzJvR1BQUE9pOXJjRjlIQStLL3UKK0lFZTlyWCtLNUxrMWZmeDNqRjFHWEl6VUJzeTNwSXJmS1hjNjZDNklxUWJkNllNMTQzaGhZeXZlcUNtekplSAphTGdOQUJkVjErYmpFMTY1bmtWV0V6ZUhWVmZ3Z3I5Z1puZzgyZlEwUUlyK004Zm54UTR0eGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=",
                            "vars.name": "steve",
                            "vars.server": "https://steve:443"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "local_file.apiserver-crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_locally_signed_cert.apiserver"
                    ],
                    "primary": {
                        "id": "73c33fca4d8cb23b3f7da973314c6e7efc0ad096",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDtjCCAp6gAwIBAgIQVenssbT/VwcB5cHZVz9z3DANBgkqhkiG9w0BAQsFADAl\nMREwDwYDVQQKEwhib290a3ViZTEQMA4GA1UEAxMHa3ViZS1jYTAeFw0xODA0MDkw\nNjE5MTZaFw0xOTA0MDkwNjE5MTZaMC8xFDASBgNVBAoTC2t1YmUtbWFzdGVyMRcw\nFQYDVQQDEw5rdWJlLWFwaXNlcnZlcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC\nAQoCggEBAKAj6UWfHOVcSFknx8vy51lbB7P4AHJYXLF1rZTuFw3TiQB5pOO9h1vi\nU0yZYsKg/of6by3jQfziGShLXA81kT1/sccmf508xheMgbgoqcS4zvB3LLzFwNg5\nMmWhrzFfjr0c3K7c67eYlGJKMmNdQsuKFAlPp4FSOquDpUXDyllP9CErWZfWS6B9\n6NhiSV/5ohuLxKed7a2n642iGIXP3W3FNwFGs39rx0y1XP8qOl9/z2Fh4/lksyWB\n2TU0CYv68dHxqWKi/86B0VQZtDovQl6H0OXdiWC484ARHs/vjcGE/gOcOiQISdiX\nUyQpIpXpSvwj7uSH0fiPaeNm9y8U1v8CAwEAAaOB1zCB1DAOBgNVHQ8BAf8EBAMC\nBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAw\nHwYDVR0jBBgwFoAUL1l3mAikZekP/WgYS8LKQUry7FkwdAYDVR0RBG0wa4IFc3Rl\ndmWCCmt1YmVybmV0ZXOCEmt1YmVybmV0ZXMuZGVmYXVsdIIWa3ViZXJuZXRlcy5k\nZWZhdWx0LnN2Y4Ika3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2Fs\nhwQKAwABMA0GCSqGSIb3DQEBCwUAA4IBAQA6qXN7rxiPdWXpnyJ+m/LJEhqehHie\nYfZKasLgDmSKAVhxkXzuftL4APYwBVLAcUILTM0JNRyoK9aoxtRZZxrMWJ53Jm5c\n9llMR68x/upa3tG6V3yo7sTRjdehyOcdgMr5jWxyvsy1k6jaNZaejDdAW9BTBAqq\nX3Bi7rhLAN1JFIj+PW7SYRqpMMKCLoE9VfnFAsijtMvy1Y7KutyxfJVatdZATx/I\nPdBSR8nTgMSEMOo5suX9BblgJ5HN3gy+jC9ZDV8PDePKOvCLu8i009yp1XWFjCel\nLMo4c0qm4tceEDlyPbAxO3uUSYiO+gkRhT7qhYwQq/N0D2tGY958dAAE\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/apiserver.crt",
                            "id": "73c33fca4d8cb23b3f7da973314c6e7efc0ad096"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.apiserver-key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.apiserver"
                    ],
                    "primary": {
                        "id": "e18174d7f176702bf57f5912a340fbbac1e616a5",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEAoCPpRZ8c5VxIWSfHy/LnWVsHs/gAclhcsXWtlO4XDdOJAHmk\n472HW+JTTJliwqD+h/pvLeNB/OIZKEtcDzWRPX+xxyZ/nTzGF4yBuCipxLjO8Hcs\nvMXA2DkyZaGvMV+OvRzcrtzrt5iUYkoyY11Cy4oUCU+ngVI6q4OlRcPKWU/0IStZ\nl9ZLoH3o2GJJX/miG4vEp53trafrjaIYhc/dbcU3AUazf2vHTLVc/yo6X3/PYWHj\n+WSzJYHZNTQJi/rx0fGpYqL/zoHRVBm0Oi9CXofQ5d2JYLjzgBEez++NwYT+A5w6\nJAhJ2JdTJCkilelK/CPu5IfR+I9p42b3LxTW/wIDAQABAoIBAAQcx/nMuz48n3MC\nrYPUShKmXs1FWiWVlVPNVNbVQmxNeWA0v4JFtLssVb1K1xlubvro+H/yLRikacb6\nIHQXiRJOPC+EEpTkIaYrKo2jJbDymgXc2Z5Dac9jsKKhg1E+RfkfS5+F9tuxJGZd\nx2t70qJNenQ+wmt0xCLxb4YaIBEpDRDB8PFBknTVXNH1Uoab6dH31oTl0/Y0YRgI\nDIs190N+TIJIFLgzFi07VRhOgoQR7VE1B5letWmSJjRYVcXgkbHLKNyMP583OsOR\n4Mwigx5sbm02I+jubJd3pQL56pNxE/IYdCn8fbRKc/F6F7EQv1pBOnl+ZdaJujvE\nHIyr4QECgYEA0lTpLCCsNIIUurVLJwChkWKTp1FodkhyqgKgykh1nPaPmSYANjJ+\nS0wAdGf6de0wFV+2qOaZi7etrHSoO7nn2YzUYZ+JlthNNqa6DPJIpgDgGDfAypMB\n2NhFJpPyVNq16tcb8Z8dbIdI/1RUoxSy525drGBY6GHNsDt3sBdLWX8CgYEAwuko\nhEo2wlULr4iGjohYwrVe3cuVnvBWEPUn2pjYRz2gZaPRXXeMOrMNsNJD328MvVUf\nxqYkBNuQ+gZIP97Mu7t6RYZkEeJ0MGIiTCpYMqjdl0U5BOpC0CNs+wesrCVg44mI\nAFo6KRnqDT5oeYxm2SJMAU2/Xah3rsf6Lnv2QoECgYBTphFVy2ixOUqlNpS83jNj\nbqDqWiYBZK61jnYD/O1Jj4VskwBijZJMv90ubmvdmocU+QvcAFnwhww7GeoOVtEu\nZCPS72/43e1XXtd/bpwV6SM2fnXeGrkRVHGr9graVGElFIe4gF9jWipd4VwHv6On\nBu2aMHcrdDopbH0dOyZsYQKBgFBta6WjBhOMimTlXjjEdHPr6Xh2QIg0Ph+DOe3O\n8jf7awtl3MfHw9qY9gZHzXAOX+BkltceyXAjtiAlpXyNkEfLJbo4qWRj4HPympp5\nQqms2rtH+i5YCDfg1mCDmzHxvphFsRQMJ0G8isLqRKwbTnk82MYU8elQ0goSRN8X\nkdeBAoGAZRIKeB84R3G+H9zy4X1Rqb/lq16QJQkAmePSP12P4+rso+0T+EPTpGol\nadz3RiBMucmbIo1ne8fCdH9NtF497VEqwWwqIxiAB00vKHEF5PWowGlIvXxP1CNh\nDvgIRBgOFNwUGLGy3Pfhc3OhkDDkjto//yQ51dkbZGIThZ00r1w=\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/apiserver.key",
                            "id": "e18174d7f176702bf57f5912a340fbbac1e616a5"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_client_ca_crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_self_signed_cert.etcd-ca"
                    ],
                    "primary": {
                        "id": "b5e9a1d62427de03d020b604b0538298d884c049",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDDzCCAfegAwIBAgIRAIWMwA90ymeWVjbWW95Rqt8wDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDkwNjE5\nMTVaFw0xOTA0MDkwNjE5MTVaMCExDTALBgNVBAoTBGV0Y2QxEDAOBgNVBAMTB2V0\nY2QtY2EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDCuwNvulwMkGc7\nF5dliDWrlIgjjS3HpJm16X7ULxtR1T0oEc6MwGanzUf245qegeb3NbQuHbIjTsrP\nhBPz1OsnIAijAcqHMRjrK/k85BNOFu6GWPNmtxXwfNF0pQOSt+B1UiJEGvJPqa87\nZ1GLntNlqHUHSqg7RwpPFNMG6La52KalN8EbIkccwxyph8EzmFTQcnIIw2YEO2BL\ncfUe8eH45zYZ5S824qOlWjvs6JOz8fjST66cE9Lkm4I0HjtmZOIDTHLv2OeiIi0S\nJwxvKIAZhPZadsFl0YtacEdNRuea7kA0NIhLQRpJRKqrRbB/nL0U49mvmsgLZc/h\nmee+KBvBAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/\nMB0GA1UdDgQWBBTbZJWbLUA3LeExqczu5WgJcKcEEjANBgkqhkiG9w0BAQsFAAOC\nAQEAf9kb1jzl5BWv2i0GHFz828RqbsNVqiHMVhZKpGmj79+uDypTIvbLSRzvQnQw\nOdNIoEnJ31KJhZXS5yBHlYzpcy9Hnj9NVD6vwfOGkwagwYAvIMa6hLB9ndWA9pEx\nEUK6TNf1d1FiUBZoLND5oe+uyqbWyKIkYPWBpW9/nYgNNrGtA9bJyYy4+LN9REi3\na5FubMS+jyHvtNxZe8FGcbV/GWX9/Z8yH2XzfSPOL/c415FNPs70w/8JI/LUiffH\nYvAZ9V/0k56015ttuE67KGVDpDgG9i4KnfE2G4EuwHukmd+0IQA2C4abveG/kAw0\nacYPwpLCKUx7JnHhrP+bjW7uYw==\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/etcd-client-ca.crt",
                            "id": "b5e9a1d62427de03d020b604b0538298d884c049"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_client_crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_locally_signed_cert.client"
                    ],
                    "primary": {
                        "id": "f10be12d9ec9c18d6220389ab3f3e685d52d2bcc",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDWDCCAkCgAwIBAgIQSlOy4ZC1JRaNYWuo//uCLzANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwOTA2MTkx\nNVoXDTE5MDQwOTA2MTkxNVowJTENMAsGA1UEChMEZXRjZDEUMBIGA1UEAxMLZXRj\nZC1jbGllbnQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCzYiC9ApMV\ns4/zC1gkJbHPU+k+dVR4+I4eNwXG76VRKZvzZspcywMudMZLNUKAl01SFZyXQnAn\nXQuOSwr6rFlP++o6hf+yxTEY4EsEj77oNKc4Q8yuaBlDbHg/WryuteTHkJE5JjHG\nZJixBwp+VnpvMHWFj57gUpfbdIhfUR6Odk11vLYEe7103dESAM68VH45qSSKJDsO\nXKHzrzkTfE2GyU9RClMIFSW8cOXiIzaYaZUzMzSSd/luLqk3JdDZ5E+qBCa8eZv/\nA9s1jK1Fq7o0nXRE0b8temeoAvYVOJ9T6FfDpKf9QqVIbbvhhRfPYvVJ2SGW1yAJ\n9diNPr2D9JPBAgMBAAGjgYcwgYQwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQG\nCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFNtk\nlZstQDct4TGpzO7laAlwpwQSMCQGA1UdEQQdMBuCCG4yLnN0ZXZlgglsb2NhbGhv\nc3SHBH8AAAEwDQYJKoZIhvcNAQELBQADggEBAA0dcpX++8hNdD1oiavq3+s4QtF3\nodWjnFM2rM2PJer4BVw0TMsH+k0xdUENIHqphMMWZCOMAbRQirjKW44wHm/lR0Ve\n/CiyMwvbTeVCqP4HrmDmdAL5rPz78B1Yd3yD3JjAvvlhcqgT3Ei3kTZ21krGUTp5\nMVAczf5CxZMHwx4FPKIeg4xuvV2knI6n1nR7kgTtIYxa/1jtw4BA4M1/eA4klIkJ\nlMSwncX1hcUFbAkx/nAEM0UOFmrCEOd35D1MAI5i4tjFnQYToukTjznoBJ+Yqau3\n4aXF3mkn4YuFKLcLC+H8ZEPXsGzROcmDm0TmuzLSHIrwZq+YzsoobiiCVoE=\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/etcd-client.crt",
                            "id": "f10be12d9ec9c18d6220389ab3f3e685d52d2bcc"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_client_key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.client"
                    ],
                    "primary": {
                        "id": "4a9475815aa785f5c1e2b2c7f27652af7815c4d7",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAs2IgvQKTFbOP8wtYJCWxz1PpPnVUePiOHjcFxu+lUSmb82bK\nXMsDLnTGSzVCgJdNUhWcl0JwJ10LjksK+qxZT/vqOoX/ssUxGOBLBI++6DSnOEPM\nrmgZQ2x4P1q8rrXkx5CROSYxxmSYsQcKflZ6bzB1hY+e4FKX23SIX1EejnZNdby2\nBHu9dN3REgDOvFR+OakkiiQ7Dlyh8685E3xNhslPUQpTCBUlvHDl4iM2mGmVMzM0\nknf5bi6pNyXQ2eRPqgQmvHmb/wPbNYytRau6NJ10RNG/LXpnqAL2FTifU+hXw6Sn\n/UKlSG274YUXz2L1SdkhltcgCfXYjT69g/STwQIDAQABAoIBAAjJQ6U+XQnxE5np\n8lVC62SmTYRbptmOAxgDxeqqjkRdb2AKptrIrs01twi0AR/fSVA98r+N54RmEEzV\n7CG/E1jRk/Vt3spY0kDPq5z7lXQ2MAKXf40DWElvJKyluxwrmJsVv6c28bUv9DKn\nj6IEhlav3vG9ySBfq0R6frt8c6yylaB0aGYMVoBDBiavOAKr+UQdyLVKTCkfWJUf\n/63P+E9OZJlITNpDr0fFtPyPWaW/66ujfW8R1T4LvbPerTzdjhU6XdGiA6/CiaXI\ngv7fGn/XSmcE5jgvpJdzeNDX9gQtoEklWi5GB3QBDgWRO1giUD+PTmrpe9Z7dAhD\nNUGjneECgYEAw7V1wEBWAxX66BEnyZZttGQx8gCJmflT3pdCe/5fU6lVD3N/Gouv\nO5C1o3mL/lPDg/Qrc7nnm3AasQ584CoetNH6CPWqF9ZHaezSiC+gg7h+w70ZG+ep\nt5cbu+lo9CAnB1EftiXDNU8HaRWvxDbAxmeIe67ZR5wacG77U6df2oUCgYEA6qUo\nvwVTJGQwE3Q3tWfvubeOGZHRYc5qFSXUMOVKbJq59ZBF/Hfjo2U7mP8iIQ1+4FB7\noBp/HbkYS8TIHTlbx5n1I1v1Nn/3L7QPGNqKtGpulJe6Ik8TxqDEwOy/AxOQeELb\ncr+3IA+wfVViF/5DaKI7Hf5UZRy6MHmPDj18/w0CgYEAvaTPL7aoImFgOxS0q2E7\neTxGMa1XqX6zSNTmNeTuVtGVfV174ytMaLn3aSvU/mQI54rpuECDMFpXYw8Y7teh\n3bJDSf9UDbk0hm5YLGOKdVmIbQCGnkXEbgTdeR/a9gVaDHsN8aFyIews0CWVptsv\nvpKA7Okn335jGGRS4mMkPUkCgYBGXVLTvcAKCLVWECLolouQENhfGJhGkUTEpLx2\nETx5Rwj+983VAQrVo/T0U4YjjU1/7QK1p1x5SFld11v/T4UTXTri6J+nQUaaGo/w\nbxDrO4N/seRSh44xoWJ/TD+Xp5VKSxpN1eoPhkTxwNoSwd/rD8NUokEitTOsd7eL\nmKrUPQKBgE/u95gvDdtu7GzZOn/FBDbnm6C9q2v0/YDvu7PkKxqzc8iGRJIq+QAM\nTFD0fPYQLI1TurDSEQDpj4XJHt73EwUfJ3OyyoqOeV4BQKGgAhykE8kt5xXttcE8\nlV5p12yrRXvO/eOSVYhnLqfv+WuVLd+ASCCZG+uuXi7PAvHhNJ+G\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/etcd-client.key",
                            "id": "4a9475815aa785f5c1e2b2c7f27652af7815c4d7"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_peer_ca_crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_self_signed_cert.etcd-ca"
                    ],
                    "primary": {
                        "id": "b5e9a1d62427de03d020b604b0538298d884c049",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDDzCCAfegAwIBAgIRAIWMwA90ymeWVjbWW95Rqt8wDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDkwNjE5\nMTVaFw0xOTA0MDkwNjE5MTVaMCExDTALBgNVBAoTBGV0Y2QxEDAOBgNVBAMTB2V0\nY2QtY2EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDCuwNvulwMkGc7\nF5dliDWrlIgjjS3HpJm16X7ULxtR1T0oEc6MwGanzUf245qegeb3NbQuHbIjTsrP\nhBPz1OsnIAijAcqHMRjrK/k85BNOFu6GWPNmtxXwfNF0pQOSt+B1UiJEGvJPqa87\nZ1GLntNlqHUHSqg7RwpPFNMG6La52KalN8EbIkccwxyph8EzmFTQcnIIw2YEO2BL\ncfUe8eH45zYZ5S824qOlWjvs6JOz8fjST66cE9Lkm4I0HjtmZOIDTHLv2OeiIi0S\nJwxvKIAZhPZadsFl0YtacEdNRuea7kA0NIhLQRpJRKqrRbB/nL0U49mvmsgLZc/h\nmee+KBvBAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/\nMB0GA1UdDgQWBBTbZJWbLUA3LeExqczu5WgJcKcEEjANBgkqhkiG9w0BAQsFAAOC\nAQEAf9kb1jzl5BWv2i0GHFz828RqbsNVqiHMVhZKpGmj79+uDypTIvbLSRzvQnQw\nOdNIoEnJ31KJhZXS5yBHlYzpcy9Hnj9NVD6vwfOGkwagwYAvIMa6hLB9ndWA9pEx\nEUK6TNf1d1FiUBZoLND5oe+uyqbWyKIkYPWBpW9/nYgNNrGtA9bJyYy4+LN9REi3\na5FubMS+jyHvtNxZe8FGcbV/GWX9/Z8yH2XzfSPOL/c415FNPs70w/8JI/LUiffH\nYvAZ9V/0k56015ttuE67KGVDpDgG9i4KnfE2G4EuwHukmd+0IQA2C4abveG/kAw0\nacYPwpLCKUx7JnHhrP+bjW7uYw==\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/etcd/peer-ca.crt",
                            "id": "b5e9a1d62427de03d020b604b0538298d884c049"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_peer_crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_locally_signed_cert.peer"
                    ],
                    "primary": {
                        "id": "bebcefbee9090489ca60c00c9a8e4000c2514b53",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDQzCCAiugAwIBAgIQcI0Fa6C8I6+4gEVF2t1TkzANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwOTA2MTkx\nNVoXDTE5MDQwOTA2MTkxNVowIzENMAsGA1UEChMEZXRjZDESMBAGA1UEAxMJZXRj\nZC1wZWVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAo+1WbcU3Vxz2\ntYnie8iHGvnlk/dQth6n3gxZLCN1S+d0TaR/kWNE7K2P3MFmVDDNIV666yRRBnoG\nYAcVVOB3JPZrundbsxj3QVSaW8jo244C20LgqdSiwrPw+l4VDVw7+YclFPIrFZtJ\nYa/6ZvjAOa1gEgYMNml4Dg2Nu68DfjAwxH6gMCTvL8YDMgPI8r8FoL76Bk95CBrk\nROXCIov5mZEVQQgAMaZ1MZXRd4kETjCYuIr0F6lrOOrgVe3uE4GYAlOiEoqx5Wma\nOWEdzex1Avgc28AnkMOVhNwR++GJaBYb+wSV2bIUPyVJDrs7vyGNrcugVD1pxYlI\njrxXykQb6wIDAQABo3UwczAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYB\nBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAU22SVmy1A\nNy3hManM7uVoCXCnBBIwEwYDVR0RBAwwCoIIbjIuc3RldmUwDQYJKoZIhvcNAQEL\nBQADggEBADCWBMWOE6sY67w1/JOUtSOEN0lUFIFRSjHi6Fu/iJSHQ+wv3CPLOfFA\noW4bGBYXPSwP2lDwmfDCcE5bERg/4ufIln/ku2dyaXI77Nm2cTURtmrcGDxA1Stg\nM7mIOQ34ktiVUkpGJi4gwGjegntSJx/0IsOGB3ogjSNKqIKgwp83pDHfUlUDLXgW\n0cNT4kz7FzezZ1meZiQYKGAxhiU7Y/6eG6+NN9vCS6PbL4HBoakO8F9AlSRoCatI\no5aGmsTX0GfU8Tr0R9rdw0IgSxIydEyZDKYDUvffmLUq7BHZ2ylFqRfvkn3zfU4k\nH5NIGizqCwvLKqtH8LkTJKBZWQVGhlY=\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/etcd/peer.crt",
                            "id": "bebcefbee9090489ca60c00c9a8e4000c2514b53"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_peer_key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.peer"
                    ],
                    "primary": {
                        "id": "3276ad1031a5b88255e45d4aec95b5204e703795",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEAo+1WbcU3Vxz2tYnie8iHGvnlk/dQth6n3gxZLCN1S+d0TaR/\nkWNE7K2P3MFmVDDNIV666yRRBnoGYAcVVOB3JPZrundbsxj3QVSaW8jo244C20Lg\nqdSiwrPw+l4VDVw7+YclFPIrFZtJYa/6ZvjAOa1gEgYMNml4Dg2Nu68DfjAwxH6g\nMCTvL8YDMgPI8r8FoL76Bk95CBrkROXCIov5mZEVQQgAMaZ1MZXRd4kETjCYuIr0\nF6lrOOrgVe3uE4GYAlOiEoqx5WmaOWEdzex1Avgc28AnkMOVhNwR++GJaBYb+wSV\n2bIUPyVJDrs7vyGNrcugVD1pxYlIjrxXykQb6wIDAQABAoIBAAio0vX9gwzhBM9W\nN1aeozRzmwMT/3l/aRK7yEIipWGbGnO3it2dRtjR2lWpCcTMxylKHcmqI3WaIJgW\nB7RyHxkew1YYVAnD+dvDolvS4yol+FSo1cFi8C4k30f6jFYmVyy5TOYsXMZJa7jz\nWODzpwPk+rw5AZAmRidH5ALUHfUedOkQ/sBsb3ijcgwvEOBJKCzxrVfEpZP6pIec\npGW1Suo6nWDL4rPYNGXJLRJWzIUf96AgzKS9oOqlzg/IVlzp71QfkwwOQPl3OrNk\nanqa7O8FRIYS1feJ4Dgsck3hfU9uIOwJCl4Hl6OQqtqw/vMQwVG5vxbEuTpGttJ/\nFjaA8kECgYEAwpkyo/60P2GQV/3KJ/z+nKwVWW9nSFzWczDQANBpJuG/dONinGnl\nrPDPalR+OqsU8Pa8p7DTl4kzYGSUQa1hlBmjEZDTxj6AV2Lep+rWliv1GeJFAIDX\n1HkhQ9PyxXWYFO+cp8FMHeDgv6qWeirnSrbcnTKRRGESJabZzr4nsPECgYEA16al\nLVYHizJphyVah7fuOOIv5DeEj0XyB1E5sSy+ECDbRLd4d8P9GqEVdhwZzx1g0B/V\nVxV5kWkehxJyzeC0evULuhdurGAOXph15jWBRhJy/8UG6C5AEfBSEBdiVBLGLCc2\nW07TR1O+qfmGZBtsEpGMmq6gdoLJlBnhAQR7mpsCgYAjIfV6limEp+CfgjpVLd/p\n+UeBdhN3hQtSkKV9ACN72ZXvTH4pLxVAO9m2oLqJbQnC10kIHWyWFzcnWAFMOjk7\nu8UtDrCtQet522fHeSZ0xkrh+W/rv1c4DQZscH+MFsb2QKxPvR445ris4ed49vX7\nDziVSOPhLIVSNuVr5fjUgQKBgHJGy9cndJ3t3AAS6lNrQ6D/M5PDW8q0rRn1kBX0\neM+BKdDTTNJimHiJDh9lqsOXdNs1U09vgNlulA/N1eqFff5+ZnV5v1s3F8ZHEoso\npVWlpy0kkpFtGOSorkP6sE+PF1cEfIiMT+fHWA0ovm/EHFQGrzS0/zFuAzYpNJPe\ndUWrAoGAf0C73k8nH/MqGPnbrponHPHFnRFJ+WGdVYD+Tc46/reVtxpdFysJeU6b\nsA0cdbI5iucwqifiH87gerrvrINIPau+EnqS2q2lL6gzTaTlU8qUPCJsfZ3d5P+T\nsoxvlaIcGycP4dcbz3L6XS0zKha5AcvCladXQa2lKvISS9O62LI=\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/etcd/peer.key",
                            "id": "3276ad1031a5b88255e45d4aec95b5204e703795"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_server_ca_crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_self_signed_cert.etcd-ca"
                    ],
                    "primary": {
                        "id": "b5e9a1d62427de03d020b604b0538298d884c049",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDDzCCAfegAwIBAgIRAIWMwA90ymeWVjbWW95Rqt8wDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDkwNjE5\nMTVaFw0xOTA0MDkwNjE5MTVaMCExDTALBgNVBAoTBGV0Y2QxEDAOBgNVBAMTB2V0\nY2QtY2EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDCuwNvulwMkGc7\nF5dliDWrlIgjjS3HpJm16X7ULxtR1T0oEc6MwGanzUf245qegeb3NbQuHbIjTsrP\nhBPz1OsnIAijAcqHMRjrK/k85BNOFu6GWPNmtxXwfNF0pQOSt+B1UiJEGvJPqa87\nZ1GLntNlqHUHSqg7RwpPFNMG6La52KalN8EbIkccwxyph8EzmFTQcnIIw2YEO2BL\ncfUe8eH45zYZ5S824qOlWjvs6JOz8fjST66cE9Lkm4I0HjtmZOIDTHLv2OeiIi0S\nJwxvKIAZhPZadsFl0YtacEdNRuea7kA0NIhLQRpJRKqrRbB/nL0U49mvmsgLZc/h\nmee+KBvBAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/\nMB0GA1UdDgQWBBTbZJWbLUA3LeExqczu5WgJcKcEEjANBgkqhkiG9w0BAQsFAAOC\nAQEAf9kb1jzl5BWv2i0GHFz828RqbsNVqiHMVhZKpGmj79+uDypTIvbLSRzvQnQw\nOdNIoEnJ31KJhZXS5yBHlYzpcy9Hnj9NVD6vwfOGkwagwYAvIMa6hLB9ndWA9pEx\nEUK6TNf1d1FiUBZoLND5oe+uyqbWyKIkYPWBpW9/nYgNNrGtA9bJyYy4+LN9REi3\na5FubMS+jyHvtNxZe8FGcbV/GWX9/Z8yH2XzfSPOL/c415FNPs70w/8JI/LUiffH\nYvAZ9V/0k56015ttuE67KGVDpDgG9i4KnfE2G4EuwHukmd+0IQA2C4abveG/kAw0\nacYPwpLCKUx7JnHhrP+bjW7uYw==\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/etcd/server-ca.crt",
                            "id": "b5e9a1d62427de03d020b604b0538298d884c049"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_server_crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_locally_signed_cert.server"
                    ],
                    "primary": {
                        "id": "722a828588ebb2ee96102ca0bfca5c5d18eaf2e8",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDWDCCAkCgAwIBAgIQKZ6Rbwyiawh1Tg9r80EuJDANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwOTA2MTkx\nNVoXDTE5MDQwOTA2MTkxNVowJTENMAsGA1UEChMEZXRjZDEUMBIGA1UEAxMLZXRj\nZC1zZXJ2ZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDIeScMPZe9\nerpuflfnCT+WGTZdeZBnRzkElBdcsJaIA8UUvR0EPGRi6oDQIn+cAzTYSDwlROKk\nutzeVUXmYhDPcCGo4ad37CMpKH1kuESvMC3PY3gpx21XRZKlFs59LCDADjRYf+XM\n2EJcKFtuFPd5j3CS09Zr4PU7chlgjGx0YQj1fpf+1f1ltGT7JQk5RqkAi90ZzLUu\nTUGF8T9rvt52TZwLt/4cJfx20F/Pn7NOq1g2MAIgVWDn8vr5rHP7PSyIRT30bNzS\n4lx2Bp0Nqz/cpaBp2CCXrybDDoFL7uWuSgOwCMwZCByaUowp6A1f0UNWVffS1E4m\n3buBLEYe6UB5AgMBAAGjgYcwgYQwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQG\nCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFNtk\nlZstQDct4TGpzO7laAlwpwQSMCQGA1UdEQQdMBuCCG4yLnN0ZXZlgglsb2NhbGhv\nc3SHBH8AAAEwDQYJKoZIhvcNAQELBQADggEBABTJ5NiJnJ3HDok4dLanbM0nyIEw\npN+TWLeBVDlq3qJQSUgBu90N15qapujzRohgWIiddKc4mVZWUw4HndR5682GQLdL\noaV8WlPNWaEJHPttCXNOg+rvTLDaVtpWMITLRUtlVhwhlMQJHZfmtO3OQxBf/ctI\naIpx4mgamzU+nXmapZ7uO7hj5fvYokG0j5sOE771VHcDMWdqrIsWEmYrBe9CgTSP\nM7LKdq3v3Hk7od+odamYAcKQeD7DKaqRFaFAvoDXmlgZinuY2dhA+Y95pK9bTAht\npnhjI5W8pRRL5u1IcEi+YvEIM8r2kFMqW5rgQRbu0x0m6F6n0c7dUx79DiI=\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/etcd/server.crt",
                            "id": "722a828588ebb2ee96102ca0bfca5c5d18eaf2e8"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_server_key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.server"
                    ],
                    "primary": {
                        "id": "e5590ecf9811abfaffc83b55b8a7227bed5cd489",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAyHknDD2XvXq6bn5X5wk/lhk2XXmQZ0c5BJQXXLCWiAPFFL0d\nBDxkYuqA0CJ/nAM02Eg8JUTipLrc3lVF5mIQz3AhqOGnd+wjKSh9ZLhErzAtz2N4\nKcdtV0WSpRbOfSwgwA40WH/lzNhCXChbbhT3eY9wktPWa+D1O3IZYIxsdGEI9X6X\n/tX9ZbRk+yUJOUapAIvdGcy1Lk1BhfE/a77edk2cC7f+HCX8dtBfz5+zTqtYNjAC\nIFVg5/L6+axz+z0siEU99Gzc0uJcdgadDas/3KWgadggl68mww6BS+7lrkoDsAjM\nGQgcmlKMKegNX9FDVlX30tROJt27gSxGHulAeQIDAQABAoIBAHr5prRhjBWVlYt2\nQWHeUH041hqdGbHhBN8EIRig0pZ5CYphP817ZnEvPPlwUCtZ5C7QkOSjzwwR/K7+\nTDS472rwdBVu5xYvapoy1kjUqH125oMTl4C5bx9b9EsFJIGwch6eGAo52rO/7WUu\n9HcgsXaGQR4wiJYAly5yHZMWUOlKDw8LYf+wa/Ghk5mhPX3N+Y9RY8wSeCKTNjAA\nL6H99ktO8whMNLujs8UImb9x+ygK7biyZr8az0j2GbqJ4IwKeV1ZWuV4nd62jmwi\nVsLfLTPArbDlYSWw3RKOsBpNUCIPG4dWjEg7L4gyJQ8q+tfDQRfSg0UNHa12Z1fq\nYXlxkQECgYEA4ncSo59ljFlQrDdFlJ+Bc9Dj8IEKSr5nAdEFGD9TjM7AAyrr1mdD\nYWJUY0SBuAPlHQOcu6X52CkvOlQQBriGY845JBeoZao0oLj52QDYzuucy2XQDTpd\ngDY09cGahBbOtSUImtsFBIMTWoButIX8777tGignJp4YZSXtvjosYhECgYEA4p5L\n2qCN2cLHw/O9r5+4p4gZZ6B5vqBGETn7hv7kR9pIvvMqzNalC5UWP7YNA4tu0KP1\n1x7Kcl66kNICmSk5METclSa6BsINQamcQMnVLcsIL6VFb5bsISxNVW7Pv8AqDkaf\nU8BAJoY3Bb2ysh+Rw68gQLcDymhBkZ0QZLF1D+kCgYEAvGfpxtymhCQOPKhjJ+mn\nri3cZMtGP7a2RcmaXnjYzq13C2ua9y3D3fILWOa2sNv0sbW+oFLOUCq7UuB60MyV\nadU4rrFL9QCsdgZOPl45AbT9Ji6W71peTXtLhiXCoh/DaurbhNGwE/fkkweEkoVi\nUCbcZUWAhN1EWGo8p2UIZbECgYA0EY74Mr+k8x4XJd/FhHtW8uxzZOnUJNs0hhAG\n2nX1FHB2f0SsP/04Bg9QoDGpSNYzVhjcTpTRZnaTY815B4G+V3QfSQChIOEO3zup\nnzY+CVJeMCkeFJ04mgdCw+0z76E6GnvtMFUNBPWLeiSezKYfQhO1CtfyH7ZBEMd9\ne1CcUQKBgQC2oIbkjYp2pZOkMMi5g5xlCOkw9/PFJ8oi0XvnXcRCkg+bdcOEDnsb\nHT5cHK4/GdYC+ThU5wWnV65ltxwiAcDP4xAiXkBmws+paBSQi06zkM5oMySwNCrC\n6aSU+Y+eqUqJND+pKRukyZa/ZGKJKmSKr/DXzv5AwGySAu3k4xMssg==\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/etcd/server.key",
                            "id": "e5590ecf9811abfaffc83b55b8a7227bed5cd489"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.kube-ca-crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_self_signed_cert.kube-ca.*"
                    ],
                    "primary": {
                        "id": "8e09db302465bbd3017b282b5a7a2257b02de1b8",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDFjCCAf6gAwIBAgIQemHmVRwA1MVHHoBN5G/PKjANBgkqhkiG9w0BAQsFADAl\nMREwDwYDVQQKEwhib290a3ViZTEQMA4GA1UEAxMHa3ViZS1jYTAeFw0xODA0MDkw\nNjE5MTZaFw0xOTA0MDkwNjE5MTZaMCUxETAPBgNVBAoTCGJvb3RrdWJlMRAwDgYD\nVQQDEwdrdWJlLWNhMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzTDV\n6HvQ6ThVJuPJ1lqg1EuABO5Rqe41mgpu/gpaxsuY5tHBiEJL5ZY1jhcSpqicE2iE\nQxYrP2sipDk20EWp2qs2FZQBbvKus2RCsj8WjA6olZWiGXDFLF1T34X1zVTZzo9O\nop8DjypDc+GLdAhl03unGIY29bZVU7iav2wLpJIaLr58F7tsh9lJgUSKLMkz8c7s\ntB3NeW9mIqK4dFcS7QPM0ajd5b6ldU/w7f2MSe1s1MsfAfFYPHbEQgFKUpSgBEHX\n4Bpu5y95pFGL3ND2YuOZR6gAuo1yGg6fQNhOk5GrToUACsFoQ5xdP80jwInvOfgV\n6a2s+HhJseaN+HTkPwIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAqQwDwYDVR0TAQH/\nBAUwAwEB/zAdBgNVHQ4EFgQUL1l3mAikZekP/WgYS8LKQUry7FkwDQYJKoZIhvcN\nAQELBQADggEBABbY3OzM/VbFbs+pjhV8J7DU+SeMEaCo4zcSDqCGnb/R+zCbyOdX\ncJSLPGSivaXUPQ8MHsDzsjtbQ30v0GduLICmGCSR2nvAx9vP4Xg3lNdxFQOTM3aW\nl/KXz2O5aty/O+CX6yIWlYmbimmv66TCTyEcGzV+UF/jXD3DG253bhQGR1N6pwiK\neDxZH28avln3t02pWXd+xqFHF7OVZhTF7FBquDBRAejoCrHLYr777WKMCd+9Khjk\n3veDARxfUPigYSI+zoo9cIUyMloN1I/PkD+lUrKq1Fi1kcT9bdNEeEQlVZ+Fdwwk\n/eRfwwdbjLvNsuSR8QAbT536gPnTIkJnrFA=\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/ca.crt",
                            "id": "8e09db302465bbd3017b282b5a7a2257b02de1b8"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.kube-ca-key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.kube-ca.*"
                    ],
                    "primary": {
                        "id": "c10ce9dce00e23ac4f286732168478f3dbc3a337",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAzTDV6HvQ6ThVJuPJ1lqg1EuABO5Rqe41mgpu/gpaxsuY5tHB\niEJL5ZY1jhcSpqicE2iEQxYrP2sipDk20EWp2qs2FZQBbvKus2RCsj8WjA6olZWi\nGXDFLF1T34X1zVTZzo9Oop8DjypDc+GLdAhl03unGIY29bZVU7iav2wLpJIaLr58\nF7tsh9lJgUSKLMkz8c7stB3NeW9mIqK4dFcS7QPM0ajd5b6ldU/w7f2MSe1s1Msf\nAfFYPHbEQgFKUpSgBEHX4Bpu5y95pFGL3ND2YuOZR6gAuo1yGg6fQNhOk5GrToUA\nCsFoQ5xdP80jwInvOfgV6a2s+HhJseaN+HTkPwIDAQABAoIBADh46VZrxUp6s4zZ\ngnJZTQxAn0I8KQOgyOXVW0jVprgxzqowLpiGzoaoeaLanMp7e0EoMcaY8lwo60bR\nbFGT6rSBDIiRzHcxmX1L6cNO87CmVCWfIhboX4vfP7c0Ejtpz+w2qsi9BOjBFAFv\noMbVjNjQnmN0hOnJPeCl3Qkz/lxTTx9idFQs2az6uW0WCrBvGzK7NIbTR2Kvc5Cw\nwERViZ8Nk6Upn969ySPQheB68q/3S+C7PVJX5JHOVOBzU8n++N1ANv7WsEIrZYwb\n1oWht2+cBgucKFnU0aMqyc574CCvLAZsO04N2gsksDzP7eFcaFd+nvQ6XO3NzJoI\nzyFTARECgYEA1UXCSIaoncsZb1ntGlTLFoOiCizT+XL7QUozLHK+bEe5l96dMtsa\n7RnlpRtjZrYLsGbK0uG+CkARrF4M6ox7Lw+kNELWgkVMI1L7UtlwblccIWlICu7T\nDIyAbryApRjJrAOO5XjpF8ZTrn1qCHJbTImWBf6H/TvvwyiyPY/dhLcCgYEA9kyV\ncqVWrkteo2Kpbu25n+GH29CR4iI0Eq0kd15LOoAdj05Yev4u0/CaZpratWWkHK/B\nga6cQ3Hbo15d4b/Jb9+qbG5VWh6bdBLIVw2e/nt8ct0b2SeGvdV60P5vf2dKOPqn\nR4sdgQ7dpcD6ysi8LDw2p0ofYe2EckVI5+c75LkCgYAi2lGTtJ3dm5E+hz2eLfk6\nZqyWaRkDDO1OkCeovd+splQII5Mg+nl+AdtrjfxCjsF+RG4k5EtANZQtzPjjY63F\n1RKKj9mqVFTK+QalVW9wOMAaHbBuSPUoedWLQzbqxBBBEhvKGGZPQlPukgQ/+SA+\nc8WWmS/0DFV0WTQ3p0kWJQKBgQCpRoVIIB5s99v5SuvME5KKMcTf7H72/i7vzxPK\n/oGRmU+3mE7zaRLiEvDrJ+680Thzhs/lww4exHgB1e+MIfXd78j/cO00XOjWY7pR\nKkll+ZTUlOZ43tOaUMhyLwyOcXzvoEWrxA7pDkCDlRhImqHJfTDK1QSwlz96EehD\nigb98QKBgDpUDmLPZRVM8Pf+8e/hvLDQZpQ2dlGyXhAx3+kdsYEyR9SL3Lk+S9gC\n95ADC8SO1p+zAklaWOi8e/nG6pCTlpFtz41T9fku4RuLUn8SguSHaAM5tgNtCsDL\nnmzXL3IMU1cNcKfvwv3sK+gSOlj8aSUe6or2smPyeFonMjrOVQVQ\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/ca.key",
                            "id": "c10ce9dce00e23ac4f286732168478f3dbc3a337"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.kubeconfig": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.kubeconfig"
                    ],
                    "primary": {
                        "id": "9136d3c2ece15a4d68d7aef1d6a892f670f01a60",
                        "attributes": {
                            "content": "apiVersion: v1\nkind: Config\nclusters:\n- name: local\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRZW1IbVZSd0ExTVZISG9CTjVHL1BLakFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURrdwpOakU1TVRaYUZ3MHhPVEEwTURrd05qRTVNVFphTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXpURFYKNkh2UTZUaFZKdVBKMWxxZzFFdUFCTzVScWU0MW1ncHUvZ3BheHN1WTV0SEJpRUpMNVpZMWpoY1NwcWljRTJpRQpReFlyUDJzaXBEazIwRVdwMnFzMkZaUUJidkt1czJSQ3NqOFdqQTZvbFpXaUdYREZMRjFUMzRYMXpWVFp6bzlPCm9wOERqeXBEYytHTGRBaGwwM3VuR0lZMjliWlZVN2lhdjJ3THBKSWFMcjU4Rjd0c2g5bEpnVVNLTE1rejhjN3MKdEIzTmVXOW1JcUs0ZEZjUzdRUE0wYWpkNWI2bGRVL3c3ZjJNU2UxczFNc2ZBZkZZUEhiRVFnRktVcFNnQkVIWAo0QnB1NXk5NXBGR0wzTkQyWXVPWlI2Z0F1bzF5R2c2ZlFOaE9rNUdyVG9VQUNzRm9RNXhkUDgwandJbnZPZmdWCjZhMnMrSGhKc2VhTitIVGtQd0lEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVTDFsM21BaWtaZWtQL1dnWVM4TEtRVXJ5N0Zrd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQmJZM096TS9WYkZicytwamhWOEo3RFUrU2VNRWFDbzR6Y1NEcUNHbmIvUit6Q2J5T2RYCmNKU0xQR1NpdmFYVVBROE1Ic0R6c2p0YlEzMHYwR2R1TElDbUdDU1IybnZBeDl2UDRYZzNsTmR4RlFPVE0zYVcKbC9LWHoyTzVhdHkvTytDWDZ5SVdsWW1iaW1tdjY2VENUeUVjR3pWK1VGL2pYRDNERzI1M2JoUUdSMU42cHdpSwplRHhaSDI4YXZsbjN0MDJwV1hkK3hxRkhGN09WWmhURjdGQnF1REJSQWVqb0NySExZcjc3N1dLTUNkKzlLaGprCjN2ZURBUnhmVVBpZ1lTSSt6b285Y0lVeU1sb04xSS9Qa0QrbFVyS3ExRmkxa2NUOWJkTkVlRVFsVlorRmR3d2sKL2VSZnd3ZGJqTHZOc3VTUjhRQWJUNTM2Z1BuVElrSm5yRkE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: kubelet\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQUpxdWYvWldLL0RXVXdtUWRESStzdVV3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBNQpNRFl4T1RFMldoY05NVGt3TkRBNU1EWXhPVEUyV2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFOKzJ3MkNlU3VSaWdFRnh2d3lyd3pYR1lieENta0o3bUU3ZlFVUGVPZG1oV21BZys4amtYNFFJWlF1OAppVEtvTFNBZVdVUklNd3d5MzJ6ZmFqeFJ4bzlMYmpBeTUxWklWQVhJQjdqcjB0elJXYnIxaUxCa0xsZDFTVlpLCjUwUzlrMUh1QXFETkhpUEZEV1Q4QlZKV1BoTk9SLzNvQW16TFpWcXJVRWRyZVFYeXF2djQ5OEdFQ0RwanNYRUEKaHNrYlFQWUF2QlZuZUhzTlR6L2Z6OXFNc1pMbFZwQWJheVFnY3VWdTZPWUpqV212akMwQ2lkeWFiUUU5aVRBTApSYTZnbXp3TjdoL2RLZ0dTblc3LzlQS1FyYm9LWGR1TjFRODZ1UXNablBNejk5YWZIT0I4US9vT2hLc0hmOXViCml3enNwanZwYld4bkJzd25ieEYyVCtEN1ZxY0NBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZDOVpkNWdJcEdYcEQvMW9HRXZDeWtGSzh1eFpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJzCjlkREVhckpJUlhYZGlZakZiRWVMS1U1WHNzMnNBWk5OYnZkbkYrUnJLYllZZk5FNUU0M3V0WFdDNkFTMzRsNloKUFFvaTg5cWZtZVNHNVhkcURESno5YUNqTXFjVHZwaUhvL0ZqSVBmYnZzcXNPM2JiL0xpVlJXRnB0RUxqcWlUdApZa2UycTQ2Y2QvczBZWnRtOTREVDl2SmhDWVNtZUc2VHZCUkUzbGhXUnFRWGVsNGlORE04eURURXp1R3Z6RlUrCjFpRDNtWG1nNnpoVldRem1hVmpGVkZqSEc1OEhKb3ZONCt4V2tTcHhRTFBMMkdGTGpMaytGSHNPKzVzTU0wYXAKL25KaVdyNHN4N3lxNkwra0lObVg0MmtBSUFpSklwY05yellQNHVFZXR2WUQwaDRKd2ZTWmQySk5aR1c4SXdKdwo1ckNsV290T1FMSTJIRWhMTmJ1VAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMzdiRFlKNUs1R0tBUVhHL0RLdkROY1podkVLYVFudVlUdDlCUTk0NTJhRmFZQ0Q3CnlPUmZoQWhsQzd5Sk1xZ3RJQjVaUkVnekRETGZiTjlxUEZIR2owdHVNRExuVmtoVUJjZ0h1T3ZTM05GWnV2V0kKc0dRdVYzVkpWa3JuUkwyVFVlNENvTTBlSThVTlpQd0ZVbFkrRTA1SC9lZ0NiTXRsV3F0UVIydDVCZktxKy9qMwp3WVFJT21PeGNRQ0d5UnRBOWdDOEZXZDRldzFQUDkvUDJveXhrdVZXa0J0ckpDQnk1VzdvNWdtTmFhK01MUUtKCjNKcHRBVDJKTUF0RnJxQ2JQQTN1SDkwcUFaS2Ridi8wOHBDdHVncGQyNDNWRHpxNUN4bWM4elAzMXA4YzRIeEQKK2c2RXF3ZC8yNXVMRE95bU8rbHRiR2NHekNkdkVYWlA0UHRXcHdJREFRQUJBb0lCQVFDbGJKTEtoaUpoQVFsUAoyMWxuZURkUU0xS2dFQ3ZiVDJOUHB6eXVmOHdOUm9mNm4wa3Z3dGR5WFhiQ2wvWm5zLzR5U3Q2OVpCb0RRamIrClhiSkR5a0JtUTJQR1ZrM0QrcFhPOUp2cFBOQmVvcHVVYU8xYmFhanUyUGFTemE1M29Tc25vVFRtVE9hbGtwZVYKL2RtOWliSTdPbDUzdlREVjNBMGxYNXBzUldkbllpanFwL1JKaDVkVW5VQU9hS0V6SHBRc2lQMWlGN0Z4SUlHcgpwQVpZczRqOS9xTjBWd2YzMk5WSXJjZGVPbmFHMEVOSHJrZTE3VUo5YUpjakhyYnBhRGhqcytCbTVWcEFZNGxyCjhPNitpc1IwYlpiUWRZQlgxbnZvYXQ0Nk9QaFJQVzlLbERYeE1zZEw0VnN2Qld4UzBsQmZOYzdlUWlwTVFYSW0KalVFRnFqSWhBb0dCQU82c3RYVy84OXFlRndyUFc3SGRiRG1lZU1hd3J5MDRwd3FNOHFiM3dUa0NRcVFBODZoLwo3dEdnWHRIRFZ0QVRUaFI2WDBLdlA1N1I1M3UvcGhzVFltOENLOThLeU0yYmd6MUxGbVltWkxxSHV1blViUVhrCllzNmtRaExVcG83aVk2d2dtYS9mUmx4MFN5RDM2Z2dlV1Yvc3hjNUdOaHl1R0ZhZGdxUkc1cG9YQW9HQkFPLzAKQ2dpUk1wdTFtWmxXUUpYKzR4cGRMQXF5bmQ5MVZhWitzWlVuZXRLNXZ5V3UxOUtKa0xvQ3dWNXNsamhiYStPLwpsUjVjMnlJa20xUzFScGlLdStwZnB2ZWJrTEpaRU9TRkNVd2M0R05CV0NzUjB1R2ppUzRLWnlkMHJjZGxMT3B2CkkwMnZkNlJ6cHJ1WTEwL1pFUVByZ2lYb2JUL2FEVm1oTUp0NjFWSHhBb0dBR3BQOCtRblJHKzB5MzY5THBMamwKamwwSlVnYm0yd0JPQ2F5OGNMOXlNdWovaHNmY1drMDB5UDgweitNU3pjVDRrdXMxcEhWamZrb2Rudmd1aFNGWgplc2NoSDR0UjVTT0dMOU1td1dWUkhqeHpJZ3JYd1NvM25vOUlGRlM5MzNkeVpmNlRYclJjWDN0THluWVJCNnBwCmhYY1daK3dGcHBmMGVlQzhaWkxIcHkwQ2dZQkxDZ2RsUEhzV0pNbC9JWEViTjFXd05ma0M4MjdacGVqK0kxckgKcVV3SXdGdmRuZnNTZFVEVVd1NDc2RHRtTG5qa0JWTE41djRFaEd3ckpuR0lYTUo5ZmlKS0J0Vk9ZUG9lYk5oRwpmRFZUOU9oc3Q2czZNeGxBVTdLRXJVRjNQTlc2RHIxOG11WVFnTFpncm1DUE1QUFlSUHN6ZmFkRXM1MC9MV0IxCkR3bk5FUUtCZ1FDRDhVbFFpN2R1ZVUveWk5dHZaeVhRRzN6SENEVHBoTC9JTzJvR1BQUE9pOXJjRjlIQStLL3UKK0lFZTlyWCtLNUxrMWZmeDNqRjFHWEl6VUJzeTNwSXJmS1hjNjZDNklxUWJkNllNMTQzaGhZeXZlcUNtekplSAphTGdOQUJkVjErYmpFMTY1bmtWV0V6ZUhWVmZ3Z3I5Z1puZzgyZlEwUUlyK004Zm54UTR0eGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\ncontexts:\n- context:\n    cluster: local\n    user: kubelet\n",
                            "filename": "assets/auth/kubeconfig",
                            "id": "9136d3c2ece15a4d68d7aef1d6a892f670f01a60"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.kubelet-crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_locally_signed_cert.kubelet"
                    ],
                    "primary": {
                        "id": "e9468f708443fef9185934b4635f5d6b4e055a7c",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDOzCCAiOgAwIBAgIRAJquf/ZWK/DWUwmQdDI+suUwDQYJKoZIhvcNAQELBQAw\nJTERMA8GA1UEChMIYm9vdGt1YmUxEDAOBgNVBAMTB2t1YmUtY2EwHhcNMTgwNDA5\nMDYxOTE2WhcNMTkwNDA5MDYxOTE2WjArMRcwFQYDVQQKEw5zeXN0ZW06bWFzdGVy\nczEQMA4GA1UEAxMHa3ViZWxldDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC\nggEBAN+2w2CeSuRigEFxvwyrwzXGYbxCmkJ7mE7fQUPeOdmhWmAg+8jkX4QIZQu8\niTKoLSAeWURIMwwy32zfajxRxo9LbjAy51ZIVAXIB7jr0tzRWbr1iLBkLld1SVZK\n50S9k1HuAqDNHiPFDWT8BVJWPhNOR/3oAmzLZVqrUEdreQXyqvv498GECDpjsXEA\nhskbQPYAvBVneHsNTz/fz9qMsZLlVpAbayQgcuVu6OYJjWmvjC0CidyabQE9iTAL\nRa6gmzwN7h/dKgGSnW7/9PKQrboKXduN1Q86uQsZnPMz99afHOB8Q/oOhKsHf9ub\niwzspjvpbWxnBswnbxF2T+D7VqcCAwEAAaNgMF4wDgYDVR0PAQH/BAQDAgWgMB0G\nA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB8GA1Ud\nIwQYMBaAFC9Zd5gIpGXpD/1oGEvCykFK8uxZMA0GCSqGSIb3DQEBCwUAA4IBAQBs\n9dDEarJIRXXdiYjFbEeLKU5Xss2sAZNNbvdnF+RrKbYYfNE5E43utXWC6AS34l6Z\nPQoi89qfmeSG5XdqDDJz9aCjMqcTvpiHo/FjIPfbvsqsO3bb/LiVRWFptELjqiTt\nYke2q46cd/s0YZtm94DT9vJhCYSmeG6TvBRE3lhWRqQXel4iNDM8yDTEzuGvzFU+\n1iD3mXmg6zhVWQzmaVjFVFjHG58HJovN4+xWkSpxQLPL2GFLjLk+FHsO+5sMM0ap\n/nJiWr4sx7yq6L+kINmX42kAIAiJIpcNrzYP4uEetvYD0h4JwfSZd2JNZGW8IwJw\n5rClWotOQLI2HEhLNbuT\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/kubelet.crt",
                            "id": "e9468f708443fef9185934b4635f5d6b4e055a7c"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.kubelet-key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.kubelet"
                    ],
                    "primary": {
                        "id": "01a73ca0f576ca6d841a7ebf9c675f66715fd43e",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEA37bDYJ5K5GKAQXG/DKvDNcZhvEKaQnuYTt9BQ9452aFaYCD7\nyORfhAhlC7yJMqgtIB5ZREgzDDLfbN9qPFHGj0tuMDLnVkhUBcgHuOvS3NFZuvWI\nsGQuV3VJVkrnRL2TUe4CoM0eI8UNZPwFUlY+E05H/egCbMtlWqtQR2t5BfKq+/j3\nwYQIOmOxcQCGyRtA9gC8FWd4ew1PP9/P2oyxkuVWkBtrJCBy5W7o5gmNaa+MLQKJ\n3JptAT2JMAtFrqCbPA3uH90qAZKdbv/08pCtugpd243VDzq5Cxmc8zP31p8c4HxD\n+g6Eqwd/25uLDOymO+ltbGcGzCdvEXZP4PtWpwIDAQABAoIBAQClbJLKhiJhAQlP\n21lneDdQM1KgECvbT2NPpzyuf8wNRof6n0kvwtdyXXbCl/Zns/4ySt69ZBoDQjb+\nXbJDykBmQ2PGVk3D+pXO9JvpPNBeopuUaO1baaju2PaSza53oSsnoTTmTOalkpeV\n/dm9ibI7Ol53vTDV3A0lX5psRWdnYijqp/RJh5dUnUAOaKEzHpQsiP1iF7FxIIGr\npAZYs4j9/qN0Vwf32NVIrcdeOnaG0ENHrke17UJ9aJcjHrbpaDhjs+Bm5VpAY4lr\n8O6+isR0bZbQdYBX1nvoat46OPhRPW9KlDXxMsdL4VsvBWxS0lBfNc7eQipMQXIm\njUEFqjIhAoGBAO6stXW/89qeFwrPW7HdbDmeeMawry04pwqM8qb3wTkCQqQA86h/\n7tGgXtHDVtATThR6X0KvP57R53u/phsTYm8CK98KyM2bgz1LFmYmZLqHuunUbQXk\nYs6kQhLUpo7iY6wgma/fRlx0SyD36ggeWV/sxc5GNhyuGFadgqRG5poXAoGBAO/0\nCgiRMpu1mZlWQJX+4xpdLAqynd91VaZ+sZUnetK5vyWu19KJkLoCwV5sljhba+O/\nlR5c2yIkm1S1RpiKu+pfpvebkLJZEOSFCUwc4GNBWCsR0uGjiS4KZyd0rcdlLOpv\nI02vd6RzpruY10/ZEQPrgiXobT/aDVmhMJt61VHxAoGAGpP8+QnRG+0y369LpLjl\njl0JUgbm2wBOCay8cL9yMuj/hsfcWk00yP80z+MSzcT4kus1pHVjfkodnvguhSFZ\neschH4tR5SOGL9MmwWVRHjxzIgrXwSo3no9IFFS933dyZf6TXrRcX3tLynYRB6pp\nhXcWZ+wFppf0eeC8ZZLHpy0CgYBLCgdlPHsWJMl/IXEbN1WwNfkC827Zpej+I1rH\nqUwIwFvdnfsSdUDUWu476DtmLnjkBVLN5v4EhGwrJnGIXMJ9fiJKBtVOYPoebNhG\nfDVT9Ohst6s6MxlAU7KErUF3PNW6Dr18muYQgLZgrmCPMPPYRPszfadEs50/LWB1\nDwnNEQKBgQCD8UlQi7dueU/yi9tvZyXQG3zHCDTphL/IO2oGPPPOi9rcF9HA+K/u\n+IEe9rX+K5Lk1ffx3jF1GXIzUBsy3pIrfKXc66C6IqQbd6YM143hhYyveqCmzJeH\naLgNABdV1+bjE165nkVWEzeHVVfwgr9gZng82fQ0QIr+M8fnxQ4txg==\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/kubelet.key",
                            "id": "01a73ca0f576ca6d841a7ebf9c675f66715fd43e"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.service-account-crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.service-account"
                    ],
                    "primary": {
                        "id": "e5be2e6e57bffc5786c5a7313ee88de11f5c8884",
                        "attributes": {
                            "content": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAv3P0s8PcNfGTZhQt2N/N\n+Fr8zJIXN2JwdXUa1O17JDkEAmnVqA4i73/C9ndtQAXwr6DFi/v7aJC3QGkatct/\nZCjvJuFiquIJWKxrIE6zd8WNJBx/vkF+1c/+laf6zNfyKBdYNM6tHpXchoCIBE/8\nF6emJezy0wvdOK50TX550/Eiv91/nMhz918RJaq27d6u1AzcbzgsCPmBab66C7JW\noaQDeiUyMOCzMuIa6zf975V/77cCnCweGIUu1iSc9Zl+54RJoSBQJh0j2aJGdzzB\nqYY3MRswqkf2QWt8+FltAT1PiadYd17c6inVZ4RMWDPJ4w9DQG699QbtOmI3SDY6\nDQIDAQAB\n-----END PUBLIC KEY-----\n",
                            "filename": "assets/tls/service-account.pub",
                            "id": "e5be2e6e57bffc5786c5a7313ee88de11f5c8884"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.service-account-key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.service-account"
                    ],
                    "primary": {
                        "id": "d33971eac9283cd9b241fac505fa1ce1263179ed",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpQIBAAKCAQEAv3P0s8PcNfGTZhQt2N/N+Fr8zJIXN2JwdXUa1O17JDkEAmnV\nqA4i73/C9ndtQAXwr6DFi/v7aJC3QGkatct/ZCjvJuFiquIJWKxrIE6zd8WNJBx/\nvkF+1c/+laf6zNfyKBdYNM6tHpXchoCIBE/8F6emJezy0wvdOK50TX550/Eiv91/\nnMhz918RJaq27d6u1AzcbzgsCPmBab66C7JWoaQDeiUyMOCzMuIa6zf975V/77cC\nnCweGIUu1iSc9Zl+54RJoSBQJh0j2aJGdzzBqYY3MRswqkf2QWt8+FltAT1PiadY\nd17c6inVZ4RMWDPJ4w9DQG699QbtOmI3SDY6DQIDAQABAoIBABbDQqTc9KG1R0Er\nxQe0FFki+EuaUwhSu+w7MCWA1tNHtCJVUwHYLG8tUZDcQjEKg8Nd6h7qpsmX6zHN\nTU+wEkVmWIjW41RN666PUW1V7iCfbFiOyuFkCCCDylEg18DjK/d4TxR4Pj0UtFOJ\nlKJuoBpv5GE9+uD82CCVHV7ZWsLIBCPT1mWqE9r2iSoydDfWBB9o+O3A3KF/3HK7\nE4s08mHQAdVU0aJjlQdzCtyPAXjgeX2CwGMgbAyL/v+g82NOvzWFqx/cmADnDsGT\nClZN57d0ye7W/RcMwgk5W+0he2HjOJyoOfXewh450VM+BkyZrY/dKf7li6wnf2IE\nZKpe3gECgYEA4AWt6FIwQBuk6q0pi37V935k5WhzxhAQoCSEXwwJ4TjrIJoABboP\nLGGF5W1CqBrWbV1kfh+S061YtuwfyKhlR7DWvgIiNW54kPw/ErA3eu2OXJEiOC41\nR2jEfvP6iBYZ2MOeB64uzwxEQbNEIrbOshrtDsCO4pOnfTX4u0VbYuUCgYEA2sgd\n6HUocsXVWW+2UGsEpMIJ/aOevBqq6yxGPVrYX6J3lW1Ux9MqHuYfJ9Z40RqYnv2u\nlBBI5ANaWQsjOAnZMUp+Ns6TIq9DViEjuxez3OYi6cACCmv6ur14CeTqcSk2kZYs\nUV/EjjqMOm/vbAqHc/xZE4MLI93aEI8QbVVEwAkCgYEAwPljc0rJMZAeoeEEdpuN\nqSKBu3QctrLD/481T8LJB+/F61F9T3GU/IANnTJfRvvHVnIqzNJZ4mnij8AbKPiW\nNglJEmg4G5rL1OjVVD3jrMrR5T9IIOj9EERZb5qvZ2bSYP0xNiB/Re+lJItN2DFt\nH9M9/YU2EEts7dj+KCN4s1kCgYEAsKHmO5nzCQ6d3DIr4Cs2uYoLJOLnsfhZy7qY\nDsr8a+GwaEy3qQjcNcwWlUQ7kJ7HX31yaAnpv2TRmZg7W+/fkUMSOU94TQVw+OWS\ngmd1iD+pKk0hmKZq7D8x3dMaUDg03T+AEkaeWzH7quZaR0EM8OBoTi97W/6uIrZO\nTecMtXkCgYEAiejF+KxbxumDw//ZqZJ9TGVHjo+jsx01aTdwsZLMLw/sxNx1NNEM\nm1VazuDa5Up+pmNQ2gXVwAAt6elGcrDlLt043Cc7bIjDxAc65/N2F8/YQSzAd84I\n5DkfvhnRvpuz/QMicOciF8TEbxgA8uSfooHeaaakhI5Ld9ZfJ97Gr3g=\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/service-account.key",
                            "id": "d33971eac9283cd9b241fac505fa1ce1263179ed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.user-kubeconfig": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.user-kubeconfig"
                    ],
                    "primary": {
                        "id": "9d811d5257f8716556022bf19336c7c3d056b7c7",
                        "attributes": {
                            "content": "apiVersion: v1\nkind: Config\nclusters:\n- name: steve-cluster\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRZW1IbVZSd0ExTVZISG9CTjVHL1BLakFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURrdwpOakU1TVRaYUZ3MHhPVEEwTURrd05qRTVNVFphTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXpURFYKNkh2UTZUaFZKdVBKMWxxZzFFdUFCTzVScWU0MW1ncHUvZ3BheHN1WTV0SEJpRUpMNVpZMWpoY1NwcWljRTJpRQpReFlyUDJzaXBEazIwRVdwMnFzMkZaUUJidkt1czJSQ3NqOFdqQTZvbFpXaUdYREZMRjFUMzRYMXpWVFp6bzlPCm9wOERqeXBEYytHTGRBaGwwM3VuR0lZMjliWlZVN2lhdjJ3THBKSWFMcjU4Rjd0c2g5bEpnVVNLTE1rejhjN3MKdEIzTmVXOW1JcUs0ZEZjUzdRUE0wYWpkNWI2bGRVL3c3ZjJNU2UxczFNc2ZBZkZZUEhiRVFnRktVcFNnQkVIWAo0QnB1NXk5NXBGR0wzTkQyWXVPWlI2Z0F1bzF5R2c2ZlFOaE9rNUdyVG9VQUNzRm9RNXhkUDgwandJbnZPZmdWCjZhMnMrSGhKc2VhTitIVGtQd0lEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVTDFsM21BaWtaZWtQL1dnWVM4TEtRVXJ5N0Zrd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQmJZM096TS9WYkZicytwamhWOEo3RFUrU2VNRWFDbzR6Y1NEcUNHbmIvUit6Q2J5T2RYCmNKU0xQR1NpdmFYVVBROE1Ic0R6c2p0YlEzMHYwR2R1TElDbUdDU1IybnZBeDl2UDRYZzNsTmR4RlFPVE0zYVcKbC9LWHoyTzVhdHkvTytDWDZ5SVdsWW1iaW1tdjY2VENUeUVjR3pWK1VGL2pYRDNERzI1M2JoUUdSMU42cHdpSwplRHhaSDI4YXZsbjN0MDJwV1hkK3hxRkhGN09WWmhURjdGQnF1REJSQWVqb0NySExZcjc3N1dLTUNkKzlLaGprCjN2ZURBUnhmVVBpZ1lTSSt6b285Y0lVeU1sb04xSS9Qa0QrbFVyS3ExRmkxa2NUOWJkTkVlRVFsVlorRmR3d2sKL2VSZnd3ZGJqTHZOc3VTUjhRQWJUNTM2Z1BuVElrSm5yRkE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: steve-user\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQUpxdWYvWldLL0RXVXdtUWRESStzdVV3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBNQpNRFl4T1RFMldoY05NVGt3TkRBNU1EWXhPVEUyV2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFOKzJ3MkNlU3VSaWdFRnh2d3lyd3pYR1lieENta0o3bUU3ZlFVUGVPZG1oV21BZys4amtYNFFJWlF1OAppVEtvTFNBZVdVUklNd3d5MzJ6ZmFqeFJ4bzlMYmpBeTUxWklWQVhJQjdqcjB0elJXYnIxaUxCa0xsZDFTVlpLCjUwUzlrMUh1QXFETkhpUEZEV1Q4QlZKV1BoTk9SLzNvQW16TFpWcXJVRWRyZVFYeXF2djQ5OEdFQ0RwanNYRUEKaHNrYlFQWUF2QlZuZUhzTlR6L2Z6OXFNc1pMbFZwQWJheVFnY3VWdTZPWUpqV212akMwQ2lkeWFiUUU5aVRBTApSYTZnbXp3TjdoL2RLZ0dTblc3LzlQS1FyYm9LWGR1TjFRODZ1UXNablBNejk5YWZIT0I4US9vT2hLc0hmOXViCml3enNwanZwYld4bkJzd25ieEYyVCtEN1ZxY0NBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZDOVpkNWdJcEdYcEQvMW9HRXZDeWtGSzh1eFpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJzCjlkREVhckpJUlhYZGlZakZiRWVMS1U1WHNzMnNBWk5OYnZkbkYrUnJLYllZZk5FNUU0M3V0WFdDNkFTMzRsNloKUFFvaTg5cWZtZVNHNVhkcURESno5YUNqTXFjVHZwaUhvL0ZqSVBmYnZzcXNPM2JiL0xpVlJXRnB0RUxqcWlUdApZa2UycTQ2Y2QvczBZWnRtOTREVDl2SmhDWVNtZUc2VHZCUkUzbGhXUnFRWGVsNGlORE04eURURXp1R3Z6RlUrCjFpRDNtWG1nNnpoVldRem1hVmpGVkZqSEc1OEhKb3ZONCt4V2tTcHhRTFBMMkdGTGpMaytGSHNPKzVzTU0wYXAKL25KaVdyNHN4N3lxNkwra0lObVg0MmtBSUFpSklwY05yellQNHVFZXR2WUQwaDRKd2ZTWmQySk5aR1c4SXdKdwo1ckNsV290T1FMSTJIRWhMTmJ1VAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMzdiRFlKNUs1R0tBUVhHL0RLdkROY1podkVLYVFudVlUdDlCUTk0NTJhRmFZQ0Q3CnlPUmZoQWhsQzd5Sk1xZ3RJQjVaUkVnekRETGZiTjlxUEZIR2owdHVNRExuVmtoVUJjZ0h1T3ZTM05GWnV2V0kKc0dRdVYzVkpWa3JuUkwyVFVlNENvTTBlSThVTlpQd0ZVbFkrRTA1SC9lZ0NiTXRsV3F0UVIydDVCZktxKy9qMwp3WVFJT21PeGNRQ0d5UnRBOWdDOEZXZDRldzFQUDkvUDJveXhrdVZXa0J0ckpDQnk1VzdvNWdtTmFhK01MUUtKCjNKcHRBVDJKTUF0RnJxQ2JQQTN1SDkwcUFaS2Ridi8wOHBDdHVncGQyNDNWRHpxNUN4bWM4elAzMXA4YzRIeEQKK2c2RXF3ZC8yNXVMRE95bU8rbHRiR2NHekNkdkVYWlA0UHRXcHdJREFRQUJBb0lCQVFDbGJKTEtoaUpoQVFsUAoyMWxuZURkUU0xS2dFQ3ZiVDJOUHB6eXVmOHdOUm9mNm4wa3Z3dGR5WFhiQ2wvWm5zLzR5U3Q2OVpCb0RRamIrClhiSkR5a0JtUTJQR1ZrM0QrcFhPOUp2cFBOQmVvcHVVYU8xYmFhanUyUGFTemE1M29Tc25vVFRtVE9hbGtwZVYKL2RtOWliSTdPbDUzdlREVjNBMGxYNXBzUldkbllpanFwL1JKaDVkVW5VQU9hS0V6SHBRc2lQMWlGN0Z4SUlHcgpwQVpZczRqOS9xTjBWd2YzMk5WSXJjZGVPbmFHMEVOSHJrZTE3VUo5YUpjakhyYnBhRGhqcytCbTVWcEFZNGxyCjhPNitpc1IwYlpiUWRZQlgxbnZvYXQ0Nk9QaFJQVzlLbERYeE1zZEw0VnN2Qld4UzBsQmZOYzdlUWlwTVFYSW0KalVFRnFqSWhBb0dCQU82c3RYVy84OXFlRndyUFc3SGRiRG1lZU1hd3J5MDRwd3FNOHFiM3dUa0NRcVFBODZoLwo3dEdnWHRIRFZ0QVRUaFI2WDBLdlA1N1I1M3UvcGhzVFltOENLOThLeU0yYmd6MUxGbVltWkxxSHV1blViUVhrCllzNmtRaExVcG83aVk2d2dtYS9mUmx4MFN5RDM2Z2dlV1Yvc3hjNUdOaHl1R0ZhZGdxUkc1cG9YQW9HQkFPLzAKQ2dpUk1wdTFtWmxXUUpYKzR4cGRMQXF5bmQ5MVZhWitzWlVuZXRLNXZ5V3UxOUtKa0xvQ3dWNXNsamhiYStPLwpsUjVjMnlJa20xUzFScGlLdStwZnB2ZWJrTEpaRU9TRkNVd2M0R05CV0NzUjB1R2ppUzRLWnlkMHJjZGxMT3B2CkkwMnZkNlJ6cHJ1WTEwL1pFUVByZ2lYb2JUL2FEVm1oTUp0NjFWSHhBb0dBR3BQOCtRblJHKzB5MzY5THBMamwKamwwSlVnYm0yd0JPQ2F5OGNMOXlNdWovaHNmY1drMDB5UDgweitNU3pjVDRrdXMxcEhWamZrb2Rudmd1aFNGWgplc2NoSDR0UjVTT0dMOU1td1dWUkhqeHpJZ3JYd1NvM25vOUlGRlM5MzNkeVpmNlRYclJjWDN0THluWVJCNnBwCmhYY1daK3dGcHBmMGVlQzhaWkxIcHkwQ2dZQkxDZ2RsUEhzV0pNbC9JWEViTjFXd05ma0M4MjdacGVqK0kxckgKcVV3SXdGdmRuZnNTZFVEVVd1NDc2RHRtTG5qa0JWTE41djRFaEd3ckpuR0lYTUo5ZmlKS0J0Vk9ZUG9lYk5oRwpmRFZUOU9oc3Q2czZNeGxBVTdLRXJVRjNQTlc2RHIxOG11WVFnTFpncm1DUE1QUFlSUHN6ZmFkRXM1MC9MV0IxCkR3bk5FUUtCZ1FDRDhVbFFpN2R1ZVUveWk5dHZaeVhRRzN6SENEVHBoTC9JTzJvR1BQUE9pOXJjRjlIQStLL3UKK0lFZTlyWCtLNUxrMWZmeDNqRjFHWEl6VUJzeTNwSXJmS1hjNjZDNklxUWJkNllNMTQzaGhZeXZlcUNtekplSAphTGdOQUJkVjErYmpFMTY1bmtWV0V6ZUhWVmZ3Z3I5Z1puZzgyZlEwUUlyK004Zm54UTR0eGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\ncontexts:\n- name: steve-context\n  context:\n    cluster: steve-cluster\n    user: steve-user\n",
                            "filename": "assets/auth/steve-config",
                            "id": "9d811d5257f8716556022bf19336c7c3d056b7c7"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "template_dir.bootstrap-manifests": {
                    "type": "template_dir",
                    "depends_on": [],
                    "primary": {
                        "id": "30190f674bcc026a0145226bde8f427476275c96",
                        "attributes": {
                            "destination_dir": "assets/bootstrap-manifests",
                            "id": "30190f674bcc026a0145226bde8f427476275c96",
                            "source_dir": "/opt/cluster-config/terraform/.terraform/modules/ea39d6d476cd18bf0c8b076127e11683/resources/bootstrap-manifests",
                            "vars.%": "5",
                            "vars.cloud_provider": "",
                            "vars.etcd_servers": "https://n2.steve:2379",
                            "vars.hyperkube_image": "gcr.io/google_containers/hyperkube:v1.10.0",
                            "vars.pod_cidr": "10.2.0.0/16",
                            "vars.service_cidr": "10.3.0.0/16"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "template_dir.calico-manifests": {
                    "type": "template_dir",
                    "depends_on": [],
                    "primary": {
                        "id": "b4f767619b9b6ea3cb8ef02ed996d2e161dda367",
                        "attributes": {
                            "destination_dir": "assets/manifests-networking",
                            "id": "b4f767619b9b6ea3cb8ef02ed996d2e161dda367",
                            "source_dir": "/opt/cluster-config/terraform/.terraform/modules/ea39d6d476cd18bf0c8b076127e11683/resources/calico",
                            "vars.%": "4",
                            "vars.calico_cni_image": "quay.io/calico/cni:v2.0.1",
                            "vars.calico_image": "quay.io/calico/node:v3.0.4",
                            "vars.network_mtu": "1480",
                            "vars.pod_cidr": "10.2.0.0/16"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "template_dir.manifests": {
                    "type": "template_dir",
                    "depends_on": [
                        "tls_locally_signed_cert.apiserver",
                        "tls_locally_signed_cert.client",
                        "tls_private_key.apiserver",
                        "tls_private_key.client",
                        "tls_private_key.service-account",
                        "tls_self_signed_cert.etcd-ca",
                        "tls_self_signed_cert.kube-ca.*"
                    ],
                    "primary": {
                        "id": "8c5482217fe894c1a2ef2596aaa1442c52be5ee8",
                        "attributes": {
                            "destination_dir": "assets/manifests",
                            "id": "8c5482217fe894c1a2ef2596aaa1442c52be5ee8",
                            "source_dir": "/opt/cluster-config/terraform/.terraform/modules/ea39d6d476cd18bf0c8b076127e11683/resources/manifests",
                            "vars.%": "20",
                            "vars.apiserver_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR0akNDQXA2Z0F3SUJBZ0lRVmVuc3NiVC9Wd2NCNWNIWlZ6OXozREFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURrdwpOakU1TVRaYUZ3MHhPVEEwTURrd05qRTVNVFphTUM4eEZEQVNCZ05WQkFvVEMydDFZbVV0YldGemRHVnlNUmN3CkZRWURWUVFERXc1cmRXSmxMV0Z3YVhObGNuWmxjakNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0MKQVFvQ2dnRUJBS0FqNlVXZkhPVmNTRmtueDh2eTUxbGJCN1A0QUhKWVhMRjFyWlR1RnczVGlRQjVwT085aDF2aQpVMHlaWXNLZy9vZjZieTNqUWZ6aUdTaExYQTgxa1QxL3NjY21mNTA4eGhlTWdiZ29xY1M0enZCM0xMekZ3Tmc1Ck1tV2hyekZmanIwYzNLN2M2N2VZbEdKS01tTmRRc3VLRkFsUHA0RlNPcXVEcFVYRHlsbFA5Q0VyV1pmV1M2QjkKNk5oaVNWLzVvaHVMeEtlZDdhMm42NDJpR0lYUDNXM0ZOd0ZHczM5cngweTFYUDhxT2w5L3oyRmg0L2xrc3lXQgoyVFUwQ1l2NjhkSHhxV0tpLzg2QjBWUVp0RG92UWw2SDBPWGRpV0M0ODRBUkhzL3ZqY0dFL2dPY09pUUlTZGlYClV5UXBJcFhwU3Z3ajd1U0gwZmlQYWVObTl5OFUxdjhDQXdFQUFhT0IxekNCMURBT0JnTlZIUThCQWY4RUJBTUMKQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBdwpId1lEVlIwakJCZ3dGb0FVTDFsM21BaWtaZWtQL1dnWVM4TEtRVXJ5N0Zrd2RBWURWUjBSQkcwd2E0SUZjM1JsCmRtV0NDbXQxWW1WeWJtVjBaWE9DRW10MVltVnlibVYwWlhNdVpHVm1ZWFZzZElJV2EzVmlaWEp1WlhSbGN5NWsKWldaaGRXeDBMbk4yWTRJa2EzVmlaWEp1WlhSbGN5NWtaV1poZFd4MExuTjJZeTVqYkhWemRHVnlMbXh2WTJGcwpod1FLQXdBQk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQTZxWE43cnhpUGRXWHBueUorbS9MSkVocWVoSGllCllmWkthc0xnRG1TS0FWaHhrWHp1ZnRMNEFQWXdCVkxBY1VJTFRNMEpOUnlvSzlhb3h0UlpaeHJNV0o1M0ptNWMKOWxsTVI2OHgvdXBhM3RHNlYzeW83c1RSamRlaHlPY2RnTXI1ald4eXZzeTFrNmphTlphZWpEZEFXOUJUQkFxcQpYM0JpN3JoTEFOMUpGSWorUFc3U1lScXBNTUtDTG9FOVZmbkZBc2lqdE12eTFZN0t1dHl4ZkpWYXRkWkFUeC9JClBkQlNSOG5UZ01TRU1PbzVzdVg5QmJsZ0o1SE4zZ3krakM5WkRWOFBEZVBLT3ZDTHU4aTAwOXlwMVhXRmpDZWwKTE1vNGMwcW00dGNlRURseVBiQXhPM3VVU1lpTytna1JoVDdxaFl3UXEvTjBEMnRHWTk1OGRBQUUKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
                            "vars.apiserver_key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBb0NQcFJaOGM1VnhJV1NmSHkvTG5XVnNIcy9nQWNsaGNzWFd0bE80WERkT0pBSG1rCjQ3MkhXK0pUVEpsaXdxRCtoL3B2TGVOQi9PSVpLRXRjRHpXUlBYK3h4eVovblR6R0Y0eUJ1Q2lweExqTzhIY3MKdk1YQTJEa3laYUd2TVYrT3ZSemNydHpydDVpVVlrb3lZMTFDeTRvVUNVK25nVkk2cTRPbFJjUEtXVS8wSVN0WgpsOVpMb0gzbzJHSkpYL21pRzR2RXA1M3RyYWZyamFJWWhjL2RiY1UzQVVhemYydkhUTFZjL3lvNlgzL1BZV0hqCitXU3pKWUhaTlRRSmkvcngwZkdwWXFML3pvSFJWQm0wT2k5Q1hvZlE1ZDJKWUxqemdCRWV6KytOd1lUK0E1dzYKSkFoSjJKZFRKQ2tpbGVsSy9DUHU1SWZSK0k5cDQyYjNMeFRXL3dJREFRQUJBb0lCQUFRY3gvbk11ejQ4bjNNQwpyWVBVU2hLbVhzMUZXaVdWbFZQTlZOYlZRbXhOZVdBMHY0SkZ0THNzVmIxSzF4bHVidnJvK0gveUxSaWthY2I2CklIUVhpUkpPUEMrRUVwVGtJYVlyS28yakpiRHltZ1hjMlo1RGFjOWpzS0toZzFFK1Jma2ZTNStGOXR1eEpHWmQKeDJ0NzBxSk5lblErd210MHhDTHhiNFlhSUJFcERSREI4UEZCa25UVlhOSDFVb2FiNmRIMzFvVGwwL1kwWVJnSQpESXMxOTBOK1RJSklGTGd6RmkwN1ZSaE9nb1FSN1ZFMUI1bGV0V21TSmpSWVZjWGdrYkhMS055TVA1ODNPc09SCjRNd2lneDVzYm0wMkkranViSmQzcFFMNTZwTnhFL0lZZENuOGZiUktjL0Y2RjdFUXYxcEJPbmwrWmRhSnVqdkUKSEl5cjRRRUNnWUVBMGxUcExDQ3NOSUlVdXJWTEp3Q2hrV0tUcDFGb2RraHlxZ0tneWtoMW5QYVBtU1lBTmpKKwpTMHdBZEdmNmRlMHdGVisycU9hWmk3ZXRySFNvTzdubjJZelVZWitKbHRoTk5xYTZEUEpJcGdEZ0dEZkF5cE1CCjJOaEZKcFB5Vk5xMTZ0Y2I4WjhkYklkSS8xUlVveFN5NTI1ZHJHQlk2R0hOc0R0M3NCZExXWDhDZ1lFQXd1a28KaEVvMndsVUxyNGlHam9oWXdyVmUzY3VWbnZCV0VQVW4ycGpZUnoyZ1phUFJYWGVNT3JNTnNOSkQzMjhNdlZVZgp4cVlrQk51UStnWklQOTdNdTd0NlJZWmtFZUowTUdJaVRDcFlNcWpkbDBVNUJPcEMwQ05zK3dlc3JDVmc0NG1JCkFGbzZLUm5xRFQ1b2VZeG0yU0pNQVUyL1hhaDNyc2Y2TG52MlFvRUNnWUJUcGhGVnkyaXhPVXFsTnBTODNqTmoKYnFEcVdpWUJaSzYxam5ZRC9PMUpqNFZza3dCaWpaSk12OTB1Ym12ZG1vY1UrUXZjQUZud2h3dzdHZW9PVnRFdQpaQ1BTNzIvNDNlMVhYdGQvYnB3VjZTTTJmblhlR3JrUlZIR3I5Z3JhVkdFbEZJZTRnRjlqV2lwZDRWd0h2Nk9uCkJ1MmFNSGNyZERvcGJIMGRPeVpzWVFLQmdGQnRhNldqQmhPTWltVGxYampFZEhQcjZYaDJRSWcwUGgrRE9lM08KOGpmN2F3dGwzTWZIdzlxWTlnWkh6WEFPWCtCa2x0Y2V5WEFqdGlBbHBYeU5rRWZMSmJvNHFXUmo0SFB5bXBwNQpRcW1zMnJ0SCtpNVlDRGZnMW1DRG16SHh2cGhGc1JRTUowRzhpc0xxUkt3YlRuazgyTVlVOGVsUTBnb1NSTjhYCmtkZUJBb0dBWlJJS2VCODRSM0crSDl6eTRYMVJxYi9scTE2UUpRa0FtZVBTUDEyUDQrcnNvKzBUK0VQVHBHb2wKYWR6M1JpQk11Y21iSW8xbmU4ZkNkSDlOdEY0OTdWRXF3V3dxSXhpQUIwMHZLSEVGNVBXb3dHbEl2WHhQMUNOaApEdmdJUkJnT0ZOd1VHTEd5M1BmaGMzT2hrRERranRvLy95UTUxZGtiWkdJVGhaMDByMXc9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
                            "vars.ca_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRZW1IbVZSd0ExTVZISG9CTjVHL1BLakFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURrdwpOakU1TVRaYUZ3MHhPVEEwTURrd05qRTVNVFphTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXpURFYKNkh2UTZUaFZKdVBKMWxxZzFFdUFCTzVScWU0MW1ncHUvZ3BheHN1WTV0SEJpRUpMNVpZMWpoY1NwcWljRTJpRQpReFlyUDJzaXBEazIwRVdwMnFzMkZaUUJidkt1czJSQ3NqOFdqQTZvbFpXaUdYREZMRjFUMzRYMXpWVFp6bzlPCm9wOERqeXBEYytHTGRBaGwwM3VuR0lZMjliWlZVN2lhdjJ3THBKSWFMcjU4Rjd0c2g5bEpnVVNLTE1rejhjN3MKdEIzTmVXOW1JcUs0ZEZjUzdRUE0wYWpkNWI2bGRVL3c3ZjJNU2UxczFNc2ZBZkZZUEhiRVFnRktVcFNnQkVIWAo0QnB1NXk5NXBGR0wzTkQyWXVPWlI2Z0F1bzF5R2c2ZlFOaE9rNUdyVG9VQUNzRm9RNXhkUDgwandJbnZPZmdWCjZhMnMrSGhKc2VhTitIVGtQd0lEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVTDFsM21BaWtaZWtQL1dnWVM4TEtRVXJ5N0Zrd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQmJZM096TS9WYkZicytwamhWOEo3RFUrU2VNRWFDbzR6Y1NEcUNHbmIvUit6Q2J5T2RYCmNKU0xQR1NpdmFYVVBROE1Ic0R6c2p0YlEzMHYwR2R1TElDbUdDU1IybnZBeDl2UDRYZzNsTmR4RlFPVE0zYVcKbC9LWHoyTzVhdHkvTytDWDZ5SVdsWW1iaW1tdjY2VENUeUVjR3pWK1VGL2pYRDNERzI1M2JoUUdSMU42cHdpSwplRHhaSDI4YXZsbjN0MDJwV1hkK3hxRkhGN09WWmhURjdGQnF1REJSQWVqb0NySExZcjc3N1dLTUNkKzlLaGprCjN2ZURBUnhmVVBpZ1lTSSt6b285Y0lVeU1sb04xSS9Qa0QrbFVyS3ExRmkxa2NUOWJkTkVlRVFsVlorRmR3d2sKL2VSZnd3ZGJqTHZOc3VTUjhRQWJUNTM2Z1BuVElrSm5yRkE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
                            "vars.cloud_provider": "",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.etcd_ca_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lSQUlXTXdBOTB5bWVXVmpiV1c5NVJxdDh3RFFZSktvWklodmNOQVFFTEJRQXcKSVRFTk1Bc0dBMVVFQ2hNRVpYUmpaREVRTUE0R0ExVUVBeE1IWlhSalpDMWpZVEFlRncweE9EQTBNRGt3TmpFNQpNVFZhRncweE9UQTBNRGt3TmpFNU1UVmFNQ0V4RFRBTEJnTlZCQW9UQkdWMFkyUXhFREFPQmdOVkJBTVRCMlYwClkyUXRZMkV3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRREN1d052dWx3TWtHYzcKRjVkbGlEV3JsSWdqalMzSHBKbTE2WDdVTHh0UjFUMG9FYzZNd0dhbnpVZjI0NXFlZ2ViM05iUXVIYklqVHNyUApoQlB6MU9zbklBaWpBY3FITVJqcksvazg1Qk5PRnU2R1dQTm10eFh3Zk5GMHBRT1N0K0IxVWlKRUd2SlBxYTg3CloxR0xudE5scUhVSFNxZzdSd3BQRk5NRzZMYTUyS2FsTjhFYklrY2N3eHlwaDhFem1GVFFjbklJdzJZRU8yQkwKY2ZVZThlSDQ1ellaNVM4MjRxT2xXanZzNkpPejhmalNUNjZjRTlMa200STBIanRtWk9JRFRITHYyT2VpSWkwUwpKd3h2S0lBWmhQWmFkc0ZsMFl0YWNFZE5SdWVhN2tBME5JaExRUnBKUktxclJiQi9uTDBVNDltdm1zZ0xaYy9oCm1lZStLQnZCQWdNQkFBR2pRakJBTUE0R0ExVWREd0VCL3dRRUF3SUNwREFQQmdOVkhSTUJBZjhFQlRBREFRSC8KTUIwR0ExVWREZ1FXQkJUYlpKV2JMVUEzTGVFeHFjenU1V2dKY0tjRUVqQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBZjlrYjFqemw1Qld2MmkwR0hGejgyOFJxYnNOVnFpSE1WaFpLcEdtajc5K3VEeXBUSXZiTFNSenZRblF3Ck9kTklvRW5KMzFLSmhaWFM1eUJIbFl6cGN5OUhuajlOVkQ2dndmT0drd2Fnd1lBdklNYTZoTEI5bmRXQTlwRXgKRVVLNlROZjFkMUZpVUJab0xORDVvZSt1eXFiV3lLSWtZUFdCcFc5L25ZZ05Ockd0QTliSnlZeTQrTE45UkVpMwphNUZ1Yk1TK2p5SHZ0TnhaZThGR2NiVi9HV1g5L1o4eUgyWHpmU1BPTC9jNDE1Rk5Qczcwdy84SkkvTFVpZmZICll2QVo5Vi8wazU2MDE1dHR1RTY3S0dWRHBEZ0c5aTRLbmZFMkc0RXV3SHVrbWQrMElRQTJDNGFidmVHL2tBdzAKYWNZUHdwTENLVXg3Sm5IaHJQK2JqVzd1WXc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
                            "vars.etcd_client_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXRENDQWtDZ0F3SUJBZ0lRU2xPeTRaQzFKUmFOWVd1by8vdUNMekFOQmdrcWhraUc5dzBCQVFzRkFEQWgKTVEwd0N3WURWUVFLRXdSbGRHTmtNUkF3RGdZRFZRUURFd2RsZEdOa0xXTmhNQjRYRFRFNE1EUXdPVEEyTVRreApOVm9YRFRFNU1EUXdPVEEyTVRreE5Wb3dKVEVOTUFzR0ExVUVDaE1FWlhSalpERVVNQklHQTFVRUF4TUxaWFJqClpDMWpiR2xsYm5Rd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUN6WWlDOUFwTVYKczQvekMxZ2tKYkhQVStrK2RWUjQrSTRlTndYRzc2VlJLWnZ6WnNwY3l3TXVkTVpMTlVLQWwwMVNGWnlYUW5BbgpYUXVPU3dyNnJGbFArK282aGYreXhURVk0RXNFajc3b05LYzRROHl1YUJsRGJIZy9Xcnl1dGVUSGtKRTVKakhHClpKaXhCd3ArVm5wdk1IV0ZqNTdnVXBmYmRJaGZVUjZPZGsxMXZMWUVlNzEwM2RFU0FNNjhWSDQ1cVNTS0pEc08KWEtIenJ6a1RmRTJHeVU5UkNsTUlGU1c4Y09YaUl6YVlhWlV6TXpTU2QvbHVMcWszSmREWjVFK3FCQ2E4ZVp2LwpBOXMxaksxRnE3bzBuWFJFMGI4dGVtZW9BdllWT0o5VDZGZkRwS2Y5UXFWSWJidmhoUmZQWXZWSjJTR1cxeUFKCjlkaU5QcjJEOUpQQkFnTUJBQUdqZ1ljd2dZUXdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUcKQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVlNQmFBRk50awpsWnN0UURjdDRUR3B6TzdsYUFsd3B3UVNNQ1FHQTFVZEVRUWRNQnVDQ0c0eUxuTjBaWFpsZ2dsc2IyTmhiR2h2CmMzU0hCSDhBQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBMGRjcFgrKzhoTmREMW9pYXZxMytzNFF0RjMKb2RXam5GTTJyTTJQSmVyNEJWdzBUTXNIK2sweGRVRU5JSHFwaE1NV1pDT01BYlJRaXJqS1c0NHdIbS9sUjBWZQovQ2l5TXd2YlRlVkNxUDRIcm1EbWRBTDVyUHo3OEIxWWQzeUQzSmpBdnZsaGNxZ1QzRWkza1RaMjFrckdVVHA1Ck1WQWN6ZjVDeFpNSHd4NEZQS0llZzR4dXZWMmtuSTZuMW5SN2tnVHRJWXhhLzFqdHc0QkE0TTEvZUE0a2xJa0oKbE1Td25jWDFoY1VGYkFreC9uQUVNMFVPRm1yQ0VPZDM1RDFNQUk1aTR0akZuUVlUb3VrVGp6bm9CSitZcWF1Mwo0YVhGM21rbjRZdUZLTGNMQytIOFpFUFhzR3pST2NtRG0wVG11ekxTSElyd1pxK1l6c29vYmlpQ1ZvRT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
                            "vars.etcd_client_key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBczJJZ3ZRS1RGYk9QOHd0WUpDV3h6MVBwUG5WVWVQaU9IamNGeHUrbFVTbWI4MmJLClhNc0RMblRHU3pWQ2dKZE5VaFdjbDBKd0oxMExqa3NLK3F4WlQvdnFPb1gvc3NVeEdPQkxCSSsrNkRTbk9FUE0Kcm1nWlEyeDRQMXE4cnJYa3g1Q1JPU1l4eG1TWXNRY0tmbFo2YnpCMWhZK2U0RktYMjNTSVgxRWVqblpOZGJ5MgpCSHU5ZE4zUkVnRE92RlIrT2Fra2lpUTdEbHloODY4NUUzeE5oc2xQVVFwVENCVWx2SERsNGlNMm1HbVZNek0wCmtuZjViaTZwTnlYUTJlUlBxZ1FtdkhtYi93UGJOWXl0UmF1Nk5KMTBSTkcvTFhwbnFBTDJGVGlmVStoWHc2U24KL1VLbFNHMjc0WVVYejJMMVNka2hsdGNnQ2ZYWWpUNjlnL1NUd1FJREFRQUJBb0lCQUFqSlE2VStYUW54RTVucAo4bFZDNjJTbVRZUmJwdG1PQXhnRHhlcXFqa1JkYjJBS3B0cklyczAxdHdpMEFSL2ZTVkE5OHIrTjU0Um1FRXpWCjdDRy9FMWpSay9WdDNzcFkwa0RQcTV6N2xYUTJNQUtYZjQwRFdFbHZKS3lsdXh3cm1Kc1Z2NmMyOGJVdjlES24KajZJRWhsYXYzdkc5eVNCZnEwUjZmcnQ4YzZ5eWxhQjBhR1lNVm9CREJpYXZPQUtyK1VRZHlMVktUQ2tmV0pVZgovNjNQK0U5T1pKbElUTnBEcjBmRnRQeVBXYVcvNjZ1amZXOFIxVDRMdmJQZXJUemRqaFU2WGRHaUE2L0NpYVhJCmd2N2ZHbi9YU21jRTVqZ3ZwSmR6ZU5EWDlnUXRvRWtsV2k1R0IzUUJEZ1dSTzFnaVVEK1BUbXJwZTlaN2RBaEQKTlVHam5lRUNnWUVBdzdWMXdFQldBeFg2NkJFbnlaWnR0R1F4OGdDSm1mbFQzcGRDZS81ZlU2bFZEM04vR291dgpPNUMxbzNtTC9sUERnL1FyYzdubm0zQWFzUTU4NENvZXROSDZDUFdxRjlaSGFlelNpQytnZzdoK3c3MFpHK2VwCnQ1Y2J1K2xvOUNBbkIxRWZ0aVhETlU4SGFSV3Z4RGJBeG1lSWU2N1pSNXdhY0c3N1U2ZGYyb1VDZ1lFQTZxVW8KdndWVEpHUXdFM1EzdFdmdnViZU9HWkhSWWM1cUZTWFVNT1ZLYkpxNTlaQkYvSGZqbzJVN21QOGlJUTErNEZCNwpvQnAvSGJrWVM4VElIVGxieDVuMUkxdjFObi8zTDdRUEdOcUt0R3B1bEplNklrOFR4cURFd095L0F4T1FlRUxiCmNyKzNJQSt3ZlZWaUYvNURhS0k3SGY1VVpSeTZNSG1QRGoxOC93MENnWUVBdmFUUEw3YW9JbUZnT3hTMHEyRTcKZVR4R01hMVhxWDZ6U05UbU5lVHVWdEdWZlYxNzR5dE1hTG4zYVN2VS9tUUk1NHJwdUVDRE1GcFhZdzhZN3RlaAozYkpEU2Y5VURiazBobTVZTEdPS2RWbUliUUNHbmtYRWJnVGRlUi9hOWdWYURIc044YUZ5SWV3czBDV1ZwdHN2CnZwS0E3T2tuMzM1akdHUlM0bU1rUFVrQ2dZQkdYVkxUdmNBS0NMVldFQ0xvbG91UUVOaGZHSmhHa1VURXBMeDIKRVR4NVJ3ais5ODNWQVFyVm8vVDBVNFlqalUxLzdRSzFwMXg1U0ZsZDExdi9UNFVUWFRyaTZKK25RVWFhR28vdwpieERyTzROL3NlUlNoNDR4b1dKL1REK1hwNVZLU3hwTjFlb1Boa1R4d05vU3dkL3JEOE5Vb2tFaXRUT3NkN2VMCm1LclVQUUtCZ0UvdTk1Z3ZEZHR1N0d6Wk9uL0ZCRGJubTZDOXEydjAvWUR2dTdQa0t4cXpjOGlHUkpJcStRQU0KVEZEMGZQWVFMSTFUdXJEU0VRRHBqNFhKSHQ3M0V3VWZKM095eW9xT2VWNEJRS0dnQWh5a0U4a3Q1eFh0dGNFOApsVjVwMTJ5clJYdk8vZU9TVllobkxxZnYrV3VWTGQrQVNDQ1pHK3V1WGk3UEF2SGhOSitHCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
                            "vars.etcd_servers": "https://n2.steve:2379",
                            "vars.hyperkube_image": "gcr.io/google_containers/hyperkube:v1.10.0",
                            "vars.kube_dns_service_ip": "10.3.0.10",
                            "vars.kubedns_dnsmasq_image": "gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.8",
                            "vars.kubedns_image": "gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.8",
                            "vars.kubedns_sidecar_image": "gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.8",
                            "vars.pod_checkpointer_image": "quay.io/coreos/pod-checkpointer:9dc83e1ab3bc36ca25c9f7c18ddef1b91d4a0558",
                            "vars.pod_cidr": "10.2.0.0/16",
                            "vars.server": "https://steve:443",
                            "vars.service_cidr": "10.3.0.0/16",
                            "vars.serviceaccount_key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdjNQMHM4UGNOZkdUWmhRdDJOL04rRnI4ekpJWE4ySndkWFVhMU8xN0pEa0VBbW5WCnFBNGk3My9DOW5kdFFBWHdyNkRGaS92N2FKQzNRR2thdGN0L1pDanZKdUZpcXVJSldLeHJJRTZ6ZDhXTkpCeC8KdmtGKzFjLytsYWY2ek5meUtCZFlOTTZ0SHBYY2hvQ0lCRS84RjZlbUplenkwd3ZkT0s1MFRYNTUwL0VpdjkxLwpuTWh6OTE4UkphcTI3ZDZ1MUF6Y2J6Z3NDUG1CYWI2NkM3SldvYVFEZWlVeU1PQ3pNdUlhNnpmOTc1Vi83N2NDCm5Dd2VHSVV1MWlTYzlabCs1NFJKb1NCUUpoMGoyYUpHZHp6QnFZWTNNUnN3cWtmMlFXdDgrRmx0QVQxUGlhZFkKZDE3YzZpblZaNFJNV0RQSjR3OURRRzY5OVFidE9tSTNTRFk2RFFJREFRQUJBb0lCQUJiRFFxVGM5S0cxUjBFcgp4UWUwRkZraStFdWFVd2hTdSt3N01DV0ExdE5IdENKVlV3SFlMRzh0VVpEY1FqRUtnOE5kNmg3cXBzbVg2ekhOClRVK3dFa1ZtV0lqVzQxUk42NjZQVVcxVjdpQ2ZiRmlPeXVGa0NDQ0R5bEVnMThEaksvZDRUeFI0UGowVXRGT0oKbEtKdW9CcHY1R0U5K3VEODJDQ1ZIVjdaV3NMSUJDUFQxbVdxRTlyMmlTb3lkRGZXQkI5bytPM0EzS0YvM0hLNwpFNHMwOG1IUUFkVlUwYUpqbFFkekN0eVBBWGpnZVgyQ3dHTWdiQXlML3YrZzgyTk92eldGcXgvY21BRG5Ec0dUCkNsWk41N2QweWU3Vy9SY013Z2s1VyswaGUySGpPSnlvT2ZYZXdoNDUwVk0rQmt5WnJZL2RLZjdsaTZ3bmYySUUKWktwZTNnRUNnWUVBNEFXdDZGSXdRQnVrNnEwcGkzN1Y5MzVrNVdoenhoQVFvQ1NFWHd3SjRUanJJSm9BQmJvUApMR0dGNVcxQ3FCcldiVjFrZmgrUzA2MVl0dXdmeUtobFI3RFd2Z0lpTlc1NGtQdy9FckEzZXUyT1hKRWlPQzQxClIyakVmdlA2aUJZWjJNT2VCNjR1end4RVFiTkVJcmJPc2hydERzQ080cE9uZlRYNHUwVmJZdVVDZ1lFQTJzZ2QKNkhVb2NzWFZXVysyVUdzRXBNSUovYU9ldkJxcTZ5eEdQVnJZWDZKM2xXMVV4OU1xSHVZZko5WjQwUnFZbnYydQpsQkJJNUFOYVdRc2pPQW5aTVVwK05zNlRJcTlEVmlFanV4ZXozT1lpNmNBQ0NtdjZ1cjE0Q2VUcWNTazJrWllzClVWL0VqanFNT20vdmJBcUhjL3haRTRNTEk5M2FFSThRYlZWRXdBa0NnWUVBd1BsamMwckpNWkFlb2VFRWRwdU4KcVNLQnUzUWN0ckxELzQ4MVQ4TEpCKy9GNjFGOVQzR1UvSUFOblRKZlJ2dkhWbklxek5KWjRtbmlqOEFiS1BpVwpOZ2xKRW1nNEc1ckwxT2pWVkQzanJNclI1VDlJSU9qOUVFUlpiNXF2WjJiU1lQMHhOaUIvUmUrbEpJdE4yREZ0Ckg5TTkvWVUyRUV0czdkaitLQ040czFrQ2dZRUFzS0htTzVuekNRNmQzRElyNENzMnVZb0xKT0xuc2ZoWnk3cVkKRHNyOGErR3dhRXkzcVFqY05jd1dsVVE3a0o3SFgzMXlhQW5wdjJUUm1aZzdXKy9ma1VNU09VOTRUUVZ3K09XUwpnbWQxaUQrcEtrMGhtS1pxN0Q4eDNkTWFVRGcwM1QrQUVrYWVXekg3cXVaYVIwRU04T0JvVGk5N1cvNnVJclpPClRlY010WGtDZ1lFQWllakYrS3hieHVtRHcvL1pxWko5VEdWSGpvK2pzeDAxYVRkd3NaTE1Mdy9zeE54MU5ORU0KbTFWYXp1RGE1VXArcG1OUTJnWFZ3QUF0NmVsR2NyRGxMdDA0M0NjN2JJakR4QWM2NS9OMkY4L1lRU3pBZDg0SQo1RGtmdmhuUnZwdXovUU1pY09jaUY4VEVieGdBOHVTZm9vSGVhYWFraEk1TGQ5WmZKOTdHcjNnPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=",
                            "vars.serviceaccount_pub": "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF2M1AwczhQY05mR1RaaFF0Mk4vTgorRnI4ekpJWE4ySndkWFVhMU8xN0pEa0VBbW5WcUE0aTczL0M5bmR0UUFYd3I2REZpL3Y3YUpDM1FHa2F0Y3QvClpDanZKdUZpcXVJSldLeHJJRTZ6ZDhXTkpCeC92a0YrMWMvK2xhZjZ6TmZ5S0JkWU5NNnRIcFhjaG9DSUJFLzgKRjZlbUplenkwd3ZkT0s1MFRYNTUwL0VpdjkxL25NaHo5MThSSmFxMjdkNnUxQXpjYnpnc0NQbUJhYjY2QzdKVwpvYVFEZWlVeU1PQ3pNdUlhNnpmOTc1Vi83N2NDbkN3ZUdJVXUxaVNjOVpsKzU0UkpvU0JRSmgwajJhSkdkenpCCnFZWTNNUnN3cWtmMlFXdDgrRmx0QVQxUGlhZFlkMTdjNmluVlo0Uk1XRFBKNHc5RFFHNjk5UWJ0T21JM1NEWTYKRFFJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg=="
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "tls_cert_request.apiserver": {
                    "type": "tls_cert_request",
                    "depends_on": [
                        "tls_private_key.apiserver"
                    ],
                    "primary": {
                        "id": "ae554d1859c7ef5da3a53d01673da77250bff9e5",
                        "attributes": {
                            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIIC/TCCAeUCAQAwLzEUMBIGA1UEChMLa3ViZS1tYXN0ZXIxFzAVBgNVBAMTDmt1\nYmUtYXBpc2VydmVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoCPp\nRZ8c5VxIWSfHy/LnWVsHs/gAclhcsXWtlO4XDdOJAHmk472HW+JTTJliwqD+h/pv\nLeNB/OIZKEtcDzWRPX+xxyZ/nTzGF4yBuCipxLjO8HcsvMXA2DkyZaGvMV+OvRzc\nrtzrt5iUYkoyY11Cy4oUCU+ngVI6q4OlRcPKWU/0IStZl9ZLoH3o2GJJX/miG4vE\np53trafrjaIYhc/dbcU3AUazf2vHTLVc/yo6X3/PYWHj+WSzJYHZNTQJi/rx0fGp\nYqL/zoHRVBm0Oi9CXofQ5d2JYLjzgBEez++NwYT+A5w6JAhJ2JdTJCkilelK/CPu\n5IfR+I9p42b3LxTW/wIDAQABoIGIMIGFBgkqhkiG9w0BCQ4xeDB2MHQGA1UdEQRt\nMGuCBXN0ZXZlggprdWJlcm5ldGVzghJrdWJlcm5ldGVzLmRlZmF1bHSCFmt1YmVy\nbmV0ZXMuZGVmYXVsdC5zdmOCJGt1YmVybmV0ZXMuZGVmYXVsdC5zdmMuY2x1c3Rl\nci5sb2NhbIcECgMAATANBgkqhkiG9w0BAQsFAAOCAQEAFROqCVpmIbuG2WctnLi1\nLixmbB5pO7sfZ1Wbspi5RVfebswC62sF4httXEDlzhz80ICfyx5az8d95+o+r6He\nHQ5y3DkfyrRwN9RIFETer5/hzIf2ZuAnmDPETERd1qMWhF0YxbcgZLcM/Z9qN7BN\nVNAsU7cJEMFyciRU2AVfpNeVllvUbaRAtJdR8tEh8fS8TwhZyLvpQYB8uK144+wZ\nI0WhqQBJhP8rJUqcDbxtGteU4fDdyepxfcHs7uTFTxLqZy5Z5ffypx9sXcQch9NA\n74UgmujjOPWaEXsvw/9vDg8XUiYXxAstfxFyqpWg916scuX+b16ohC0Zq6i9VpiN\nFw==\n-----END CERTIFICATE REQUEST-----\n",
                            "dns_names.#": "5",
                            "dns_names.0": "steve",
                            "dns_names.1": "kubernetes",
                            "dns_names.2": "kubernetes.default",
                            "dns_names.3": "kubernetes.default.svc",
                            "dns_names.4": "kubernetes.default.svc.cluster.local",
                            "id": "ae554d1859c7ef5da3a53d01673da77250bff9e5",
                            "ip_addresses.#": "1",
                            "ip_addresses.0": "10.3.0.1",
                            "key_algorithm": "RSA",
                            "private_key_pem": "04cb3946bc5ee920e0a7890f6abf39825623ee25",
                            "subject.#": "1",
                            "subject.0.common_name": "kube-apiserver",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "kube-master",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_cert_request.client": {
                    "type": "tls_cert_request",
                    "depends_on": [
                        "tls_private_key.client"
                    ],
                    "primary": {
                        "id": "094f691f330d247285b08faa8b37300a38fe023b",
                        "attributes": {
                            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIICoTCCAYkCAQAwJTENMAsGA1UEChMEZXRjZDEUMBIGA1UEAxMLZXRjZC1jbGll\nbnQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCzYiC9ApMVs4/zC1gk\nJbHPU+k+dVR4+I4eNwXG76VRKZvzZspcywMudMZLNUKAl01SFZyXQnAnXQuOSwr6\nrFlP++o6hf+yxTEY4EsEj77oNKc4Q8yuaBlDbHg/WryuteTHkJE5JjHGZJixBwp+\nVnpvMHWFj57gUpfbdIhfUR6Odk11vLYEe7103dESAM68VH45qSSKJDsOXKHzrzkT\nfE2GyU9RClMIFSW8cOXiIzaYaZUzMzSSd/luLqk3JdDZ5E+qBCa8eZv/A9s1jK1F\nq7o0nXRE0b8temeoAvYVOJ9T6FfDpKf9QqVIbbvhhRfPYvVJ2SGW1yAJ9diNPr2D\n9JPBAgMBAAGgNzA1BgkqhkiG9w0BCQ4xKDAmMCQGA1UdEQQdMBuCCG4yLnN0ZXZl\ngglsb2NhbGhvc3SHBH8AAAEwDQYJKoZIhvcNAQELBQADggEBADA00aeeqrZGvxir\nFKlNRfPz92O2C4KpzZagNT5nRcN1g9uHsVsOocDKT+1y/z2xdoD01cwK+nnQ/pF5\ntJgcFjnOvSypbqhP/Ws2M9o1kMLUPFuOUZRISHGb2fQRBGeh5e7qOhW7MBSb4RRS\nEZydWHEPxMhqwTCLuNEwfHeBmmhOigtXzq/uXWeQC8AJSIbJoYTyk/vo/77RUhNp\nAksX6kwwFNY6m3E7Unl/Q3b4K7ctQQnLzzTJLXwDoUxA0UONe6b1/3pQeudnjNT8\nOXpXH0XZg6k90NUL8Q5r49UIHqhmLO1RQhXHp9B7KwxQvkpvrL7eUAj+J3TR4MF5\n5Ay+Fts=\n-----END CERTIFICATE REQUEST-----\n",
                            "dns_names.#": "2",
                            "dns_names.0": "n2.steve",
                            "dns_names.1": "localhost",
                            "id": "094f691f330d247285b08faa8b37300a38fe023b",
                            "ip_addresses.#": "1",
                            "ip_addresses.0": "127.0.0.1",
                            "key_algorithm": "RSA",
                            "private_key_pem": "6de6a6676774d13b8e00bf7e126a446c74bbd679",
                            "subject.#": "1",
                            "subject.0.common_name": "etcd-client",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "etcd",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_cert_request.kubelet": {
                    "type": "tls_cert_request",
                    "depends_on": [
                        "tls_private_key.kubelet"
                    ],
                    "primary": {
                        "id": "49422beffccd2ea9c1783e742e728081f9d89306",
                        "attributes": {
                            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIICcDCCAVgCAQAwKzEXMBUGA1UEChMOc3lzdGVtOm1hc3RlcnMxEDAOBgNVBAMT\nB2t1YmVsZXQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDftsNgnkrk\nYoBBcb8Mq8M1xmG8QppCe5hO30FD3jnZoVpgIPvI5F+ECGULvIkyqC0gHllESDMM\nMt9s32o8UcaPS24wMudWSFQFyAe469Lc0Vm69YiwZC5XdUlWSudEvZNR7gKgzR4j\nxQ1k/AVSVj4TTkf96AJsy2Vaq1BHa3kF8qr7+PfBhAg6Y7FxAIbJG0D2ALwVZ3h7\nDU8/38/ajLGS5VaQG2skIHLlbujmCY1pr4wtAoncmm0BPYkwC0WuoJs8De4f3SoB\nkp1u//TykK26Cl3bjdUPOrkLGZzzM/fWnxzgfEP6DoSrB3/bm4sM7KY76W1sZwbM\nJ28Rdk/g+1anAgMBAAGgADANBgkqhkiG9w0BAQsFAAOCAQEAW7nhRNLnSAzj5EZ6\nanslWJCh13AwuhT+5r2JN/nT46VeFMgsOOy8wNJjhgxy8Lg/a99c0grsvCQGKVmS\nVbatvuOiCCmAsb9SaXEuKn2+rixL1nazcDJ0ODJjCiNpVizP7R3wLOW+VG7Guwb9\nDASxfZ1xgWV+pW0Eb9PWPHpvEByeg5B5zt0+4skenXCRQ3nkrLx+8HqduKjpaN81\nGr1FkiekNQd5nU0p0JIvcsnzYjyse8avAVzoAS9Ng9FxYiCzPEKCdE4Rh8yRAEFy\nKAX9lZmcL6OC+JHNP3cIxQNzclj95VK6TlP8cSfuv5/gcLJ/jDzwLMHTqRu6FDdI\ngrfFvA==\n-----END CERTIFICATE REQUEST-----\n",
                            "id": "49422beffccd2ea9c1783e742e728081f9d89306",
                            "key_algorithm": "RSA",
                            "private_key_pem": "cdc99b99c9a53fd0e7f3f9c18a4fdc6bda050e85",
                            "subject.#": "1",
                            "subject.0.common_name": "kubelet",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "system:masters",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_cert_request.peer": {
                    "type": "tls_cert_request",
                    "depends_on": [
                        "tls_private_key.peer"
                    ],
                    "primary": {
                        "id": "25ca161183b7bfd629e19e62d211da7b7531e45d",
                        "attributes": {
                            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIICjjCCAXYCAQAwIzENMAsGA1UEChMEZXRjZDESMBAGA1UEAxMJZXRjZC1wZWVy\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAo+1WbcU3Vxz2tYnie8iH\nGvnlk/dQth6n3gxZLCN1S+d0TaR/kWNE7K2P3MFmVDDNIV666yRRBnoGYAcVVOB3\nJPZrundbsxj3QVSaW8jo244C20LgqdSiwrPw+l4VDVw7+YclFPIrFZtJYa/6ZvjA\nOa1gEgYMNml4Dg2Nu68DfjAwxH6gMCTvL8YDMgPI8r8FoL76Bk95CBrkROXCIov5\nmZEVQQgAMaZ1MZXRd4kETjCYuIr0F6lrOOrgVe3uE4GYAlOiEoqx5WmaOWEdzex1\nAvgc28AnkMOVhNwR++GJaBYb+wSV2bIUPyVJDrs7vyGNrcugVD1pxYlIjrxXykQb\n6wIDAQABoCYwJAYJKoZIhvcNAQkOMRcwFTATBgNVHREEDDAKgghuMi5zdGV2ZTAN\nBgkqhkiG9w0BAQsFAAOCAQEATreEJsQwDmGsSCO0PLjWetRo7N596cxevXXpyDBw\n34UMHcfXNNJTSJ0Rs8QrG8xLo9ynpoaY29JOmTrV34HqVB9kVSNhuiESDiT/IyLj\n335tkOJdWl5WNG6v18q2lZA6N+lI49cc/iY6m6fzHeiWYKYN9opYn1HQOnoCKkJh\n1MWe6Vm2iJmJee1vCE3ugcNA2lG96soZRf81cR6EuMQ+Ay0lah1o/YuAQv7/fpZ3\nulUCL4SN8WN1PufaVFu9bku5ElNB+4UeSj0h4T8cwFBA4/hEeNFLZwVxEeooru0S\nA6X9pcTj+RmxP+/O8AJodbtbYBzWQGk/itNA06vkTBh7Lw==\n-----END CERTIFICATE REQUEST-----\n",
                            "dns_names.#": "1",
                            "dns_names.0": "n2.steve",
                            "id": "25ca161183b7bfd629e19e62d211da7b7531e45d",
                            "key_algorithm": "RSA",
                            "private_key_pem": "38b5bd92826f9de58f20fe32d5cd8ede4c63c47f",
                            "subject.#": "1",
                            "subject.0.common_name": "etcd-peer",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "etcd",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_cert_request.server": {
                    "type": "tls_cert_request",
                    "depends_on": [
                        "tls_private_key.server"
                    ],
                    "primary": {
                        "id": "c54495ee6c3cbd32d59aa6527bec761589ba5703",
                        "attributes": {
                            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIICoTCCAYkCAQAwJTENMAsGA1UEChMEZXRjZDEUMBIGA1UEAxMLZXRjZC1zZXJ2\nZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDIeScMPZe9erpuflfn\nCT+WGTZdeZBnRzkElBdcsJaIA8UUvR0EPGRi6oDQIn+cAzTYSDwlROKkutzeVUXm\nYhDPcCGo4ad37CMpKH1kuESvMC3PY3gpx21XRZKlFs59LCDADjRYf+XM2EJcKFtu\nFPd5j3CS09Zr4PU7chlgjGx0YQj1fpf+1f1ltGT7JQk5RqkAi90ZzLUuTUGF8T9r\nvt52TZwLt/4cJfx20F/Pn7NOq1g2MAIgVWDn8vr5rHP7PSyIRT30bNzS4lx2Bp0N\nqz/cpaBp2CCXrybDDoFL7uWuSgOwCMwZCByaUowp6A1f0UNWVffS1E4m3buBLEYe\n6UB5AgMBAAGgNzA1BgkqhkiG9w0BCQ4xKDAmMCQGA1UdEQQdMBuCCG4yLnN0ZXZl\ngglsb2NhbGhvc3SHBH8AAAEwDQYJKoZIhvcNAQELBQADggEBAH30h4IH57ib6ytF\nE0pXPTzcvilIudpiIokYtrctG+pC8kPgKcZ1afdlvanoWscwPL1cj9UIPFV/yI4r\nSW0sWSWyia1vqD9BvBWeA8F62aXWPDJpuQD1Lz3B1oxCfRxwHJnOPickgzLb2Yv/\nQjQdK1XAVPGE2PyczGV9zvtAxrxhFHZFSBhGx0BWpyD4sgVXjYrJNf1WDR3srnIP\n14oQIYjvrWC5JEMvnjQShx9ya20VKtYgaH04ZZpqMBntLFBTi3jnj7AU6EXMnqEN\nz1Uu2GOqpmqjlame9opOmM/yr4JJRHhhZqI4i5BMe6+27fFcyKK1uNMKZo9oNw6l\nLKVVwEw=\n-----END CERTIFICATE REQUEST-----\n",
                            "dns_names.#": "2",
                            "dns_names.0": "n2.steve",
                            "dns_names.1": "localhost",
                            "id": "c54495ee6c3cbd32d59aa6527bec761589ba5703",
                            "ip_addresses.#": "1",
                            "ip_addresses.0": "127.0.0.1",
                            "key_algorithm": "RSA",
                            "private_key_pem": "5737fcdcc0442f2da3ad5607197196e376dd35b9",
                            "subject.#": "1",
                            "subject.0.common_name": "etcd-server",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "etcd",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_locally_signed_cert.apiserver": {
                    "type": "tls_locally_signed_cert",
                    "depends_on": [
                        "tls_cert_request.apiserver",
                        "tls_private_key.kube-ca.*",
                        "tls_self_signed_cert.kube-ca.*"
                    ],
                    "primary": {
                        "id": "114198985537823679680270800865151906780",
                        "attributes": {
                            "allowed_uses.#": "4",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "server_auth",
                            "allowed_uses.3": "client_auth",
                            "ca_cert_pem": "684c8a30c394af3e22ba99d79cc1335098d30a03",
                            "ca_key_algorithm": "RSA",
                            "ca_private_key_pem": "83e9356edc271926d0bb936cfce8bdcd0ce4f0a0",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDtjCCAp6gAwIBAgIQVenssbT/VwcB5cHZVz9z3DANBgkqhkiG9w0BAQsFADAl\nMREwDwYDVQQKEwhib290a3ViZTEQMA4GA1UEAxMHa3ViZS1jYTAeFw0xODA0MDkw\nNjE5MTZaFw0xOTA0MDkwNjE5MTZaMC8xFDASBgNVBAoTC2t1YmUtbWFzdGVyMRcw\nFQYDVQQDEw5rdWJlLWFwaXNlcnZlcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC\nAQoCggEBAKAj6UWfHOVcSFknx8vy51lbB7P4AHJYXLF1rZTuFw3TiQB5pOO9h1vi\nU0yZYsKg/of6by3jQfziGShLXA81kT1/sccmf508xheMgbgoqcS4zvB3LLzFwNg5\nMmWhrzFfjr0c3K7c67eYlGJKMmNdQsuKFAlPp4FSOquDpUXDyllP9CErWZfWS6B9\n6NhiSV/5ohuLxKed7a2n642iGIXP3W3FNwFGs39rx0y1XP8qOl9/z2Fh4/lksyWB\n2TU0CYv68dHxqWKi/86B0VQZtDovQl6H0OXdiWC484ARHs/vjcGE/gOcOiQISdiX\nUyQpIpXpSvwj7uSH0fiPaeNm9y8U1v8CAwEAAaOB1zCB1DAOBgNVHQ8BAf8EBAMC\nBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAw\nHwYDVR0jBBgwFoAUL1l3mAikZekP/WgYS8LKQUry7FkwdAYDVR0RBG0wa4IFc3Rl\ndmWCCmt1YmVybmV0ZXOCEmt1YmVybmV0ZXMuZGVmYXVsdIIWa3ViZXJuZXRlcy5k\nZWZhdWx0LnN2Y4Ika3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2Fs\nhwQKAwABMA0GCSqGSIb3DQEBCwUAA4IBAQA6qXN7rxiPdWXpnyJ+m/LJEhqehHie\nYfZKasLgDmSKAVhxkXzuftL4APYwBVLAcUILTM0JNRyoK9aoxtRZZxrMWJ53Jm5c\n9llMR68x/upa3tG6V3yo7sTRjdehyOcdgMr5jWxyvsy1k6jaNZaejDdAW9BTBAqq\nX3Bi7rhLAN1JFIj+PW7SYRqpMMKCLoE9VfnFAsijtMvy1Y7KutyxfJVatdZATx/I\nPdBSR8nTgMSEMOo5suX9BblgJ5HN3gy+jC9ZDV8PDePKOvCLu8i009yp1XWFjCel\nLMo4c0qm4tceEDlyPbAxO3uUSYiO+gkRhT7qhYwQq/N0D2tGY958dAAE\n-----END CERTIFICATE-----\n",
                            "cert_request_pem": "f0867928e9c0600fece1642b992feefd9cce884b",
                            "early_renewal_hours": "0",
                            "id": "114198985537823679680270800865151906780",
                            "validity_end_time": "2019-04-09T06:19:16.39849108Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-09T06:19:16.39849108Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_locally_signed_cert.client": {
                    "type": "tls_locally_signed_cert",
                    "depends_on": [
                        "tls_cert_request.client",
                        "tls_private_key.etcd-ca.*",
                        "tls_self_signed_cert.etcd-ca.*"
                    ],
                    "primary": {
                        "id": "98797460467373013126060890595343958575",
                        "attributes": {
                            "allowed_uses.#": "4",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "server_auth",
                            "allowed_uses.3": "client_auth",
                            "ca_cert_pem": "4cbd4dcd556cef04a28e5d42883b53f7ecff745a",
                            "ca_key_algorithm": "RSA",
                            "ca_private_key_pem": "d8039540c5608cfe6f58bba3c67f37182bad9e2e",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDWDCCAkCgAwIBAgIQSlOy4ZC1JRaNYWuo//uCLzANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwOTA2MTkx\nNVoXDTE5MDQwOTA2MTkxNVowJTENMAsGA1UEChMEZXRjZDEUMBIGA1UEAxMLZXRj\nZC1jbGllbnQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCzYiC9ApMV\ns4/zC1gkJbHPU+k+dVR4+I4eNwXG76VRKZvzZspcywMudMZLNUKAl01SFZyXQnAn\nXQuOSwr6rFlP++o6hf+yxTEY4EsEj77oNKc4Q8yuaBlDbHg/WryuteTHkJE5JjHG\nZJixBwp+VnpvMHWFj57gUpfbdIhfUR6Odk11vLYEe7103dESAM68VH45qSSKJDsO\nXKHzrzkTfE2GyU9RClMIFSW8cOXiIzaYaZUzMzSSd/luLqk3JdDZ5E+qBCa8eZv/\nA9s1jK1Fq7o0nXRE0b8temeoAvYVOJ9T6FfDpKf9QqVIbbvhhRfPYvVJ2SGW1yAJ\n9diNPr2D9JPBAgMBAAGjgYcwgYQwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQG\nCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFNtk\nlZstQDct4TGpzO7laAlwpwQSMCQGA1UdEQQdMBuCCG4yLnN0ZXZlgglsb2NhbGhv\nc3SHBH8AAAEwDQYJKoZIhvcNAQELBQADggEBAA0dcpX++8hNdD1oiavq3+s4QtF3\nodWjnFM2rM2PJer4BVw0TMsH+k0xdUENIHqphMMWZCOMAbRQirjKW44wHm/lR0Ve\n/CiyMwvbTeVCqP4HrmDmdAL5rPz78B1Yd3yD3JjAvvlhcqgT3Ei3kTZ21krGUTp5\nMVAczf5CxZMHwx4FPKIeg4xuvV2knI6n1nR7kgTtIYxa/1jtw4BA4M1/eA4klIkJ\nlMSwncX1hcUFbAkx/nAEM0UOFmrCEOd35D1MAI5i4tjFnQYToukTjznoBJ+Yqau3\n4aXF3mkn4YuFKLcLC+H8ZEPXsGzROcmDm0TmuzLSHIrwZq+YzsoobiiCVoE=\n-----END CERTIFICATE-----\n",
                            "cert_request_pem": "80fa39c7081d860bebc0082423fc407995cca90c",
                            "early_renewal_hours": "0",
                            "id": "98797460467373013126060890595343958575",
                            "validity_end_time": "2019-04-09T06:19:15.962552624Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-09T06:19:15.962552624Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_locally_signed_cert.kubelet": {
                    "type": "tls_locally_signed_cert",
                    "depends_on": [
                        "tls_cert_request.kubelet",
                        "tls_private_key.kube-ca.*",
                        "tls_self_signed_cert.kube-ca.*"
                    ],
                    "primary": {
                        "id": "205607166387078578682143180819393327845",
                        "attributes": {
                            "allowed_uses.#": "4",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "server_auth",
                            "allowed_uses.3": "client_auth",
                            "ca_cert_pem": "684c8a30c394af3e22ba99d79cc1335098d30a03",
                            "ca_key_algorithm": "RSA",
                            "ca_private_key_pem": "83e9356edc271926d0bb936cfce8bdcd0ce4f0a0",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDOzCCAiOgAwIBAgIRAJquf/ZWK/DWUwmQdDI+suUwDQYJKoZIhvcNAQELBQAw\nJTERMA8GA1UEChMIYm9vdGt1YmUxEDAOBgNVBAMTB2t1YmUtY2EwHhcNMTgwNDA5\nMDYxOTE2WhcNMTkwNDA5MDYxOTE2WjArMRcwFQYDVQQKEw5zeXN0ZW06bWFzdGVy\nczEQMA4GA1UEAxMHa3ViZWxldDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC\nggEBAN+2w2CeSuRigEFxvwyrwzXGYbxCmkJ7mE7fQUPeOdmhWmAg+8jkX4QIZQu8\niTKoLSAeWURIMwwy32zfajxRxo9LbjAy51ZIVAXIB7jr0tzRWbr1iLBkLld1SVZK\n50S9k1HuAqDNHiPFDWT8BVJWPhNOR/3oAmzLZVqrUEdreQXyqvv498GECDpjsXEA\nhskbQPYAvBVneHsNTz/fz9qMsZLlVpAbayQgcuVu6OYJjWmvjC0CidyabQE9iTAL\nRa6gmzwN7h/dKgGSnW7/9PKQrboKXduN1Q86uQsZnPMz99afHOB8Q/oOhKsHf9ub\niwzspjvpbWxnBswnbxF2T+D7VqcCAwEAAaNgMF4wDgYDVR0PAQH/BAQDAgWgMB0G\nA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB8GA1Ud\nIwQYMBaAFC9Zd5gIpGXpD/1oGEvCykFK8uxZMA0GCSqGSIb3DQEBCwUAA4IBAQBs\n9dDEarJIRXXdiYjFbEeLKU5Xss2sAZNNbvdnF+RrKbYYfNE5E43utXWC6AS34l6Z\nPQoi89qfmeSG5XdqDDJz9aCjMqcTvpiHo/FjIPfbvsqsO3bb/LiVRWFptELjqiTt\nYke2q46cd/s0YZtm94DT9vJhCYSmeG6TvBRE3lhWRqQXel4iNDM8yDTEzuGvzFU+\n1iD3mXmg6zhVWQzmaVjFVFjHG58HJovN4+xWkSpxQLPL2GFLjLk+FHsO+5sMM0ap\n/nJiWr4sx7yq6L+kINmX42kAIAiJIpcNrzYP4uEetvYD0h4JwfSZd2JNZGW8IwJw\n5rClWotOQLI2HEhLNbuT\n-----END CERTIFICATE-----\n",
                            "cert_request_pem": "37d41e11077a5834fdf544dddbc3284a377595fc",
                            "early_renewal_hours": "0",
                            "id": "205607166387078578682143180819393327845",
                            "validity_end_time": "2019-04-09T06:19:16.409287025Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-09T06:19:16.409287025Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_locally_signed_cert.peer": {
                    "type": "tls_locally_signed_cert",
                    "depends_on": [
                        "tls_cert_request.peer",
                        "tls_private_key.etcd-ca.*",
                        "tls_self_signed_cert.etcd-ca.*"
                    ],
                    "primary": {
                        "id": "149605759324170443895290009863166186387",
                        "attributes": {
                            "allowed_uses.#": "4",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "server_auth",
                            "allowed_uses.3": "client_auth",
                            "ca_cert_pem": "4cbd4dcd556cef04a28e5d42883b53f7ecff745a",
                            "ca_key_algorithm": "RSA",
                            "ca_private_key_pem": "d8039540c5608cfe6f58bba3c67f37182bad9e2e",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDQzCCAiugAwIBAgIQcI0Fa6C8I6+4gEVF2t1TkzANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwOTA2MTkx\nNVoXDTE5MDQwOTA2MTkxNVowIzENMAsGA1UEChMEZXRjZDESMBAGA1UEAxMJZXRj\nZC1wZWVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAo+1WbcU3Vxz2\ntYnie8iHGvnlk/dQth6n3gxZLCN1S+d0TaR/kWNE7K2P3MFmVDDNIV666yRRBnoG\nYAcVVOB3JPZrundbsxj3QVSaW8jo244C20LgqdSiwrPw+l4VDVw7+YclFPIrFZtJ\nYa/6ZvjAOa1gEgYMNml4Dg2Nu68DfjAwxH6gMCTvL8YDMgPI8r8FoL76Bk95CBrk\nROXCIov5mZEVQQgAMaZ1MZXRd4kETjCYuIr0F6lrOOrgVe3uE4GYAlOiEoqx5Wma\nOWEdzex1Avgc28AnkMOVhNwR++GJaBYb+wSV2bIUPyVJDrs7vyGNrcugVD1pxYlI\njrxXykQb6wIDAQABo3UwczAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYB\nBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAU22SVmy1A\nNy3hManM7uVoCXCnBBIwEwYDVR0RBAwwCoIIbjIuc3RldmUwDQYJKoZIhvcNAQEL\nBQADggEBADCWBMWOE6sY67w1/JOUtSOEN0lUFIFRSjHi6Fu/iJSHQ+wv3CPLOfFA\noW4bGBYXPSwP2lDwmfDCcE5bERg/4ufIln/ku2dyaXI77Nm2cTURtmrcGDxA1Stg\nM7mIOQ34ktiVUkpGJi4gwGjegntSJx/0IsOGB3ogjSNKqIKgwp83pDHfUlUDLXgW\n0cNT4kz7FzezZ1meZiQYKGAxhiU7Y/6eG6+NN9vCS6PbL4HBoakO8F9AlSRoCatI\no5aGmsTX0GfU8Tr0R9rdw0IgSxIydEyZDKYDUvffmLUq7BHZ2ylFqRfvkn3zfU4k\nH5NIGizqCwvLKqtH8LkTJKBZWQVGhlY=\n-----END CERTIFICATE-----\n",
                            "cert_request_pem": "af5735ffd32dbd030c9a493430725e380c322e79",
                            "early_renewal_hours": "0",
                            "id": "149605759324170443895290009863166186387",
                            "validity_end_time": "2019-04-09T06:19:15.909918097Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-09T06:19:15.909918097Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_locally_signed_cert.server": {
                    "type": "tls_locally_signed_cert",
                    "depends_on": [
                        "tls_cert_request.server",
                        "tls_private_key.etcd-ca.*",
                        "tls_self_signed_cert.etcd-ca.*"
                    ],
                    "primary": {
                        "id": "55321680478458793679790894025977966116",
                        "attributes": {
                            "allowed_uses.#": "4",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "server_auth",
                            "allowed_uses.3": "client_auth",
                            "ca_cert_pem": "4cbd4dcd556cef04a28e5d42883b53f7ecff745a",
                            "ca_key_algorithm": "RSA",
                            "ca_private_key_pem": "d8039540c5608cfe6f58bba3c67f37182bad9e2e",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDWDCCAkCgAwIBAgIQKZ6Rbwyiawh1Tg9r80EuJDANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwOTA2MTkx\nNVoXDTE5MDQwOTA2MTkxNVowJTENMAsGA1UEChMEZXRjZDEUMBIGA1UEAxMLZXRj\nZC1zZXJ2ZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDIeScMPZe9\nerpuflfnCT+WGTZdeZBnRzkElBdcsJaIA8UUvR0EPGRi6oDQIn+cAzTYSDwlROKk\nutzeVUXmYhDPcCGo4ad37CMpKH1kuESvMC3PY3gpx21XRZKlFs59LCDADjRYf+XM\n2EJcKFtuFPd5j3CS09Zr4PU7chlgjGx0YQj1fpf+1f1ltGT7JQk5RqkAi90ZzLUu\nTUGF8T9rvt52TZwLt/4cJfx20F/Pn7NOq1g2MAIgVWDn8vr5rHP7PSyIRT30bNzS\n4lx2Bp0Nqz/cpaBp2CCXrybDDoFL7uWuSgOwCMwZCByaUowp6A1f0UNWVffS1E4m\n3buBLEYe6UB5AgMBAAGjgYcwgYQwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQG\nCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFNtk\nlZstQDct4TGpzO7laAlwpwQSMCQGA1UdEQQdMBuCCG4yLnN0ZXZlgglsb2NhbGhv\nc3SHBH8AAAEwDQYJKoZIhvcNAQELBQADggEBABTJ5NiJnJ3HDok4dLanbM0nyIEw\npN+TWLeBVDlq3qJQSUgBu90N15qapujzRohgWIiddKc4mVZWUw4HndR5682GQLdL\noaV8WlPNWaEJHPttCXNOg+rvTLDaVtpWMITLRUtlVhwhlMQJHZfmtO3OQxBf/ctI\naIpx4mgamzU+nXmapZ7uO7hj5fvYokG0j5sOE771VHcDMWdqrIsWEmYrBe9CgTSP\nM7LKdq3v3Hk7od+odamYAcKQeD7DKaqRFaFAvoDXmlgZinuY2dhA+Y95pK9bTAht\npnhjI5W8pRRL5u1IcEi+YvEIM8r2kFMqW5rgQRbu0x0m6F6n0c7dUx79DiI=\n-----END CERTIFICATE-----\n",
                            "cert_request_pem": "06d41a7bc320d3ab7faccb7326513bba88a04e61",
                            "early_renewal_hours": "0",
                            "id": "55321680478458793679790894025977966116",
                            "validity_end_time": "2019-04-09T06:19:15.994990553Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-09T06:19:15.994990553Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.apiserver": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "f07261fbc935415f65e90aa88d613fc0ace323a9",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "f07261fbc935415f65e90aa88d613fc0ace323a9",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEAoCPpRZ8c5VxIWSfHy/LnWVsHs/gAclhcsXWtlO4XDdOJAHmk\n472HW+JTTJliwqD+h/pvLeNB/OIZKEtcDzWRPX+xxyZ/nTzGF4yBuCipxLjO8Hcs\nvMXA2DkyZaGvMV+OvRzcrtzrt5iUYkoyY11Cy4oUCU+ngVI6q4OlRcPKWU/0IStZ\nl9ZLoH3o2GJJX/miG4vEp53trafrjaIYhc/dbcU3AUazf2vHTLVc/yo6X3/PYWHj\n+WSzJYHZNTQJi/rx0fGpYqL/zoHRVBm0Oi9CXofQ5d2JYLjzgBEez++NwYT+A5w6\nJAhJ2JdTJCkilelK/CPu5IfR+I9p42b3LxTW/wIDAQABAoIBAAQcx/nMuz48n3MC\nrYPUShKmXs1FWiWVlVPNVNbVQmxNeWA0v4JFtLssVb1K1xlubvro+H/yLRikacb6\nIHQXiRJOPC+EEpTkIaYrKo2jJbDymgXc2Z5Dac9jsKKhg1E+RfkfS5+F9tuxJGZd\nx2t70qJNenQ+wmt0xCLxb4YaIBEpDRDB8PFBknTVXNH1Uoab6dH31oTl0/Y0YRgI\nDIs190N+TIJIFLgzFi07VRhOgoQR7VE1B5letWmSJjRYVcXgkbHLKNyMP583OsOR\n4Mwigx5sbm02I+jubJd3pQL56pNxE/IYdCn8fbRKc/F6F7EQv1pBOnl+ZdaJujvE\nHIyr4QECgYEA0lTpLCCsNIIUurVLJwChkWKTp1FodkhyqgKgykh1nPaPmSYANjJ+\nS0wAdGf6de0wFV+2qOaZi7etrHSoO7nn2YzUYZ+JlthNNqa6DPJIpgDgGDfAypMB\n2NhFJpPyVNq16tcb8Z8dbIdI/1RUoxSy525drGBY6GHNsDt3sBdLWX8CgYEAwuko\nhEo2wlULr4iGjohYwrVe3cuVnvBWEPUn2pjYRz2gZaPRXXeMOrMNsNJD328MvVUf\nxqYkBNuQ+gZIP97Mu7t6RYZkEeJ0MGIiTCpYMqjdl0U5BOpC0CNs+wesrCVg44mI\nAFo6KRnqDT5oeYxm2SJMAU2/Xah3rsf6Lnv2QoECgYBTphFVy2ixOUqlNpS83jNj\nbqDqWiYBZK61jnYD/O1Jj4VskwBijZJMv90ubmvdmocU+QvcAFnwhww7GeoOVtEu\nZCPS72/43e1XXtd/bpwV6SM2fnXeGrkRVHGr9graVGElFIe4gF9jWipd4VwHv6On\nBu2aMHcrdDopbH0dOyZsYQKBgFBta6WjBhOMimTlXjjEdHPr6Xh2QIg0Ph+DOe3O\n8jf7awtl3MfHw9qY9gZHzXAOX+BkltceyXAjtiAlpXyNkEfLJbo4qWRj4HPympp5\nQqms2rtH+i5YCDfg1mCDmzHxvphFsRQMJ0G8isLqRKwbTnk82MYU8elQ0goSRN8X\nkdeBAoGAZRIKeB84R3G+H9zy4X1Rqb/lq16QJQkAmePSP12P4+rso+0T+EPTpGol\nadz3RiBMucmbIo1ne8fCdH9NtF497VEqwWwqIxiAB00vKHEF5PWowGlIvXxP1CNh\nDvgIRBgOFNwUGLGy3Pfhc3OhkDDkjto//yQ51dkbZGIThZ00r1w=\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCgI+lFnxzlXEhZJ8fL8udZWwez+AByWFyxda2U7hcN04kAeaTjvYdb4lNMmWLCoP6H+m8t40H84hkoS1wPNZE9f7HHJn+dPMYXjIG4KKnEuM7wdyy8xcDYOTJloa8xX469HNyu3Ou3mJRiSjJjXULLihQJT6eBUjqrg6VFw8pZT/QhK1mX1kugfejYYklf+aIbi8Snne2tp+uNohiFz91txTcBRrN/a8dMtVz/Kjpff89hYeP5ZLMlgdk1NAmL+vHR8aliov/OgdFUGbQ6L0Jeh9Dl3YlguPOAER7P743BhP4DnDokCEnYl1MkKSKV6Ur8I+7kh9H4j2njZvcvFNb/\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoCPpRZ8c5VxIWSfHy/Ln\nWVsHs/gAclhcsXWtlO4XDdOJAHmk472HW+JTTJliwqD+h/pvLeNB/OIZKEtcDzWR\nPX+xxyZ/nTzGF4yBuCipxLjO8HcsvMXA2DkyZaGvMV+OvRzcrtzrt5iUYkoyY11C\ny4oUCU+ngVI6q4OlRcPKWU/0IStZl9ZLoH3o2GJJX/miG4vEp53trafrjaIYhc/d\nbcU3AUazf2vHTLVc/yo6X3/PYWHj+WSzJYHZNTQJi/rx0fGpYqL/zoHRVBm0Oi9C\nXofQ5d2JYLjzgBEez++NwYT+A5w6JAhJ2JdTJCkilelK/CPu5IfR+I9p42b3LxTW\n/wIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.client": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "32504cef8e8c447b3e0f7b244e21a4e94b29774a",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "32504cef8e8c447b3e0f7b244e21a4e94b29774a",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAs2IgvQKTFbOP8wtYJCWxz1PpPnVUePiOHjcFxu+lUSmb82bK\nXMsDLnTGSzVCgJdNUhWcl0JwJ10LjksK+qxZT/vqOoX/ssUxGOBLBI++6DSnOEPM\nrmgZQ2x4P1q8rrXkx5CROSYxxmSYsQcKflZ6bzB1hY+e4FKX23SIX1EejnZNdby2\nBHu9dN3REgDOvFR+OakkiiQ7Dlyh8685E3xNhslPUQpTCBUlvHDl4iM2mGmVMzM0\nknf5bi6pNyXQ2eRPqgQmvHmb/wPbNYytRau6NJ10RNG/LXpnqAL2FTifU+hXw6Sn\n/UKlSG274YUXz2L1SdkhltcgCfXYjT69g/STwQIDAQABAoIBAAjJQ6U+XQnxE5np\n8lVC62SmTYRbptmOAxgDxeqqjkRdb2AKptrIrs01twi0AR/fSVA98r+N54RmEEzV\n7CG/E1jRk/Vt3spY0kDPq5z7lXQ2MAKXf40DWElvJKyluxwrmJsVv6c28bUv9DKn\nj6IEhlav3vG9ySBfq0R6frt8c6yylaB0aGYMVoBDBiavOAKr+UQdyLVKTCkfWJUf\n/63P+E9OZJlITNpDr0fFtPyPWaW/66ujfW8R1T4LvbPerTzdjhU6XdGiA6/CiaXI\ngv7fGn/XSmcE5jgvpJdzeNDX9gQtoEklWi5GB3QBDgWRO1giUD+PTmrpe9Z7dAhD\nNUGjneECgYEAw7V1wEBWAxX66BEnyZZttGQx8gCJmflT3pdCe/5fU6lVD3N/Gouv\nO5C1o3mL/lPDg/Qrc7nnm3AasQ584CoetNH6CPWqF9ZHaezSiC+gg7h+w70ZG+ep\nt5cbu+lo9CAnB1EftiXDNU8HaRWvxDbAxmeIe67ZR5wacG77U6df2oUCgYEA6qUo\nvwVTJGQwE3Q3tWfvubeOGZHRYc5qFSXUMOVKbJq59ZBF/Hfjo2U7mP8iIQ1+4FB7\noBp/HbkYS8TIHTlbx5n1I1v1Nn/3L7QPGNqKtGpulJe6Ik8TxqDEwOy/AxOQeELb\ncr+3IA+wfVViF/5DaKI7Hf5UZRy6MHmPDj18/w0CgYEAvaTPL7aoImFgOxS0q2E7\neTxGMa1XqX6zSNTmNeTuVtGVfV174ytMaLn3aSvU/mQI54rpuECDMFpXYw8Y7teh\n3bJDSf9UDbk0hm5YLGOKdVmIbQCGnkXEbgTdeR/a9gVaDHsN8aFyIews0CWVptsv\nvpKA7Okn335jGGRS4mMkPUkCgYBGXVLTvcAKCLVWECLolouQENhfGJhGkUTEpLx2\nETx5Rwj+983VAQrVo/T0U4YjjU1/7QK1p1x5SFld11v/T4UTXTri6J+nQUaaGo/w\nbxDrO4N/seRSh44xoWJ/TD+Xp5VKSxpN1eoPhkTxwNoSwd/rD8NUokEitTOsd7eL\nmKrUPQKBgE/u95gvDdtu7GzZOn/FBDbnm6C9q2v0/YDvu7PkKxqzc8iGRJIq+QAM\nTFD0fPYQLI1TurDSEQDpj4XJHt73EwUfJ3OyyoqOeV4BQKGgAhykE8kt5xXttcE8\nlV5p12yrRXvO/eOSVYhnLqfv+WuVLd+ASCCZG+uuXi7PAvHhNJ+G\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCzYiC9ApMVs4/zC1gkJbHPU+k+dVR4+I4eNwXG76VRKZvzZspcywMudMZLNUKAl01SFZyXQnAnXQuOSwr6rFlP++o6hf+yxTEY4EsEj77oNKc4Q8yuaBlDbHg/WryuteTHkJE5JjHGZJixBwp+VnpvMHWFj57gUpfbdIhfUR6Odk11vLYEe7103dESAM68VH45qSSKJDsOXKHzrzkTfE2GyU9RClMIFSW8cOXiIzaYaZUzMzSSd/luLqk3JdDZ5E+qBCa8eZv/A9s1jK1Fq7o0nXRE0b8temeoAvYVOJ9T6FfDpKf9QqVIbbvhhRfPYvVJ2SGW1yAJ9diNPr2D9JPB\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAs2IgvQKTFbOP8wtYJCWx\nz1PpPnVUePiOHjcFxu+lUSmb82bKXMsDLnTGSzVCgJdNUhWcl0JwJ10LjksK+qxZ\nT/vqOoX/ssUxGOBLBI++6DSnOEPMrmgZQ2x4P1q8rrXkx5CROSYxxmSYsQcKflZ6\nbzB1hY+e4FKX23SIX1EejnZNdby2BHu9dN3REgDOvFR+OakkiiQ7Dlyh8685E3xN\nhslPUQpTCBUlvHDl4iM2mGmVMzM0knf5bi6pNyXQ2eRPqgQmvHmb/wPbNYytRau6\nNJ10RNG/LXpnqAL2FTifU+hXw6Sn/UKlSG274YUXz2L1SdkhltcgCfXYjT69g/ST\nwQIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.etcd-ca": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "298e7d07a3c55132493f1116b50c02a8aa0d843c",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "298e7d07a3c55132493f1116b50c02a8aa0d843c",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAwrsDb7pcDJBnOxeXZYg1q5SII40tx6SZtel+1C8bUdU9KBHO\njMBmp81H9uOanoHm9zW0Lh2yI07Kz4QT89TrJyAIowHKhzEY6yv5POQTThbuhljz\nZrcV8HzRdKUDkrfgdVIiRBryT6mvO2dRi57TZah1B0qoO0cKTxTTBui2udimpTfB\nGyJHHMMcqYfBM5hU0HJyCMNmBDtgS3H1HvHh+Oc2GeUvNuKjpVo77OiTs/H40k+u\nnBPS5JuCNB47ZmTiA0xy79jnoiItEicMbyiAGYT2WnbBZdGLWnBHTUbnmu5ANDSI\nS0EaSUSqq0Wwf5y9FOPZr5rIC2XP4ZnnvigbwQIDAQABAoIBAAOM+2wPHtyPyYIX\nVQhh6nCdfboAOgR46OCbSFfAICRm2f2gDX8dhwGqSZSj487eGYMKdKWenv/r0ODl\nzKNWj48gE2g9gR7j80teeuX0VrHG00SZ3J5T2k+PRxZ0Z9NGDQ62l69cOmzfcDWK\nFb+Q/tPMtY2Te+vQyMxWWd63YZWT6Jl5VGFenK9BdxiakTt3eN4S5APEfKs7KKVd\nuJs9Gn+p+1wN6C7qdilb05uJiOWNTjSaMTB79EMMghRLpn4tFEnAyYEETBNW1UaV\nKpoxJEB6paZA/4gjoC+s3TTEpLwEWLIYPrhebtle3pdb0rf5H/9BdGbRSkHUw2RX\nF/O94QECgYEA4MRplM87sXUwy0/OQChuWk+diKFpJr/OfaDkMrEU3gMv1duV/29V\nlUvM7OjfZC46G5001CBYIy0Q7HXaEksgYt3UsOjrsh5kVuAOn0RgADMl22Ix7VTA\neMwj4+jZxKWhBNfuDf/p+XyywOvaVK8wg0aG3QKnMG2v+34/UoY0kHECgYEA3coc\n0z4xH6T3/+4KhD/tR++jaBWf/cZIfkvJiM+czc97LGSZQgbS4ItBRAMmA1+K7bj7\nnv9zi/DJ9+aZQOw6wc552Fk7Ybkadv2D7aA730/K1V4aB3OTrjvPhRrDyldmW50y\nzv8LB/2wIIpqsww5rMOOHkAw2ElNBn6rtj6g6FECgYAPpHu4mIeN/RrtO1ueSXIM\npPfQt3MK+FRVl+npwTszjEM6/fI9ebEaF9FmN3q8jR8MJu+zR6D6qbtAyZ7ooQPa\n/Zc8zKkCl2ziQuuhl++ac/TRhM72tmxCu+pPhTgKoIBJRwHRRZsx+sSx+ngSZrLY\noALoxLOAAlI6DXo4sxBbcQKBgQDdsP0HGg84Nkm+hE32y39+fEa174ewvtYPh+m2\n2u89ubrBMP0QRona8NcYCJ2imYng/RpmX6k7pD/9j354qqhAuQaJ/wegMsoFTnrk\nt1mhabyxchJKiHiBnD9eKNa0FpC12nfC+KQqJKY8oJ7uwbWUvxP7oOYyC3L2nv88\nd3WXQQKBgQCzId2jev4itvO8xYI/EfPyZVw8MQzNqhMXRgnAOZlhrT/8huJR5zuu\nxCSO+LOGoywntGd3NpzEo0o3BvJaAaNAYMl9ZOiQ6u8DAyXMC1FGaD4GYakHGoYY\nGXk6ealBpw+PlClqnEp3CfJvEZit2ko+6VkebC2P82UE1dBkmNdu1w==\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDCuwNvulwMkGc7F5dliDWrlIgjjS3HpJm16X7ULxtR1T0oEc6MwGanzUf245qegeb3NbQuHbIjTsrPhBPz1OsnIAijAcqHMRjrK/k85BNOFu6GWPNmtxXwfNF0pQOSt+B1UiJEGvJPqa87Z1GLntNlqHUHSqg7RwpPFNMG6La52KalN8EbIkccwxyph8EzmFTQcnIIw2YEO2BLcfUe8eH45zYZ5S824qOlWjvs6JOz8fjST66cE9Lkm4I0HjtmZOIDTHLv2OeiIi0SJwxvKIAZhPZadsFl0YtacEdNRuea7kA0NIhLQRpJRKqrRbB/nL0U49mvmsgLZc/hmee+KBvB\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwrsDb7pcDJBnOxeXZYg1\nq5SII40tx6SZtel+1C8bUdU9KBHOjMBmp81H9uOanoHm9zW0Lh2yI07Kz4QT89Tr\nJyAIowHKhzEY6yv5POQTThbuhljzZrcV8HzRdKUDkrfgdVIiRBryT6mvO2dRi57T\nZah1B0qoO0cKTxTTBui2udimpTfBGyJHHMMcqYfBM5hU0HJyCMNmBDtgS3H1HvHh\n+Oc2GeUvNuKjpVo77OiTs/H40k+unBPS5JuCNB47ZmTiA0xy79jnoiItEicMbyiA\nGYT2WnbBZdGLWnBHTUbnmu5ANDSIS0EaSUSqq0Wwf5y9FOPZr5rIC2XP4Znnvigb\nwQIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.kube-ca": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "987cfe9d978c41dc486220d69fc70fb8fbe390a8",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "987cfe9d978c41dc486220d69fc70fb8fbe390a8",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAzTDV6HvQ6ThVJuPJ1lqg1EuABO5Rqe41mgpu/gpaxsuY5tHB\niEJL5ZY1jhcSpqicE2iEQxYrP2sipDk20EWp2qs2FZQBbvKus2RCsj8WjA6olZWi\nGXDFLF1T34X1zVTZzo9Oop8DjypDc+GLdAhl03unGIY29bZVU7iav2wLpJIaLr58\nF7tsh9lJgUSKLMkz8c7stB3NeW9mIqK4dFcS7QPM0ajd5b6ldU/w7f2MSe1s1Msf\nAfFYPHbEQgFKUpSgBEHX4Bpu5y95pFGL3ND2YuOZR6gAuo1yGg6fQNhOk5GrToUA\nCsFoQ5xdP80jwInvOfgV6a2s+HhJseaN+HTkPwIDAQABAoIBADh46VZrxUp6s4zZ\ngnJZTQxAn0I8KQOgyOXVW0jVprgxzqowLpiGzoaoeaLanMp7e0EoMcaY8lwo60bR\nbFGT6rSBDIiRzHcxmX1L6cNO87CmVCWfIhboX4vfP7c0Ejtpz+w2qsi9BOjBFAFv\noMbVjNjQnmN0hOnJPeCl3Qkz/lxTTx9idFQs2az6uW0WCrBvGzK7NIbTR2Kvc5Cw\nwERViZ8Nk6Upn969ySPQheB68q/3S+C7PVJX5JHOVOBzU8n++N1ANv7WsEIrZYwb\n1oWht2+cBgucKFnU0aMqyc574CCvLAZsO04N2gsksDzP7eFcaFd+nvQ6XO3NzJoI\nzyFTARECgYEA1UXCSIaoncsZb1ntGlTLFoOiCizT+XL7QUozLHK+bEe5l96dMtsa\n7RnlpRtjZrYLsGbK0uG+CkARrF4M6ox7Lw+kNELWgkVMI1L7UtlwblccIWlICu7T\nDIyAbryApRjJrAOO5XjpF8ZTrn1qCHJbTImWBf6H/TvvwyiyPY/dhLcCgYEA9kyV\ncqVWrkteo2Kpbu25n+GH29CR4iI0Eq0kd15LOoAdj05Yev4u0/CaZpratWWkHK/B\nga6cQ3Hbo15d4b/Jb9+qbG5VWh6bdBLIVw2e/nt8ct0b2SeGvdV60P5vf2dKOPqn\nR4sdgQ7dpcD6ysi8LDw2p0ofYe2EckVI5+c75LkCgYAi2lGTtJ3dm5E+hz2eLfk6\nZqyWaRkDDO1OkCeovd+splQII5Mg+nl+AdtrjfxCjsF+RG4k5EtANZQtzPjjY63F\n1RKKj9mqVFTK+QalVW9wOMAaHbBuSPUoedWLQzbqxBBBEhvKGGZPQlPukgQ/+SA+\nc8WWmS/0DFV0WTQ3p0kWJQKBgQCpRoVIIB5s99v5SuvME5KKMcTf7H72/i7vzxPK\n/oGRmU+3mE7zaRLiEvDrJ+680Thzhs/lww4exHgB1e+MIfXd78j/cO00XOjWY7pR\nKkll+ZTUlOZ43tOaUMhyLwyOcXzvoEWrxA7pDkCDlRhImqHJfTDK1QSwlz96EehD\nigb98QKBgDpUDmLPZRVM8Pf+8e/hvLDQZpQ2dlGyXhAx3+kdsYEyR9SL3Lk+S9gC\n95ADC8SO1p+zAklaWOi8e/nG6pCTlpFtz41T9fku4RuLUn8SguSHaAM5tgNtCsDL\nnmzXL3IMU1cNcKfvwv3sK+gSOlj8aSUe6or2smPyeFonMjrOVQVQ\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDNMNXoe9DpOFUm48nWWqDUS4AE7lGp7jWaCm7+ClrGy5jm0cGIQkvlljWOFxKmqJwTaIRDFis/ayKkOTbQRanaqzYVlAFu8q6zZEKyPxaMDqiVlaIZcMUsXVPfhfXNVNnOj06inwOPKkNz4Yt0CGXTe6cYhjb1tlVTuJq/bAukkhouvnwXu2yH2UmBRIosyTPxzuy0Hc15b2Yiorh0VxLtA8zRqN3lvqV1T/Dt/YxJ7WzUyx8B8Vg8dsRCAUpSlKAEQdfgGm7nL3mkUYvc0PZi45lHqAC6jXIaDp9A2E6TkatOhQAKwWhDnF0/zSPAie85+BXpraz4eEmx5o34dOQ/\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzTDV6HvQ6ThVJuPJ1lqg\n1EuABO5Rqe41mgpu/gpaxsuY5tHBiEJL5ZY1jhcSpqicE2iEQxYrP2sipDk20EWp\n2qs2FZQBbvKus2RCsj8WjA6olZWiGXDFLF1T34X1zVTZzo9Oop8DjypDc+GLdAhl\n03unGIY29bZVU7iav2wLpJIaLr58F7tsh9lJgUSKLMkz8c7stB3NeW9mIqK4dFcS\n7QPM0ajd5b6ldU/w7f2MSe1s1MsfAfFYPHbEQgFKUpSgBEHX4Bpu5y95pFGL3ND2\nYuOZR6gAuo1yGg6fQNhOk5GrToUACsFoQ5xdP80jwInvOfgV6a2s+HhJseaN+HTk\nPwIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.kubelet": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "67b2a9f3b4c4615ed2b2477c3ee106fb0de8850c",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "67b2a9f3b4c4615ed2b2477c3ee106fb0de8850c",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEA37bDYJ5K5GKAQXG/DKvDNcZhvEKaQnuYTt9BQ9452aFaYCD7\nyORfhAhlC7yJMqgtIB5ZREgzDDLfbN9qPFHGj0tuMDLnVkhUBcgHuOvS3NFZuvWI\nsGQuV3VJVkrnRL2TUe4CoM0eI8UNZPwFUlY+E05H/egCbMtlWqtQR2t5BfKq+/j3\nwYQIOmOxcQCGyRtA9gC8FWd4ew1PP9/P2oyxkuVWkBtrJCBy5W7o5gmNaa+MLQKJ\n3JptAT2JMAtFrqCbPA3uH90qAZKdbv/08pCtugpd243VDzq5Cxmc8zP31p8c4HxD\n+g6Eqwd/25uLDOymO+ltbGcGzCdvEXZP4PtWpwIDAQABAoIBAQClbJLKhiJhAQlP\n21lneDdQM1KgECvbT2NPpzyuf8wNRof6n0kvwtdyXXbCl/Zns/4ySt69ZBoDQjb+\nXbJDykBmQ2PGVk3D+pXO9JvpPNBeopuUaO1baaju2PaSza53oSsnoTTmTOalkpeV\n/dm9ibI7Ol53vTDV3A0lX5psRWdnYijqp/RJh5dUnUAOaKEzHpQsiP1iF7FxIIGr\npAZYs4j9/qN0Vwf32NVIrcdeOnaG0ENHrke17UJ9aJcjHrbpaDhjs+Bm5VpAY4lr\n8O6+isR0bZbQdYBX1nvoat46OPhRPW9KlDXxMsdL4VsvBWxS0lBfNc7eQipMQXIm\njUEFqjIhAoGBAO6stXW/89qeFwrPW7HdbDmeeMawry04pwqM8qb3wTkCQqQA86h/\n7tGgXtHDVtATThR6X0KvP57R53u/phsTYm8CK98KyM2bgz1LFmYmZLqHuunUbQXk\nYs6kQhLUpo7iY6wgma/fRlx0SyD36ggeWV/sxc5GNhyuGFadgqRG5poXAoGBAO/0\nCgiRMpu1mZlWQJX+4xpdLAqynd91VaZ+sZUnetK5vyWu19KJkLoCwV5sljhba+O/\nlR5c2yIkm1S1RpiKu+pfpvebkLJZEOSFCUwc4GNBWCsR0uGjiS4KZyd0rcdlLOpv\nI02vd6RzpruY10/ZEQPrgiXobT/aDVmhMJt61VHxAoGAGpP8+QnRG+0y369LpLjl\njl0JUgbm2wBOCay8cL9yMuj/hsfcWk00yP80z+MSzcT4kus1pHVjfkodnvguhSFZ\neschH4tR5SOGL9MmwWVRHjxzIgrXwSo3no9IFFS933dyZf6TXrRcX3tLynYRB6pp\nhXcWZ+wFppf0eeC8ZZLHpy0CgYBLCgdlPHsWJMl/IXEbN1WwNfkC827Zpej+I1rH\nqUwIwFvdnfsSdUDUWu476DtmLnjkBVLN5v4EhGwrJnGIXMJ9fiJKBtVOYPoebNhG\nfDVT9Ohst6s6MxlAU7KErUF3PNW6Dr18muYQgLZgrmCPMPPYRPszfadEs50/LWB1\nDwnNEQKBgQCD8UlQi7dueU/yi9tvZyXQG3zHCDTphL/IO2oGPPPOi9rcF9HA+K/u\n+IEe9rX+K5Lk1ffx3jF1GXIzUBsy3pIrfKXc66C6IqQbd6YM143hhYyveqCmzJeH\naLgNABdV1+bjE165nkVWEzeHVVfwgr9gZng82fQ0QIr+M8fnxQ4txg==\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDftsNgnkrkYoBBcb8Mq8M1xmG8QppCe5hO30FD3jnZoVpgIPvI5F+ECGULvIkyqC0gHllESDMMMt9s32o8UcaPS24wMudWSFQFyAe469Lc0Vm69YiwZC5XdUlWSudEvZNR7gKgzR4jxQ1k/AVSVj4TTkf96AJsy2Vaq1BHa3kF8qr7+PfBhAg6Y7FxAIbJG0D2ALwVZ3h7DU8/38/ajLGS5VaQG2skIHLlbujmCY1pr4wtAoncmm0BPYkwC0WuoJs8De4f3SoBkp1u//TykK26Cl3bjdUPOrkLGZzzM/fWnxzgfEP6DoSrB3/bm4sM7KY76W1sZwbMJ28Rdk/g+1an\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA37bDYJ5K5GKAQXG/DKvD\nNcZhvEKaQnuYTt9BQ9452aFaYCD7yORfhAhlC7yJMqgtIB5ZREgzDDLfbN9qPFHG\nj0tuMDLnVkhUBcgHuOvS3NFZuvWIsGQuV3VJVkrnRL2TUe4CoM0eI8UNZPwFUlY+\nE05H/egCbMtlWqtQR2t5BfKq+/j3wYQIOmOxcQCGyRtA9gC8FWd4ew1PP9/P2oyx\nkuVWkBtrJCBy5W7o5gmNaa+MLQKJ3JptAT2JMAtFrqCbPA3uH90qAZKdbv/08pCt\nugpd243VDzq5Cxmc8zP31p8c4HxD+g6Eqwd/25uLDOymO+ltbGcGzCdvEXZP4PtW\npwIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.peer": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "60527533b488e0bd75342d0dd1db887a17281f79",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "60527533b488e0bd75342d0dd1db887a17281f79",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEAo+1WbcU3Vxz2tYnie8iHGvnlk/dQth6n3gxZLCN1S+d0TaR/\nkWNE7K2P3MFmVDDNIV666yRRBnoGYAcVVOB3JPZrundbsxj3QVSaW8jo244C20Lg\nqdSiwrPw+l4VDVw7+YclFPIrFZtJYa/6ZvjAOa1gEgYMNml4Dg2Nu68DfjAwxH6g\nMCTvL8YDMgPI8r8FoL76Bk95CBrkROXCIov5mZEVQQgAMaZ1MZXRd4kETjCYuIr0\nF6lrOOrgVe3uE4GYAlOiEoqx5WmaOWEdzex1Avgc28AnkMOVhNwR++GJaBYb+wSV\n2bIUPyVJDrs7vyGNrcugVD1pxYlIjrxXykQb6wIDAQABAoIBAAio0vX9gwzhBM9W\nN1aeozRzmwMT/3l/aRK7yEIipWGbGnO3it2dRtjR2lWpCcTMxylKHcmqI3WaIJgW\nB7RyHxkew1YYVAnD+dvDolvS4yol+FSo1cFi8C4k30f6jFYmVyy5TOYsXMZJa7jz\nWODzpwPk+rw5AZAmRidH5ALUHfUedOkQ/sBsb3ijcgwvEOBJKCzxrVfEpZP6pIec\npGW1Suo6nWDL4rPYNGXJLRJWzIUf96AgzKS9oOqlzg/IVlzp71QfkwwOQPl3OrNk\nanqa7O8FRIYS1feJ4Dgsck3hfU9uIOwJCl4Hl6OQqtqw/vMQwVG5vxbEuTpGttJ/\nFjaA8kECgYEAwpkyo/60P2GQV/3KJ/z+nKwVWW9nSFzWczDQANBpJuG/dONinGnl\nrPDPalR+OqsU8Pa8p7DTl4kzYGSUQa1hlBmjEZDTxj6AV2Lep+rWliv1GeJFAIDX\n1HkhQ9PyxXWYFO+cp8FMHeDgv6qWeirnSrbcnTKRRGESJabZzr4nsPECgYEA16al\nLVYHizJphyVah7fuOOIv5DeEj0XyB1E5sSy+ECDbRLd4d8P9GqEVdhwZzx1g0B/V\nVxV5kWkehxJyzeC0evULuhdurGAOXph15jWBRhJy/8UG6C5AEfBSEBdiVBLGLCc2\nW07TR1O+qfmGZBtsEpGMmq6gdoLJlBnhAQR7mpsCgYAjIfV6limEp+CfgjpVLd/p\n+UeBdhN3hQtSkKV9ACN72ZXvTH4pLxVAO9m2oLqJbQnC10kIHWyWFzcnWAFMOjk7\nu8UtDrCtQet522fHeSZ0xkrh+W/rv1c4DQZscH+MFsb2QKxPvR445ris4ed49vX7\nDziVSOPhLIVSNuVr5fjUgQKBgHJGy9cndJ3t3AAS6lNrQ6D/M5PDW8q0rRn1kBX0\neM+BKdDTTNJimHiJDh9lqsOXdNs1U09vgNlulA/N1eqFff5+ZnV5v1s3F8ZHEoso\npVWlpy0kkpFtGOSorkP6sE+PF1cEfIiMT+fHWA0ovm/EHFQGrzS0/zFuAzYpNJPe\ndUWrAoGAf0C73k8nH/MqGPnbrponHPHFnRFJ+WGdVYD+Tc46/reVtxpdFysJeU6b\nsA0cdbI5iucwqifiH87gerrvrINIPau+EnqS2q2lL6gzTaTlU8qUPCJsfZ3d5P+T\nsoxvlaIcGycP4dcbz3L6XS0zKha5AcvCladXQa2lKvISS9O62LI=\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCj7VZtxTdXHPa1ieJ7yIca+eWT91C2HqfeDFksI3VL53RNpH+RY0TsrY/cwWZUMM0hXrrrJFEGegZgBxVU4Hck9mu6d1uzGPdBVJpbyOjbjgLbQuCp1KLCs/D6XhUNXDv5hyUU8isVm0lhr/pm+MA5rWASBgw2aXgODY27rwN+MDDEfqAwJO8vxgMyA8jyvwWgvvoGT3kIGuRE5cIii/mZkRVBCAAxpnUxldF3iQROMJi4ivQXqWs46uBV7e4TgZgCU6ISirHlaZo5YR3N7HUC+BzbwCeQw5WE3BH74YloFhv7BJXZshQ/JUkOuzu/IY2ty6BUPWnFiUiOvFfKRBvr\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAo+1WbcU3Vxz2tYnie8iH\nGvnlk/dQth6n3gxZLCN1S+d0TaR/kWNE7K2P3MFmVDDNIV666yRRBnoGYAcVVOB3\nJPZrundbsxj3QVSaW8jo244C20LgqdSiwrPw+l4VDVw7+YclFPIrFZtJYa/6ZvjA\nOa1gEgYMNml4Dg2Nu68DfjAwxH6gMCTvL8YDMgPI8r8FoL76Bk95CBrkROXCIov5\nmZEVQQgAMaZ1MZXRd4kETjCYuIr0F6lrOOrgVe3uE4GYAlOiEoqx5WmaOWEdzex1\nAvgc28AnkMOVhNwR++GJaBYb+wSV2bIUPyVJDrs7vyGNrcugVD1pxYlIjrxXykQb\n6wIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.server": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "de87556fde8d943f132c9b6478e28a86392e3f26",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "de87556fde8d943f132c9b6478e28a86392e3f26",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAyHknDD2XvXq6bn5X5wk/lhk2XXmQZ0c5BJQXXLCWiAPFFL0d\nBDxkYuqA0CJ/nAM02Eg8JUTipLrc3lVF5mIQz3AhqOGnd+wjKSh9ZLhErzAtz2N4\nKcdtV0WSpRbOfSwgwA40WH/lzNhCXChbbhT3eY9wktPWa+D1O3IZYIxsdGEI9X6X\n/tX9ZbRk+yUJOUapAIvdGcy1Lk1BhfE/a77edk2cC7f+HCX8dtBfz5+zTqtYNjAC\nIFVg5/L6+axz+z0siEU99Gzc0uJcdgadDas/3KWgadggl68mww6BS+7lrkoDsAjM\nGQgcmlKMKegNX9FDVlX30tROJt27gSxGHulAeQIDAQABAoIBAHr5prRhjBWVlYt2\nQWHeUH041hqdGbHhBN8EIRig0pZ5CYphP817ZnEvPPlwUCtZ5C7QkOSjzwwR/K7+\nTDS472rwdBVu5xYvapoy1kjUqH125oMTl4C5bx9b9EsFJIGwch6eGAo52rO/7WUu\n9HcgsXaGQR4wiJYAly5yHZMWUOlKDw8LYf+wa/Ghk5mhPX3N+Y9RY8wSeCKTNjAA\nL6H99ktO8whMNLujs8UImb9x+ygK7biyZr8az0j2GbqJ4IwKeV1ZWuV4nd62jmwi\nVsLfLTPArbDlYSWw3RKOsBpNUCIPG4dWjEg7L4gyJQ8q+tfDQRfSg0UNHa12Z1fq\nYXlxkQECgYEA4ncSo59ljFlQrDdFlJ+Bc9Dj8IEKSr5nAdEFGD9TjM7AAyrr1mdD\nYWJUY0SBuAPlHQOcu6X52CkvOlQQBriGY845JBeoZao0oLj52QDYzuucy2XQDTpd\ngDY09cGahBbOtSUImtsFBIMTWoButIX8777tGignJp4YZSXtvjosYhECgYEA4p5L\n2qCN2cLHw/O9r5+4p4gZZ6B5vqBGETn7hv7kR9pIvvMqzNalC5UWP7YNA4tu0KP1\n1x7Kcl66kNICmSk5METclSa6BsINQamcQMnVLcsIL6VFb5bsISxNVW7Pv8AqDkaf\nU8BAJoY3Bb2ysh+Rw68gQLcDymhBkZ0QZLF1D+kCgYEAvGfpxtymhCQOPKhjJ+mn\nri3cZMtGP7a2RcmaXnjYzq13C2ua9y3D3fILWOa2sNv0sbW+oFLOUCq7UuB60MyV\nadU4rrFL9QCsdgZOPl45AbT9Ji6W71peTXtLhiXCoh/DaurbhNGwE/fkkweEkoVi\nUCbcZUWAhN1EWGo8p2UIZbECgYA0EY74Mr+k8x4XJd/FhHtW8uxzZOnUJNs0hhAG\n2nX1FHB2f0SsP/04Bg9QoDGpSNYzVhjcTpTRZnaTY815B4G+V3QfSQChIOEO3zup\nnzY+CVJeMCkeFJ04mgdCw+0z76E6GnvtMFUNBPWLeiSezKYfQhO1CtfyH7ZBEMd9\ne1CcUQKBgQC2oIbkjYp2pZOkMMi5g5xlCOkw9/PFJ8oi0XvnXcRCkg+bdcOEDnsb\nHT5cHK4/GdYC+ThU5wWnV65ltxwiAcDP4xAiXkBmws+paBSQi06zkM5oMySwNCrC\n6aSU+Y+eqUqJND+pKRukyZa/ZGKJKmSKr/DXzv5AwGySAu3k4xMssg==\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDIeScMPZe9erpuflfnCT+WGTZdeZBnRzkElBdcsJaIA8UUvR0EPGRi6oDQIn+cAzTYSDwlROKkutzeVUXmYhDPcCGo4ad37CMpKH1kuESvMC3PY3gpx21XRZKlFs59LCDADjRYf+XM2EJcKFtuFPd5j3CS09Zr4PU7chlgjGx0YQj1fpf+1f1ltGT7JQk5RqkAi90ZzLUuTUGF8T9rvt52TZwLt/4cJfx20F/Pn7NOq1g2MAIgVWDn8vr5rHP7PSyIRT30bNzS4lx2Bp0Nqz/cpaBp2CCXrybDDoFL7uWuSgOwCMwZCByaUowp6A1f0UNWVffS1E4m3buBLEYe6UB5\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyHknDD2XvXq6bn5X5wk/\nlhk2XXmQZ0c5BJQXXLCWiAPFFL0dBDxkYuqA0CJ/nAM02Eg8JUTipLrc3lVF5mIQ\nz3AhqOGnd+wjKSh9ZLhErzAtz2N4KcdtV0WSpRbOfSwgwA40WH/lzNhCXChbbhT3\neY9wktPWa+D1O3IZYIxsdGEI9X6X/tX9ZbRk+yUJOUapAIvdGcy1Lk1BhfE/a77e\ndk2cC7f+HCX8dtBfz5+zTqtYNjACIFVg5/L6+axz+z0siEU99Gzc0uJcdgadDas/\n3KWgadggl68mww6BS+7lrkoDsAjMGQgcmlKMKegNX9FDVlX30tROJt27gSxGHulA\neQIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.service-account": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "dae6949545ed9ecdfc33542fb6d16a4cf00f980b",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "dae6949545ed9ecdfc33542fb6d16a4cf00f980b",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpQIBAAKCAQEAv3P0s8PcNfGTZhQt2N/N+Fr8zJIXN2JwdXUa1O17JDkEAmnV\nqA4i73/C9ndtQAXwr6DFi/v7aJC3QGkatct/ZCjvJuFiquIJWKxrIE6zd8WNJBx/\nvkF+1c/+laf6zNfyKBdYNM6tHpXchoCIBE/8F6emJezy0wvdOK50TX550/Eiv91/\nnMhz918RJaq27d6u1AzcbzgsCPmBab66C7JWoaQDeiUyMOCzMuIa6zf975V/77cC\nnCweGIUu1iSc9Zl+54RJoSBQJh0j2aJGdzzBqYY3MRswqkf2QWt8+FltAT1PiadY\nd17c6inVZ4RMWDPJ4w9DQG699QbtOmI3SDY6DQIDAQABAoIBABbDQqTc9KG1R0Er\nxQe0FFki+EuaUwhSu+w7MCWA1tNHtCJVUwHYLG8tUZDcQjEKg8Nd6h7qpsmX6zHN\nTU+wEkVmWIjW41RN666PUW1V7iCfbFiOyuFkCCCDylEg18DjK/d4TxR4Pj0UtFOJ\nlKJuoBpv5GE9+uD82CCVHV7ZWsLIBCPT1mWqE9r2iSoydDfWBB9o+O3A3KF/3HK7\nE4s08mHQAdVU0aJjlQdzCtyPAXjgeX2CwGMgbAyL/v+g82NOvzWFqx/cmADnDsGT\nClZN57d0ye7W/RcMwgk5W+0he2HjOJyoOfXewh450VM+BkyZrY/dKf7li6wnf2IE\nZKpe3gECgYEA4AWt6FIwQBuk6q0pi37V935k5WhzxhAQoCSEXwwJ4TjrIJoABboP\nLGGF5W1CqBrWbV1kfh+S061YtuwfyKhlR7DWvgIiNW54kPw/ErA3eu2OXJEiOC41\nR2jEfvP6iBYZ2MOeB64uzwxEQbNEIrbOshrtDsCO4pOnfTX4u0VbYuUCgYEA2sgd\n6HUocsXVWW+2UGsEpMIJ/aOevBqq6yxGPVrYX6J3lW1Ux9MqHuYfJ9Z40RqYnv2u\nlBBI5ANaWQsjOAnZMUp+Ns6TIq9DViEjuxez3OYi6cACCmv6ur14CeTqcSk2kZYs\nUV/EjjqMOm/vbAqHc/xZE4MLI93aEI8QbVVEwAkCgYEAwPljc0rJMZAeoeEEdpuN\nqSKBu3QctrLD/481T8LJB+/F61F9T3GU/IANnTJfRvvHVnIqzNJZ4mnij8AbKPiW\nNglJEmg4G5rL1OjVVD3jrMrR5T9IIOj9EERZb5qvZ2bSYP0xNiB/Re+lJItN2DFt\nH9M9/YU2EEts7dj+KCN4s1kCgYEAsKHmO5nzCQ6d3DIr4Cs2uYoLJOLnsfhZy7qY\nDsr8a+GwaEy3qQjcNcwWlUQ7kJ7HX31yaAnpv2TRmZg7W+/fkUMSOU94TQVw+OWS\ngmd1iD+pKk0hmKZq7D8x3dMaUDg03T+AEkaeWzH7quZaR0EM8OBoTi97W/6uIrZO\nTecMtXkCgYEAiejF+KxbxumDw//ZqZJ9TGVHjo+jsx01aTdwsZLMLw/sxNx1NNEM\nm1VazuDa5Up+pmNQ2gXVwAAt6elGcrDlLt043Cc7bIjDxAc65/N2F8/YQSzAd84I\n5DkfvhnRvpuz/QMicOciF8TEbxgA8uSfooHeaaakhI5Ld9ZfJ97Gr3g=\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC/c/Szw9w18ZNmFC3Y3834WvzMkhc3YnB1dRrU7XskOQQCadWoDiLvf8L2d21ABfCvoMWL+/tokLdAaRq1y39kKO8m4WKq4glYrGsgTrN3xY0kHH++QX7Vz/6Vp/rM1/IoF1g0zq0eldyGgIgET/wXp6Yl7PLTC904rnRNfnnT8SK/3X+cyHP3XxElqrbt3q7UDNxvOCwI+YFpvroLslahpAN6JTIw4LMy4hrrN/3vlX/vtwKcLB4YhS7WJJz1mX7nhEmhIFAmHSPZokZ3PMGphjcxGzCqR/ZBa3z4WW0BPU+Jp1h3XtzqKdVnhExYM8njD0NAbr31Bu06YjdINjoN\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAv3P0s8PcNfGTZhQt2N/N\n+Fr8zJIXN2JwdXUa1O17JDkEAmnVqA4i73/C9ndtQAXwr6DFi/v7aJC3QGkatct/\nZCjvJuFiquIJWKxrIE6zd8WNJBx/vkF+1c/+laf6zNfyKBdYNM6tHpXchoCIBE/8\nF6emJezy0wvdOK50TX550/Eiv91/nMhz918RJaq27d6u1AzcbzgsCPmBab66C7JW\noaQDeiUyMOCzMuIa6zf975V/77cCnCweGIUu1iSc9Zl+54RJoSBQJh0j2aJGdzzB\nqYY3MRswqkf2QWt8+FltAT1PiadYd17c6inVZ4RMWDPJ4w9DQG699QbtOmI3SDY6\nDQIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_self_signed_cert.etcd-ca": {
                    "type": "tls_self_signed_cert",
                    "depends_on": [
                        "tls_private_key.etcd-ca"
                    ],
                    "primary": {
                        "id": "177518140446799979130696988400102255327",
                        "attributes": {
                            "allowed_uses.#": "3",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "cert_signing",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDDzCCAfegAwIBAgIRAIWMwA90ymeWVjbWW95Rqt8wDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDkwNjE5\nMTVaFw0xOTA0MDkwNjE5MTVaMCExDTALBgNVBAoTBGV0Y2QxEDAOBgNVBAMTB2V0\nY2QtY2EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDCuwNvulwMkGc7\nF5dliDWrlIgjjS3HpJm16X7ULxtR1T0oEc6MwGanzUf245qegeb3NbQuHbIjTsrP\nhBPz1OsnIAijAcqHMRjrK/k85BNOFu6GWPNmtxXwfNF0pQOSt+B1UiJEGvJPqa87\nZ1GLntNlqHUHSqg7RwpPFNMG6La52KalN8EbIkccwxyph8EzmFTQcnIIw2YEO2BL\ncfUe8eH45zYZ5S824qOlWjvs6JOz8fjST66cE9Lkm4I0HjtmZOIDTHLv2OeiIi0S\nJwxvKIAZhPZadsFl0YtacEdNRuea7kA0NIhLQRpJRKqrRbB/nL0U49mvmsgLZc/h\nmee+KBvBAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/\nMB0GA1UdDgQWBBTbZJWbLUA3LeExqczu5WgJcKcEEjANBgkqhkiG9w0BAQsFAAOC\nAQEAf9kb1jzl5BWv2i0GHFz828RqbsNVqiHMVhZKpGmj79+uDypTIvbLSRzvQnQw\nOdNIoEnJ31KJhZXS5yBHlYzpcy9Hnj9NVD6vwfOGkwagwYAvIMa6hLB9ndWA9pEx\nEUK6TNf1d1FiUBZoLND5oe+uyqbWyKIkYPWBpW9/nYgNNrGtA9bJyYy4+LN9REi3\na5FubMS+jyHvtNxZe8FGcbV/GWX9/Z8yH2XzfSPOL/c415FNPs70w/8JI/LUiffH\nYvAZ9V/0k56015ttuE67KGVDpDgG9i4KnfE2G4EuwHukmd+0IQA2C4abveG/kAw0\nacYPwpLCKUx7JnHhrP+bjW7uYw==\n-----END CERTIFICATE-----\n",
                            "early_renewal_hours": "0",
                            "id": "177518140446799979130696988400102255327",
                            "is_ca_certificate": "true",
                            "key_algorithm": "RSA",
                            "private_key_pem": "d8039540c5608cfe6f58bba3c67f37182bad9e2e",
                            "subject.#": "1",
                            "subject.0.common_name": "etcd-ca",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "etcd",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0",
                            "validity_end_time": "2019-04-09T06:19:15.708217921Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-09T06:19:15.708217921Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_self_signed_cert.kube-ca": {
                    "type": "tls_self_signed_cert",
                    "depends_on": [
                        "tls_private_key.kube-ca"
                    ],
                    "primary": {
                        "id": "162674139978306853426723410125056364330",
                        "attributes": {
                            "allowed_uses.#": "3",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "cert_signing",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDFjCCAf6gAwIBAgIQemHmVRwA1MVHHoBN5G/PKjANBgkqhkiG9w0BAQsFADAl\nMREwDwYDVQQKEwhib290a3ViZTEQMA4GA1UEAxMHa3ViZS1jYTAeFw0xODA0MDkw\nNjE5MTZaFw0xOTA0MDkwNjE5MTZaMCUxETAPBgNVBAoTCGJvb3RrdWJlMRAwDgYD\nVQQDEwdrdWJlLWNhMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzTDV\n6HvQ6ThVJuPJ1lqg1EuABO5Rqe41mgpu/gpaxsuY5tHBiEJL5ZY1jhcSpqicE2iE\nQxYrP2sipDk20EWp2qs2FZQBbvKus2RCsj8WjA6olZWiGXDFLF1T34X1zVTZzo9O\nop8DjypDc+GLdAhl03unGIY29bZVU7iav2wLpJIaLr58F7tsh9lJgUSKLMkz8c7s\ntB3NeW9mIqK4dFcS7QPM0ajd5b6ldU/w7f2MSe1s1MsfAfFYPHbEQgFKUpSgBEHX\n4Bpu5y95pFGL3ND2YuOZR6gAuo1yGg6fQNhOk5GrToUACsFoQ5xdP80jwInvOfgV\n6a2s+HhJseaN+HTkPwIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAqQwDwYDVR0TAQH/\nBAUwAwEB/zAdBgNVHQ4EFgQUL1l3mAikZekP/WgYS8LKQUry7FkwDQYJKoZIhvcN\nAQELBQADggEBABbY3OzM/VbFbs+pjhV8J7DU+SeMEaCo4zcSDqCGnb/R+zCbyOdX\ncJSLPGSivaXUPQ8MHsDzsjtbQ30v0GduLICmGCSR2nvAx9vP4Xg3lNdxFQOTM3aW\nl/KXz2O5aty/O+CX6yIWlYmbimmv66TCTyEcGzV+UF/jXD3DG253bhQGR1N6pwiK\neDxZH28avln3t02pWXd+xqFHF7OVZhTF7FBquDBRAejoCrHLYr777WKMCd+9Khjk\n3veDARxfUPigYSI+zoo9cIUyMloN1I/PkD+lUrKq1Fi1kcT9bdNEeEQlVZ+Fdwwk\n/eRfwwdbjLvNsuSR8QAbT536gPnTIkJnrFA=\n-----END CERTIFICATE-----\n",
                            "early_renewal_hours": "0",
                            "id": "162674139978306853426723410125056364330",
                            "is_ca_certificate": "true",
                            "key_algorithm": "RSA",
                            "private_key_pem": "83e9356edc271926d0bb936cfce8bdcd0ce4f0a0",
                            "subject.#": "1",
                            "subject.0.common_name": "kube-ca",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "bootkube",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0",
                            "validity_end_time": "2019-04-09T06:19:16.343566737Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-09T06:19:16.343566737Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                }
            },
            "depends_on": []
        }
    ]
}
