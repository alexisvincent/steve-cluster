{
    "version": 3,
    "terraform_version": "0.11.5",
    "serial": 1,
    "lineage": "dbe1d6ac-cfe4-4c2d-ace6-c57e5c45a269",
    "modules": [
        {
            "path": [
                "root"
            ],
            "outputs": {},
            "resources": {
                "data.template_file.cl_gateway": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "32cb99d1495210bcc96a37210445d6c23072b7e651b7ab1ee20b473e5ef182dd",
                        "attributes": {
                            "id": "32cb99d1495210bcc96a37210445d6c23072b7e651b7ab1ee20b473e5ef182dd",
                            "rendered": "# storage:\n#   disks:\n#   - device: /dev/sda\n#     wipe_table: true\n#     partitions:\n#     - label: ROOT\n#   filesystems:\n#   - mount:\n#       device: /dev/disk/by-partlabel/ROOT\n#       format: ext4\n#       create:\n#         force: true\n#         options: [-L, ROOT]\n\npasswd:\n  users:\n    - name: core\n      password_hash: \"$6$rounds=4096$LP6daiKkb6c$MGeaex639HmrfnglLpYsxPPruEovlzmkqgvbrouiDmv9XH/zEo7rM9ja/y9ur89OveohZ8VUf8NbdgjGRyEOi1\"\n      ssh_authorized_keys: \"\"\n\nstorage:\n  files:\n    - path: /etc/dnsmasq.conf\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          address=/gateway.steve/10.10.0.1\n\n          address=/steve/10.10.1.2\n\n          address=/n1.steve/10.10.1.1\n          address=/n2.steve/10.10.1.2\n          address=/n3.steve/10.10.1.3\n          address=/n4.steve/10.10.1.4\n          address=/n5.steve/10.10.1.5\n          address=/n6.steve/10.10.1.6\n          address=/n7.steve/10.10.1.7\n          address=/n8.steve/10.10.1.8\n          address=/n9.steve/10.10.1.9\n          address=/n10.steve/10.10.1.10\n          address=/n11.steve/10.10.1.11\n          address=/n12.steve/10.10.1.12\n          address=/n13.steve/10.10.1.13\n\n          address=/vm1.steve/10.10.10.1\n          address=/vm2.steve/10.10.10.2\n          address=/vm3.steve/10.10.10.3\n          address=/vm4.steve/10.10.10.4\n          address=/vm5.steve/10.10.10.5\n          address=/vm6.steve/10.10.10.6\n          address=/vm7.steve/10.10.10.7\n          address=/vm8.steve/10.10.10.8\n          address=/vm9.steve/10.10.10.9\n          address=/vm10.steve/10.10.10.10\n\n          dhcp-host=00:22:19:8E:26:AC,10.10.1.1\n          dhcp-host=00:1E:4F:28:30:12,10.10.1.2\n          dhcp-host=00:22:19:AB:7E:78,10.10.1.3\n          dhcp-host=00:22:19:8E:15:77,10.10.1.4\n          dhcp-host=00:1E:C9:D0:AA:9E,10.10.1.5\n          dhcp-host=00:22:19:8E:26:B6,10.10.1.6\n          dhcp-host=00:22:19:8E:25:A1,10.10.1.7\n          dhcp-host=00:1E:C9:D0:9E:E4,10.10.1.8\n          dhcp-host=00:1E:C9:D0:AA:BC,10.10.1.9\n          dhcp-host=00:1A:A0:15:E3:76,10.10.1.10\n          dhcp-host=00:1D:09:05:9A:C0,10.10.1.11\n          dhcp-host=00:1A:A0:26:DA:B6,10.10.1.12\n          dhcp-host=00:1D:09:05:98:DC,10.10.1.13\n\n          dhcp-host=00:0C:29:90:A9:F3,10.10.10.1\n          dhcp-host=00:50:56:30:35:90,10.10.10.2\n          dhcp-host=00:50:56:30:35:91,10.10.10.3\n\n\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: {{.hostname}}\n\n    - path: /etc/check-asset-status.sh\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          if [ ! -e /opt/cluster-config/assets.ready.processed ]\n          then\n            while [ ! -e /opt/cluster-config/assets.ready ]\n            do\n              sleep 1\n            done\n          else\n            touch /opt/cluster-config/assets.ready\n          fi\n\n    # - path: /root/.ssh/known_hosts\n    #   filesystem: root\n    #   mode: 0644\n    #   contents:\n    #     inline: \"\"\n\n    # - path: /root/.ssh/id_rsa\n    #   filesystem: root\n    #   mode: 0600\n    #   contents:\n    #     remote:\n    #       url: http://{|network.bootstrapper.address.internal|}:8080/assets/keys/bootstrapper\n\n    # - path: /root/.ssh/id_rsa.pub\n    #   filesystem: root\n    #   mode: 0600\n    #   contents:\n    #     remote:\n    #       url: http://{|network.bootstrapper.address.internal|}:8080/assets/keys/bootstrapper.pub\n\nnetworkd:\n  units:\n    - name: gateway.network\n      contents: |\n        [Match]\n        Name={{.interface_internal}}\n\n        [Network]\n        Address={{.address_internal}}/16\n        Address=10.10.0.1/16\n        DNS={{.address_internal}}\n        IPForward=ipv4\n        IPMasquerade=yes\n\nsystemd:\n  units:\n    - name: assets.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for assets to be pushed (assets.path)\n\n        [Service]\n        Type=oneshot\n        ExecStartPre=/usr/bin/bash /etc/check-asset-status.sh\n        ExecStart=/usr/bin/mv /opt/cluster-config/assets.ready /opt/cluster-config/assets.ready.processed\n        RemainAfterExit=true\n\n        [Install]\n        WantedBy=multi-user.target\n\n    - name: matchbox.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=CoreOS matchbox Server\n        After=docker.service assets.service\n        Requires=docker.service assets.service\n\n        [Service]\n        ExecStartPre=-/usr/bin/docker kill matchbox\n        ExecStartPre=-/usr/bin/docker rm matchbox\n        ExecStartPre=/usr/bin/docker pull quay.io/coreos/matchbox\n        ExecStart=/usr/bin/docker run --name=matchbox --net=host \\\n          -v /opt/cluster-config/matchbox:/var/lib/matchbox:Z \\\n          -v /opt/cluster-config/matchbox/etc/tls:/etc/matchbox:Z,ro \\\n          quay.io/coreos/matchbox \\\n            -address=10.10.0.1:8080 \\\n            -rpc-address=10.10.0.1:8081 \\\n            -log-level=debug \\\n            -assets-path=/var/lib/matchbox/assets\n        ExecStop=/usr/bin/docker stop matchbox\n        Restart=always\n\n        [Install]\n        WantedBy=multi-user.target\n\n    - name: dnsmasq.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Run dnsmasq, providing dhcp, dns and network book\n        After=docker.service assets.service\n        Requires=docker.service assets.service\n\n        [Service]\n        ExecStartPre=-/usr/bin/docker kill dnsmasq\n        ExecStartPre=-/usr/bin/docker rm dnsmasq\n        ExecStartPre=/usr/bin/docker pull quay.io/coreos/dnsmasq\n        ExecStart=/usr/bin/docker run \\\n          --name=dnsmasq --cap-add=NET_ADMIN --net=host \\\n          -v /etc/dnsmasq.conf:/etc/dnsmasq.conf quay.io/coreos/dnsmasq -d -q \\\n            --interface={{.interface_internal}} \\\n            --dhcp-option=3,10.10.0.1 \\\n            --dhcp-range={{.interface_internal}},10.10.100.50,10.10.100.100,12h \\\n            --enable-tftp --tftp-root=/var/lib/tftpboot \\\n            --dhcp-userclass=set:ipxe,iPXE \\\n            --dhcp-boot=tag:#ipxe,undionly.kpxe \\\n            --dhcp-boot=tag:ipxe,http://10.10.0.1:8080/boot.ipxe \\\n            --log-queries \\\n            --log-dhcp\n        ExecStop=/usr/bin/docker stop dnsmasq\n        Restart=always\n\n        [Install]\n        WantedBy=multi-user.target\n",
                            "template": "# storage:\n#   disks:\n#   - device: /dev/sda\n#     wipe_table: true\n#     partitions:\n#     - label: ROOT\n#   filesystems:\n#   - mount:\n#       device: /dev/disk/by-partlabel/ROOT\n#       format: ext4\n#       create:\n#         force: true\n#         options: [-L, ROOT]\n\npasswd:\n  users:\n    - name: core\n      password_hash: \"$6$rounds=4096$LP6daiKkb6c$MGeaex639HmrfnglLpYsxPPruEovlzmkqgvbrouiDmv9XH/zEo7rM9ja/y9ur89OveohZ8VUf8NbdgjGRyEOi1\"\n      ssh_authorized_keys: \"\"\n\nstorage:\n  files:\n    - path: /etc/dnsmasq.conf\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n${dnsmasq_conf}\n\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: {{.hostname}}\n\n    - path: /etc/check-asset-status.sh\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          if [ ! -e /opt/cluster-config/assets.ready.processed ]\n          then\n            while [ ! -e /opt/cluster-config/assets.ready ]\n            do\n              sleep 1\n            done\n          else\n            touch /opt/cluster-config/assets.ready\n          fi\n\n    # - path: /root/.ssh/known_hosts\n    #   filesystem: root\n    #   mode: 0644\n    #   contents:\n    #     inline: \"\"\n\n    # - path: /root/.ssh/id_rsa\n    #   filesystem: root\n    #   mode: 0600\n    #   contents:\n    #     remote:\n    #       url: http://{|network.bootstrapper.address.internal|}:8080/assets/keys/bootstrapper\n\n    # - path: /root/.ssh/id_rsa.pub\n    #   filesystem: root\n    #   mode: 0600\n    #   contents:\n    #     remote:\n    #       url: http://{|network.bootstrapper.address.internal|}:8080/assets/keys/bootstrapper.pub\n\nnetworkd:\n  units:\n    - name: gateway.network\n      contents: |\n        [Match]\n        Name={{.interface_internal}}\n\n        [Network]\n        Address={{.address_internal}}/${subnet_short}\n        Address=${gateway_address}/${subnet_short}\n        DNS={{.address_internal}}\n        IPForward=ipv4\n        IPMasquerade=yes\n\nsystemd:\n  units:\n    - name: assets.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for assets to be pushed (assets.path)\n\n        [Service]\n        Type=oneshot\n        ExecStartPre=/usr/bin/bash /etc/check-asset-status.sh\n        ExecStart=/usr/bin/mv /opt/cluster-config/assets.ready /opt/cluster-config/assets.ready.processed\n        RemainAfterExit=true\n\n        [Install]\n        WantedBy=multi-user.target\n\n    - name: matchbox.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=CoreOS matchbox Server\n        After=docker.service assets.service\n        Requires=docker.service assets.service\n\n        [Service]\n        ExecStartPre=-/usr/bin/docker kill matchbox\n        ExecStartPre=-/usr/bin/docker rm matchbox\n        ExecStartPre=/usr/bin/docker pull quay.io/coreos/matchbox\n        ExecStart=/usr/bin/docker run --name=matchbox --net=host \\\n          -v /opt/cluster-config/matchbox:/var/lib/matchbox:Z \\\n          -v /opt/cluster-config/matchbox/etc/tls:/etc/matchbox:Z,ro \\\n          quay.io/coreos/matchbox \\\n            -address=${gateway_address}:8080 \\\n            -rpc-address=${gateway_address}:8081 \\\n            -log-level=debug \\\n            -assets-path=/var/lib/matchbox/assets\n        ExecStop=/usr/bin/docker stop matchbox\n        Restart=always\n\n        [Install]\n        WantedBy=multi-user.target\n\n    - name: dnsmasq.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Run dnsmasq, providing dhcp, dns and network book\n        After=docker.service assets.service\n        Requires=docker.service assets.service\n\n        [Service]\n        ExecStartPre=-/usr/bin/docker kill dnsmasq\n        ExecStartPre=-/usr/bin/docker rm dnsmasq\n        ExecStartPre=/usr/bin/docker pull quay.io/coreos/dnsmasq\n        ExecStart=/usr/bin/docker run \\\n          --name=dnsmasq --cap-add=NET_ADMIN --net=host \\\n          -v /etc/dnsmasq.conf:/etc/dnsmasq.conf quay.io/coreos/dnsmasq -d -q \\\n            --interface={{.interface_internal}} \\\n            --dhcp-option=3,${gateway_address} \\\n            --dhcp-range={{.interface_internal}},${dhcp_start},${dhcp_end},12h \\\n            --enable-tftp --tftp-root=/var/lib/tftpboot \\\n            --dhcp-userclass=set:ipxe,iPXE \\\n            --dhcp-boot=tag:#ipxe,undionly.kpxe \\\n            --dhcp-boot=tag:ipxe,http://${gateway_address}:8080/boot.ipxe \\\n            --log-queries \\\n            --log-dhcp\n        ExecStop=/usr/bin/docker stop dnsmasq\n        Restart=always\n\n        [Install]\n        WantedBy=multi-user.target\n",
                            "vars.%": "7",
                            "vars.dhcp_end": "10.10.100.100",
                            "vars.dhcp_start": "10.10.100.50",
                            "vars.dnsmasq_conf": "          address=/gateway.steve/10.10.0.1\n\n          address=/steve/10.10.1.2\n\n          address=/n1.steve/10.10.1.1\n          address=/n2.steve/10.10.1.2\n          address=/n3.steve/10.10.1.3\n          address=/n4.steve/10.10.1.4\n          address=/n5.steve/10.10.1.5\n          address=/n6.steve/10.10.1.6\n          address=/n7.steve/10.10.1.7\n          address=/n8.steve/10.10.1.8\n          address=/n9.steve/10.10.1.9\n          address=/n10.steve/10.10.1.10\n          address=/n11.steve/10.10.1.11\n          address=/n12.steve/10.10.1.12\n          address=/n13.steve/10.10.1.13\n\n          address=/vm1.steve/10.10.10.1\n          address=/vm2.steve/10.10.10.2\n          address=/vm3.steve/10.10.10.3\n          address=/vm4.steve/10.10.10.4\n          address=/vm5.steve/10.10.10.5\n          address=/vm6.steve/10.10.10.6\n          address=/vm7.steve/10.10.10.7\n          address=/vm8.steve/10.10.10.8\n          address=/vm9.steve/10.10.10.9\n          address=/vm10.steve/10.10.10.10\n\n          dhcp-host=00:22:19:8E:26:AC,10.10.1.1\n          dhcp-host=00:1E:4F:28:30:12,10.10.1.2\n          dhcp-host=00:22:19:AB:7E:78,10.10.1.3\n          dhcp-host=00:22:19:8E:15:77,10.10.1.4\n          dhcp-host=00:1E:C9:D0:AA:9E,10.10.1.5\n          dhcp-host=00:22:19:8E:26:B6,10.10.1.6\n          dhcp-host=00:22:19:8E:25:A1,10.10.1.7\n          dhcp-host=00:1E:C9:D0:9E:E4,10.10.1.8\n          dhcp-host=00:1E:C9:D0:AA:BC,10.10.1.9\n          dhcp-host=00:1A:A0:15:E3:76,10.10.1.10\n          dhcp-host=00:1D:09:05:9A:C0,10.10.1.11\n          dhcp-host=00:1A:A0:26:DA:B6,10.10.1.12\n          dhcp-host=00:1D:09:05:98:DC,10.10.1.13\n\n          dhcp-host=00:0C:29:90:A9:F3,10.10.10.1\n          dhcp-host=00:50:56:30:35:90,10.10.10.2\n          dhcp-host=00:50:56:30:35:91,10.10.10.3\n",
                            "vars.gateway_address": "10.10.0.1",
                            "vars.network_domain": "steve",
                            "vars.subnet_long": "255.255.0.0",
                            "vars.subnet_short": "16"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "matchbox_group.install-reboot-n1": {
                    "type": "matchbox_group",
                    "depends_on": [],
                    "primary": {
                        "id": "install-reboot-n1",
                        "attributes": {
                            "id": "install-reboot-n1",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "install-reboot-n1",
                            "profile": "steve-cached-container-linux-install-n1",
                            "selector.%": "1",
                            "selector.mac": "00:22:19:8E:26:AC"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.install-reboot-vm1": {
                    "type": "matchbox_group",
                    "depends_on": [],
                    "primary": {
                        "id": "install-reboot-vm1",
                        "attributes": {
                            "id": "install-reboot-vm1",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "install-reboot-vm1",
                            "profile": "steve-cached-container-linux-install-vm2",
                            "selector.%": "1",
                            "selector.mac": "08:00:27:FE:45:EF"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.n1": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.gateway"
                    ],
                    "primary": {
                        "id": "n1",
                        "attributes": {
                            "id": "n1",
                            "metadata.%": "5",
                            "metadata.address_internal": "10.10.1.1",
                            "metadata.hostname": "n1",
                            "metadata.interface_external": "enp0s8",
                            "metadata.interface_internal": "enp0s3",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "n1",
                            "profile": "gateway",
                            "selector.%": "2",
                            "selector.mac": "00:22:19:8E:26:AC",
                            "selector.os": "installing"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.vm1": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.gateway"
                    ],
                    "primary": {
                        "id": "vm1",
                        "attributes": {
                            "id": "vm1",
                            "metadata.%": "5",
                            "metadata.address_internal": "10.10.10.1",
                            "metadata.hostname": "vm1",
                            "metadata.interface_external": "enp0s8",
                            "metadata.interface_internal": "enp0s3",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "vm1",
                            "profile": "gateway",
                            "selector.%": "2",
                            "selector.mac": "08:00:27:FE:45:EF",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.vm2": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.gateway"
                    ],
                    "primary": {
                        "id": "vm2",
                        "attributes": {
                            "id": "vm2",
                            "metadata.%": "5",
                            "metadata.address_internal": "10.10.10.1",
                            "metadata.hostname": "vm1",
                            "metadata.interface_external": "enp0s8",
                            "metadata.interface_internal": "enp0s3",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "vm2",
                            "profile": "gateway",
                            "selector.%": "2",
                            "selector.mac": "08:00:27:3A:40:26",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.gateway": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cl_gateway"
                    ],
                    "primary": {
                        "id": "gateway",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "coreos.config.url=http://http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.1": "coreos.first_boot=yes",
                            "args.2": "console=tty0",
                            "args.3": "console=ttyS0",
                            "args.4": "coreos.autologin",
                            "container_linux_config": "# storage:\n#   disks:\n#   - device: /dev/sda\n#     wipe_table: true\n#     partitions:\n#     - label: ROOT\n#   filesystems:\n#   - mount:\n#       device: /dev/disk/by-partlabel/ROOT\n#       format: ext4\n#       create:\n#         force: true\n#         options: [-L, ROOT]\n\npasswd:\n  users:\n    - name: core\n      password_hash: \"$6$rounds=4096$LP6daiKkb6c$MGeaex639HmrfnglLpYsxPPruEovlzmkqgvbrouiDmv9XH/zEo7rM9ja/y9ur89OveohZ8VUf8NbdgjGRyEOi1\"\n      ssh_authorized_keys: \"\"\n\nstorage:\n  files:\n    - path: /etc/dnsmasq.conf\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          address=/gateway.steve/10.10.0.1\n\n          address=/steve/10.10.1.2\n\n          address=/n1.steve/10.10.1.1\n          address=/n2.steve/10.10.1.2\n          address=/n3.steve/10.10.1.3\n          address=/n4.steve/10.10.1.4\n          address=/n5.steve/10.10.1.5\n          address=/n6.steve/10.10.1.6\n          address=/n7.steve/10.10.1.7\n          address=/n8.steve/10.10.1.8\n          address=/n9.steve/10.10.1.9\n          address=/n10.steve/10.10.1.10\n          address=/n11.steve/10.10.1.11\n          address=/n12.steve/10.10.1.12\n          address=/n13.steve/10.10.1.13\n\n          address=/vm1.steve/10.10.10.1\n          address=/vm2.steve/10.10.10.2\n          address=/vm3.steve/10.10.10.3\n          address=/vm4.steve/10.10.10.4\n          address=/vm5.steve/10.10.10.5\n          address=/vm6.steve/10.10.10.6\n          address=/vm7.steve/10.10.10.7\n          address=/vm8.steve/10.10.10.8\n          address=/vm9.steve/10.10.10.9\n          address=/vm10.steve/10.10.10.10\n\n          dhcp-host=00:22:19:8E:26:AC,10.10.1.1\n          dhcp-host=00:1E:4F:28:30:12,10.10.1.2\n          dhcp-host=00:22:19:AB:7E:78,10.10.1.3\n          dhcp-host=00:22:19:8E:15:77,10.10.1.4\n          dhcp-host=00:1E:C9:D0:AA:9E,10.10.1.5\n          dhcp-host=00:22:19:8E:26:B6,10.10.1.6\n          dhcp-host=00:22:19:8E:25:A1,10.10.1.7\n          dhcp-host=00:1E:C9:D0:9E:E4,10.10.1.8\n          dhcp-host=00:1E:C9:D0:AA:BC,10.10.1.9\n          dhcp-host=00:1A:A0:15:E3:76,10.10.1.10\n          dhcp-host=00:1D:09:05:9A:C0,10.10.1.11\n          dhcp-host=00:1A:A0:26:DA:B6,10.10.1.12\n          dhcp-host=00:1D:09:05:98:DC,10.10.1.13\n\n          dhcp-host=00:0C:29:90:A9:F3,10.10.10.1\n          dhcp-host=00:50:56:30:35:90,10.10.10.2\n          dhcp-host=00:50:56:30:35:91,10.10.10.3\n\n\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: {{.hostname}}\n\n    - path: /etc/check-asset-status.sh\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          if [ ! -e /opt/cluster-config/assets.ready.processed ]\n          then\n            while [ ! -e /opt/cluster-config/assets.ready ]\n            do\n              sleep 1\n            done\n          else\n            touch /opt/cluster-config/assets.ready\n          fi\n\n    # - path: /root/.ssh/known_hosts\n    #   filesystem: root\n    #   mode: 0644\n    #   contents:\n    #     inline: \"\"\n\n    # - path: /root/.ssh/id_rsa\n    #   filesystem: root\n    #   mode: 0600\n    #   contents:\n    #     remote:\n    #       url: http://{|network.bootstrapper.address.internal|}:8080/assets/keys/bootstrapper\n\n    # - path: /root/.ssh/id_rsa.pub\n    #   filesystem: root\n    #   mode: 0600\n    #   contents:\n    #     remote:\n    #       url: http://{|network.bootstrapper.address.internal|}:8080/assets/keys/bootstrapper.pub\n\nnetworkd:\n  units:\n    - name: gateway.network\n      contents: |\n        [Match]\n        Name={{.interface_internal}}\n\n        [Network]\n        Address={{.address_internal}}/16\n        Address=10.10.0.1/16\n        DNS={{.address_internal}}\n        IPForward=ipv4\n        IPMasquerade=yes\n\nsystemd:\n  units:\n    - name: assets.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for assets to be pushed (assets.path)\n\n        [Service]\n        Type=oneshot\n        ExecStartPre=/usr/bin/bash /etc/check-asset-status.sh\n        ExecStart=/usr/bin/mv /opt/cluster-config/assets.ready /opt/cluster-config/assets.ready.processed\n        RemainAfterExit=true\n\n        [Install]\n        WantedBy=multi-user.target\n\n    - name: matchbox.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=CoreOS matchbox Server\n        After=docker.service assets.service\n        Requires=docker.service assets.service\n\n        [Service]\n        ExecStartPre=-/usr/bin/docker kill matchbox\n        ExecStartPre=-/usr/bin/docker rm matchbox\n        ExecStartPre=/usr/bin/docker pull quay.io/coreos/matchbox\n        ExecStart=/usr/bin/docker run --name=matchbox --net=host \\\n          -v /opt/cluster-config/matchbox:/var/lib/matchbox:Z \\\n          -v /opt/cluster-config/matchbox/etc/tls:/etc/matchbox:Z,ro \\\n          quay.io/coreos/matchbox \\\n            -address=10.10.0.1:8080 \\\n            -rpc-address=10.10.0.1:8081 \\\n            -log-level=debug \\\n            -assets-path=/var/lib/matchbox/assets\n        ExecStop=/usr/bin/docker stop matchbox\n        Restart=always\n\n        [Install]\n        WantedBy=multi-user.target\n\n    - name: dnsmasq.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Run dnsmasq, providing dhcp, dns and network book\n        After=docker.service assets.service\n        Requires=docker.service assets.service\n\n        [Service]\n        ExecStartPre=-/usr/bin/docker kill dnsmasq\n        ExecStartPre=-/usr/bin/docker rm dnsmasq\n        ExecStartPre=/usr/bin/docker pull quay.io/coreos/dnsmasq\n        ExecStart=/usr/bin/docker run \\\n          --name=dnsmasq --cap-add=NET_ADMIN --net=host \\\n          -v /etc/dnsmasq.conf:/etc/dnsmasq.conf quay.io/coreos/dnsmasq -d -q \\\n            --interface={{.interface_internal}} \\\n            --dhcp-option=3,10.10.0.1 \\\n            --dhcp-range={{.interface_internal}},10.10.100.50,10.10.100.100,12h \\\n            --enable-tftp --tftp-root=/var/lib/tftpboot \\\n            --dhcp-userclass=set:ipxe,iPXE \\\n            --dhcp-boot=tag:#ipxe,undionly.kpxe \\\n            --dhcp-boot=tag:ipxe,http://10.10.0.1:8080/boot.ipxe \\\n            --log-queries \\\n            --log-dhcp\n        ExecStop=/usr/bin/docker stop dnsmasq\n        Restart=always\n\n        [Install]\n        WantedBy=multi-user.target\n",
                            "id": "gateway",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "gateway"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "kubernetes"
            ],
            "outputs": {
                "kubeconfig": {
                    "sensitive": false,
                    "type": "string",
                    "value": "apiVersion: v1\nkind: Config\nclusters:\n- name: local\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRZTMxdU9NTXFSV01Ma3NSWjRLZ2JCakFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURneApNakV6TURsYUZ3MHhPVEEwTURneE1qRXpNRGxhTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBrM1oKVlUwOU8rdlMvUkszNGxSdVlPcXZUOXdoNCtQZ3Ixb2pmVlVQaVZQVUx2VlVEbGp0a0NSTXBtenEyZXAvbGhGYQpCVXV6bGlIbnVGNGZKeng5ZDVxSEJnVEJZYnJEZjVwZGZWaHprMnlQeDViOWdwZm5RRjVDaUhJT0dnc1lyUkJ4Cm9DTEo2aUh3SUhtQi9BQ1ZOa0x3U0prcEN4ZVQrMXBKZS9ieDZPUHNacVdob25nUVBaNmFXdkRsQS8raE54QXMKeW95V0dFK0pmNkVuRHZlSk9ZVVczaHphVnEzSWdNV29XYjd1WFRXV001S2MyTXZYTlRtRE5QbVo5TUt3czZYWgpXOXNPNWxleUhhRTRhQ0RqR2MyZjVTSzhEaHY5LzMzTE1CV2FiSGM2QWhBdUQ0eFp6YjJwR3JHMFo5OFZaM1hPClhWZEJaaElDWWpqa2RUR3FHUUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVV1hlYWNOckhYT2oxcUh1aEJvMUx2RE04VEFvd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBSnhSUjB6V0NKTWVZc01wbWVreWlHVUxIM2lDNWYxRk90UFB1WnZTbkxsSitqZ2d0b2tLCitiVEV6RkNQWk44MWIwZFBRM09jT2RDdC9Oc3AvQTN6Q014cE1hNW0xbHo2czZyb0pka1lSMldMYkFmVjFPeUoKL0tQV1JRZllOeXBiNlAxNnFueGVLS0V0UENGbkVpT1BsbjFmNzAzMXgvQU85WDRtMEJJeTlHc1Vjd3JTaGJNWQpZYTFwZ3ROYVUxaFFrREJGUlBFVlRmcGJsWXllTW1tb0wzYmsxVldCTFFTUk90SEJDcFEzNmpqQ3JLZG5Ea2wzCndJcXpXVDY2YkhBMkVXSXh6MmduQXFQN3RLelY4SWdmVDBTRWR4d2M0dUVLVUsvT05rWjZOaUxWWGJXdnZ5M2cKeXNBTCtoQlZpVm1INjlIcEd2Q25Rb1JZVlB2TGVlMWRwczg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: kubelet\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lRU3hGY0JMK2cxekd2Vk9sU21JeENkekFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURneApNakV6TURsYUZ3MHhPVEEwTURneE1qRXpNRGxhTUNzeEZ6QVZCZ05WQkFvVERuTjVjM1JsYlRwdFlYTjBaWEp6Ck1SQXdEZ1lEVlFRREV3ZHJkV0psYkdWME1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0MKQVFFQTdOQVBqRDFYWHJJM1MvRmI2eG03MkRXb2ZXNktlUTNuS1k1SGhNZ1l1b1EzcERLdjFhSjZoeDJFbGhOdQpYdVV5clFYVFFmdUNLdlcwa2o2MVg4eWMrU2hFaUhTSkdqWGh5NUNJSisrb25lVzFrT3pHZFAzTTdFMTBBTlltCktPM1pWVEI1OWkzL0RZeWYxL1NJVlBiVVpmY212Wlk0RzQrU0NWS0RCNDU3cXVqMUNzMkFXaEFJV2M0cU8yLzEKemVSb0ZSenZOc2N4U3c1UVR2ZDFySERpdzN3b3NCeDlxS01NOG9QdmR2b0RwbjFBcEFOdEVmRVFjdExVUlE1bgpJRVZlanVveGlGdTV2aFhMb2dMTFhLalZVbnRIM1BKM0ZscElVT3lnaXpOcWZBUEVCczlSS1UvemdRbjJENHp5CmI0d0xUSExhbjBnWXJGV1RVamkwN3FHU0NRSURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWUQKVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdId1lEVlIwagpCQmd3Rm9BVVdYZWFjTnJIWE9qMXFIdWhCbzFMdkRNOFRBb3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQmhuCml5VDF1UUw3N2hKUExicHRoOHE0ZXpyYXBPWFZCZW9GS2VxU2FoeWpQTCtadGRrdkFNMmRSODNSUE1xTU5WOEkKTVRkbllNaUZ0UTRSSENuc0dlUEZ6R3Y0eW1ZdjF4ejNCRTVoaExqOVU3OEo5a0hiQ0t5THlNanJFd3RhU0tlWApTZWw1azFUMHc3aEhvQXBtUTR2ZGRFSUNoS2FyMml5akRjbE5salgwS3h2RVVvSCtwbVVxQXJZVjBnenk3eFR5ClEzdVQvc2lJQzliNXF1a1g0djJpbU9HSGtOcHVCbW91a3JPc2ZvaDE1b0UweDBrWUM2N0I0bElCOGkzTExJV2sKY1FEMWRpdnRTd3RzRTVyUEZ5dXZaY2t2SC83Y3JhbFRBNFUyMXNPdUpENU8yRFZWbXJSWnhJU3psVFIvMS8rRwpoYVlUR05GTWRaRzZtaU15a2xVPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBN05BUGpEMVhYckkzUy9GYjZ4bTcyRFdvZlc2S2VRM25LWTVIaE1nWXVvUTNwREt2CjFhSjZoeDJFbGhOdVh1VXlyUVhUUWZ1Q0t2VzBrajYxWDh5YytTaEVpSFNKR2pYaHk1Q0lKKytvbmVXMWtPekcKZFAzTTdFMTBBTlltS08zWlZUQjU5aTMvRFl5ZjEvU0lWUGJVWmZjbXZaWTRHNCtTQ1ZLREI0NTdxdWoxQ3MyQQpXaEFJV2M0cU8yLzF6ZVJvRlJ6dk5zY3hTdzVRVHZkMXJIRGl3M3dvc0J4OXFLTU04b1B2ZHZvRHBuMUFwQU50CkVmRVFjdExVUlE1bklFVmVqdW94aUZ1NXZoWExvZ0xMWEtqVlVudEgzUEozRmxwSVVPeWdpek5xZkFQRUJzOVIKS1UvemdRbjJENHp5YjR3TFRITGFuMGdZckZXVFVqaTA3cUdTQ1FJREFRQUJBb0lCQURlQ1pjS1h0bDBxSlRBVgorVmZZaG1HZDRrclVtSHpidDIzVVBndHY0K3dFaGc1bEd6WldpYVlXVXpmaWdpS1lVeEtmcE85NGh3Q082NjdFCktEdTJlSzBtdFRuUEp6d1BtVWZnTHlvOVVTY0I2MWQzU09XdmdGTjdyRTl0NHpBQTRNckpQQzFxaHJpa1YrdUYKRkZmbUs4OWk2Wi9URUgvVlhZUDE1V1RtRHpMMlNOakVmUGNCUDlqdk4rR0lyTENlS0o0eW5pVmJ3TW9IekdDTApVZkUxYkVjQktxT1lCMytGelpPdEh0dXdsdG1ERGRadGl1UFpyQjQrN2VRSE1jRXlVWFE1SFE2TFVNbURSamc0Ck1FWVNBRlJ0aUU5VlUzdTlyeUNxQVdjNi9wY2c3K2lWTWFUR0tJVHRtNjNZWDgwY3MzeW9DbkJMZlA5Q2dlNXIKSUhwOEdva0NnWUVBOHA4RmhITkhxbDFDOTRSM2xBRllIdytVOHVVLzJCb0lxOGk5UEpMRmx6WkxzY2p6TnAwWAo0RzkxNDR6a2xablQ4MWpybW13akh2TEhINkkxSXFZTjJIWGUyMkdabUlHbERnbFpoTnVDR0NHZTdaV0R5QlYrCnloQ0hHdDVxSzArK2RScVhuVjJTbWtCSVlwUVN3TjU2K0pyWDRnV2g5UEt2NzkrcFVpK1RPdXNDZ1lFQStkOEwKUHhGZm9odWZOeG9EeHQxRDF6c0E3a21Ray96SkpNMUtObjNtWlYvV2UyeE1wNXROb1ZhM056SDd5bmdWRUw1QgpTNlJjcUp4c3NOSVhWR2J6bHFjLzZJbTlQZG9WNCtaWUpQaWhsVUZ0ZEcySWtRNWVtRThiN2oyZ2xxQkwvWG1ECm56dCt2RGpTWFNIQk9UMnJUME5rN1RJeWJ0NmQvSHkxTXY0Sndkc0NnWUJOZEVyVW4rRFBHSHJhZmVXVzBGOEwKZTNQM253d2t0eHJ4akdJdFJrWGlJaWxFRm56ZWdJUXcyQ1J3Z25ndThpN2h6dzlYK3hHelBab29GU2FWYXlHYwphdlM4WUlvaVQ3RWJyQXh5QjRtZW5vMFlGOVU4T1BDREhZZWtJa0VPbHFTY3llS0JFSEJPNGhxNXJiL1c1cStuClVmZDlab0x2cWRKVTU3Z3NUcGZZQlFLQmdGQ1dxRmpwOEk4bkczMjVEVGpKU2tVVGlhUlE0NmxuSVRTV1pYWVgKdXdROUdiN3EyZnBBczVQeWxOcmZheGNORGJZOXRtK0FEa1p2VlByZWQ1bklMbzRMV1NoVnJFeFRselhPcCtVYwpyM2lsQm5sRGpvVkNQaTRmYmFHMERLUW9CUG8yZzhZS2VVQ1pqdmRzbUpZdWxwN1UzS3RId2s1UnpHQ1BsQjFqCkk2QjdBb0dBR0I4UktuT0Y3SnJyQS8zRDBpRWFCanJ3Wkl6ZStYcGgrTmIwaDlRY0JWcVJLNlJyL3N3c1hIVGMKVVMyWTVrRHNiV05pckQ3azZmVnZKYklKcysra0U5MHpld0ZOQXZTWjlmK1dSZGl1dGoyQURsSFduTjJvcW9ZMgpSbGlHbTZqdXU1bDVtVHVKaXEzWGtUREVZeEhtK3M5N2hvWmpraDRmaWVObTg5SkdVR1E9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\ncontexts:\n- context:\n    cluster: local\n    user: kubelet\n"
                }
            },
            "resources": {
                "data.template_file.cached-container-linux-install-configs.0": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.1": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.10": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.11": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.2": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.3": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.4": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.5": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.6": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.7": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.8": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.9": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.0": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.1": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.10": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.11": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.2": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.3": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.4": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.5": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.6": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.7": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.8": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.9": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.controller-configs": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "9250341ca0735a28a05362b4c5bf8b816149edbed1e076aa976e45e5e03a3679",
                        "attributes": {
                            "id": "9250341ca0735a28a05362b4c5bf8b816149edbed1e076aa976e45e5e03a3679",
                            "rendered": "---\nsystemd:\n  units:\n    - name: etcd-member.service\n      enable: true\n      dropins:\n        - name: 40-etcd-cluster.conf\n          contents: |\n            [Service]\n            Environment=\"ETCD_IMAGE_TAG=v3.3.2\"\n            Environment=\"ETCD_NAME=n2\"\n            Environment=\"ETCD_ADVERTISE_CLIENT_URLS=https://n2.steve:2379\"\n            Environment=\"ETCD_INITIAL_ADVERTISE_PEER_URLS=https://n2.steve:2380\"\n            Environment=\"ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379\"\n            Environment=\"ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380\"\n            Environment=\"ETCD_INITIAL_CLUSTER=n2=https://n2.steve:2380\"\n            Environment=\"ETCD_STRICT_RECONFIG_CHECK=true\"\n            Environment=\"ETCD_SSL_DIR=/etc/ssl/etcd\"\n            Environment=\"ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/server-ca.crt\"\n            Environment=\"ETCD_CERT_FILE=/etc/ssl/certs/etcd/server.crt\"\n            Environment=\"ETCD_KEY_FILE=/etc/ssl/certs/etcd/server.key\"\n            Environment=\"ETCD_CLIENT_CERT_AUTH=true\"\n            Environment=\"ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/peer-ca.crt\"\n            Environment=\"ETCD_PEER_CERT_FILE=/etc/ssl/certs/etcd/peer.crt\"\n            Environment=\"ETCD_PEER_KEY_FILE=/etc/ssl/certs/etcd/peer.key\"\n            Environment=\"ETCD_PEER_CLIENT_CERT_AUTH=true\"\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n        RequiredBy=etcd-member.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n2.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/master \\\n          --node-labels=node-role.kubernetes.io/controller=\"true\" \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --register-with-taints=node-role.kubernetes.io/master=:NoSchedule \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=10\n        [Install]\n        WantedBy=multi-user.target\n    - name: bootkube.service\n      contents: |\n        [Unit]\n        Description=Bootstrap a Kubernetes control plane with a temp api-server\n        ConditionPathExists=!/opt/bootkube/init_bootkube.done\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        WorkingDirectory=/opt/bootkube\n        ExecStart=/opt/bootkube/bootkube-start\n        ExecStartPost=/bin/touch /opt/bootkube/init_bootkube.done\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n2.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\n    - path: /opt/bootkube/bootkube-start\n      filesystem: root\n      mode: 0544\n      user:\n        id: 500\n      group:\n        id: 500\n      contents:\n        inline: |\n          #!/bin/bash\n          # Wrapper for bootkube start\n          set -e\n          # Move experimental manifests\n          [ -n \"$(ls /opt/bootkube/assets/manifests-*/* 2\u003e/dev/null)\" ] \u0026\u0026 mv /opt/bootkube/assets/manifests-*/* /opt/bootkube/assets/manifests \u0026\u0026 rm -rf /opt/bootkube/assets/manifests-*\n          BOOTKUBE_ACI=\"${BOOTKUBE_ACI:-quay.io/coreos/bootkube}\"\n          BOOTKUBE_VERSION=\"${BOOTKUBE_VERSION:-v0.11.0}\"\n          BOOTKUBE_ASSETS=\"${BOOTKUBE_ASSETS:-/opt/bootkube/assets}\"\n          exec /usr/bin/rkt run \\\n            --trust-keys-from-https \\\n            --volume assets,kind=host,source=$BOOTKUBE_ASSETS \\\n            --mount volume=assets,target=/assets \\\n            --volume bootstrap,kind=host,source=/etc/kubernetes \\\n            --mount volume=bootstrap,target=/etc/kubernetes \\\n            $RKT_OPTS \\\n            ${BOOTKUBE_ACI}:${BOOTKUBE_VERSION} \\\n            --net=host \\\n            --dns=host \\\n            --exec=/bootkube -- start --asset-dir=/assets \"$@\"\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n",
                            "template": "---\nsystemd:\n  units:\n    - name: etcd-member.service\n      enable: true\n      dropins:\n        - name: 40-etcd-cluster.conf\n          contents: |\n            [Service]\n            Environment=\"ETCD_IMAGE_TAG=v3.3.2\"\n            Environment=\"ETCD_NAME=${etcd_name}\"\n            Environment=\"ETCD_ADVERTISE_CLIENT_URLS=https://${domain_name}:2379\"\n            Environment=\"ETCD_INITIAL_ADVERTISE_PEER_URLS=https://${domain_name}:2380\"\n            Environment=\"ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379\"\n            Environment=\"ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380\"\n            Environment=\"ETCD_INITIAL_CLUSTER=${etcd_initial_cluster}\"\n            Environment=\"ETCD_STRICT_RECONFIG_CHECK=true\"\n            Environment=\"ETCD_SSL_DIR=/etc/ssl/etcd\"\n            Environment=\"ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/server-ca.crt\"\n            Environment=\"ETCD_CERT_FILE=/etc/ssl/certs/etcd/server.crt\"\n            Environment=\"ETCD_KEY_FILE=/etc/ssl/certs/etcd/server.key\"\n            Environment=\"ETCD_CLIENT_CERT_AUTH=true\"\n            Environment=\"ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/peer-ca.crt\"\n            Environment=\"ETCD_PEER_CERT_FILE=/etc/ssl/certs/etcd/peer.crt\"\n            Environment=\"ETCD_PEER_KEY_FILE=/etc/ssl/certs/etcd/peer.key\"\n            Environment=\"ETCD_PEER_CLIENT_CERT_AUTH=true\"\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n        RequiredBy=etcd-member.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/master \\\n          --node-labels=node-role.kubernetes.io/controller=\"true\" \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --register-with-taints=node-role.kubernetes.io/master=:NoSchedule \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=10\n        [Install]\n        WantedBy=multi-user.target\n    - name: bootkube.service\n      contents: |\n        [Unit]\n        Description=Bootstrap a Kubernetes control plane with a temp api-server\n        ConditionPathExists=!/opt/bootkube/init_bootkube.done\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        WorkingDirectory=/opt/bootkube\n        ExecStart=/opt/bootkube/bootkube-start\n        ExecStartPost=/bin/touch /opt/bootkube/init_bootkube.done\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\n    - path: /opt/bootkube/bootkube-start\n      filesystem: root\n      mode: 0544\n      user:\n        id: 500\n      group:\n        id: 500\n      contents:\n        inline: |\n          #!/bin/bash\n          # Wrapper for bootkube start\n          set -e\n          # Move experimental manifests\n          [ -n \"$(ls /opt/bootkube/assets/manifests-*/* 2\u003e/dev/null)\" ] \u0026\u0026 mv /opt/bootkube/assets/manifests-*/* /opt/bootkube/assets/manifests \u0026\u0026 rm -rf /opt/bootkube/assets/manifests-*\n          BOOTKUBE_ACI=\"$${BOOTKUBE_ACI:-quay.io/coreos/bootkube}\"\n          BOOTKUBE_VERSION=\"$${BOOTKUBE_VERSION:-v0.11.0}\"\n          BOOTKUBE_ASSETS=\"$${BOOTKUBE_ASSETS:-/opt/bootkube/assets}\"\n          exec /usr/bin/rkt run \\\n            --trust-keys-from-https \\\n            --volume assets,kind=host,source=$BOOTKUBE_ASSETS \\\n            --mount volume=assets,target=/assets \\\n            --volume bootstrap,kind=host,source=/etc/kubernetes \\\n            --mount volume=bootstrap,target=/etc/kubernetes \\\n            $$RKT_OPTS \\\n            $${BOOTKUBE_ACI}:$${BOOTKUBE_VERSION} \\\n            --net=host \\\n            --dns=host \\\n            --exec=/bootkube -- start --asset-dir=/assets \"$@\"\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n",
                            "vars.%": "7",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n2.steve",
                            "vars.etcd_initial_cluster": "n2=https://n2.steve:2380",
                            "vars.etcd_name": "n2",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.0": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "b525544cc5a1daf4cc9395a65ba8f01fb4841f48c0123449b7d1cc5d6c18f567",
                        "attributes": {
                            "id": "b525544cc5a1daf4cc9395a65ba8f01fb4841f48c0123449b7d1cc5d6c18f567",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n3.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n3.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n3.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.1": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "5421432c45ff3f61a385d7eb9f6b39a3b5ae7581861f2fbc844fe43f34ce7e19",
                        "attributes": {
                            "id": "5421432c45ff3f61a385d7eb9f6b39a3b5ae7581861f2fbc844fe43f34ce7e19",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n4.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n4.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n4.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.10": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "daa7c156ef1cd22d9382a483a9e23248226e48d0de9d5b1494abe9da8c713cbf",
                        "attributes": {
                            "id": "daa7c156ef1cd22d9382a483a9e23248226e48d0de9d5b1494abe9da8c713cbf",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n13.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n13.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n13.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.2": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "19806878f472b9a3f207c60e6508347ac578f0fd4946b693d59bc8e4fb33c739",
                        "attributes": {
                            "id": "19806878f472b9a3f207c60e6508347ac578f0fd4946b693d59bc8e4fb33c739",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n5.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n5.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n5.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.3": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "baa9bbe6e7d0453b15ef05a348d8baab444456c0ebd6072b010c2be7ac7dca65",
                        "attributes": {
                            "id": "baa9bbe6e7d0453b15ef05a348d8baab444456c0ebd6072b010c2be7ac7dca65",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n6.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n6.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n6.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.4": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "f916c88bf0aa58b63c9aa218a430b344906c51d0f841a29876291eb56cc27f2c",
                        "attributes": {
                            "id": "f916c88bf0aa58b63c9aa218a430b344906c51d0f841a29876291eb56cc27f2c",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n7.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n7.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n7.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.5": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "bc3062f535ec36ad91fdd78275776e839b242f46610e1f5291c43ad8fbbb5f44",
                        "attributes": {
                            "id": "bc3062f535ec36ad91fdd78275776e839b242f46610e1f5291c43ad8fbbb5f44",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n8.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n8.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n8.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.6": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "78f9e27fac7ef52cbc93ded6d65a7ca6c677d2df59de76ef0f2d7ed98bbb1d0c",
                        "attributes": {
                            "id": "78f9e27fac7ef52cbc93ded6d65a7ca6c677d2df59de76ef0f2d7ed98bbb1d0c",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n9.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n9.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n9.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.7": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "194281c4ae2617996e239f4940d495e5c6a0ca5d5e1b570fc4e1a837b4006ad1",
                        "attributes": {
                            "id": "194281c4ae2617996e239f4940d495e5c6a0ca5d5e1b570fc4e1a837b4006ad1",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n10.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n10.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n10.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.8": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "986aad1d961da936bf3cd3cb122ea09b402ed26e84a729584b7400b1ceb49c3a",
                        "attributes": {
                            "id": "986aad1d961da936bf3cd3cb122ea09b402ed26e84a729584b7400b1ceb49c3a",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n11.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n11.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n11.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.9": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "03305aa6783f8c1add12cbb03eca1a97d389639b4f34c45dbf27d2793c8b6d62",
                        "attributes": {
                            "id": "03305aa6783f8c1add12cbb03eca1a97d389639b4f34c45dbf27d2793c8b6d62",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n12.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n12.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n12.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "matchbox_group.container-linux-install.0": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n2",
                        "attributes": {
                            "id": "container-linux-install-n2",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "container-linux-install-n2",
                            "profile": "steve-cached-container-linux-install-n2",
                            "selector.%": "1",
                            "selector.mac": "00:1E:4F:28:30:12"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.1": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n3",
                        "attributes": {
                            "id": "container-linux-install-n3",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "container-linux-install-n3",
                            "profile": "steve-cached-container-linux-install-n3",
                            "selector.%": "1",
                            "selector.mac": "00:22:19:AB:7E:78"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.10": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n12",
                        "attributes": {
                            "id": "container-linux-install-n12",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "container-linux-install-n12",
                            "profile": "steve-cached-container-linux-install-n12",
                            "selector.%": "1",
                            "selector.mac": "00:1A:A0:26:DA:B6"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.11": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n13",
                        "attributes": {
                            "id": "container-linux-install-n13",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "container-linux-install-n13",
                            "profile": "steve-cached-container-linux-install-n13",
                            "selector.%": "1",
                            "selector.mac": "00:1D:09:05:98:DC"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.2": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n4",
                        "attributes": {
                            "id": "container-linux-install-n4",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "container-linux-install-n4",
                            "profile": "steve-cached-container-linux-install-n4",
                            "selector.%": "1",
                            "selector.mac": "00:22:19:8E:15:77"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.3": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n5",
                        "attributes": {
                            "id": "container-linux-install-n5",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "container-linux-install-n5",
                            "profile": "steve-cached-container-linux-install-n5",
                            "selector.%": "1",
                            "selector.mac": "00:1E:C9:D0:AA:9E"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.4": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n6",
                        "attributes": {
                            "id": "container-linux-install-n6",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "container-linux-install-n6",
                            "profile": "steve-cached-container-linux-install-n6",
                            "selector.%": "1",
                            "selector.mac": "00:22:19:8E:26:B6"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.5": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n7",
                        "attributes": {
                            "id": "container-linux-install-n7",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "container-linux-install-n7",
                            "profile": "steve-cached-container-linux-install-n7",
                            "selector.%": "1",
                            "selector.mac": "00:22:19:8E:25:A1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.6": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n8",
                        "attributes": {
                            "id": "container-linux-install-n8",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "container-linux-install-n8",
                            "profile": "steve-cached-container-linux-install-n8",
                            "selector.%": "1",
                            "selector.mac": "00:22:19:8E:26:00"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.7": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n9",
                        "attributes": {
                            "id": "container-linux-install-n9",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "container-linux-install-n9",
                            "profile": "steve-cached-container-linux-install-n9",
                            "selector.%": "1",
                            "selector.mac": "00:1E:C9:D0:AA:BC"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.8": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n10",
                        "attributes": {
                            "id": "container-linux-install-n10",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "container-linux-install-n10",
                            "profile": "steve-cached-container-linux-install-n10",
                            "selector.%": "1",
                            "selector.mac": "00:1A:A0:15:E3:76"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.9": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n11",
                        "attributes": {
                            "id": "container-linux-install-n11",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1",
                            "name": "container-linux-install-n11",
                            "profile": "steve-cached-container-linux-install-n11",
                            "selector.%": "1",
                            "selector.mac": "00:1D:09:05:9A:C0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.controller": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.controllers.*"
                    ],
                    "primary": {
                        "id": "steve-n2",
                        "attributes": {
                            "id": "steve-n2",
                            "name": "steve-n2",
                            "profile": "steve-controller-n2",
                            "selector.%": "2",
                            "selector.mac": "00:1E:4F:28:30:12",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.0": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n3",
                        "attributes": {
                            "id": "steve-n3",
                            "name": "steve-n3",
                            "profile": "steve-worker-n3",
                            "selector.%": "2",
                            "selector.mac": "00:22:19:AB:7E:78",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.1": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n4",
                        "attributes": {
                            "id": "steve-n4",
                            "name": "steve-n4",
                            "profile": "steve-worker-n4",
                            "selector.%": "2",
                            "selector.mac": "00:22:19:8E:15:77",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.10": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n13",
                        "attributes": {
                            "id": "steve-n13",
                            "name": "steve-n13",
                            "profile": "steve-worker-n13",
                            "selector.%": "2",
                            "selector.mac": "00:1D:09:05:98:DC",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.2": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n5",
                        "attributes": {
                            "id": "steve-n5",
                            "name": "steve-n5",
                            "profile": "steve-worker-n5",
                            "selector.%": "2",
                            "selector.mac": "00:1E:C9:D0:AA:9E",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.3": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n6",
                        "attributes": {
                            "id": "steve-n6",
                            "name": "steve-n6",
                            "profile": "steve-worker-n6",
                            "selector.%": "2",
                            "selector.mac": "00:22:19:8E:26:B6",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.4": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n7",
                        "attributes": {
                            "id": "steve-n7",
                            "name": "steve-n7",
                            "profile": "steve-worker-n7",
                            "selector.%": "2",
                            "selector.mac": "00:22:19:8E:25:A1",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.5": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n8",
                        "attributes": {
                            "id": "steve-n8",
                            "name": "steve-n8",
                            "profile": "steve-worker-n8",
                            "selector.%": "2",
                            "selector.mac": "00:22:19:8E:26:00",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.6": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n9",
                        "attributes": {
                            "id": "steve-n9",
                            "name": "steve-n9",
                            "profile": "steve-worker-n9",
                            "selector.%": "2",
                            "selector.mac": "00:1E:C9:D0:AA:BC",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.7": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n10",
                        "attributes": {
                            "id": "steve-n10",
                            "name": "steve-n10",
                            "profile": "steve-worker-n10",
                            "selector.%": "2",
                            "selector.mac": "00:1A:A0:15:E3:76",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.8": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n11",
                        "attributes": {
                            "id": "steve-n11",
                            "name": "steve-n11",
                            "profile": "steve-worker-n11",
                            "selector.%": "2",
                            "selector.mac": "00:1D:09:05:9A:C0",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.9": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n12",
                        "attributes": {
                            "id": "steve-n12",
                            "name": "steve-n12",
                            "profile": "steve-worker-n12",
                            "selector.%": "2",
                            "selector.mac": "00:1A:A0:26:DA:B6",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.0": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n2",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n2",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n2"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.1": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n3",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n3",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n3"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.10": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n12",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n12",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n12"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.11": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n13",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n13",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n13"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.2": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n4",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n4",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n4"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.3": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n5",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n5",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n5"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.4": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n6",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n6",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n6"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.5": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n7",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n7",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n7"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.6": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n8",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n8",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n8"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.7": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n9",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n9",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n9"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.8": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n10",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n10",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n10"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.9": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n11",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n11",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n11"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.0": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n2",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n2",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n2"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.1": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n3",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n3",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n3"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.10": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n12",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n12",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n12"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.11": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n13",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n13",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n13"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.2": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n4",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n4",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n4"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.3": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n5",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n5",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n5"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.4": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n6",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n6",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n6"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.5": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n7",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n7",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n7"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.6": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n8",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n8",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n8"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.7": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n9",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n9",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n9"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.8": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n10",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n10",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n10"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.9": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n11",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n11",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n11"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.controllers": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.controller-configs.*"
                    ],
                    "primary": {
                        "id": "steve-controller-n2",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: etcd-member.service\n      enable: true\n      dropins:\n        - name: 40-etcd-cluster.conf\n          contents: |\n            [Service]\n            Environment=\"ETCD_IMAGE_TAG=v3.3.2\"\n            Environment=\"ETCD_NAME=n2\"\n            Environment=\"ETCD_ADVERTISE_CLIENT_URLS=https://n2.steve:2379\"\n            Environment=\"ETCD_INITIAL_ADVERTISE_PEER_URLS=https://n2.steve:2380\"\n            Environment=\"ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379\"\n            Environment=\"ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380\"\n            Environment=\"ETCD_INITIAL_CLUSTER=n2=https://n2.steve:2380\"\n            Environment=\"ETCD_STRICT_RECONFIG_CHECK=true\"\n            Environment=\"ETCD_SSL_DIR=/etc/ssl/etcd\"\n            Environment=\"ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/server-ca.crt\"\n            Environment=\"ETCD_CERT_FILE=/etc/ssl/certs/etcd/server.crt\"\n            Environment=\"ETCD_KEY_FILE=/etc/ssl/certs/etcd/server.key\"\n            Environment=\"ETCD_CLIENT_CERT_AUTH=true\"\n            Environment=\"ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/peer-ca.crt\"\n            Environment=\"ETCD_PEER_CERT_FILE=/etc/ssl/certs/etcd/peer.crt\"\n            Environment=\"ETCD_PEER_KEY_FILE=/etc/ssl/certs/etcd/peer.key\"\n            Environment=\"ETCD_PEER_CLIENT_CERT_AUTH=true\"\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n        RequiredBy=etcd-member.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n2.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/master \\\n          --node-labels=node-role.kubernetes.io/controller=\"true\" \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --register-with-taints=node-role.kubernetes.io/master=:NoSchedule \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=10\n        [Install]\n        WantedBy=multi-user.target\n    - name: bootkube.service\n      contents: |\n        [Unit]\n        Description=Bootstrap a Kubernetes control plane with a temp api-server\n        ConditionPathExists=!/opt/bootkube/init_bootkube.done\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        WorkingDirectory=/opt/bootkube\n        ExecStart=/opt/bootkube/bootkube-start\n        ExecStartPost=/bin/touch /opt/bootkube/init_bootkube.done\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n2.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\n    - path: /opt/bootkube/bootkube-start\n      filesystem: root\n      mode: 0544\n      user:\n        id: 500\n      group:\n        id: 500\n      contents:\n        inline: |\n          #!/bin/bash\n          # Wrapper for bootkube start\n          set -e\n          # Move experimental manifests\n          [ -n \"$(ls /opt/bootkube/assets/manifests-*/* 2\u003e/dev/null)\" ] \u0026\u0026 mv /opt/bootkube/assets/manifests-*/* /opt/bootkube/assets/manifests \u0026\u0026 rm -rf /opt/bootkube/assets/manifests-*\n          BOOTKUBE_ACI=\"${BOOTKUBE_ACI:-quay.io/coreos/bootkube}\"\n          BOOTKUBE_VERSION=\"${BOOTKUBE_VERSION:-v0.11.0}\"\n          BOOTKUBE_ASSETS=\"${BOOTKUBE_ASSETS:-/opt/bootkube/assets}\"\n          exec /usr/bin/rkt run \\\n            --trust-keys-from-https \\\n            --volume assets,kind=host,source=$BOOTKUBE_ASSETS \\\n            --mount volume=assets,target=/assets \\\n            --volume bootstrap,kind=host,source=/etc/kubernetes \\\n            --mount volume=bootstrap,target=/etc/kubernetes \\\n            $RKT_OPTS \\\n            ${BOOTKUBE_ACI}:${BOOTKUBE_VERSION} \\\n            --net=host \\\n            --dns=host \\\n            --exec=/bootkube -- start --asset-dir=/assets \"$@\"\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n",
                            "id": "steve-controller-n2",
                            "name": "steve-controller-n2"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.0": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n3",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n3.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n3.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "id": "steve-worker-n3",
                            "name": "steve-worker-n3"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.1": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n4",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n4.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n4.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "id": "steve-worker-n4",
                            "name": "steve-worker-n4"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.10": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n13",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n13.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n13.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "id": "steve-worker-n13",
                            "name": "steve-worker-n13"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.2": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n5",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n5.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n5.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "id": "steve-worker-n5",
                            "name": "steve-worker-n5"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.3": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n6",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n6.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n6.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "id": "steve-worker-n6",
                            "name": "steve-worker-n6"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.4": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n7",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n7.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n7.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "id": "steve-worker-n7",
                            "name": "steve-worker-n7"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.5": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n8",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n8.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n8.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "id": "steve-worker-n8",
                            "name": "steve-worker-n8"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.6": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n9",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n9.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n9.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "id": "steve-worker-n9",
                            "name": "steve-worker-n9"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.7": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n10",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n10.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n10.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "id": "steve-worker-n10",
                            "name": "steve-worker-n10"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.8": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n11",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n11.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n11.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "id": "steve-worker-n11",
                            "name": "steve-worker-n11"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.9": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n12",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n12.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n12.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzKhv5RQe1C9LWSk/OMI82jk3S1zjI+ctKE2eYwo9SNI3N6m+fSMdU1pY3sjkyfwrmdmUBjk9vFXEchK4Y5BrmU0v2EIlaGDGG0kulkAajCPHuwb9uGOGz3FqohV4df8OE1SLPm7WDmbKneGqy8EtrW6ixlqtm+swksWNn/EThf7smOOLDdjwXnEEzGUcEdrCd8iWmpy1XVOoXsa5BY8OM9APGwQd0dpxkVTmF6m0zA0P34BvfJwi6pjKMmb/Q/1k2m6xn7HySL1l2MRiwI+rHoA0xr2api+6slMYHrA//tuFWIuSfWpAA642eobfz1mFq/HzElYgOOK0rTWiMGhQ9 core@vm1\n\n",
                            "id": "steve-worker-n12",
                            "name": "steve-worker-n12"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "null_resource.copy-worker-secrets.0": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "8576971494927726166",
                        "attributes": {
                            "id": "8576971494927726166"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.1": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "2853039961248228014",
                        "attributes": {
                            "id": "2853039961248228014"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.2": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "7496651208335291383",
                        "attributes": {
                            "id": "7496651208335291383"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.3": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "2359605550842729837",
                        "attributes": {
                            "id": "2359605550842729837"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.4": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "2653868416258521794",
                        "attributes": {
                            "id": "2653868416258521794"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.5": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "5567814185352780565",
                        "attributes": {
                            "id": "5567814185352780565"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.6": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "5242806626110273197",
                        "attributes": {
                            "id": "5242806626110273197"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.7": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "1088587191689270902",
                        "attributes": {
                            "id": "1088587191689270902"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.8": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "4542577985653507932",
                        "attributes": {
                            "id": "4542577985653507932"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.9": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "8153791150580135541",
                        "attributes": {
                            "id": "8153791150580135541"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "kubernetes",
                "bootkube"
            ],
            "outputs": {
                "ca_cert": {
                    "sensitive": false,
                    "type": "string",
                    "value": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRZTMxdU9NTXFSV01Ma3NSWjRLZ2JCakFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURneApNakV6TURsYUZ3MHhPVEEwTURneE1qRXpNRGxhTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBrM1oKVlUwOU8rdlMvUkszNGxSdVlPcXZUOXdoNCtQZ3Ixb2pmVlVQaVZQVUx2VlVEbGp0a0NSTXBtenEyZXAvbGhGYQpCVXV6bGlIbnVGNGZKeng5ZDVxSEJnVEJZYnJEZjVwZGZWaHprMnlQeDViOWdwZm5RRjVDaUhJT0dnc1lyUkJ4Cm9DTEo2aUh3SUhtQi9BQ1ZOa0x3U0prcEN4ZVQrMXBKZS9ieDZPUHNacVdob25nUVBaNmFXdkRsQS8raE54QXMKeW95V0dFK0pmNkVuRHZlSk9ZVVczaHphVnEzSWdNV29XYjd1WFRXV001S2MyTXZYTlRtRE5QbVo5TUt3czZYWgpXOXNPNWxleUhhRTRhQ0RqR2MyZjVTSzhEaHY5LzMzTE1CV2FiSGM2QWhBdUQ0eFp6YjJwR3JHMFo5OFZaM1hPClhWZEJaaElDWWpqa2RUR3FHUUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVV1hlYWNOckhYT2oxcUh1aEJvMUx2RE04VEFvd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBSnhSUjB6V0NKTWVZc01wbWVreWlHVUxIM2lDNWYxRk90UFB1WnZTbkxsSitqZ2d0b2tLCitiVEV6RkNQWk44MWIwZFBRM09jT2RDdC9Oc3AvQTN6Q014cE1hNW0xbHo2czZyb0pka1lSMldMYkFmVjFPeUoKL0tQV1JRZllOeXBiNlAxNnFueGVLS0V0UENGbkVpT1BsbjFmNzAzMXgvQU85WDRtMEJJeTlHc1Vjd3JTaGJNWQpZYTFwZ3ROYVUxaFFrREJGUlBFVlRmcGJsWXllTW1tb0wzYmsxVldCTFFTUk90SEJDcFEzNmpqQ3JLZG5Ea2wzCndJcXpXVDY2YkhBMkVXSXh6MmduQXFQN3RLelY4SWdmVDBTRWR4d2M0dUVLVUsvT05rWjZOaUxWWGJXdnZ5M2cKeXNBTCtoQlZpVm1INjlIcEd2Q25Rb1JZVlB2TGVlMWRwczg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
                },
                "content_hash": {
                    "sensitive": false,
                    "type": "string",
                    "value": "cc3198b187a206da25f9cf8d7a06e264c569772b"
                },
                "etcd_ca_cert": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN CERTIFICATE-----\nMIIDDzCCAfegAwIBAgIRAMpKB+tZKTy9DCKXYl1le+kwDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDgxMjEz\nMDlaFw0xOTA0MDgxMjEzMDlaMCExDTALBgNVBAoTBGV0Y2QxEDAOBgNVBAMTB2V0\nY2QtY2EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDo7YXpGm+vyo+u\nLxRSA2JuUOvGQFH93jv9/AbEot3WOaGTJqxtE2d6PJXlRqB1ETXDJ9Bj3dH0ItwO\nh2HW6HuP6DU0ATYxriMk7RxlND4TkVKiFe4/0XqrxVDszQkgOGehKczis4ScwRAK\nkqW9lunq904b2QNHC7Ba3PFysQfhs9XR9YoMX1vHnT8caAxT4sK3/VpNCMKloIlB\n25cyl6DEu78eGCZNMpFTr4b2JQryafCgn6H812ApZYBPz5w3vRk3/Ir5i9nkDwpL\nKyo1lnh/XKDIigeLVI0rNOczfDJLGE60NNOLfykI59Ny2nL8PnEyN1HV0OvqIq74\ncjq1gw2PAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/\nMB0GA1UdDgQWBBSIT93zP5hK06u4P60FcUhy/067+jANBgkqhkiG9w0BAQsFAAOC\nAQEAWE3TsteSStWvAe05G9OAhxGSf192/NthaUnmU8uRMT2vcSDXImWoq+oSdJVO\nsDD6fpPbCxS7Xp7v+tXY2M9t3INXxLel/zJ4YGYcwKhY1x4rLmd55lLvOCpOuAhB\n9/DtbX68y7/qvOP2NJa53azaFvm/AdDOi16Jm1eUgBsXEF4AJ7hQd89rjv2PXeAX\na5cIyxrNiftFaohkzrJUbE/lga66ypfMl0jpSFc88ohCOv+ENS+X8sf7K2d9ieK3\nJBpybzhBZt9H1z7MAPSgzI6d1j3o2Te3Z/vqfdUp/m2PYFTmb8pJ3tyOCKdWIWm+\n8KmRE/2pBXJjVVCHnbOKX1PdGg==\n-----END CERTIFICATE-----\n"
                },
                "etcd_client_cert": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN CERTIFICATE-----\nMIIDWTCCAkGgAwIBAgIRAMJ6tT6zjdS/yMBSwEqAVF8wDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDgxMjEz\nMDlaFw0xOTA0MDgxMjEzMDlaMCUxDTALBgNVBAoTBGV0Y2QxFDASBgNVBAMTC2V0\nY2QtY2xpZW50MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0cklWmK1\nGlDP1Mxe0nPOjac//I89cbE6SFkqVBwCG/Avx7Cx9NdScamddqd4E2/adVEdD1yU\nxFXOooNfGofgB+WQZrDcTrX06KXRb1DDQ1KvbcKe1CVUbYuf5DQOfBV0XXzKUIiT\nQ4QpDEvm+bP8XWpF7cczwpR4l1qkzTTDYvj/2fH/LqBGa0HZK8+F3brUlZqtO2oa\nDnT2eht8MBHsDvOytlLBOrpr0qTY2dEpp581X9BMtckdEuKNHypKBxLgDTZC5Fzc\nL/BN5ZNgsyqZXvbO+jLcyZyj3wkYyJf3wiWRb0tnuzKY+ZcDsabV6qvvZLcYXX7S\nsT7VCqw7MSIOlQIDAQABo4GHMIGEMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAU\nBggrBgEFBQcDAQYIKwYBBQUHAwIwDAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBSI\nT93zP5hK06u4P60FcUhy/067+jAkBgNVHREEHTAbgghuMi5zdGV2ZYIJbG9jYWxo\nb3N0hwR/AAABMA0GCSqGSIb3DQEBCwUAA4IBAQC/zl91SNPpYlCaNbH7MorvasDo\nS+VCac7Ln2R3kRq6VtNSdUrb53v2p6mEpRZ3bbgcoMm9ZouJZ/t8S/qP/FPTwU2O\nIElAElILWT7VTAiyIgHJTc2Ld4ZaUL3/5BqqUpMdiycymGJ5hdURlbPcykHp90EQ\nBxZgxqJ0pM6ylo45oImaRARqmJ/tb3Yrdh+JQGpXMCC7aXDcrZJNYG+E78rxfQDS\n4rCdK2RrHj8yeFhOSU1e5tL7FYMoLbcsoH00TOVgbzurrvI+COlb6VzZwJJ3ivTX\nz+G3gROkQMfnCQrZ8y27KSuEQEGplD6zjVsMlUF2YrB7GzY5NF3bAw6bGN7m\n-----END CERTIFICATE-----\n"
                },
                "etcd_client_key": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEA0cklWmK1GlDP1Mxe0nPOjac//I89cbE6SFkqVBwCG/Avx7Cx\n9NdScamddqd4E2/adVEdD1yUxFXOooNfGofgB+WQZrDcTrX06KXRb1DDQ1KvbcKe\n1CVUbYuf5DQOfBV0XXzKUIiTQ4QpDEvm+bP8XWpF7cczwpR4l1qkzTTDYvj/2fH/\nLqBGa0HZK8+F3brUlZqtO2oaDnT2eht8MBHsDvOytlLBOrpr0qTY2dEpp581X9BM\ntckdEuKNHypKBxLgDTZC5FzcL/BN5ZNgsyqZXvbO+jLcyZyj3wkYyJf3wiWRb0tn\nuzKY+ZcDsabV6qvvZLcYXX7SsT7VCqw7MSIOlQIDAQABAoIBAD/9EK2vKfpq59nK\ntKmQtVIzz6qjrmQ9YL+souKg4GvRKWHJnZ5HB1iwGd2VW2TiW0opgamr3Zy9Z5fe\nZmXbSBRgi1knXSuNCLTlzyobAlRIpkXedT/UWxpG2nBrCHgEu0fAxp0l63VOnI6p\noDxOEA4WWloaxsj1LItOFLKbA3XuXAqK40Ny1EUtTJwcyekoYLGVByJFkXvCMYbU\nSEq16MEVk41xnAadLmAr0SlN5/X7lPKFDDbkbwWUsnJO+cD+LfmLGV3yJZFcWx3g\n1KlCdRhhyKefdaRMWtlqKKAAaY5+vWA8EiyDD6WMY44CStAShXZDhi7FmtgaZ4Gw\nLKnkIcECgYEA6fYMpOXOm4L7+0bF76o44lhmxrtL2MC2DfhCqgIO5RKp9PiXBmQs\noYO9H5EHk4EHkdmopUu2DPLWt5rt5rRP7uvbxOF/795DYfxvDeubFjVxewRQGjMI\nJ85JC1Kk4kwWlDJ83tdh8cr4/hcjNR8KylYEApqcnW8kcgJgyeC26JkCgYEA5Ywb\n4oPAvbuO9+zBLdRnT5KZci0SjZzkuM2WIvMmqVuj6mwkQzKkXjsAZb8hbBiP9/fZ\np1ALJlTP7ONeh3AQOp3yL2rvHUwKqIU6HOomMB1efFV4p9n+Mxj1gYkydKBxpsGX\nNLFxx/v69OYgCPVCQVl57+bYwwdh7axf2f4qZ10CgYBWMR9XYJJNGGRcniYttThf\nqtGyRS4cHGL1opBssXVrTwTuCucYo68NkcsK5hM0dESlptpKiyn2e0A/RASBCcyo\n6Jt+XNUVOXz5jFYder8X33h/KYeZH1PR1l1ynm/ALufikPcP4aljurMgaMW/vD/t\nauLvUqaAGYIDvnyJ4w9/gQKBgQDPi1G/CW8gXU/T3A2CGXTbXmo88IHA5qVqbf+c\nVAqVv9TB5MsYstYomOIwHJLkgITTKBZ0D4w1OSPSRHW4sVsLFLnfo6jU7WcJnYPA\nlvi2Mie29TSlVxVeL+fyGhEzn8mCg7DqJLICplLuUI+Qaehg27zDaw57r9YcJel4\nWTUPxQKBgQCkM7TCeJLNkC75jUVn5c/g32FyJBZ88JItFdZ/RSil95IWji5dgdnJ\n+t7MJ0mi4JjI0JrV5qIYcNZbYx0PLT9S/fz8rYxjtjfpC7Gq/Pm/lT7tiktImJOM\nwz59A2+FdK+06doTzpAW4+XvLBjRXxBOOBpmHkW25QIDZVLhn3Gmkw==\n-----END RSA PRIVATE KEY-----\n"
                },
                "etcd_peer_cert": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN CERTIFICATE-----\nMIIDQzCCAiugAwIBAgIQdBzEqisnzMK2bwflBnZm7TANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwODEyMTMw\nOVoXDTE5MDQwODEyMTMwOVowIzENMAsGA1UEChMEZXRjZDESMBAGA1UEAxMJZXRj\nZC1wZWVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvhylKNBAhSeq\nT/2nZsjZ2kYAaEPxJ4nJcKt/olMSpoDjPXRoHGamwU+Od0PVAv9VwGJnGiQxUXGU\nylUxefha3Xw7xmFBZaTSUDGhUDpWyqZSXIGCFQ1q9YVFrbiWpJ05fSALbHQfWiZ+\n3CpgmO45iFElIFhwcvVolwDG2amKb83+zM4HuvBlk2GEdKSidJYE56S9NkiR5yNm\nipDh8mM7CETecA/qeOYoSJK6wxTcmU8MDgkVeb5kfVXVwTUqRnZoqAAKgTvn3o46\n//vBx9zE/LojddJShOOEYb6FM33Y9W9i0s3B6MivhkdBj5G9hM2h6vHsG3TNxS8Z\nZYrd2nSV9QIDAQABo3UwczAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYB\nBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUiE/d8z+Y\nStOruD+tBXFIcv9Ou/owEwYDVR0RBAwwCoIIbjIuc3RldmUwDQYJKoZIhvcNAQEL\nBQADggEBAJhpMOatfeL4sPXIOMTqbtNdcK25EPiODm6uWaCYLb6nPJQwNbQKn9ur\nqgpTmllrzM75jFi/EstKkOdGKZk9rH5+MwTOGWTRb47f9YRbXaD6cct66DiZYZb5\npLdi2qt4evOOKBt5xsxuTSliGUWUgKWvwIRVRCZaKS+bZQN2w3iXFP/Oo5kDzXpI\nnbxQ6HG7ZT35HnjZWhUXZSovdG2+reRG29JxoylxFjAy6aie3xlTfn+tAtLjjpIO\n42kMqRGAMRR6NUDLXeAtqiNWCG2HXpqtE0BNGc4z3Y23OIJfQzcK3mfKLJNYDCcD\nZwjpNGOUuZKAYSwGCCvZj6JxdK5HQME=\n-----END CERTIFICATE-----\n"
                },
                "etcd_peer_key": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEAvhylKNBAhSeqT/2nZsjZ2kYAaEPxJ4nJcKt/olMSpoDjPXRo\nHGamwU+Od0PVAv9VwGJnGiQxUXGUylUxefha3Xw7xmFBZaTSUDGhUDpWyqZSXIGC\nFQ1q9YVFrbiWpJ05fSALbHQfWiZ+3CpgmO45iFElIFhwcvVolwDG2amKb83+zM4H\nuvBlk2GEdKSidJYE56S9NkiR5yNmipDh8mM7CETecA/qeOYoSJK6wxTcmU8MDgkV\neb5kfVXVwTUqRnZoqAAKgTvn3o46//vBx9zE/LojddJShOOEYb6FM33Y9W9i0s3B\n6MivhkdBj5G9hM2h6vHsG3TNxS8ZZYrd2nSV9QIDAQABAoIBACkRLQhE/DsHV34S\nEDBe4NiK2JmtW5Gr7QzeryKUiWnYW74xwC+qaQlHM0JGL+SG3bJCT31RJiouu/J9\nNsPfR1mi9ZKj/amEUj4qims3PvpltVLwUvZTQLCqymN9hWUn5XxHCNCzwPYLbMoI\niXdftqPgy4FSOXBL3P0JmOr5+cKuwJxeSNQntJCv2YTY7dM5WEfQ61JJnvIKJfzD\nqoJOcbjnfeYdM/qM9Wc+t0IOpDkJZwRUxZ2GpLbqn6TfJ4OwpB4EMuj+VLtJAqdZ\nVryiEwe5lLH+yVWzwFk5kngQ6iMXA3Z+2Bgxmn4hBYDaKUjtHAbmAWShq+rU8ldw\nUyWHUp0CgYEA0uVxrUj+TRIT/MvbOU7glql7ETgw+c4iA0pMAFqQfP7v3kqjp7UD\n5jrhMOrkJMlhsIvODEius5NTBFEZNgh8KAWsMSny6swANmiTE3uATf9yiRV2FMic\nvxo9UrHotMhCzXlgZCxEKaW6Q22+KykTxCGXvGs+QVk3UUAV73stRxMCgYEA5sVC\nHIVt7sM5x5aD0MJ8D/3f1jZipvMsmvv1QdS1kvTk+vtJrz/FZgRJyaCIakdIAZZO\ndTtT5UEJu9aENpdXLyLRsHz3L7Yses+lnmdmCWkUPWt0W5mAXSPh+48HgxybgxzO\nxKnqcapPjbZ+BNb43j0L2IRg/0/C0FS2puk+J9cCgYB6AzzNYFmgBUGDE/31HelZ\nwRvuTnAnVlbfSHDIE51cc7IbDVu5f0SOQqpePsdXcRsPpRLEkJhiVG3HJZRMaoRK\nM13346kipnvI/p94ug71EUEWhlAWninxdiDcYwma7fGYJwzZZ7LX1YX51Ngc6FsD\nMdwzqmgOLquOWmFWeBEt+QKBgBzzlm25l6ciuvb9PSBNpf7jnNdlD09eprPy9DwE\nEZuUOb37FK111LANzawMBdE/jBsW3lT60nWqiSwVp5Spu/hf5+q6YtCLjF0D/AU5\nd6Wqly11c62iPmZxAALtWMXsKt5yGMa3goAsG7rtsDWvOp23DutlAD5HpWs5lYiv\nLmsVAoGASrIHjHPHkC69FW3zPptWIxxmsA+U/GyA7t42gW/Nq6bwClH2NtoRDKf/\nbK+6t0k6OeCJSF1mGUq28uwcsxcZhM+l3ngtg7Ikd+GgdB9H8kppE9f8KxNWENs8\nWd3hAmOG5VtAWLHRSu2gDj1bISdz12vNDvBT91To9kNl/9Jn/i4=\n-----END RSA PRIVATE KEY-----\n"
                },
                "etcd_server_cert": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN CERTIFICATE-----\nMIIDWDCCAkCgAwIBAgIQB1ayGeQF2u2oer0SxuR9UzANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwODEyMTMw\nOVoXDTE5MDQwODEyMTMwOVowJTENMAsGA1UEChMEZXRjZDEUMBIGA1UEAxMLZXRj\nZC1zZXJ2ZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQiIhBxTL7\nQ0rX9eIAu/l17ecoCrioGH+oxgrcfDuOD9ITqMXIoAoceGHXKhbRzNoOaznxgUuQ\nK1EgPf76XxroUehAb5cYL+P35jT1Ha+3K90CgdDNuRcFcvsr3GpMoUwpaoTVaTx3\nbo+ew6LEzP4jEhwzy+gqLHIloW4dfNlwc3eb1HAXZso3D48qnD15MF0ETCKKTPht\n7Mlw4xyQ2TdgLflELVxdzlnNWWuK78ozmnwiuWN8vI3Z2qCi2E1KFdxgDfEU5t0I\nd0USgyvmytNHqeqeDhVLbKQckMcrC7VGpSS5ulxIm+A9Gnu8UcCdSieXtJGdbQAF\noc+a9X8tXedBAgMBAAGjgYcwgYQwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQG\nCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFIhP\n3fM/mErTq7g/rQVxSHL/Trv6MCQGA1UdEQQdMBuCCG4yLnN0ZXZlgglsb2NhbGhv\nc3SHBH8AAAEwDQYJKoZIhvcNAQELBQADggEBAJSubCRiGsvhyHLxgWwsz8QXzYuh\ndJSE9h4C4BMq0lw9uhLWXwmOnJnZqelAKX5KiuIAbeuDYrueWoa/OSEZyd+8IREd\n2lvK/OwDGNVT9UijN4y4V54U9uhDdXVVVYfe+GHUBSMO+Ac92XcprFe4WfWVxQPa\npAOvLFbCSzSnCiAmTgOG4WeZUt6exaNSY1OWYP6f5ED1FP9Cvcgl6hFnyXwThjsd\nOLVoN03NQz4Cy9ZVvkwaUiiXvgND+tAUPzyF9XuwV1FuFn0b0Pr4P3k1+Y/fyfDI\n0B44u1ByY4WAOhwF8kZ1dPFsGDv8GGDOron131uY75jX8FJI1taY8D80kUU=\n-----END CERTIFICATE-----\n"
                },
                "etcd_server_key": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpQIBAAKCAQEA0IiIQcUy+0NK1/XiALv5de3nKAq4qBh/qMYK3Hw7jg/SE6jF\nyKAKHHhh1yoW0czaDms58YFLkCtRID3++l8a6FHoQG+XGC/j9+Y09R2vtyvdAoHQ\nzbkXBXL7K9xqTKFMKWqE1Wk8d26PnsOixMz+IxIcM8voKixyJaFuHXzZcHN3m9Rw\nF2bKNw+PKpw9eTBdBEwiikz4bezJcOMckNk3YC35RC1cXc5ZzVlriu/KM5p8Irlj\nfLyN2dqgothNShXcYA3xFObdCHdFEoMr5srTR6nqng4VS2ykHJDHKwu1RqUkubpc\nSJvgPRp7vFHAnUonl7SRnW0ABaHPmvV/LV3nQQIDAQABAoIBADmvWwnelBC/d6ev\n49nSJdrCeaww8w3E4SN9zSla0Fqm87Tufe/WnZVsk5wij3dv1G4iqT+uRYnXAbUK\nkUsPHfFgHwAcHk7ZiJVdwA6CLMZdwuBbqrgN2FlwihyC94DFKb1XMvGaD9j145LG\niXMpRa/L5bNKV6m668SPGFfd3oRlXL8w8X1dNtWGsc6VeeRXjTjxRvYSRz8tz1ux\nLLi6TOmpmfHR3PnbF7iDBJYIqFGaUV0oblsKrGyKZSx5Rb32VLDGwoyHeAPaBT4t\nEykZORbyQrWujwuEeeI2nfrP3iBAbEHllFqYE0lgaiyr6S+PHsanmnC2CyyOZPDo\nZEWHELECgYEA6BAYtcFFkQ3opRsY8yQ93ONRHuqxwoc+9vRW6WwYWSuL8Bd6Ruqo\ng/JaG0W4LVgEUtWn7uhQlsFT+PaB69pXQiUMIKQLb/S3zEsFjphwRFiA8A8hb0V/\neTFGs5BnAP3ScyfuaAOVyELZV0eRoj3hmcaRCw8jKnyR4Yzvmz9yzv0CgYEA5gsb\n+zQ+VolAkUceEGyQws0jEA8lFW4u+sfj0JvD2kQv4xWScFnMsgH9OOY8XdT7qeiZ\nmmAEqdKSsKuN8ZvbipU4TXp5KhGAj7HlKL+rZgXySvpzwydbj2UBaDYPvhGS5tuU\n0nm+4g6fBnnVNA5SOVHnK8gM+WFU7qv9fF3vhpUCgYEArFEHiC7zkTpavf7ZD/Kh\nXRwOaH6tcF0tDANzZfC2Q8BqMOW+DlrAtvmGnymuET2COGAeSvCGpur3h67D2nZO\nxPbtgm9NbtywfipW/gODmbx+QcN6eD2K4lsMvNlFIx9W3duQ0/uVhRbefEjQg0Cf\n/KfNnACphCrryCf247jBb6ECgYEA4IaFR/hkw5dwsprkCAm+fLM1fq4ZdsI1DkXc\n37W4Qad9ybk7VXcAJ9lzKn7k+nwvKVXB3f/LbWj+DXtTrjZ939PmwRBBhELS5O0v\nikcQ5iH1qyKprBcU8W8XIXxqfwuuAq7coVV8bizxH6P36Lf1nsaGx5+YsipCeDTb\n0u/oIcUCgYEAnsaIOCqRzaghZmJ0XpxG08ArQNnOjoZxeU6UMb3z965l9bW8rOmL\nDzNvZhrMOqBZChR1P/B00aRlV7CipYoE1RsGGELKuIWQYX74H01+2VETeg9VAhUX\nopu6cbzuWwxzGKj4HYQ9ts7ogK1Wzc0nzyuC7YjVsytRPQzZtcO1vno=\n-----END RSA PRIVATE KEY-----\n"
                },
                "id": {
                    "sensitive": false,
                    "type": "string",
                    "value": "2027ee7c7400b5c1ae248695c7b1ba71dd582679"
                },
                "kube_dns_service_ip": {
                    "sensitive": false,
                    "type": "string",
                    "value": "10.3.0.10"
                },
                "kubeconfig": {
                    "sensitive": false,
                    "type": "string",
                    "value": "apiVersion: v1\nkind: Config\nclusters:\n- name: local\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRZTMxdU9NTXFSV01Ma3NSWjRLZ2JCakFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURneApNakV6TURsYUZ3MHhPVEEwTURneE1qRXpNRGxhTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBrM1oKVlUwOU8rdlMvUkszNGxSdVlPcXZUOXdoNCtQZ3Ixb2pmVlVQaVZQVUx2VlVEbGp0a0NSTXBtenEyZXAvbGhGYQpCVXV6bGlIbnVGNGZKeng5ZDVxSEJnVEJZYnJEZjVwZGZWaHprMnlQeDViOWdwZm5RRjVDaUhJT0dnc1lyUkJ4Cm9DTEo2aUh3SUhtQi9BQ1ZOa0x3U0prcEN4ZVQrMXBKZS9ieDZPUHNacVdob25nUVBaNmFXdkRsQS8raE54QXMKeW95V0dFK0pmNkVuRHZlSk9ZVVczaHphVnEzSWdNV29XYjd1WFRXV001S2MyTXZYTlRtRE5QbVo5TUt3czZYWgpXOXNPNWxleUhhRTRhQ0RqR2MyZjVTSzhEaHY5LzMzTE1CV2FiSGM2QWhBdUQ0eFp6YjJwR3JHMFo5OFZaM1hPClhWZEJaaElDWWpqa2RUR3FHUUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVV1hlYWNOckhYT2oxcUh1aEJvMUx2RE04VEFvd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBSnhSUjB6V0NKTWVZc01wbWVreWlHVUxIM2lDNWYxRk90UFB1WnZTbkxsSitqZ2d0b2tLCitiVEV6RkNQWk44MWIwZFBRM09jT2RDdC9Oc3AvQTN6Q014cE1hNW0xbHo2czZyb0pka1lSMldMYkFmVjFPeUoKL0tQV1JRZllOeXBiNlAxNnFueGVLS0V0UENGbkVpT1BsbjFmNzAzMXgvQU85WDRtMEJJeTlHc1Vjd3JTaGJNWQpZYTFwZ3ROYVUxaFFrREJGUlBFVlRmcGJsWXllTW1tb0wzYmsxVldCTFFTUk90SEJDcFEzNmpqQ3JLZG5Ea2wzCndJcXpXVDY2YkhBMkVXSXh6MmduQXFQN3RLelY4SWdmVDBTRWR4d2M0dUVLVUsvT05rWjZOaUxWWGJXdnZ5M2cKeXNBTCtoQlZpVm1INjlIcEd2Q25Rb1JZVlB2TGVlMWRwczg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: kubelet\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lRU3hGY0JMK2cxekd2Vk9sU21JeENkekFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURneApNakV6TURsYUZ3MHhPVEEwTURneE1qRXpNRGxhTUNzeEZ6QVZCZ05WQkFvVERuTjVjM1JsYlRwdFlYTjBaWEp6Ck1SQXdEZ1lEVlFRREV3ZHJkV0psYkdWME1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0MKQVFFQTdOQVBqRDFYWHJJM1MvRmI2eG03MkRXb2ZXNktlUTNuS1k1SGhNZ1l1b1EzcERLdjFhSjZoeDJFbGhOdQpYdVV5clFYVFFmdUNLdlcwa2o2MVg4eWMrU2hFaUhTSkdqWGh5NUNJSisrb25lVzFrT3pHZFAzTTdFMTBBTlltCktPM1pWVEI1OWkzL0RZeWYxL1NJVlBiVVpmY212Wlk0RzQrU0NWS0RCNDU3cXVqMUNzMkFXaEFJV2M0cU8yLzEKemVSb0ZSenZOc2N4U3c1UVR2ZDFySERpdzN3b3NCeDlxS01NOG9QdmR2b0RwbjFBcEFOdEVmRVFjdExVUlE1bgpJRVZlanVveGlGdTV2aFhMb2dMTFhLalZVbnRIM1BKM0ZscElVT3lnaXpOcWZBUEVCczlSS1UvemdRbjJENHp5CmI0d0xUSExhbjBnWXJGV1RVamkwN3FHU0NRSURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWUQKVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdId1lEVlIwagpCQmd3Rm9BVVdYZWFjTnJIWE9qMXFIdWhCbzFMdkRNOFRBb3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQmhuCml5VDF1UUw3N2hKUExicHRoOHE0ZXpyYXBPWFZCZW9GS2VxU2FoeWpQTCtadGRrdkFNMmRSODNSUE1xTU5WOEkKTVRkbllNaUZ0UTRSSENuc0dlUEZ6R3Y0eW1ZdjF4ejNCRTVoaExqOVU3OEo5a0hiQ0t5THlNanJFd3RhU0tlWApTZWw1azFUMHc3aEhvQXBtUTR2ZGRFSUNoS2FyMml5akRjbE5salgwS3h2RVVvSCtwbVVxQXJZVjBnenk3eFR5ClEzdVQvc2lJQzliNXF1a1g0djJpbU9HSGtOcHVCbW91a3JPc2ZvaDE1b0UweDBrWUM2N0I0bElCOGkzTExJV2sKY1FEMWRpdnRTd3RzRTVyUEZ5dXZaY2t2SC83Y3JhbFRBNFUyMXNPdUpENU8yRFZWbXJSWnhJU3psVFIvMS8rRwpoYVlUR05GTWRaRzZtaU15a2xVPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBN05BUGpEMVhYckkzUy9GYjZ4bTcyRFdvZlc2S2VRM25LWTVIaE1nWXVvUTNwREt2CjFhSjZoeDJFbGhOdVh1VXlyUVhUUWZ1Q0t2VzBrajYxWDh5YytTaEVpSFNKR2pYaHk1Q0lKKytvbmVXMWtPekcKZFAzTTdFMTBBTlltS08zWlZUQjU5aTMvRFl5ZjEvU0lWUGJVWmZjbXZaWTRHNCtTQ1ZLREI0NTdxdWoxQ3MyQQpXaEFJV2M0cU8yLzF6ZVJvRlJ6dk5zY3hTdzVRVHZkMXJIRGl3M3dvc0J4OXFLTU04b1B2ZHZvRHBuMUFwQU50CkVmRVFjdExVUlE1bklFVmVqdW94aUZ1NXZoWExvZ0xMWEtqVlVudEgzUEozRmxwSVVPeWdpek5xZkFQRUJzOVIKS1UvemdRbjJENHp5YjR3TFRITGFuMGdZckZXVFVqaTA3cUdTQ1FJREFRQUJBb0lCQURlQ1pjS1h0bDBxSlRBVgorVmZZaG1HZDRrclVtSHpidDIzVVBndHY0K3dFaGc1bEd6WldpYVlXVXpmaWdpS1lVeEtmcE85NGh3Q082NjdFCktEdTJlSzBtdFRuUEp6d1BtVWZnTHlvOVVTY0I2MWQzU09XdmdGTjdyRTl0NHpBQTRNckpQQzFxaHJpa1YrdUYKRkZmbUs4OWk2Wi9URUgvVlhZUDE1V1RtRHpMMlNOakVmUGNCUDlqdk4rR0lyTENlS0o0eW5pVmJ3TW9IekdDTApVZkUxYkVjQktxT1lCMytGelpPdEh0dXdsdG1ERGRadGl1UFpyQjQrN2VRSE1jRXlVWFE1SFE2TFVNbURSamc0Ck1FWVNBRlJ0aUU5VlUzdTlyeUNxQVdjNi9wY2c3K2lWTWFUR0tJVHRtNjNZWDgwY3MzeW9DbkJMZlA5Q2dlNXIKSUhwOEdva0NnWUVBOHA4RmhITkhxbDFDOTRSM2xBRllIdytVOHVVLzJCb0lxOGk5UEpMRmx6WkxzY2p6TnAwWAo0RzkxNDR6a2xablQ4MWpybW13akh2TEhINkkxSXFZTjJIWGUyMkdabUlHbERnbFpoTnVDR0NHZTdaV0R5QlYrCnloQ0hHdDVxSzArK2RScVhuVjJTbWtCSVlwUVN3TjU2K0pyWDRnV2g5UEt2NzkrcFVpK1RPdXNDZ1lFQStkOEwKUHhGZm9odWZOeG9EeHQxRDF6c0E3a21Ray96SkpNMUtObjNtWlYvV2UyeE1wNXROb1ZhM056SDd5bmdWRUw1QgpTNlJjcUp4c3NOSVhWR2J6bHFjLzZJbTlQZG9WNCtaWUpQaWhsVUZ0ZEcySWtRNWVtRThiN2oyZ2xxQkwvWG1ECm56dCt2RGpTWFNIQk9UMnJUME5rN1RJeWJ0NmQvSHkxTXY0Sndkc0NnWUJOZEVyVW4rRFBHSHJhZmVXVzBGOEwKZTNQM253d2t0eHJ4akdJdFJrWGlJaWxFRm56ZWdJUXcyQ1J3Z25ndThpN2h6dzlYK3hHelBab29GU2FWYXlHYwphdlM4WUlvaVQ3RWJyQXh5QjRtZW5vMFlGOVU4T1BDREhZZWtJa0VPbHFTY3llS0JFSEJPNGhxNXJiL1c1cStuClVmZDlab0x2cWRKVTU3Z3NUcGZZQlFLQmdGQ1dxRmpwOEk4bkczMjVEVGpKU2tVVGlhUlE0NmxuSVRTV1pYWVgKdXdROUdiN3EyZnBBczVQeWxOcmZheGNORGJZOXRtK0FEa1p2VlByZWQ1bklMbzRMV1NoVnJFeFRselhPcCtVYwpyM2lsQm5sRGpvVkNQaTRmYmFHMERLUW9CUG8yZzhZS2VVQ1pqdmRzbUpZdWxwN1UzS3RId2s1UnpHQ1BsQjFqCkk2QjdBb0dBR0I4UktuT0Y3SnJyQS8zRDBpRWFCanJ3Wkl6ZStYcGgrTmIwaDlRY0JWcVJLNlJyL3N3c1hIVGMKVVMyWTVrRHNiV05pckQ3azZmVnZKYklKcysra0U5MHpld0ZOQXZTWjlmK1dSZGl1dGoyQURsSFduTjJvcW9ZMgpSbGlHbTZqdXU1bDVtVHVKaXEzWGtUREVZeEhtK3M5N2hvWmpraDRmaWVObTg5SkdVR1E9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\ncontexts:\n- context:\n    cluster: local\n    user: kubelet\n"
                },
                "kubelet_cert": {
                    "sensitive": false,
                    "type": "string",
                    "value": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lRU3hGY0JMK2cxekd2Vk9sU21JeENkekFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURneApNakV6TURsYUZ3MHhPVEEwTURneE1qRXpNRGxhTUNzeEZ6QVZCZ05WQkFvVERuTjVjM1JsYlRwdFlYTjBaWEp6Ck1SQXdEZ1lEVlFRREV3ZHJkV0psYkdWME1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0MKQVFFQTdOQVBqRDFYWHJJM1MvRmI2eG03MkRXb2ZXNktlUTNuS1k1SGhNZ1l1b1EzcERLdjFhSjZoeDJFbGhOdQpYdVV5clFYVFFmdUNLdlcwa2o2MVg4eWMrU2hFaUhTSkdqWGh5NUNJSisrb25lVzFrT3pHZFAzTTdFMTBBTlltCktPM1pWVEI1OWkzL0RZeWYxL1NJVlBiVVpmY212Wlk0RzQrU0NWS0RCNDU3cXVqMUNzMkFXaEFJV2M0cU8yLzEKemVSb0ZSenZOc2N4U3c1UVR2ZDFySERpdzN3b3NCeDlxS01NOG9QdmR2b0RwbjFBcEFOdEVmRVFjdExVUlE1bgpJRVZlanVveGlGdTV2aFhMb2dMTFhLalZVbnRIM1BKM0ZscElVT3lnaXpOcWZBUEVCczlSS1UvemdRbjJENHp5CmI0d0xUSExhbjBnWXJGV1RVamkwN3FHU0NRSURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWUQKVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdId1lEVlIwagpCQmd3Rm9BVVdYZWFjTnJIWE9qMXFIdWhCbzFMdkRNOFRBb3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQmhuCml5VDF1UUw3N2hKUExicHRoOHE0ZXpyYXBPWFZCZW9GS2VxU2FoeWpQTCtadGRrdkFNMmRSODNSUE1xTU5WOEkKTVRkbllNaUZ0UTRSSENuc0dlUEZ6R3Y0eW1ZdjF4ejNCRTVoaExqOVU3OEo5a0hiQ0t5THlNanJFd3RhU0tlWApTZWw1azFUMHc3aEhvQXBtUTR2ZGRFSUNoS2FyMml5akRjbE5salgwS3h2RVVvSCtwbVVxQXJZVjBnenk3eFR5ClEzdVQvc2lJQzliNXF1a1g0djJpbU9HSGtOcHVCbW91a3JPc2ZvaDE1b0UweDBrWUM2N0I0bElCOGkzTExJV2sKY1FEMWRpdnRTd3RzRTVyUEZ5dXZaY2t2SC83Y3JhbFRBNFUyMXNPdUpENU8yRFZWbXJSWnhJU3psVFIvMS8rRwpoYVlUR05GTWRaRzZtaU15a2xVPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
                },
                "kubelet_key": {
                    "sensitive": false,
                    "type": "string",
                    "value": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBN05BUGpEMVhYckkzUy9GYjZ4bTcyRFdvZlc2S2VRM25LWTVIaE1nWXVvUTNwREt2CjFhSjZoeDJFbGhOdVh1VXlyUVhUUWZ1Q0t2VzBrajYxWDh5YytTaEVpSFNKR2pYaHk1Q0lKKytvbmVXMWtPekcKZFAzTTdFMTBBTlltS08zWlZUQjU5aTMvRFl5ZjEvU0lWUGJVWmZjbXZaWTRHNCtTQ1ZLREI0NTdxdWoxQ3MyQQpXaEFJV2M0cU8yLzF6ZVJvRlJ6dk5zY3hTdzVRVHZkMXJIRGl3M3dvc0J4OXFLTU04b1B2ZHZvRHBuMUFwQU50CkVmRVFjdExVUlE1bklFVmVqdW94aUZ1NXZoWExvZ0xMWEtqVlVudEgzUEozRmxwSVVPeWdpek5xZkFQRUJzOVIKS1UvemdRbjJENHp5YjR3TFRITGFuMGdZckZXVFVqaTA3cUdTQ1FJREFRQUJBb0lCQURlQ1pjS1h0bDBxSlRBVgorVmZZaG1HZDRrclVtSHpidDIzVVBndHY0K3dFaGc1bEd6WldpYVlXVXpmaWdpS1lVeEtmcE85NGh3Q082NjdFCktEdTJlSzBtdFRuUEp6d1BtVWZnTHlvOVVTY0I2MWQzU09XdmdGTjdyRTl0NHpBQTRNckpQQzFxaHJpa1YrdUYKRkZmbUs4OWk2Wi9URUgvVlhZUDE1V1RtRHpMMlNOakVmUGNCUDlqdk4rR0lyTENlS0o0eW5pVmJ3TW9IekdDTApVZkUxYkVjQktxT1lCMytGelpPdEh0dXdsdG1ERGRadGl1UFpyQjQrN2VRSE1jRXlVWFE1SFE2TFVNbURSamc0Ck1FWVNBRlJ0aUU5VlUzdTlyeUNxQVdjNi9wY2c3K2lWTWFUR0tJVHRtNjNZWDgwY3MzeW9DbkJMZlA5Q2dlNXIKSUhwOEdva0NnWUVBOHA4RmhITkhxbDFDOTRSM2xBRllIdytVOHVVLzJCb0lxOGk5UEpMRmx6WkxzY2p6TnAwWAo0RzkxNDR6a2xablQ4MWpybW13akh2TEhINkkxSXFZTjJIWGUyMkdabUlHbERnbFpoTnVDR0NHZTdaV0R5QlYrCnloQ0hHdDVxSzArK2RScVhuVjJTbWtCSVlwUVN3TjU2K0pyWDRnV2g5UEt2NzkrcFVpK1RPdXNDZ1lFQStkOEwKUHhGZm9odWZOeG9EeHQxRDF6c0E3a21Ray96SkpNMUtObjNtWlYvV2UyeE1wNXROb1ZhM056SDd5bmdWRUw1QgpTNlJjcUp4c3NOSVhWR2J6bHFjLzZJbTlQZG9WNCtaWUpQaWhsVUZ0ZEcySWtRNWVtRThiN2oyZ2xxQkwvWG1ECm56dCt2RGpTWFNIQk9UMnJUME5rN1RJeWJ0NmQvSHkxTXY0Sndkc0NnWUJOZEVyVW4rRFBHSHJhZmVXVzBGOEwKZTNQM253d2t0eHJ4akdJdFJrWGlJaWxFRm56ZWdJUXcyQ1J3Z25ndThpN2h6dzlYK3hHelBab29GU2FWYXlHYwphdlM4WUlvaVQ3RWJyQXh5QjRtZW5vMFlGOVU4T1BDREhZZWtJa0VPbHFTY3llS0JFSEJPNGhxNXJiL1c1cStuClVmZDlab0x2cWRKVTU3Z3NUcGZZQlFLQmdGQ1dxRmpwOEk4bkczMjVEVGpKU2tVVGlhUlE0NmxuSVRTV1pYWVgKdXdROUdiN3EyZnBBczVQeWxOcmZheGNORGJZOXRtK0FEa1p2VlByZWQ1bklMbzRMV1NoVnJFeFRselhPcCtVYwpyM2lsQm5sRGpvVkNQaTRmYmFHMERLUW9CUG8yZzhZS2VVQ1pqdmRzbUpZdWxwN1UzS3RId2s1UnpHQ1BsQjFqCkk2QjdBb0dBR0I4UktuT0Y3SnJyQS8zRDBpRWFCanJ3Wkl6ZStYcGgrTmIwaDlRY0JWcVJLNlJyL3N3c1hIVGMKVVMyWTVrRHNiV05pckQ3azZmVnZKYklKcysra0U5MHpld0ZOQXZTWjlmK1dSZGl1dGoyQURsSFduTjJvcW9ZMgpSbGlHbTZqdXU1bDVtVHVKaXEzWGtUREVZeEhtK3M5N2hvWmpraDRmaWVObTg5SkdVR1E9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
                },
                "server": {
                    "sensitive": false,
                    "type": "string",
                    "value": "https://steve:443"
                },
                "user-kubeconfig": {
                    "sensitive": false,
                    "type": "string",
                    "value": "apiVersion: v1\nkind: Config\nclusters:\n- name: steve-cluster\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRZTMxdU9NTXFSV01Ma3NSWjRLZ2JCakFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURneApNakV6TURsYUZ3MHhPVEEwTURneE1qRXpNRGxhTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBrM1oKVlUwOU8rdlMvUkszNGxSdVlPcXZUOXdoNCtQZ3Ixb2pmVlVQaVZQVUx2VlVEbGp0a0NSTXBtenEyZXAvbGhGYQpCVXV6bGlIbnVGNGZKeng5ZDVxSEJnVEJZYnJEZjVwZGZWaHprMnlQeDViOWdwZm5RRjVDaUhJT0dnc1lyUkJ4Cm9DTEo2aUh3SUhtQi9BQ1ZOa0x3U0prcEN4ZVQrMXBKZS9ieDZPUHNacVdob25nUVBaNmFXdkRsQS8raE54QXMKeW95V0dFK0pmNkVuRHZlSk9ZVVczaHphVnEzSWdNV29XYjd1WFRXV001S2MyTXZYTlRtRE5QbVo5TUt3czZYWgpXOXNPNWxleUhhRTRhQ0RqR2MyZjVTSzhEaHY5LzMzTE1CV2FiSGM2QWhBdUQ0eFp6YjJwR3JHMFo5OFZaM1hPClhWZEJaaElDWWpqa2RUR3FHUUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVV1hlYWNOckhYT2oxcUh1aEJvMUx2RE04VEFvd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBSnhSUjB6V0NKTWVZc01wbWVreWlHVUxIM2lDNWYxRk90UFB1WnZTbkxsSitqZ2d0b2tLCitiVEV6RkNQWk44MWIwZFBRM09jT2RDdC9Oc3AvQTN6Q014cE1hNW0xbHo2czZyb0pka1lSMldMYkFmVjFPeUoKL0tQV1JRZllOeXBiNlAxNnFueGVLS0V0UENGbkVpT1BsbjFmNzAzMXgvQU85WDRtMEJJeTlHc1Vjd3JTaGJNWQpZYTFwZ3ROYVUxaFFrREJGUlBFVlRmcGJsWXllTW1tb0wzYmsxVldCTFFTUk90SEJDcFEzNmpqQ3JLZG5Ea2wzCndJcXpXVDY2YkhBMkVXSXh6MmduQXFQN3RLelY4SWdmVDBTRWR4d2M0dUVLVUsvT05rWjZOaUxWWGJXdnZ5M2cKeXNBTCtoQlZpVm1INjlIcEd2Q25Rb1JZVlB2TGVlMWRwczg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: steve-user\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lRU3hGY0JMK2cxekd2Vk9sU21JeENkekFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURneApNakV6TURsYUZ3MHhPVEEwTURneE1qRXpNRGxhTUNzeEZ6QVZCZ05WQkFvVERuTjVjM1JsYlRwdFlYTjBaWEp6Ck1SQXdEZ1lEVlFRREV3ZHJkV0psYkdWME1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0MKQVFFQTdOQVBqRDFYWHJJM1MvRmI2eG03MkRXb2ZXNktlUTNuS1k1SGhNZ1l1b1EzcERLdjFhSjZoeDJFbGhOdQpYdVV5clFYVFFmdUNLdlcwa2o2MVg4eWMrU2hFaUhTSkdqWGh5NUNJSisrb25lVzFrT3pHZFAzTTdFMTBBTlltCktPM1pWVEI1OWkzL0RZeWYxL1NJVlBiVVpmY212Wlk0RzQrU0NWS0RCNDU3cXVqMUNzMkFXaEFJV2M0cU8yLzEKemVSb0ZSenZOc2N4U3c1UVR2ZDFySERpdzN3b3NCeDlxS01NOG9QdmR2b0RwbjFBcEFOdEVmRVFjdExVUlE1bgpJRVZlanVveGlGdTV2aFhMb2dMTFhLalZVbnRIM1BKM0ZscElVT3lnaXpOcWZBUEVCczlSS1UvemdRbjJENHp5CmI0d0xUSExhbjBnWXJGV1RVamkwN3FHU0NRSURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWUQKVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdId1lEVlIwagpCQmd3Rm9BVVdYZWFjTnJIWE9qMXFIdWhCbzFMdkRNOFRBb3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQmhuCml5VDF1UUw3N2hKUExicHRoOHE0ZXpyYXBPWFZCZW9GS2VxU2FoeWpQTCtadGRrdkFNMmRSODNSUE1xTU5WOEkKTVRkbllNaUZ0UTRSSENuc0dlUEZ6R3Y0eW1ZdjF4ejNCRTVoaExqOVU3OEo5a0hiQ0t5THlNanJFd3RhU0tlWApTZWw1azFUMHc3aEhvQXBtUTR2ZGRFSUNoS2FyMml5akRjbE5salgwS3h2RVVvSCtwbVVxQXJZVjBnenk3eFR5ClEzdVQvc2lJQzliNXF1a1g0djJpbU9HSGtOcHVCbW91a3JPc2ZvaDE1b0UweDBrWUM2N0I0bElCOGkzTExJV2sKY1FEMWRpdnRTd3RzRTVyUEZ5dXZaY2t2SC83Y3JhbFRBNFUyMXNPdUpENU8yRFZWbXJSWnhJU3psVFIvMS8rRwpoYVlUR05GTWRaRzZtaU15a2xVPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBN05BUGpEMVhYckkzUy9GYjZ4bTcyRFdvZlc2S2VRM25LWTVIaE1nWXVvUTNwREt2CjFhSjZoeDJFbGhOdVh1VXlyUVhUUWZ1Q0t2VzBrajYxWDh5YytTaEVpSFNKR2pYaHk1Q0lKKytvbmVXMWtPekcKZFAzTTdFMTBBTlltS08zWlZUQjU5aTMvRFl5ZjEvU0lWUGJVWmZjbXZaWTRHNCtTQ1ZLREI0NTdxdWoxQ3MyQQpXaEFJV2M0cU8yLzF6ZVJvRlJ6dk5zY3hTdzVRVHZkMXJIRGl3M3dvc0J4OXFLTU04b1B2ZHZvRHBuMUFwQU50CkVmRVFjdExVUlE1bklFVmVqdW94aUZ1NXZoWExvZ0xMWEtqVlVudEgzUEozRmxwSVVPeWdpek5xZkFQRUJzOVIKS1UvemdRbjJENHp5YjR3TFRITGFuMGdZckZXVFVqaTA3cUdTQ1FJREFRQUJBb0lCQURlQ1pjS1h0bDBxSlRBVgorVmZZaG1HZDRrclVtSHpidDIzVVBndHY0K3dFaGc1bEd6WldpYVlXVXpmaWdpS1lVeEtmcE85NGh3Q082NjdFCktEdTJlSzBtdFRuUEp6d1BtVWZnTHlvOVVTY0I2MWQzU09XdmdGTjdyRTl0NHpBQTRNckpQQzFxaHJpa1YrdUYKRkZmbUs4OWk2Wi9URUgvVlhZUDE1V1RtRHpMMlNOakVmUGNCUDlqdk4rR0lyTENlS0o0eW5pVmJ3TW9IekdDTApVZkUxYkVjQktxT1lCMytGelpPdEh0dXdsdG1ERGRadGl1UFpyQjQrN2VRSE1jRXlVWFE1SFE2TFVNbURSamc0Ck1FWVNBRlJ0aUU5VlUzdTlyeUNxQVdjNi9wY2c3K2lWTWFUR0tJVHRtNjNZWDgwY3MzeW9DbkJMZlA5Q2dlNXIKSUhwOEdva0NnWUVBOHA4RmhITkhxbDFDOTRSM2xBRllIdytVOHVVLzJCb0lxOGk5UEpMRmx6WkxzY2p6TnAwWAo0RzkxNDR6a2xablQ4MWpybW13akh2TEhINkkxSXFZTjJIWGUyMkdabUlHbERnbFpoTnVDR0NHZTdaV0R5QlYrCnloQ0hHdDVxSzArK2RScVhuVjJTbWtCSVlwUVN3TjU2K0pyWDRnV2g5UEt2NzkrcFVpK1RPdXNDZ1lFQStkOEwKUHhGZm9odWZOeG9EeHQxRDF6c0E3a21Ray96SkpNMUtObjNtWlYvV2UyeE1wNXROb1ZhM056SDd5bmdWRUw1QgpTNlJjcUp4c3NOSVhWR2J6bHFjLzZJbTlQZG9WNCtaWUpQaWhsVUZ0ZEcySWtRNWVtRThiN2oyZ2xxQkwvWG1ECm56dCt2RGpTWFNIQk9UMnJUME5rN1RJeWJ0NmQvSHkxTXY0Sndkc0NnWUJOZEVyVW4rRFBHSHJhZmVXVzBGOEwKZTNQM253d2t0eHJ4akdJdFJrWGlJaWxFRm56ZWdJUXcyQ1J3Z25ndThpN2h6dzlYK3hHelBab29GU2FWYXlHYwphdlM4WUlvaVQ3RWJyQXh5QjRtZW5vMFlGOVU4T1BDREhZZWtJa0VPbHFTY3llS0JFSEJPNGhxNXJiL1c1cStuClVmZDlab0x2cWRKVTU3Z3NUcGZZQlFLQmdGQ1dxRmpwOEk4bkczMjVEVGpKU2tVVGlhUlE0NmxuSVRTV1pYWVgKdXdROUdiN3EyZnBBczVQeWxOcmZheGNORGJZOXRtK0FEa1p2VlByZWQ1bklMbzRMV1NoVnJFeFRselhPcCtVYwpyM2lsQm5sRGpvVkNQaTRmYmFHMERLUW9CUG8yZzhZS2VVQ1pqdmRzbUpZdWxwN1UzS3RId2s1UnpHQ1BsQjFqCkk2QjdBb0dBR0I4UktuT0Y3SnJyQS8zRDBpRWFCanJ3Wkl6ZStYcGgrTmIwaDlRY0JWcVJLNlJyL3N3c1hIVGMKVVMyWTVrRHNiV05pckQ3azZmVnZKYklKcysra0U5MHpld0ZOQXZTWjlmK1dSZGl1dGoyQURsSFduTjJvcW9ZMgpSbGlHbTZqdXU1bDVtVHVKaXEzWGtUREVZeEhtK3M5N2hvWmpraDRmaWVObTg5SkdVR1E9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\ncontexts:\n- name: steve-context\n  context:\n    cluster: steve-cluster\n    user: steve-user\n"
                }
            },
            "resources": {
                "data.template_file.kubeconfig": {
                    "type": "template_file",
                    "depends_on": [
                        "tls_locally_signed_cert.kubelet",
                        "tls_private_key.kubelet",
                        "tls_self_signed_cert.kube-ca.*"
                    ],
                    "primary": {
                        "id": "70b4ee1de890646ab3d0e80472b4a547a446f4e31a68ff57e0b19fbb0e421636",
                        "attributes": {
                            "id": "70b4ee1de890646ab3d0e80472b4a547a446f4e31a68ff57e0b19fbb0e421636",
                            "rendered": "apiVersion: v1\nkind: Config\nclusters:\n- name: local\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRZTMxdU9NTXFSV01Ma3NSWjRLZ2JCakFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURneApNakV6TURsYUZ3MHhPVEEwTURneE1qRXpNRGxhTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBrM1oKVlUwOU8rdlMvUkszNGxSdVlPcXZUOXdoNCtQZ3Ixb2pmVlVQaVZQVUx2VlVEbGp0a0NSTXBtenEyZXAvbGhGYQpCVXV6bGlIbnVGNGZKeng5ZDVxSEJnVEJZYnJEZjVwZGZWaHprMnlQeDViOWdwZm5RRjVDaUhJT0dnc1lyUkJ4Cm9DTEo2aUh3SUhtQi9BQ1ZOa0x3U0prcEN4ZVQrMXBKZS9ieDZPUHNacVdob25nUVBaNmFXdkRsQS8raE54QXMKeW95V0dFK0pmNkVuRHZlSk9ZVVczaHphVnEzSWdNV29XYjd1WFRXV001S2MyTXZYTlRtRE5QbVo5TUt3czZYWgpXOXNPNWxleUhhRTRhQ0RqR2MyZjVTSzhEaHY5LzMzTE1CV2FiSGM2QWhBdUQ0eFp6YjJwR3JHMFo5OFZaM1hPClhWZEJaaElDWWpqa2RUR3FHUUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVV1hlYWNOckhYT2oxcUh1aEJvMUx2RE04VEFvd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBSnhSUjB6V0NKTWVZc01wbWVreWlHVUxIM2lDNWYxRk90UFB1WnZTbkxsSitqZ2d0b2tLCitiVEV6RkNQWk44MWIwZFBRM09jT2RDdC9Oc3AvQTN6Q014cE1hNW0xbHo2czZyb0pka1lSMldMYkFmVjFPeUoKL0tQV1JRZllOeXBiNlAxNnFueGVLS0V0UENGbkVpT1BsbjFmNzAzMXgvQU85WDRtMEJJeTlHc1Vjd3JTaGJNWQpZYTFwZ3ROYVUxaFFrREJGUlBFVlRmcGJsWXllTW1tb0wzYmsxVldCTFFTUk90SEJDcFEzNmpqQ3JLZG5Ea2wzCndJcXpXVDY2YkhBMkVXSXh6MmduQXFQN3RLelY4SWdmVDBTRWR4d2M0dUVLVUsvT05rWjZOaUxWWGJXdnZ5M2cKeXNBTCtoQlZpVm1INjlIcEd2Q25Rb1JZVlB2TGVlMWRwczg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: kubelet\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lRU3hGY0JMK2cxekd2Vk9sU21JeENkekFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURneApNakV6TURsYUZ3MHhPVEEwTURneE1qRXpNRGxhTUNzeEZ6QVZCZ05WQkFvVERuTjVjM1JsYlRwdFlYTjBaWEp6Ck1SQXdEZ1lEVlFRREV3ZHJkV0psYkdWME1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0MKQVFFQTdOQVBqRDFYWHJJM1MvRmI2eG03MkRXb2ZXNktlUTNuS1k1SGhNZ1l1b1EzcERLdjFhSjZoeDJFbGhOdQpYdVV5clFYVFFmdUNLdlcwa2o2MVg4eWMrU2hFaUhTSkdqWGh5NUNJSisrb25lVzFrT3pHZFAzTTdFMTBBTlltCktPM1pWVEI1OWkzL0RZeWYxL1NJVlBiVVpmY212Wlk0RzQrU0NWS0RCNDU3cXVqMUNzMkFXaEFJV2M0cU8yLzEKemVSb0ZSenZOc2N4U3c1UVR2ZDFySERpdzN3b3NCeDlxS01NOG9QdmR2b0RwbjFBcEFOdEVmRVFjdExVUlE1bgpJRVZlanVveGlGdTV2aFhMb2dMTFhLalZVbnRIM1BKM0ZscElVT3lnaXpOcWZBUEVCczlSS1UvemdRbjJENHp5CmI0d0xUSExhbjBnWXJGV1RVamkwN3FHU0NRSURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWUQKVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdId1lEVlIwagpCQmd3Rm9BVVdYZWFjTnJIWE9qMXFIdWhCbzFMdkRNOFRBb3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQmhuCml5VDF1UUw3N2hKUExicHRoOHE0ZXpyYXBPWFZCZW9GS2VxU2FoeWpQTCtadGRrdkFNMmRSODNSUE1xTU5WOEkKTVRkbllNaUZ0UTRSSENuc0dlUEZ6R3Y0eW1ZdjF4ejNCRTVoaExqOVU3OEo5a0hiQ0t5THlNanJFd3RhU0tlWApTZWw1azFUMHc3aEhvQXBtUTR2ZGRFSUNoS2FyMml5akRjbE5salgwS3h2RVVvSCtwbVVxQXJZVjBnenk3eFR5ClEzdVQvc2lJQzliNXF1a1g0djJpbU9HSGtOcHVCbW91a3JPc2ZvaDE1b0UweDBrWUM2N0I0bElCOGkzTExJV2sKY1FEMWRpdnRTd3RzRTVyUEZ5dXZaY2t2SC83Y3JhbFRBNFUyMXNPdUpENU8yRFZWbXJSWnhJU3psVFIvMS8rRwpoYVlUR05GTWRaRzZtaU15a2xVPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBN05BUGpEMVhYckkzUy9GYjZ4bTcyRFdvZlc2S2VRM25LWTVIaE1nWXVvUTNwREt2CjFhSjZoeDJFbGhOdVh1VXlyUVhUUWZ1Q0t2VzBrajYxWDh5YytTaEVpSFNKR2pYaHk1Q0lKKytvbmVXMWtPekcKZFAzTTdFMTBBTlltS08zWlZUQjU5aTMvRFl5ZjEvU0lWUGJVWmZjbXZaWTRHNCtTQ1ZLREI0NTdxdWoxQ3MyQQpXaEFJV2M0cU8yLzF6ZVJvRlJ6dk5zY3hTdzVRVHZkMXJIRGl3M3dvc0J4OXFLTU04b1B2ZHZvRHBuMUFwQU50CkVmRVFjdExVUlE1bklFVmVqdW94aUZ1NXZoWExvZ0xMWEtqVlVudEgzUEozRmxwSVVPeWdpek5xZkFQRUJzOVIKS1UvemdRbjJENHp5YjR3TFRITGFuMGdZckZXVFVqaTA3cUdTQ1FJREFRQUJBb0lCQURlQ1pjS1h0bDBxSlRBVgorVmZZaG1HZDRrclVtSHpidDIzVVBndHY0K3dFaGc1bEd6WldpYVlXVXpmaWdpS1lVeEtmcE85NGh3Q082NjdFCktEdTJlSzBtdFRuUEp6d1BtVWZnTHlvOVVTY0I2MWQzU09XdmdGTjdyRTl0NHpBQTRNckpQQzFxaHJpa1YrdUYKRkZmbUs4OWk2Wi9URUgvVlhZUDE1V1RtRHpMMlNOakVmUGNCUDlqdk4rR0lyTENlS0o0eW5pVmJ3TW9IekdDTApVZkUxYkVjQktxT1lCMytGelpPdEh0dXdsdG1ERGRadGl1UFpyQjQrN2VRSE1jRXlVWFE1SFE2TFVNbURSamc0Ck1FWVNBRlJ0aUU5VlUzdTlyeUNxQVdjNi9wY2c3K2lWTWFUR0tJVHRtNjNZWDgwY3MzeW9DbkJMZlA5Q2dlNXIKSUhwOEdva0NnWUVBOHA4RmhITkhxbDFDOTRSM2xBRllIdytVOHVVLzJCb0lxOGk5UEpMRmx6WkxzY2p6TnAwWAo0RzkxNDR6a2xablQ4MWpybW13akh2TEhINkkxSXFZTjJIWGUyMkdabUlHbERnbFpoTnVDR0NHZTdaV0R5QlYrCnloQ0hHdDVxSzArK2RScVhuVjJTbWtCSVlwUVN3TjU2K0pyWDRnV2g5UEt2NzkrcFVpK1RPdXNDZ1lFQStkOEwKUHhGZm9odWZOeG9EeHQxRDF6c0E3a21Ray96SkpNMUtObjNtWlYvV2UyeE1wNXROb1ZhM056SDd5bmdWRUw1QgpTNlJjcUp4c3NOSVhWR2J6bHFjLzZJbTlQZG9WNCtaWUpQaWhsVUZ0ZEcySWtRNWVtRThiN2oyZ2xxQkwvWG1ECm56dCt2RGpTWFNIQk9UMnJUME5rN1RJeWJ0NmQvSHkxTXY0Sndkc0NnWUJOZEVyVW4rRFBHSHJhZmVXVzBGOEwKZTNQM253d2t0eHJ4akdJdFJrWGlJaWxFRm56ZWdJUXcyQ1J3Z25ndThpN2h6dzlYK3hHelBab29GU2FWYXlHYwphdlM4WUlvaVQ3RWJyQXh5QjRtZW5vMFlGOVU4T1BDREhZZWtJa0VPbHFTY3llS0JFSEJPNGhxNXJiL1c1cStuClVmZDlab0x2cWRKVTU3Z3NUcGZZQlFLQmdGQ1dxRmpwOEk4bkczMjVEVGpKU2tVVGlhUlE0NmxuSVRTV1pYWVgKdXdROUdiN3EyZnBBczVQeWxOcmZheGNORGJZOXRtK0FEa1p2VlByZWQ1bklMbzRMV1NoVnJFeFRselhPcCtVYwpyM2lsQm5sRGpvVkNQaTRmYmFHMERLUW9CUG8yZzhZS2VVQ1pqdmRzbUpZdWxwN1UzS3RId2s1UnpHQ1BsQjFqCkk2QjdBb0dBR0I4UktuT0Y3SnJyQS8zRDBpRWFCanJ3Wkl6ZStYcGgrTmIwaDlRY0JWcVJLNlJyL3N3c1hIVGMKVVMyWTVrRHNiV05pckQ3azZmVnZKYklKcysra0U5MHpld0ZOQXZTWjlmK1dSZGl1dGoyQURsSFduTjJvcW9ZMgpSbGlHbTZqdXU1bDVtVHVKaXEzWGtUREVZeEhtK3M5N2hvWmpraDRmaWVObTg5SkdVR1E9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\ncontexts:\n- context:\n    cluster: local\n    user: kubelet\n",
                            "template": "apiVersion: v1\nkind: Config\nclusters:\n- name: local\n  cluster:\n    server: ${server}\n    certificate-authority-data: ${ca_cert}\nusers:\n- name: kubelet\n  user:\n    client-certificate-data: ${kubelet_cert}\n    client-key-data: ${kubelet_key}\ncontexts:\n- context:\n    cluster: local\n    user: kubelet\n",
                            "vars.%": "4",
                            "vars.ca_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRZTMxdU9NTXFSV01Ma3NSWjRLZ2JCakFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURneApNakV6TURsYUZ3MHhPVEEwTURneE1qRXpNRGxhTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBrM1oKVlUwOU8rdlMvUkszNGxSdVlPcXZUOXdoNCtQZ3Ixb2pmVlVQaVZQVUx2VlVEbGp0a0NSTXBtenEyZXAvbGhGYQpCVXV6bGlIbnVGNGZKeng5ZDVxSEJnVEJZYnJEZjVwZGZWaHprMnlQeDViOWdwZm5RRjVDaUhJT0dnc1lyUkJ4Cm9DTEo2aUh3SUhtQi9BQ1ZOa0x3U0prcEN4ZVQrMXBKZS9ieDZPUHNacVdob25nUVBaNmFXdkRsQS8raE54QXMKeW95V0dFK0pmNkVuRHZlSk9ZVVczaHphVnEzSWdNV29XYjd1WFRXV001S2MyTXZYTlRtRE5QbVo5TUt3czZYWgpXOXNPNWxleUhhRTRhQ0RqR2MyZjVTSzhEaHY5LzMzTE1CV2FiSGM2QWhBdUQ0eFp6YjJwR3JHMFo5OFZaM1hPClhWZEJaaElDWWpqa2RUR3FHUUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVV1hlYWNOckhYT2oxcUh1aEJvMUx2RE04VEFvd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBSnhSUjB6V0NKTWVZc01wbWVreWlHVUxIM2lDNWYxRk90UFB1WnZTbkxsSitqZ2d0b2tLCitiVEV6RkNQWk44MWIwZFBRM09jT2RDdC9Oc3AvQTN6Q014cE1hNW0xbHo2czZyb0pka1lSMldMYkFmVjFPeUoKL0tQV1JRZllOeXBiNlAxNnFueGVLS0V0UENGbkVpT1BsbjFmNzAzMXgvQU85WDRtMEJJeTlHc1Vjd3JTaGJNWQpZYTFwZ3ROYVUxaFFrREJGUlBFVlRmcGJsWXllTW1tb0wzYmsxVldCTFFTUk90SEJDcFEzNmpqQ3JLZG5Ea2wzCndJcXpXVDY2YkhBMkVXSXh6MmduQXFQN3RLelY4SWdmVDBTRWR4d2M0dUVLVUsvT05rWjZOaUxWWGJXdnZ5M2cKeXNBTCtoQlZpVm1INjlIcEd2Q25Rb1JZVlB2TGVlMWRwczg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
                            "vars.kubelet_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lRU3hGY0JMK2cxekd2Vk9sU21JeENkekFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURneApNakV6TURsYUZ3MHhPVEEwTURneE1qRXpNRGxhTUNzeEZ6QVZCZ05WQkFvVERuTjVjM1JsYlRwdFlYTjBaWEp6Ck1SQXdEZ1lEVlFRREV3ZHJkV0psYkdWME1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0MKQVFFQTdOQVBqRDFYWHJJM1MvRmI2eG03MkRXb2ZXNktlUTNuS1k1SGhNZ1l1b1EzcERLdjFhSjZoeDJFbGhOdQpYdVV5clFYVFFmdUNLdlcwa2o2MVg4eWMrU2hFaUhTSkdqWGh5NUNJSisrb25lVzFrT3pHZFAzTTdFMTBBTlltCktPM1pWVEI1OWkzL0RZeWYxL1NJVlBiVVpmY212Wlk0RzQrU0NWS0RCNDU3cXVqMUNzMkFXaEFJV2M0cU8yLzEKemVSb0ZSenZOc2N4U3c1UVR2ZDFySERpdzN3b3NCeDlxS01NOG9QdmR2b0RwbjFBcEFOdEVmRVFjdExVUlE1bgpJRVZlanVveGlGdTV2aFhMb2dMTFhLalZVbnRIM1BKM0ZscElVT3lnaXpOcWZBUEVCczlSS1UvemdRbjJENHp5CmI0d0xUSExhbjBnWXJGV1RVamkwN3FHU0NRSURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWUQKVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdId1lEVlIwagpCQmd3Rm9BVVdYZWFjTnJIWE9qMXFIdWhCbzFMdkRNOFRBb3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQmhuCml5VDF1UUw3N2hKUExicHRoOHE0ZXpyYXBPWFZCZW9GS2VxU2FoeWpQTCtadGRrdkFNMmRSODNSUE1xTU5WOEkKTVRkbllNaUZ0UTRSSENuc0dlUEZ6R3Y0eW1ZdjF4ejNCRTVoaExqOVU3OEo5a0hiQ0t5THlNanJFd3RhU0tlWApTZWw1azFUMHc3aEhvQXBtUTR2ZGRFSUNoS2FyMml5akRjbE5salgwS3h2RVVvSCtwbVVxQXJZVjBnenk3eFR5ClEzdVQvc2lJQzliNXF1a1g0djJpbU9HSGtOcHVCbW91a3JPc2ZvaDE1b0UweDBrWUM2N0I0bElCOGkzTExJV2sKY1FEMWRpdnRTd3RzRTVyUEZ5dXZaY2t2SC83Y3JhbFRBNFUyMXNPdUpENU8yRFZWbXJSWnhJU3psVFIvMS8rRwpoYVlUR05GTWRaRzZtaU15a2xVPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
                            "vars.kubelet_key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBN05BUGpEMVhYckkzUy9GYjZ4bTcyRFdvZlc2S2VRM25LWTVIaE1nWXVvUTNwREt2CjFhSjZoeDJFbGhOdVh1VXlyUVhUUWZ1Q0t2VzBrajYxWDh5YytTaEVpSFNKR2pYaHk1Q0lKKytvbmVXMWtPekcKZFAzTTdFMTBBTlltS08zWlZUQjU5aTMvRFl5ZjEvU0lWUGJVWmZjbXZaWTRHNCtTQ1ZLREI0NTdxdWoxQ3MyQQpXaEFJV2M0cU8yLzF6ZVJvRlJ6dk5zY3hTdzVRVHZkMXJIRGl3M3dvc0J4OXFLTU04b1B2ZHZvRHBuMUFwQU50CkVmRVFjdExVUlE1bklFVmVqdW94aUZ1NXZoWExvZ0xMWEtqVlVudEgzUEozRmxwSVVPeWdpek5xZkFQRUJzOVIKS1UvemdRbjJENHp5YjR3TFRITGFuMGdZckZXVFVqaTA3cUdTQ1FJREFRQUJBb0lCQURlQ1pjS1h0bDBxSlRBVgorVmZZaG1HZDRrclVtSHpidDIzVVBndHY0K3dFaGc1bEd6WldpYVlXVXpmaWdpS1lVeEtmcE85NGh3Q082NjdFCktEdTJlSzBtdFRuUEp6d1BtVWZnTHlvOVVTY0I2MWQzU09XdmdGTjdyRTl0NHpBQTRNckpQQzFxaHJpa1YrdUYKRkZmbUs4OWk2Wi9URUgvVlhZUDE1V1RtRHpMMlNOakVmUGNCUDlqdk4rR0lyTENlS0o0eW5pVmJ3TW9IekdDTApVZkUxYkVjQktxT1lCMytGelpPdEh0dXdsdG1ERGRadGl1UFpyQjQrN2VRSE1jRXlVWFE1SFE2TFVNbURSamc0Ck1FWVNBRlJ0aUU5VlUzdTlyeUNxQVdjNi9wY2c3K2lWTWFUR0tJVHRtNjNZWDgwY3MzeW9DbkJMZlA5Q2dlNXIKSUhwOEdva0NnWUVBOHA4RmhITkhxbDFDOTRSM2xBRllIdytVOHVVLzJCb0lxOGk5UEpMRmx6WkxzY2p6TnAwWAo0RzkxNDR6a2xablQ4MWpybW13akh2TEhINkkxSXFZTjJIWGUyMkdabUlHbERnbFpoTnVDR0NHZTdaV0R5QlYrCnloQ0hHdDVxSzArK2RScVhuVjJTbWtCSVlwUVN3TjU2K0pyWDRnV2g5UEt2NzkrcFVpK1RPdXNDZ1lFQStkOEwKUHhGZm9odWZOeG9EeHQxRDF6c0E3a21Ray96SkpNMUtObjNtWlYvV2UyeE1wNXROb1ZhM056SDd5bmdWRUw1QgpTNlJjcUp4c3NOSVhWR2J6bHFjLzZJbTlQZG9WNCtaWUpQaWhsVUZ0ZEcySWtRNWVtRThiN2oyZ2xxQkwvWG1ECm56dCt2RGpTWFNIQk9UMnJUME5rN1RJeWJ0NmQvSHkxTXY0Sndkc0NnWUJOZEVyVW4rRFBHSHJhZmVXVzBGOEwKZTNQM253d2t0eHJ4akdJdFJrWGlJaWxFRm56ZWdJUXcyQ1J3Z25ndThpN2h6dzlYK3hHelBab29GU2FWYXlHYwphdlM4WUlvaVQ3RWJyQXh5QjRtZW5vMFlGOVU4T1BDREhZZWtJa0VPbHFTY3llS0JFSEJPNGhxNXJiL1c1cStuClVmZDlab0x2cWRKVTU3Z3NUcGZZQlFLQmdGQ1dxRmpwOEk4bkczMjVEVGpKU2tVVGlhUlE0NmxuSVRTV1pYWVgKdXdROUdiN3EyZnBBczVQeWxOcmZheGNORGJZOXRtK0FEa1p2VlByZWQ1bklMbzRMV1NoVnJFeFRselhPcCtVYwpyM2lsQm5sRGpvVkNQaTRmYmFHMERLUW9CUG8yZzhZS2VVQ1pqdmRzbUpZdWxwN1UzS3RId2s1UnpHQ1BsQjFqCkk2QjdBb0dBR0I4UktuT0Y3SnJyQS8zRDBpRWFCanJ3Wkl6ZStYcGgrTmIwaDlRY0JWcVJLNlJyL3N3c1hIVGMKVVMyWTVrRHNiV05pckQ3azZmVnZKYklKcysra0U5MHpld0ZOQXZTWjlmK1dSZGl1dGoyQURsSFduTjJvcW9ZMgpSbGlHbTZqdXU1bDVtVHVKaXEzWGtUREVZeEhtK3M5N2hvWmpraDRmaWVObTg5SkdVR1E9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
                            "vars.server": "https://steve:443"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.user-kubeconfig": {
                    "type": "template_file",
                    "depends_on": [
                        "tls_locally_signed_cert.kubelet",
                        "tls_private_key.kubelet",
                        "tls_self_signed_cert.kube-ca.*"
                    ],
                    "primary": {
                        "id": "5841128f2b0876afa88edb6b9d786d28997cf1f03d940617991a1bdb53d88efa",
                        "attributes": {
                            "id": "5841128f2b0876afa88edb6b9d786d28997cf1f03d940617991a1bdb53d88efa",
                            "rendered": "apiVersion: v1\nkind: Config\nclusters:\n- name: steve-cluster\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRZTMxdU9NTXFSV01Ma3NSWjRLZ2JCakFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURneApNakV6TURsYUZ3MHhPVEEwTURneE1qRXpNRGxhTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBrM1oKVlUwOU8rdlMvUkszNGxSdVlPcXZUOXdoNCtQZ3Ixb2pmVlVQaVZQVUx2VlVEbGp0a0NSTXBtenEyZXAvbGhGYQpCVXV6bGlIbnVGNGZKeng5ZDVxSEJnVEJZYnJEZjVwZGZWaHprMnlQeDViOWdwZm5RRjVDaUhJT0dnc1lyUkJ4Cm9DTEo2aUh3SUhtQi9BQ1ZOa0x3U0prcEN4ZVQrMXBKZS9ieDZPUHNacVdob25nUVBaNmFXdkRsQS8raE54QXMKeW95V0dFK0pmNkVuRHZlSk9ZVVczaHphVnEzSWdNV29XYjd1WFRXV001S2MyTXZYTlRtRE5QbVo5TUt3czZYWgpXOXNPNWxleUhhRTRhQ0RqR2MyZjVTSzhEaHY5LzMzTE1CV2FiSGM2QWhBdUQ0eFp6YjJwR3JHMFo5OFZaM1hPClhWZEJaaElDWWpqa2RUR3FHUUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVV1hlYWNOckhYT2oxcUh1aEJvMUx2RE04VEFvd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBSnhSUjB6V0NKTWVZc01wbWVreWlHVUxIM2lDNWYxRk90UFB1WnZTbkxsSitqZ2d0b2tLCitiVEV6RkNQWk44MWIwZFBRM09jT2RDdC9Oc3AvQTN6Q014cE1hNW0xbHo2czZyb0pka1lSMldMYkFmVjFPeUoKL0tQV1JRZllOeXBiNlAxNnFueGVLS0V0UENGbkVpT1BsbjFmNzAzMXgvQU85WDRtMEJJeTlHc1Vjd3JTaGJNWQpZYTFwZ3ROYVUxaFFrREJGUlBFVlRmcGJsWXllTW1tb0wzYmsxVldCTFFTUk90SEJDcFEzNmpqQ3JLZG5Ea2wzCndJcXpXVDY2YkhBMkVXSXh6MmduQXFQN3RLelY4SWdmVDBTRWR4d2M0dUVLVUsvT05rWjZOaUxWWGJXdnZ5M2cKeXNBTCtoQlZpVm1INjlIcEd2Q25Rb1JZVlB2TGVlMWRwczg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: steve-user\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lRU3hGY0JMK2cxekd2Vk9sU21JeENkekFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURneApNakV6TURsYUZ3MHhPVEEwTURneE1qRXpNRGxhTUNzeEZ6QVZCZ05WQkFvVERuTjVjM1JsYlRwdFlYTjBaWEp6Ck1SQXdEZ1lEVlFRREV3ZHJkV0psYkdWME1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0MKQVFFQTdOQVBqRDFYWHJJM1MvRmI2eG03MkRXb2ZXNktlUTNuS1k1SGhNZ1l1b1EzcERLdjFhSjZoeDJFbGhOdQpYdVV5clFYVFFmdUNLdlcwa2o2MVg4eWMrU2hFaUhTSkdqWGh5NUNJSisrb25lVzFrT3pHZFAzTTdFMTBBTlltCktPM1pWVEI1OWkzL0RZeWYxL1NJVlBiVVpmY212Wlk0RzQrU0NWS0RCNDU3cXVqMUNzMkFXaEFJV2M0cU8yLzEKemVSb0ZSenZOc2N4U3c1UVR2ZDFySERpdzN3b3NCeDlxS01NOG9QdmR2b0RwbjFBcEFOdEVmRVFjdExVUlE1bgpJRVZlanVveGlGdTV2aFhMb2dMTFhLalZVbnRIM1BKM0ZscElVT3lnaXpOcWZBUEVCczlSS1UvemdRbjJENHp5CmI0d0xUSExhbjBnWXJGV1RVamkwN3FHU0NRSURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWUQKVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdId1lEVlIwagpCQmd3Rm9BVVdYZWFjTnJIWE9qMXFIdWhCbzFMdkRNOFRBb3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQmhuCml5VDF1UUw3N2hKUExicHRoOHE0ZXpyYXBPWFZCZW9GS2VxU2FoeWpQTCtadGRrdkFNMmRSODNSUE1xTU5WOEkKTVRkbllNaUZ0UTRSSENuc0dlUEZ6R3Y0eW1ZdjF4ejNCRTVoaExqOVU3OEo5a0hiQ0t5THlNanJFd3RhU0tlWApTZWw1azFUMHc3aEhvQXBtUTR2ZGRFSUNoS2FyMml5akRjbE5salgwS3h2RVVvSCtwbVVxQXJZVjBnenk3eFR5ClEzdVQvc2lJQzliNXF1a1g0djJpbU9HSGtOcHVCbW91a3JPc2ZvaDE1b0UweDBrWUM2N0I0bElCOGkzTExJV2sKY1FEMWRpdnRTd3RzRTVyUEZ5dXZaY2t2SC83Y3JhbFRBNFUyMXNPdUpENU8yRFZWbXJSWnhJU3psVFIvMS8rRwpoYVlUR05GTWRaRzZtaU15a2xVPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBN05BUGpEMVhYckkzUy9GYjZ4bTcyRFdvZlc2S2VRM25LWTVIaE1nWXVvUTNwREt2CjFhSjZoeDJFbGhOdVh1VXlyUVhUUWZ1Q0t2VzBrajYxWDh5YytTaEVpSFNKR2pYaHk1Q0lKKytvbmVXMWtPekcKZFAzTTdFMTBBTlltS08zWlZUQjU5aTMvRFl5ZjEvU0lWUGJVWmZjbXZaWTRHNCtTQ1ZLREI0NTdxdWoxQ3MyQQpXaEFJV2M0cU8yLzF6ZVJvRlJ6dk5zY3hTdzVRVHZkMXJIRGl3M3dvc0J4OXFLTU04b1B2ZHZvRHBuMUFwQU50CkVmRVFjdExVUlE1bklFVmVqdW94aUZ1NXZoWExvZ0xMWEtqVlVudEgzUEozRmxwSVVPeWdpek5xZkFQRUJzOVIKS1UvemdRbjJENHp5YjR3TFRITGFuMGdZckZXVFVqaTA3cUdTQ1FJREFRQUJBb0lCQURlQ1pjS1h0bDBxSlRBVgorVmZZaG1HZDRrclVtSHpidDIzVVBndHY0K3dFaGc1bEd6WldpYVlXVXpmaWdpS1lVeEtmcE85NGh3Q082NjdFCktEdTJlSzBtdFRuUEp6d1BtVWZnTHlvOVVTY0I2MWQzU09XdmdGTjdyRTl0NHpBQTRNckpQQzFxaHJpa1YrdUYKRkZmbUs4OWk2Wi9URUgvVlhZUDE1V1RtRHpMMlNOakVmUGNCUDlqdk4rR0lyTENlS0o0eW5pVmJ3TW9IekdDTApVZkUxYkVjQktxT1lCMytGelpPdEh0dXdsdG1ERGRadGl1UFpyQjQrN2VRSE1jRXlVWFE1SFE2TFVNbURSamc0Ck1FWVNBRlJ0aUU5VlUzdTlyeUNxQVdjNi9wY2c3K2lWTWFUR0tJVHRtNjNZWDgwY3MzeW9DbkJMZlA5Q2dlNXIKSUhwOEdva0NnWUVBOHA4RmhITkhxbDFDOTRSM2xBRllIdytVOHVVLzJCb0lxOGk5UEpMRmx6WkxzY2p6TnAwWAo0RzkxNDR6a2xablQ4MWpybW13akh2TEhINkkxSXFZTjJIWGUyMkdabUlHbERnbFpoTnVDR0NHZTdaV0R5QlYrCnloQ0hHdDVxSzArK2RScVhuVjJTbWtCSVlwUVN3TjU2K0pyWDRnV2g5UEt2NzkrcFVpK1RPdXNDZ1lFQStkOEwKUHhGZm9odWZOeG9EeHQxRDF6c0E3a21Ray96SkpNMUtObjNtWlYvV2UyeE1wNXROb1ZhM056SDd5bmdWRUw1QgpTNlJjcUp4c3NOSVhWR2J6bHFjLzZJbTlQZG9WNCtaWUpQaWhsVUZ0ZEcySWtRNWVtRThiN2oyZ2xxQkwvWG1ECm56dCt2RGpTWFNIQk9UMnJUME5rN1RJeWJ0NmQvSHkxTXY0Sndkc0NnWUJOZEVyVW4rRFBHSHJhZmVXVzBGOEwKZTNQM253d2t0eHJ4akdJdFJrWGlJaWxFRm56ZWdJUXcyQ1J3Z25ndThpN2h6dzlYK3hHelBab29GU2FWYXlHYwphdlM4WUlvaVQ3RWJyQXh5QjRtZW5vMFlGOVU4T1BDREhZZWtJa0VPbHFTY3llS0JFSEJPNGhxNXJiL1c1cStuClVmZDlab0x2cWRKVTU3Z3NUcGZZQlFLQmdGQ1dxRmpwOEk4bkczMjVEVGpKU2tVVGlhUlE0NmxuSVRTV1pYWVgKdXdROUdiN3EyZnBBczVQeWxOcmZheGNORGJZOXRtK0FEa1p2VlByZWQ1bklMbzRMV1NoVnJFeFRselhPcCtVYwpyM2lsQm5sRGpvVkNQaTRmYmFHMERLUW9CUG8yZzhZS2VVQ1pqdmRzbUpZdWxwN1UzS3RId2s1UnpHQ1BsQjFqCkk2QjdBb0dBR0I4UktuT0Y3SnJyQS8zRDBpRWFCanJ3Wkl6ZStYcGgrTmIwaDlRY0JWcVJLNlJyL3N3c1hIVGMKVVMyWTVrRHNiV05pckQ3azZmVnZKYklKcysra0U5MHpld0ZOQXZTWjlmK1dSZGl1dGoyQURsSFduTjJvcW9ZMgpSbGlHbTZqdXU1bDVtVHVKaXEzWGtUREVZeEhtK3M5N2hvWmpraDRmaWVObTg5SkdVR1E9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\ncontexts:\n- name: steve-context\n  context:\n    cluster: steve-cluster\n    user: steve-user\n",
                            "template": "apiVersion: v1\nkind: Config\nclusters:\n- name: ${name}-cluster\n  cluster:\n    server: ${server}\n    certificate-authority-data: ${ca_cert}\nusers:\n- name: ${name}-user\n  user:\n    client-certificate-data: ${kubelet_cert}\n    client-key-data: ${kubelet_key}\ncontexts:\n- name: ${name}-context\n  context:\n    cluster: ${name}-cluster\n    user: ${name}-user\n",
                            "vars.%": "5",
                            "vars.ca_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRZTMxdU9NTXFSV01Ma3NSWjRLZ2JCakFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURneApNakV6TURsYUZ3MHhPVEEwTURneE1qRXpNRGxhTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBrM1oKVlUwOU8rdlMvUkszNGxSdVlPcXZUOXdoNCtQZ3Ixb2pmVlVQaVZQVUx2VlVEbGp0a0NSTXBtenEyZXAvbGhGYQpCVXV6bGlIbnVGNGZKeng5ZDVxSEJnVEJZYnJEZjVwZGZWaHprMnlQeDViOWdwZm5RRjVDaUhJT0dnc1lyUkJ4Cm9DTEo2aUh3SUhtQi9BQ1ZOa0x3U0prcEN4ZVQrMXBKZS9ieDZPUHNacVdob25nUVBaNmFXdkRsQS8raE54QXMKeW95V0dFK0pmNkVuRHZlSk9ZVVczaHphVnEzSWdNV29XYjd1WFRXV001S2MyTXZYTlRtRE5QbVo5TUt3czZYWgpXOXNPNWxleUhhRTRhQ0RqR2MyZjVTSzhEaHY5LzMzTE1CV2FiSGM2QWhBdUQ0eFp6YjJwR3JHMFo5OFZaM1hPClhWZEJaaElDWWpqa2RUR3FHUUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVV1hlYWNOckhYT2oxcUh1aEJvMUx2RE04VEFvd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBSnhSUjB6V0NKTWVZc01wbWVreWlHVUxIM2lDNWYxRk90UFB1WnZTbkxsSitqZ2d0b2tLCitiVEV6RkNQWk44MWIwZFBRM09jT2RDdC9Oc3AvQTN6Q014cE1hNW0xbHo2czZyb0pka1lSMldMYkFmVjFPeUoKL0tQV1JRZllOeXBiNlAxNnFueGVLS0V0UENGbkVpT1BsbjFmNzAzMXgvQU85WDRtMEJJeTlHc1Vjd3JTaGJNWQpZYTFwZ3ROYVUxaFFrREJGUlBFVlRmcGJsWXllTW1tb0wzYmsxVldCTFFTUk90SEJDcFEzNmpqQ3JLZG5Ea2wzCndJcXpXVDY2YkhBMkVXSXh6MmduQXFQN3RLelY4SWdmVDBTRWR4d2M0dUVLVUsvT05rWjZOaUxWWGJXdnZ5M2cKeXNBTCtoQlZpVm1INjlIcEd2Q25Rb1JZVlB2TGVlMWRwczg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
                            "vars.kubelet_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lRU3hGY0JMK2cxekd2Vk9sU21JeENkekFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURneApNakV6TURsYUZ3MHhPVEEwTURneE1qRXpNRGxhTUNzeEZ6QVZCZ05WQkFvVERuTjVjM1JsYlRwdFlYTjBaWEp6Ck1SQXdEZ1lEVlFRREV3ZHJkV0psYkdWME1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0MKQVFFQTdOQVBqRDFYWHJJM1MvRmI2eG03MkRXb2ZXNktlUTNuS1k1SGhNZ1l1b1EzcERLdjFhSjZoeDJFbGhOdQpYdVV5clFYVFFmdUNLdlcwa2o2MVg4eWMrU2hFaUhTSkdqWGh5NUNJSisrb25lVzFrT3pHZFAzTTdFMTBBTlltCktPM1pWVEI1OWkzL0RZeWYxL1NJVlBiVVpmY212Wlk0RzQrU0NWS0RCNDU3cXVqMUNzMkFXaEFJV2M0cU8yLzEKemVSb0ZSenZOc2N4U3c1UVR2ZDFySERpdzN3b3NCeDlxS01NOG9QdmR2b0RwbjFBcEFOdEVmRVFjdExVUlE1bgpJRVZlanVveGlGdTV2aFhMb2dMTFhLalZVbnRIM1BKM0ZscElVT3lnaXpOcWZBUEVCczlSS1UvemdRbjJENHp5CmI0d0xUSExhbjBnWXJGV1RVamkwN3FHU0NRSURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWUQKVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdId1lEVlIwagpCQmd3Rm9BVVdYZWFjTnJIWE9qMXFIdWhCbzFMdkRNOFRBb3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQmhuCml5VDF1UUw3N2hKUExicHRoOHE0ZXpyYXBPWFZCZW9GS2VxU2FoeWpQTCtadGRrdkFNMmRSODNSUE1xTU5WOEkKTVRkbllNaUZ0UTRSSENuc0dlUEZ6R3Y0eW1ZdjF4ejNCRTVoaExqOVU3OEo5a0hiQ0t5THlNanJFd3RhU0tlWApTZWw1azFUMHc3aEhvQXBtUTR2ZGRFSUNoS2FyMml5akRjbE5salgwS3h2RVVvSCtwbVVxQXJZVjBnenk3eFR5ClEzdVQvc2lJQzliNXF1a1g0djJpbU9HSGtOcHVCbW91a3JPc2ZvaDE1b0UweDBrWUM2N0I0bElCOGkzTExJV2sKY1FEMWRpdnRTd3RzRTVyUEZ5dXZaY2t2SC83Y3JhbFRBNFUyMXNPdUpENU8yRFZWbXJSWnhJU3psVFIvMS8rRwpoYVlUR05GTWRaRzZtaU15a2xVPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
                            "vars.kubelet_key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBN05BUGpEMVhYckkzUy9GYjZ4bTcyRFdvZlc2S2VRM25LWTVIaE1nWXVvUTNwREt2CjFhSjZoeDJFbGhOdVh1VXlyUVhUUWZ1Q0t2VzBrajYxWDh5YytTaEVpSFNKR2pYaHk1Q0lKKytvbmVXMWtPekcKZFAzTTdFMTBBTlltS08zWlZUQjU5aTMvRFl5ZjEvU0lWUGJVWmZjbXZaWTRHNCtTQ1ZLREI0NTdxdWoxQ3MyQQpXaEFJV2M0cU8yLzF6ZVJvRlJ6dk5zY3hTdzVRVHZkMXJIRGl3M3dvc0J4OXFLTU04b1B2ZHZvRHBuMUFwQU50CkVmRVFjdExVUlE1bklFVmVqdW94aUZ1NXZoWExvZ0xMWEtqVlVudEgzUEozRmxwSVVPeWdpek5xZkFQRUJzOVIKS1UvemdRbjJENHp5YjR3TFRITGFuMGdZckZXVFVqaTA3cUdTQ1FJREFRQUJBb0lCQURlQ1pjS1h0bDBxSlRBVgorVmZZaG1HZDRrclVtSHpidDIzVVBndHY0K3dFaGc1bEd6WldpYVlXVXpmaWdpS1lVeEtmcE85NGh3Q082NjdFCktEdTJlSzBtdFRuUEp6d1BtVWZnTHlvOVVTY0I2MWQzU09XdmdGTjdyRTl0NHpBQTRNckpQQzFxaHJpa1YrdUYKRkZmbUs4OWk2Wi9URUgvVlhZUDE1V1RtRHpMMlNOakVmUGNCUDlqdk4rR0lyTENlS0o0eW5pVmJ3TW9IekdDTApVZkUxYkVjQktxT1lCMytGelpPdEh0dXdsdG1ERGRadGl1UFpyQjQrN2VRSE1jRXlVWFE1SFE2TFVNbURSamc0Ck1FWVNBRlJ0aUU5VlUzdTlyeUNxQVdjNi9wY2c3K2lWTWFUR0tJVHRtNjNZWDgwY3MzeW9DbkJMZlA5Q2dlNXIKSUhwOEdva0NnWUVBOHA4RmhITkhxbDFDOTRSM2xBRllIdytVOHVVLzJCb0lxOGk5UEpMRmx6WkxzY2p6TnAwWAo0RzkxNDR6a2xablQ4MWpybW13akh2TEhINkkxSXFZTjJIWGUyMkdabUlHbERnbFpoTnVDR0NHZTdaV0R5QlYrCnloQ0hHdDVxSzArK2RScVhuVjJTbWtCSVlwUVN3TjU2K0pyWDRnV2g5UEt2NzkrcFVpK1RPdXNDZ1lFQStkOEwKUHhGZm9odWZOeG9EeHQxRDF6c0E3a21Ray96SkpNMUtObjNtWlYvV2UyeE1wNXROb1ZhM056SDd5bmdWRUw1QgpTNlJjcUp4c3NOSVhWR2J6bHFjLzZJbTlQZG9WNCtaWUpQaWhsVUZ0ZEcySWtRNWVtRThiN2oyZ2xxQkwvWG1ECm56dCt2RGpTWFNIQk9UMnJUME5rN1RJeWJ0NmQvSHkxTXY0Sndkc0NnWUJOZEVyVW4rRFBHSHJhZmVXVzBGOEwKZTNQM253d2t0eHJ4akdJdFJrWGlJaWxFRm56ZWdJUXcyQ1J3Z25ndThpN2h6dzlYK3hHelBab29GU2FWYXlHYwphdlM4WUlvaVQ3RWJyQXh5QjRtZW5vMFlGOVU4T1BDREhZZWtJa0VPbHFTY3llS0JFSEJPNGhxNXJiL1c1cStuClVmZDlab0x2cWRKVTU3Z3NUcGZZQlFLQmdGQ1dxRmpwOEk4bkczMjVEVGpKU2tVVGlhUlE0NmxuSVRTV1pYWVgKdXdROUdiN3EyZnBBczVQeWxOcmZheGNORGJZOXRtK0FEa1p2VlByZWQ1bklMbzRMV1NoVnJFeFRselhPcCtVYwpyM2lsQm5sRGpvVkNQaTRmYmFHMERLUW9CUG8yZzhZS2VVQ1pqdmRzbUpZdWxwN1UzS3RId2s1UnpHQ1BsQjFqCkk2QjdBb0dBR0I4UktuT0Y3SnJyQS8zRDBpRWFCanJ3Wkl6ZStYcGgrTmIwaDlRY0JWcVJLNlJyL3N3c1hIVGMKVVMyWTVrRHNiV05pckQ3azZmVnZKYklKcysra0U5MHpld0ZOQXZTWjlmK1dSZGl1dGoyQURsSFduTjJvcW9ZMgpSbGlHbTZqdXU1bDVtVHVKaXEzWGtUREVZeEhtK3M5N2hvWmpraDRmaWVObTg5SkdVR1E9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
                            "vars.name": "steve",
                            "vars.server": "https://steve:443"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "local_file.apiserver-crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_locally_signed_cert.apiserver"
                    ],
                    "primary": {
                        "id": "c55723ccd02160b23f2ac670d45453f01a9168b8",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDtzCCAp+gAwIBAgIRAMCY/1+qC3KgxmI5nMRPC9cwDQYJKoZIhvcNAQELBQAw\nJTERMA8GA1UEChMIYm9vdGt1YmUxEDAOBgNVBAMTB2t1YmUtY2EwHhcNMTgwNDA4\nMTIxMzA5WhcNMTkwNDA4MTIxMzA5WjAvMRQwEgYDVQQKEwtrdWJlLW1hc3RlcjEX\nMBUGA1UEAxMOa3ViZS1hcGlzZXJ2ZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw\nggEKAoIBAQClLnhz6E7uAMki2y7hUBbSPtyrhtsvAxl368fobM2qGg4fM4OEs55i\nC5WZ7G+y1XU6HLZM8aC/3fj2DliV4RQ29bUjD0dlkjW8AmwZGzGz6/SIBm+tMxhV\nF4Z2Qn4odq7QBOlPxUt6SdRJYZw9DHZUpc2DnQ/mWjvTg+CrUeS4P9nyQTatzmwU\ntGb7O2/jTdx4NOyglqNyx764aemZ4/74qcj3wCLZbHSePo0gO3L9b7ys4K8ojc5+\nBSUxYYpvQ9CuMLJtd0HHO4zAwtKRGupr4w0flJeYm5nDWedDCkouXl2MkG3MUEyG\nuYMh7gm1GLR2jT+mvgWn6w+VstQyHnt3AgMBAAGjgdcwgdQwDgYDVR0PAQH/BAQD\nAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAA\nMB8GA1UdIwQYMBaAFFl3mnDax1zo9ah7oQaNS7wzPEwKMHQGA1UdEQRtMGuCBXN0\nZXZlggprdWJlcm5ldGVzghJrdWJlcm5ldGVzLmRlZmF1bHSCFmt1YmVybmV0ZXMu\nZGVmYXVsdC5zdmOCJGt1YmVybmV0ZXMuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2Nh\nbIcECgMAATANBgkqhkiG9w0BAQsFAAOCAQEAlBM2/StqBUqUCjWghGTmk1LGx0zy\nJvUJw76XFw194b+tYCt5/pokKeUrX5nuFgmegfdytFI7RuIKA2mAaXHktNTm2ot8\nrA1lF/H20DVIFf8F0odGoKuqHJ8+p7W2WTeSD+ofPpZkAOnkTa7EJeTtRuVwO7A6\nffgs5TE91mJ8wceUWSQviM7CVdRqZd5Ywu1D/Uo+a1//5C1vfUp728sR7BkTCrGB\nQTF6PsUzYEPT/QvrFehNXdNk9o19wK0sccu+DX+QqsYQiDX611SpejFUS7/8tIdr\nuFKWpc1SHxGeA6k08WQaClYn9JBpyf2kF9ZFNwS4+iDmcvb4J4V/cn2loA==\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/apiserver.crt",
                            "id": "c55723ccd02160b23f2ac670d45453f01a9168b8"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.apiserver-key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.apiserver"
                    ],
                    "primary": {
                        "id": "6de17df1ac1f2fd8479ef8aaad6fb308bea94df9",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEApS54c+hO7gDJItsu4VAW0j7cq4bbLwMZd+vH6GzNqhoOHzOD\nhLOeYguVmexvstV1Ohy2TPGgv9349g5YleEUNvW1Iw9HZZI1vAJsGRsxs+v0iAZv\nrTMYVReGdkJ+KHau0ATpT8VLeknUSWGcPQx2VKXNg50P5lo704Pgq1HkuD/Z8kE2\nrc5sFLRm+ztv403ceDTsoJajcse+uGnpmeP++KnI98Ai2Wx0nj6NIDty/W+8rOCv\nKI3OfgUlMWGKb0PQrjCybXdBxzuMwMLSkRrqa+MNH5SXmJuZw1nnQwpKLl5djJBt\nzFBMhrmDIe4JtRi0do0/pr4Fp+sPlbLUMh57dwIDAQABAoIBACs11Ny9UKiCHBu6\nKrFWOiIVv7Q/Ouc5cFgmncz3aXWuCzOuTiFQu4X6cdAqQa4OmPPyvt2x99M5Rf9Y\nEWRj1N3ruM7LGGpBrTzZhV2r93yRpQ5QYLZ2P09DMDGPg2EiauiP4Fi1y+DZn2by\n2eQ+dlX+aZycYaRoxm22efdXHPX1kmE1QddqoqAoeRoCb+kHJ8sbeJiM3YWnJOT4\nz5GbGouiAxT0Wu/MJyBpJwPiQgiLvZ2FQFw1og8W0P9PUHVK0m9AzQn0lEwLjBkH\nzYWRW2Li8bhWLSAKMQ7UR//+d82Y7bmnRkFzrmsvOTPZv8NKAgAM/sK6t/CNiDt2\nTM2MtMECgYEAxDVbKHAmngJ5tOL0KVvNfh9nWam/+7yt6oS9UpEqMIr2QO44HEZd\njKr+JfaMOwvn/HSvbLK8KSk04H8uSZ7BB8X7LJqo58AQr6Gvm/w4+cz8JitPWZkg\nefwautq8aPEl+RSzWjw2sxB3sJ03mkkzhJ2w91IjlV4iJ2aDWCw14WUCgYEA14Sj\nl09EvkLNfdq0UAjFC4c5RUGJwKP+MieGDnTqXTNWX2/L4T3HPzTUilP0LWOlhgY3\nQ6IMcgNUY2zKQKBR7iWulvv+wi/JJPeYbmh171zdwSf/ZZDAwI3yQnGGgZyJkyNU\n5RUl59gCcZdsb7RhWFAYY1UPHCP0Qj3IB35M6asCgYAWGQBERKVExHiak7j1833o\nR3cnVQPnQS/BKuP7qZe70dq8I1g0bwRYNGXdNrBCcivVdfrP3i1s4VQwOIKpDfUl\nf/my41REjZATh700byqnj5uSXOxZ5fIPawJDqyDvHMGvFNLCRefPMPqZ7Ir3mGjx\n9aSZpimVx/1GvLfsNUZ4NQKBgQCA73GPjHTr/rtBmB5X42c/Rl8U9+iZv4LMLqkc\n7QVpTNVXs2KeFn+laM3fE+r5XKwiSoW1iLU5YJSUBvnZQBDEEPcqjQgU1NHZs+cV\n5pjn4v8oF+3LrZYjnMhax+BYmnYT+QdJJiXPVoPfwV+2VIwIcaKlirXHeBshpiSN\nlxockQKBgQCOScKWpra+536RfnnpKMMB+hoKk6tz0Sbic6PrtOw1zGXEuXn/TOc9\ncavJ7eRjkdq9zM56MdOlFhwr0lg2+EX69I5McRnDpvAnQLds8U22xeoAqXe/W0Tx\nWPV9FaRf5o+4prQKGanjDoJl8wDf7qNND5F95tYajcEe8+MhEibIEA==\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/apiserver.key",
                            "id": "6de17df1ac1f2fd8479ef8aaad6fb308bea94df9"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_client_ca_crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_self_signed_cert.etcd-ca"
                    ],
                    "primary": {
                        "id": "76b5c1525d227d8a2ab89dfc14586f803e8e87e7",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDDzCCAfegAwIBAgIRAMpKB+tZKTy9DCKXYl1le+kwDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDgxMjEz\nMDlaFw0xOTA0MDgxMjEzMDlaMCExDTALBgNVBAoTBGV0Y2QxEDAOBgNVBAMTB2V0\nY2QtY2EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDo7YXpGm+vyo+u\nLxRSA2JuUOvGQFH93jv9/AbEot3WOaGTJqxtE2d6PJXlRqB1ETXDJ9Bj3dH0ItwO\nh2HW6HuP6DU0ATYxriMk7RxlND4TkVKiFe4/0XqrxVDszQkgOGehKczis4ScwRAK\nkqW9lunq904b2QNHC7Ba3PFysQfhs9XR9YoMX1vHnT8caAxT4sK3/VpNCMKloIlB\n25cyl6DEu78eGCZNMpFTr4b2JQryafCgn6H812ApZYBPz5w3vRk3/Ir5i9nkDwpL\nKyo1lnh/XKDIigeLVI0rNOczfDJLGE60NNOLfykI59Ny2nL8PnEyN1HV0OvqIq74\ncjq1gw2PAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/\nMB0GA1UdDgQWBBSIT93zP5hK06u4P60FcUhy/067+jANBgkqhkiG9w0BAQsFAAOC\nAQEAWE3TsteSStWvAe05G9OAhxGSf192/NthaUnmU8uRMT2vcSDXImWoq+oSdJVO\nsDD6fpPbCxS7Xp7v+tXY2M9t3INXxLel/zJ4YGYcwKhY1x4rLmd55lLvOCpOuAhB\n9/DtbX68y7/qvOP2NJa53azaFvm/AdDOi16Jm1eUgBsXEF4AJ7hQd89rjv2PXeAX\na5cIyxrNiftFaohkzrJUbE/lga66ypfMl0jpSFc88ohCOv+ENS+X8sf7K2d9ieK3\nJBpybzhBZt9H1z7MAPSgzI6d1j3o2Te3Z/vqfdUp/m2PYFTmb8pJ3tyOCKdWIWm+\n8KmRE/2pBXJjVVCHnbOKX1PdGg==\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/etcd-client-ca.crt",
                            "id": "76b5c1525d227d8a2ab89dfc14586f803e8e87e7"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_client_crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_locally_signed_cert.client"
                    ],
                    "primary": {
                        "id": "860bd808bf1e7f5e64eff0bc2722e99c347f46cf",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDWTCCAkGgAwIBAgIRAMJ6tT6zjdS/yMBSwEqAVF8wDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDgxMjEz\nMDlaFw0xOTA0MDgxMjEzMDlaMCUxDTALBgNVBAoTBGV0Y2QxFDASBgNVBAMTC2V0\nY2QtY2xpZW50MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0cklWmK1\nGlDP1Mxe0nPOjac//I89cbE6SFkqVBwCG/Avx7Cx9NdScamddqd4E2/adVEdD1yU\nxFXOooNfGofgB+WQZrDcTrX06KXRb1DDQ1KvbcKe1CVUbYuf5DQOfBV0XXzKUIiT\nQ4QpDEvm+bP8XWpF7cczwpR4l1qkzTTDYvj/2fH/LqBGa0HZK8+F3brUlZqtO2oa\nDnT2eht8MBHsDvOytlLBOrpr0qTY2dEpp581X9BMtckdEuKNHypKBxLgDTZC5Fzc\nL/BN5ZNgsyqZXvbO+jLcyZyj3wkYyJf3wiWRb0tnuzKY+ZcDsabV6qvvZLcYXX7S\nsT7VCqw7MSIOlQIDAQABo4GHMIGEMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAU\nBggrBgEFBQcDAQYIKwYBBQUHAwIwDAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBSI\nT93zP5hK06u4P60FcUhy/067+jAkBgNVHREEHTAbgghuMi5zdGV2ZYIJbG9jYWxo\nb3N0hwR/AAABMA0GCSqGSIb3DQEBCwUAA4IBAQC/zl91SNPpYlCaNbH7MorvasDo\nS+VCac7Ln2R3kRq6VtNSdUrb53v2p6mEpRZ3bbgcoMm9ZouJZ/t8S/qP/FPTwU2O\nIElAElILWT7VTAiyIgHJTc2Ld4ZaUL3/5BqqUpMdiycymGJ5hdURlbPcykHp90EQ\nBxZgxqJ0pM6ylo45oImaRARqmJ/tb3Yrdh+JQGpXMCC7aXDcrZJNYG+E78rxfQDS\n4rCdK2RrHj8yeFhOSU1e5tL7FYMoLbcsoH00TOVgbzurrvI+COlb6VzZwJJ3ivTX\nz+G3gROkQMfnCQrZ8y27KSuEQEGplD6zjVsMlUF2YrB7GzY5NF3bAw6bGN7m\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/etcd-client.crt",
                            "id": "860bd808bf1e7f5e64eff0bc2722e99c347f46cf"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_client_key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.client"
                    ],
                    "primary": {
                        "id": "05972f2d39721b9e0f8292cba415c03d2434012b",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEA0cklWmK1GlDP1Mxe0nPOjac//I89cbE6SFkqVBwCG/Avx7Cx\n9NdScamddqd4E2/adVEdD1yUxFXOooNfGofgB+WQZrDcTrX06KXRb1DDQ1KvbcKe\n1CVUbYuf5DQOfBV0XXzKUIiTQ4QpDEvm+bP8XWpF7cczwpR4l1qkzTTDYvj/2fH/\nLqBGa0HZK8+F3brUlZqtO2oaDnT2eht8MBHsDvOytlLBOrpr0qTY2dEpp581X9BM\ntckdEuKNHypKBxLgDTZC5FzcL/BN5ZNgsyqZXvbO+jLcyZyj3wkYyJf3wiWRb0tn\nuzKY+ZcDsabV6qvvZLcYXX7SsT7VCqw7MSIOlQIDAQABAoIBAD/9EK2vKfpq59nK\ntKmQtVIzz6qjrmQ9YL+souKg4GvRKWHJnZ5HB1iwGd2VW2TiW0opgamr3Zy9Z5fe\nZmXbSBRgi1knXSuNCLTlzyobAlRIpkXedT/UWxpG2nBrCHgEu0fAxp0l63VOnI6p\noDxOEA4WWloaxsj1LItOFLKbA3XuXAqK40Ny1EUtTJwcyekoYLGVByJFkXvCMYbU\nSEq16MEVk41xnAadLmAr0SlN5/X7lPKFDDbkbwWUsnJO+cD+LfmLGV3yJZFcWx3g\n1KlCdRhhyKefdaRMWtlqKKAAaY5+vWA8EiyDD6WMY44CStAShXZDhi7FmtgaZ4Gw\nLKnkIcECgYEA6fYMpOXOm4L7+0bF76o44lhmxrtL2MC2DfhCqgIO5RKp9PiXBmQs\noYO9H5EHk4EHkdmopUu2DPLWt5rt5rRP7uvbxOF/795DYfxvDeubFjVxewRQGjMI\nJ85JC1Kk4kwWlDJ83tdh8cr4/hcjNR8KylYEApqcnW8kcgJgyeC26JkCgYEA5Ywb\n4oPAvbuO9+zBLdRnT5KZci0SjZzkuM2WIvMmqVuj6mwkQzKkXjsAZb8hbBiP9/fZ\np1ALJlTP7ONeh3AQOp3yL2rvHUwKqIU6HOomMB1efFV4p9n+Mxj1gYkydKBxpsGX\nNLFxx/v69OYgCPVCQVl57+bYwwdh7axf2f4qZ10CgYBWMR9XYJJNGGRcniYttThf\nqtGyRS4cHGL1opBssXVrTwTuCucYo68NkcsK5hM0dESlptpKiyn2e0A/RASBCcyo\n6Jt+XNUVOXz5jFYder8X33h/KYeZH1PR1l1ynm/ALufikPcP4aljurMgaMW/vD/t\nauLvUqaAGYIDvnyJ4w9/gQKBgQDPi1G/CW8gXU/T3A2CGXTbXmo88IHA5qVqbf+c\nVAqVv9TB5MsYstYomOIwHJLkgITTKBZ0D4w1OSPSRHW4sVsLFLnfo6jU7WcJnYPA\nlvi2Mie29TSlVxVeL+fyGhEzn8mCg7DqJLICplLuUI+Qaehg27zDaw57r9YcJel4\nWTUPxQKBgQCkM7TCeJLNkC75jUVn5c/g32FyJBZ88JItFdZ/RSil95IWji5dgdnJ\n+t7MJ0mi4JjI0JrV5qIYcNZbYx0PLT9S/fz8rYxjtjfpC7Gq/Pm/lT7tiktImJOM\nwz59A2+FdK+06doTzpAW4+XvLBjRXxBOOBpmHkW25QIDZVLhn3Gmkw==\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/etcd-client.key",
                            "id": "05972f2d39721b9e0f8292cba415c03d2434012b"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_peer_ca_crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_self_signed_cert.etcd-ca"
                    ],
                    "primary": {
                        "id": "76b5c1525d227d8a2ab89dfc14586f803e8e87e7",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDDzCCAfegAwIBAgIRAMpKB+tZKTy9DCKXYl1le+kwDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDgxMjEz\nMDlaFw0xOTA0MDgxMjEzMDlaMCExDTALBgNVBAoTBGV0Y2QxEDAOBgNVBAMTB2V0\nY2QtY2EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDo7YXpGm+vyo+u\nLxRSA2JuUOvGQFH93jv9/AbEot3WOaGTJqxtE2d6PJXlRqB1ETXDJ9Bj3dH0ItwO\nh2HW6HuP6DU0ATYxriMk7RxlND4TkVKiFe4/0XqrxVDszQkgOGehKczis4ScwRAK\nkqW9lunq904b2QNHC7Ba3PFysQfhs9XR9YoMX1vHnT8caAxT4sK3/VpNCMKloIlB\n25cyl6DEu78eGCZNMpFTr4b2JQryafCgn6H812ApZYBPz5w3vRk3/Ir5i9nkDwpL\nKyo1lnh/XKDIigeLVI0rNOczfDJLGE60NNOLfykI59Ny2nL8PnEyN1HV0OvqIq74\ncjq1gw2PAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/\nMB0GA1UdDgQWBBSIT93zP5hK06u4P60FcUhy/067+jANBgkqhkiG9w0BAQsFAAOC\nAQEAWE3TsteSStWvAe05G9OAhxGSf192/NthaUnmU8uRMT2vcSDXImWoq+oSdJVO\nsDD6fpPbCxS7Xp7v+tXY2M9t3INXxLel/zJ4YGYcwKhY1x4rLmd55lLvOCpOuAhB\n9/DtbX68y7/qvOP2NJa53azaFvm/AdDOi16Jm1eUgBsXEF4AJ7hQd89rjv2PXeAX\na5cIyxrNiftFaohkzrJUbE/lga66ypfMl0jpSFc88ohCOv+ENS+X8sf7K2d9ieK3\nJBpybzhBZt9H1z7MAPSgzI6d1j3o2Te3Z/vqfdUp/m2PYFTmb8pJ3tyOCKdWIWm+\n8KmRE/2pBXJjVVCHnbOKX1PdGg==\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/etcd/peer-ca.crt",
                            "id": "76b5c1525d227d8a2ab89dfc14586f803e8e87e7"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_peer_crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_locally_signed_cert.peer"
                    ],
                    "primary": {
                        "id": "2a9f37ee0650969711b0233e6c5e60935451cd52",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDQzCCAiugAwIBAgIQdBzEqisnzMK2bwflBnZm7TANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwODEyMTMw\nOVoXDTE5MDQwODEyMTMwOVowIzENMAsGA1UEChMEZXRjZDESMBAGA1UEAxMJZXRj\nZC1wZWVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvhylKNBAhSeq\nT/2nZsjZ2kYAaEPxJ4nJcKt/olMSpoDjPXRoHGamwU+Od0PVAv9VwGJnGiQxUXGU\nylUxefha3Xw7xmFBZaTSUDGhUDpWyqZSXIGCFQ1q9YVFrbiWpJ05fSALbHQfWiZ+\n3CpgmO45iFElIFhwcvVolwDG2amKb83+zM4HuvBlk2GEdKSidJYE56S9NkiR5yNm\nipDh8mM7CETecA/qeOYoSJK6wxTcmU8MDgkVeb5kfVXVwTUqRnZoqAAKgTvn3o46\n//vBx9zE/LojddJShOOEYb6FM33Y9W9i0s3B6MivhkdBj5G9hM2h6vHsG3TNxS8Z\nZYrd2nSV9QIDAQABo3UwczAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYB\nBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUiE/d8z+Y\nStOruD+tBXFIcv9Ou/owEwYDVR0RBAwwCoIIbjIuc3RldmUwDQYJKoZIhvcNAQEL\nBQADggEBAJhpMOatfeL4sPXIOMTqbtNdcK25EPiODm6uWaCYLb6nPJQwNbQKn9ur\nqgpTmllrzM75jFi/EstKkOdGKZk9rH5+MwTOGWTRb47f9YRbXaD6cct66DiZYZb5\npLdi2qt4evOOKBt5xsxuTSliGUWUgKWvwIRVRCZaKS+bZQN2w3iXFP/Oo5kDzXpI\nnbxQ6HG7ZT35HnjZWhUXZSovdG2+reRG29JxoylxFjAy6aie3xlTfn+tAtLjjpIO\n42kMqRGAMRR6NUDLXeAtqiNWCG2HXpqtE0BNGc4z3Y23OIJfQzcK3mfKLJNYDCcD\nZwjpNGOUuZKAYSwGCCvZj6JxdK5HQME=\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/etcd/peer.crt",
                            "id": "2a9f37ee0650969711b0233e6c5e60935451cd52"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_peer_key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.peer"
                    ],
                    "primary": {
                        "id": "6ba88331ca3f397020f112ad8bc9ad0b36522248",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEAvhylKNBAhSeqT/2nZsjZ2kYAaEPxJ4nJcKt/olMSpoDjPXRo\nHGamwU+Od0PVAv9VwGJnGiQxUXGUylUxefha3Xw7xmFBZaTSUDGhUDpWyqZSXIGC\nFQ1q9YVFrbiWpJ05fSALbHQfWiZ+3CpgmO45iFElIFhwcvVolwDG2amKb83+zM4H\nuvBlk2GEdKSidJYE56S9NkiR5yNmipDh8mM7CETecA/qeOYoSJK6wxTcmU8MDgkV\neb5kfVXVwTUqRnZoqAAKgTvn3o46//vBx9zE/LojddJShOOEYb6FM33Y9W9i0s3B\n6MivhkdBj5G9hM2h6vHsG3TNxS8ZZYrd2nSV9QIDAQABAoIBACkRLQhE/DsHV34S\nEDBe4NiK2JmtW5Gr7QzeryKUiWnYW74xwC+qaQlHM0JGL+SG3bJCT31RJiouu/J9\nNsPfR1mi9ZKj/amEUj4qims3PvpltVLwUvZTQLCqymN9hWUn5XxHCNCzwPYLbMoI\niXdftqPgy4FSOXBL3P0JmOr5+cKuwJxeSNQntJCv2YTY7dM5WEfQ61JJnvIKJfzD\nqoJOcbjnfeYdM/qM9Wc+t0IOpDkJZwRUxZ2GpLbqn6TfJ4OwpB4EMuj+VLtJAqdZ\nVryiEwe5lLH+yVWzwFk5kngQ6iMXA3Z+2Bgxmn4hBYDaKUjtHAbmAWShq+rU8ldw\nUyWHUp0CgYEA0uVxrUj+TRIT/MvbOU7glql7ETgw+c4iA0pMAFqQfP7v3kqjp7UD\n5jrhMOrkJMlhsIvODEius5NTBFEZNgh8KAWsMSny6swANmiTE3uATf9yiRV2FMic\nvxo9UrHotMhCzXlgZCxEKaW6Q22+KykTxCGXvGs+QVk3UUAV73stRxMCgYEA5sVC\nHIVt7sM5x5aD0MJ8D/3f1jZipvMsmvv1QdS1kvTk+vtJrz/FZgRJyaCIakdIAZZO\ndTtT5UEJu9aENpdXLyLRsHz3L7Yses+lnmdmCWkUPWt0W5mAXSPh+48HgxybgxzO\nxKnqcapPjbZ+BNb43j0L2IRg/0/C0FS2puk+J9cCgYB6AzzNYFmgBUGDE/31HelZ\nwRvuTnAnVlbfSHDIE51cc7IbDVu5f0SOQqpePsdXcRsPpRLEkJhiVG3HJZRMaoRK\nM13346kipnvI/p94ug71EUEWhlAWninxdiDcYwma7fGYJwzZZ7LX1YX51Ngc6FsD\nMdwzqmgOLquOWmFWeBEt+QKBgBzzlm25l6ciuvb9PSBNpf7jnNdlD09eprPy9DwE\nEZuUOb37FK111LANzawMBdE/jBsW3lT60nWqiSwVp5Spu/hf5+q6YtCLjF0D/AU5\nd6Wqly11c62iPmZxAALtWMXsKt5yGMa3goAsG7rtsDWvOp23DutlAD5HpWs5lYiv\nLmsVAoGASrIHjHPHkC69FW3zPptWIxxmsA+U/GyA7t42gW/Nq6bwClH2NtoRDKf/\nbK+6t0k6OeCJSF1mGUq28uwcsxcZhM+l3ngtg7Ikd+GgdB9H8kppE9f8KxNWENs8\nWd3hAmOG5VtAWLHRSu2gDj1bISdz12vNDvBT91To9kNl/9Jn/i4=\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/etcd/peer.key",
                            "id": "6ba88331ca3f397020f112ad8bc9ad0b36522248"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_server_ca_crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_self_signed_cert.etcd-ca"
                    ],
                    "primary": {
                        "id": "76b5c1525d227d8a2ab89dfc14586f803e8e87e7",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDDzCCAfegAwIBAgIRAMpKB+tZKTy9DCKXYl1le+kwDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDgxMjEz\nMDlaFw0xOTA0MDgxMjEzMDlaMCExDTALBgNVBAoTBGV0Y2QxEDAOBgNVBAMTB2V0\nY2QtY2EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDo7YXpGm+vyo+u\nLxRSA2JuUOvGQFH93jv9/AbEot3WOaGTJqxtE2d6PJXlRqB1ETXDJ9Bj3dH0ItwO\nh2HW6HuP6DU0ATYxriMk7RxlND4TkVKiFe4/0XqrxVDszQkgOGehKczis4ScwRAK\nkqW9lunq904b2QNHC7Ba3PFysQfhs9XR9YoMX1vHnT8caAxT4sK3/VpNCMKloIlB\n25cyl6DEu78eGCZNMpFTr4b2JQryafCgn6H812ApZYBPz5w3vRk3/Ir5i9nkDwpL\nKyo1lnh/XKDIigeLVI0rNOczfDJLGE60NNOLfykI59Ny2nL8PnEyN1HV0OvqIq74\ncjq1gw2PAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/\nMB0GA1UdDgQWBBSIT93zP5hK06u4P60FcUhy/067+jANBgkqhkiG9w0BAQsFAAOC\nAQEAWE3TsteSStWvAe05G9OAhxGSf192/NthaUnmU8uRMT2vcSDXImWoq+oSdJVO\nsDD6fpPbCxS7Xp7v+tXY2M9t3INXxLel/zJ4YGYcwKhY1x4rLmd55lLvOCpOuAhB\n9/DtbX68y7/qvOP2NJa53azaFvm/AdDOi16Jm1eUgBsXEF4AJ7hQd89rjv2PXeAX\na5cIyxrNiftFaohkzrJUbE/lga66ypfMl0jpSFc88ohCOv+ENS+X8sf7K2d9ieK3\nJBpybzhBZt9H1z7MAPSgzI6d1j3o2Te3Z/vqfdUp/m2PYFTmb8pJ3tyOCKdWIWm+\n8KmRE/2pBXJjVVCHnbOKX1PdGg==\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/etcd/server-ca.crt",
                            "id": "76b5c1525d227d8a2ab89dfc14586f803e8e87e7"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_server_crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_locally_signed_cert.server"
                    ],
                    "primary": {
                        "id": "eb8eee4211a889e6ac69a285a96cdb0e703f2327",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDWDCCAkCgAwIBAgIQB1ayGeQF2u2oer0SxuR9UzANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwODEyMTMw\nOVoXDTE5MDQwODEyMTMwOVowJTENMAsGA1UEChMEZXRjZDEUMBIGA1UEAxMLZXRj\nZC1zZXJ2ZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQiIhBxTL7\nQ0rX9eIAu/l17ecoCrioGH+oxgrcfDuOD9ITqMXIoAoceGHXKhbRzNoOaznxgUuQ\nK1EgPf76XxroUehAb5cYL+P35jT1Ha+3K90CgdDNuRcFcvsr3GpMoUwpaoTVaTx3\nbo+ew6LEzP4jEhwzy+gqLHIloW4dfNlwc3eb1HAXZso3D48qnD15MF0ETCKKTPht\n7Mlw4xyQ2TdgLflELVxdzlnNWWuK78ozmnwiuWN8vI3Z2qCi2E1KFdxgDfEU5t0I\nd0USgyvmytNHqeqeDhVLbKQckMcrC7VGpSS5ulxIm+A9Gnu8UcCdSieXtJGdbQAF\noc+a9X8tXedBAgMBAAGjgYcwgYQwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQG\nCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFIhP\n3fM/mErTq7g/rQVxSHL/Trv6MCQGA1UdEQQdMBuCCG4yLnN0ZXZlgglsb2NhbGhv\nc3SHBH8AAAEwDQYJKoZIhvcNAQELBQADggEBAJSubCRiGsvhyHLxgWwsz8QXzYuh\ndJSE9h4C4BMq0lw9uhLWXwmOnJnZqelAKX5KiuIAbeuDYrueWoa/OSEZyd+8IREd\n2lvK/OwDGNVT9UijN4y4V54U9uhDdXVVVYfe+GHUBSMO+Ac92XcprFe4WfWVxQPa\npAOvLFbCSzSnCiAmTgOG4WeZUt6exaNSY1OWYP6f5ED1FP9Cvcgl6hFnyXwThjsd\nOLVoN03NQz4Cy9ZVvkwaUiiXvgND+tAUPzyF9XuwV1FuFn0b0Pr4P3k1+Y/fyfDI\n0B44u1ByY4WAOhwF8kZ1dPFsGDv8GGDOron131uY75jX8FJI1taY8D80kUU=\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/etcd/server.crt",
                            "id": "eb8eee4211a889e6ac69a285a96cdb0e703f2327"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_server_key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.server"
                    ],
                    "primary": {
                        "id": "e50e90b12cabf7cdc2945480e02b1ab1a0f93aff",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpQIBAAKCAQEA0IiIQcUy+0NK1/XiALv5de3nKAq4qBh/qMYK3Hw7jg/SE6jF\nyKAKHHhh1yoW0czaDms58YFLkCtRID3++l8a6FHoQG+XGC/j9+Y09R2vtyvdAoHQ\nzbkXBXL7K9xqTKFMKWqE1Wk8d26PnsOixMz+IxIcM8voKixyJaFuHXzZcHN3m9Rw\nF2bKNw+PKpw9eTBdBEwiikz4bezJcOMckNk3YC35RC1cXc5ZzVlriu/KM5p8Irlj\nfLyN2dqgothNShXcYA3xFObdCHdFEoMr5srTR6nqng4VS2ykHJDHKwu1RqUkubpc\nSJvgPRp7vFHAnUonl7SRnW0ABaHPmvV/LV3nQQIDAQABAoIBADmvWwnelBC/d6ev\n49nSJdrCeaww8w3E4SN9zSla0Fqm87Tufe/WnZVsk5wij3dv1G4iqT+uRYnXAbUK\nkUsPHfFgHwAcHk7ZiJVdwA6CLMZdwuBbqrgN2FlwihyC94DFKb1XMvGaD9j145LG\niXMpRa/L5bNKV6m668SPGFfd3oRlXL8w8X1dNtWGsc6VeeRXjTjxRvYSRz8tz1ux\nLLi6TOmpmfHR3PnbF7iDBJYIqFGaUV0oblsKrGyKZSx5Rb32VLDGwoyHeAPaBT4t\nEykZORbyQrWujwuEeeI2nfrP3iBAbEHllFqYE0lgaiyr6S+PHsanmnC2CyyOZPDo\nZEWHELECgYEA6BAYtcFFkQ3opRsY8yQ93ONRHuqxwoc+9vRW6WwYWSuL8Bd6Ruqo\ng/JaG0W4LVgEUtWn7uhQlsFT+PaB69pXQiUMIKQLb/S3zEsFjphwRFiA8A8hb0V/\neTFGs5BnAP3ScyfuaAOVyELZV0eRoj3hmcaRCw8jKnyR4Yzvmz9yzv0CgYEA5gsb\n+zQ+VolAkUceEGyQws0jEA8lFW4u+sfj0JvD2kQv4xWScFnMsgH9OOY8XdT7qeiZ\nmmAEqdKSsKuN8ZvbipU4TXp5KhGAj7HlKL+rZgXySvpzwydbj2UBaDYPvhGS5tuU\n0nm+4g6fBnnVNA5SOVHnK8gM+WFU7qv9fF3vhpUCgYEArFEHiC7zkTpavf7ZD/Kh\nXRwOaH6tcF0tDANzZfC2Q8BqMOW+DlrAtvmGnymuET2COGAeSvCGpur3h67D2nZO\nxPbtgm9NbtywfipW/gODmbx+QcN6eD2K4lsMvNlFIx9W3duQ0/uVhRbefEjQg0Cf\n/KfNnACphCrryCf247jBb6ECgYEA4IaFR/hkw5dwsprkCAm+fLM1fq4ZdsI1DkXc\n37W4Qad9ybk7VXcAJ9lzKn7k+nwvKVXB3f/LbWj+DXtTrjZ939PmwRBBhELS5O0v\nikcQ5iH1qyKprBcU8W8XIXxqfwuuAq7coVV8bizxH6P36Lf1nsaGx5+YsipCeDTb\n0u/oIcUCgYEAnsaIOCqRzaghZmJ0XpxG08ArQNnOjoZxeU6UMb3z965l9bW8rOmL\nDzNvZhrMOqBZChR1P/B00aRlV7CipYoE1RsGGELKuIWQYX74H01+2VETeg9VAhUX\nopu6cbzuWwxzGKj4HYQ9ts7ogK1Wzc0nzyuC7YjVsytRPQzZtcO1vno=\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/etcd/server.key",
                            "id": "e50e90b12cabf7cdc2945480e02b1ab1a0f93aff"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.kube-ca-crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_self_signed_cert.kube-ca.*"
                    ],
                    "primary": {
                        "id": "7aa0281922c32a855a806dfa4e09aae6fc5537ce",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDFjCCAf6gAwIBAgIQe31uOMMqRWMLksRZ4KgbBjANBgkqhkiG9w0BAQsFADAl\nMREwDwYDVQQKEwhib290a3ViZTEQMA4GA1UEAxMHa3ViZS1jYTAeFw0xODA0MDgx\nMjEzMDlaFw0xOTA0MDgxMjEzMDlaMCUxETAPBgNVBAoTCGJvb3RrdWJlMRAwDgYD\nVQQDEwdrdWJlLWNhMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0k3Z\nVU09O+vS/RK34lRuYOqvT9wh4+Pgr1ojfVUPiVPULvVUDljtkCRMpmzq2ep/lhFa\nBUuzliHnuF4fJzx9d5qHBgTBYbrDf5pdfVhzk2yPx5b9gpfnQF5CiHIOGgsYrRBx\noCLJ6iHwIHmB/ACVNkLwSJkpCxeT+1pJe/bx6OPsZqWhongQPZ6aWvDlA/+hNxAs\nyoyWGE+Jf6EnDveJOYUW3hzaVq3IgMWoWb7uXTWWM5Kc2MvXNTmDNPmZ9MKws6XZ\nW9sO5leyHaE4aCDjGc2f5SK8Dhv9/33LMBWabHc6AhAuD4xZzb2pGrG0Z98VZ3XO\nXVdBZhICYjjkdTGqGQIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAqQwDwYDVR0TAQH/\nBAUwAwEB/zAdBgNVHQ4EFgQUWXeacNrHXOj1qHuhBo1LvDM8TAowDQYJKoZIhvcN\nAQELBQADggEBAJxRR0zWCJMeYsMpmekyiGULH3iC5f1FOtPPuZvSnLlJ+jggtokK\n+bTEzFCPZN81b0dPQ3OcOdCt/Nsp/A3zCMxpMa5m1lz6s6roJdkYR2WLbAfV1OyJ\n/KPWRQfYNypb6P16qnxeKKEtPCFnEiOPln1f7031x/AO9X4m0BIy9GsUcwrShbMY\nYa1pgtNaU1hQkDBFRPEVTfpblYyeMmmoL3bk1VWBLQSROtHBCpQ36jjCrKdnDkl3\nwIqzWT66bHA2EWIxz2gnAqP7tKzV8IgfT0SEdxwc4uEKUK/ONkZ6NiLVXbWvvy3g\nysAL+hBViVmH69HpGvCnQoRYVPvLee1dps8=\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/ca.crt",
                            "id": "7aa0281922c32a855a806dfa4e09aae6fc5537ce"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.kube-ca-key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.kube-ca.*"
                    ],
                    "primary": {
                        "id": "91d34442767d51e14be5224ea50e7041b244ad3d",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEA0k3ZVU09O+vS/RK34lRuYOqvT9wh4+Pgr1ojfVUPiVPULvVU\nDljtkCRMpmzq2ep/lhFaBUuzliHnuF4fJzx9d5qHBgTBYbrDf5pdfVhzk2yPx5b9\ngpfnQF5CiHIOGgsYrRBxoCLJ6iHwIHmB/ACVNkLwSJkpCxeT+1pJe/bx6OPsZqWh\nongQPZ6aWvDlA/+hNxAsyoyWGE+Jf6EnDveJOYUW3hzaVq3IgMWoWb7uXTWWM5Kc\n2MvXNTmDNPmZ9MKws6XZW9sO5leyHaE4aCDjGc2f5SK8Dhv9/33LMBWabHc6AhAu\nD4xZzb2pGrG0Z98VZ3XOXVdBZhICYjjkdTGqGQIDAQABAoIBABi8Bz+9IeKWTe5t\n8Sqxe3nyoEPoRCQlfRuiomHvSzB/p4kOWaCGXQqC+nDohoayyebAi7HrwWd6/WH1\nz/wxZSBYEGFo1cXEzZGIek5vxMgmEJMM8ywU6aHsdC7QG1B81Z4lPPf0n4LmEvP+\n1obpGqOTI+el++nOEB2T9OiblsApN7cmEGOf0NXFBnetNsb1B0St+tg1AbLsxqUb\nYlywrFFpmV4FdaIQyxQC0U16pmK/Fcq4OzertWDp8lsAwoaSOCD03QtiqKMtt18v\n8dipb28Q8cZk+2TrIligDznxdZHpn+ctCiOWowE2TD1zBSxoQSc219RVEdOfsCwy\nHOHzDvECgYEA+2hm7TfxMlWz1Pfd0EX1ZyYdNBdBWBgLH3MMp3I+7MBUX/TnAyYf\nmhyLSVucdsH4wVLWCXGcCJNi+uOwcKDpZbj+SoS66edRmIGloE4RywdmRUQzML6N\nxjBJ4GfPVRAL5LgfKxJ/rC9w25pq7nBh/eeUE13rWQSWtno5+BLOJXMCgYEA1iU+\nUlFHWYkiS0aFx/MvncdxMZ61Dz2Pr/9+VJEP/gxSw61VmlxQoleLXYWCY3/0aTXT\nXIopZUMjm/KYBeEK44Rizv+Fge3w5HCQWcaFU5JTIg6T0ahY+FDIlH8vTeJbmL/h\nSrTBAEFlMt+Nwqofg6gAlUvHonqsMRMYhwS7b0MCgYB9ecTtHl+WNKn1X+RoH5J0\ncdRffD/TvORIRP6Kz/1R4kf6QFvP+YYKP7bQ3RVBPFxv+Gz096vdp9ndyCf2foke\niO75uDclqJrT19kXIf/FaiMD7R7zdBeEU/N7ObSECuc0tyRvNeNcx6y3HeHCsXpm\n497Gr7hXjG/AEU6/XnteuwKBgQCrYTkEJhok9NPmTHVKdTw5WGElpe8fWFRDNQUE\nZufWmEQwZ+snUxQRKGDXor6cJM4U2UfjOoswiE/aQYcaxWSyesOdB+/v8N4l5FQS\nFQekv2kay3HPi5xQdk5gUX0pJqvJjl6eLBR9wNhdo33POdlowy5cTT5isSxXRgIO\nJGJhAwKBgCHmxaMAerYuajn0dqzK3xRERaQ20vHH6GpAqpxQ61wgYYlYjBf5FW8F\nfYY0z/OgW7GhGGme3Y1+XNMPwUxnwPkzQMAUxQDg3H5zzKHaxABcdV9JcUTQjX4d\n+/XTOD2Y9OD/LlHeFrZjxf6pVlIa+KCF+9Xk+mc7WDHsEqYG9IeG\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/ca.key",
                            "id": "91d34442767d51e14be5224ea50e7041b244ad3d"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.kubeconfig": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.kubeconfig"
                    ],
                    "primary": {
                        "id": "38105d886f52c472a5dd592653e186a57e0df843",
                        "attributes": {
                            "content": "apiVersion: v1\nkind: Config\nclusters:\n- name: local\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRZTMxdU9NTXFSV01Ma3NSWjRLZ2JCakFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURneApNakV6TURsYUZ3MHhPVEEwTURneE1qRXpNRGxhTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBrM1oKVlUwOU8rdlMvUkszNGxSdVlPcXZUOXdoNCtQZ3Ixb2pmVlVQaVZQVUx2VlVEbGp0a0NSTXBtenEyZXAvbGhGYQpCVXV6bGlIbnVGNGZKeng5ZDVxSEJnVEJZYnJEZjVwZGZWaHprMnlQeDViOWdwZm5RRjVDaUhJT0dnc1lyUkJ4Cm9DTEo2aUh3SUhtQi9BQ1ZOa0x3U0prcEN4ZVQrMXBKZS9ieDZPUHNacVdob25nUVBaNmFXdkRsQS8raE54QXMKeW95V0dFK0pmNkVuRHZlSk9ZVVczaHphVnEzSWdNV29XYjd1WFRXV001S2MyTXZYTlRtRE5QbVo5TUt3czZYWgpXOXNPNWxleUhhRTRhQ0RqR2MyZjVTSzhEaHY5LzMzTE1CV2FiSGM2QWhBdUQ0eFp6YjJwR3JHMFo5OFZaM1hPClhWZEJaaElDWWpqa2RUR3FHUUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVV1hlYWNOckhYT2oxcUh1aEJvMUx2RE04VEFvd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBSnhSUjB6V0NKTWVZc01wbWVreWlHVUxIM2lDNWYxRk90UFB1WnZTbkxsSitqZ2d0b2tLCitiVEV6RkNQWk44MWIwZFBRM09jT2RDdC9Oc3AvQTN6Q014cE1hNW0xbHo2czZyb0pka1lSMldMYkFmVjFPeUoKL0tQV1JRZllOeXBiNlAxNnFueGVLS0V0UENGbkVpT1BsbjFmNzAzMXgvQU85WDRtMEJJeTlHc1Vjd3JTaGJNWQpZYTFwZ3ROYVUxaFFrREJGUlBFVlRmcGJsWXllTW1tb0wzYmsxVldCTFFTUk90SEJDcFEzNmpqQ3JLZG5Ea2wzCndJcXpXVDY2YkhBMkVXSXh6MmduQXFQN3RLelY4SWdmVDBTRWR4d2M0dUVLVUsvT05rWjZOaUxWWGJXdnZ5M2cKeXNBTCtoQlZpVm1INjlIcEd2Q25Rb1JZVlB2TGVlMWRwczg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: kubelet\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lRU3hGY0JMK2cxekd2Vk9sU21JeENkekFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURneApNakV6TURsYUZ3MHhPVEEwTURneE1qRXpNRGxhTUNzeEZ6QVZCZ05WQkFvVERuTjVjM1JsYlRwdFlYTjBaWEp6Ck1SQXdEZ1lEVlFRREV3ZHJkV0psYkdWME1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0MKQVFFQTdOQVBqRDFYWHJJM1MvRmI2eG03MkRXb2ZXNktlUTNuS1k1SGhNZ1l1b1EzcERLdjFhSjZoeDJFbGhOdQpYdVV5clFYVFFmdUNLdlcwa2o2MVg4eWMrU2hFaUhTSkdqWGh5NUNJSisrb25lVzFrT3pHZFAzTTdFMTBBTlltCktPM1pWVEI1OWkzL0RZeWYxL1NJVlBiVVpmY212Wlk0RzQrU0NWS0RCNDU3cXVqMUNzMkFXaEFJV2M0cU8yLzEKemVSb0ZSenZOc2N4U3c1UVR2ZDFySERpdzN3b3NCeDlxS01NOG9QdmR2b0RwbjFBcEFOdEVmRVFjdExVUlE1bgpJRVZlanVveGlGdTV2aFhMb2dMTFhLalZVbnRIM1BKM0ZscElVT3lnaXpOcWZBUEVCczlSS1UvemdRbjJENHp5CmI0d0xUSExhbjBnWXJGV1RVamkwN3FHU0NRSURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWUQKVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdId1lEVlIwagpCQmd3Rm9BVVdYZWFjTnJIWE9qMXFIdWhCbzFMdkRNOFRBb3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQmhuCml5VDF1UUw3N2hKUExicHRoOHE0ZXpyYXBPWFZCZW9GS2VxU2FoeWpQTCtadGRrdkFNMmRSODNSUE1xTU5WOEkKTVRkbllNaUZ0UTRSSENuc0dlUEZ6R3Y0eW1ZdjF4ejNCRTVoaExqOVU3OEo5a0hiQ0t5THlNanJFd3RhU0tlWApTZWw1azFUMHc3aEhvQXBtUTR2ZGRFSUNoS2FyMml5akRjbE5salgwS3h2RVVvSCtwbVVxQXJZVjBnenk3eFR5ClEzdVQvc2lJQzliNXF1a1g0djJpbU9HSGtOcHVCbW91a3JPc2ZvaDE1b0UweDBrWUM2N0I0bElCOGkzTExJV2sKY1FEMWRpdnRTd3RzRTVyUEZ5dXZaY2t2SC83Y3JhbFRBNFUyMXNPdUpENU8yRFZWbXJSWnhJU3psVFIvMS8rRwpoYVlUR05GTWRaRzZtaU15a2xVPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBN05BUGpEMVhYckkzUy9GYjZ4bTcyRFdvZlc2S2VRM25LWTVIaE1nWXVvUTNwREt2CjFhSjZoeDJFbGhOdVh1VXlyUVhUUWZ1Q0t2VzBrajYxWDh5YytTaEVpSFNKR2pYaHk1Q0lKKytvbmVXMWtPekcKZFAzTTdFMTBBTlltS08zWlZUQjU5aTMvRFl5ZjEvU0lWUGJVWmZjbXZaWTRHNCtTQ1ZLREI0NTdxdWoxQ3MyQQpXaEFJV2M0cU8yLzF6ZVJvRlJ6dk5zY3hTdzVRVHZkMXJIRGl3M3dvc0J4OXFLTU04b1B2ZHZvRHBuMUFwQU50CkVmRVFjdExVUlE1bklFVmVqdW94aUZ1NXZoWExvZ0xMWEtqVlVudEgzUEozRmxwSVVPeWdpek5xZkFQRUJzOVIKS1UvemdRbjJENHp5YjR3TFRITGFuMGdZckZXVFVqaTA3cUdTQ1FJREFRQUJBb0lCQURlQ1pjS1h0bDBxSlRBVgorVmZZaG1HZDRrclVtSHpidDIzVVBndHY0K3dFaGc1bEd6WldpYVlXVXpmaWdpS1lVeEtmcE85NGh3Q082NjdFCktEdTJlSzBtdFRuUEp6d1BtVWZnTHlvOVVTY0I2MWQzU09XdmdGTjdyRTl0NHpBQTRNckpQQzFxaHJpa1YrdUYKRkZmbUs4OWk2Wi9URUgvVlhZUDE1V1RtRHpMMlNOakVmUGNCUDlqdk4rR0lyTENlS0o0eW5pVmJ3TW9IekdDTApVZkUxYkVjQktxT1lCMytGelpPdEh0dXdsdG1ERGRadGl1UFpyQjQrN2VRSE1jRXlVWFE1SFE2TFVNbURSamc0Ck1FWVNBRlJ0aUU5VlUzdTlyeUNxQVdjNi9wY2c3K2lWTWFUR0tJVHRtNjNZWDgwY3MzeW9DbkJMZlA5Q2dlNXIKSUhwOEdva0NnWUVBOHA4RmhITkhxbDFDOTRSM2xBRllIdytVOHVVLzJCb0lxOGk5UEpMRmx6WkxzY2p6TnAwWAo0RzkxNDR6a2xablQ4MWpybW13akh2TEhINkkxSXFZTjJIWGUyMkdabUlHbERnbFpoTnVDR0NHZTdaV0R5QlYrCnloQ0hHdDVxSzArK2RScVhuVjJTbWtCSVlwUVN3TjU2K0pyWDRnV2g5UEt2NzkrcFVpK1RPdXNDZ1lFQStkOEwKUHhGZm9odWZOeG9EeHQxRDF6c0E3a21Ray96SkpNMUtObjNtWlYvV2UyeE1wNXROb1ZhM056SDd5bmdWRUw1QgpTNlJjcUp4c3NOSVhWR2J6bHFjLzZJbTlQZG9WNCtaWUpQaWhsVUZ0ZEcySWtRNWVtRThiN2oyZ2xxQkwvWG1ECm56dCt2RGpTWFNIQk9UMnJUME5rN1RJeWJ0NmQvSHkxTXY0Sndkc0NnWUJOZEVyVW4rRFBHSHJhZmVXVzBGOEwKZTNQM253d2t0eHJ4akdJdFJrWGlJaWxFRm56ZWdJUXcyQ1J3Z25ndThpN2h6dzlYK3hHelBab29GU2FWYXlHYwphdlM4WUlvaVQ3RWJyQXh5QjRtZW5vMFlGOVU4T1BDREhZZWtJa0VPbHFTY3llS0JFSEJPNGhxNXJiL1c1cStuClVmZDlab0x2cWRKVTU3Z3NUcGZZQlFLQmdGQ1dxRmpwOEk4bkczMjVEVGpKU2tVVGlhUlE0NmxuSVRTV1pYWVgKdXdROUdiN3EyZnBBczVQeWxOcmZheGNORGJZOXRtK0FEa1p2VlByZWQ1bklMbzRMV1NoVnJFeFRselhPcCtVYwpyM2lsQm5sRGpvVkNQaTRmYmFHMERLUW9CUG8yZzhZS2VVQ1pqdmRzbUpZdWxwN1UzS3RId2s1UnpHQ1BsQjFqCkk2QjdBb0dBR0I4UktuT0Y3SnJyQS8zRDBpRWFCanJ3Wkl6ZStYcGgrTmIwaDlRY0JWcVJLNlJyL3N3c1hIVGMKVVMyWTVrRHNiV05pckQ3azZmVnZKYklKcysra0U5MHpld0ZOQXZTWjlmK1dSZGl1dGoyQURsSFduTjJvcW9ZMgpSbGlHbTZqdXU1bDVtVHVKaXEzWGtUREVZeEhtK3M5N2hvWmpraDRmaWVObTg5SkdVR1E9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\ncontexts:\n- context:\n    cluster: local\n    user: kubelet\n",
                            "filename": "assets/auth/kubeconfig",
                            "id": "38105d886f52c472a5dd592653e186a57e0df843"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.kubelet-crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_locally_signed_cert.kubelet"
                    ],
                    "primary": {
                        "id": "97433dae120ebe3db1b30427a368aeaa57497682",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDOjCCAiKgAwIBAgIQSxFcBL+g1zGvVOlSmIxCdzANBgkqhkiG9w0BAQsFADAl\nMREwDwYDVQQKEwhib290a3ViZTEQMA4GA1UEAxMHa3ViZS1jYTAeFw0xODA0MDgx\nMjEzMDlaFw0xOTA0MDgxMjEzMDlaMCsxFzAVBgNVBAoTDnN5c3RlbTptYXN0ZXJz\nMRAwDgYDVQQDEwdrdWJlbGV0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC\nAQEA7NAPjD1XXrI3S/Fb6xm72DWofW6KeQ3nKY5HhMgYuoQ3pDKv1aJ6hx2ElhNu\nXuUyrQXTQfuCKvW0kj61X8yc+ShEiHSJGjXhy5CIJ++oneW1kOzGdP3M7E10ANYm\nKO3ZVTB59i3/DYyf1/SIVPbUZfcmvZY4G4+SCVKDB457quj1Cs2AWhAIWc4qO2/1\nzeRoFRzvNscxSw5QTvd1rHDiw3wosBx9qKMM8oPvdvoDpn1ApANtEfEQctLURQ5n\nIEVejuoxiFu5vhXLogLLXKjVUntH3PJ3FlpIUOygizNqfAPEBs9RKU/zgQn2D4zy\nb4wLTHLan0gYrFWTUji07qGSCQIDAQABo2AwXjAOBgNVHQ8BAf8EBAMCBaAwHQYD\nVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHwYDVR0j\nBBgwFoAUWXeacNrHXOj1qHuhBo1LvDM8TAowDQYJKoZIhvcNAQELBQADggEBABhn\niyT1uQL77hJPLbpth8q4ezrapOXVBeoFKeqSahyjPL+ZtdkvAM2dR83RPMqMNV8I\nMTdnYMiFtQ4RHCnsGePFzGv4ymYv1xz3BE5hhLj9U78J9kHbCKyLyMjrEwtaSKeX\nSel5k1T0w7hHoApmQ4vddEIChKar2iyjDclNljX0KxvEUoH+pmUqArYV0gzy7xTy\nQ3uT/siIC9b5qukX4v2imOGHkNpuBmoukrOsfoh15oE0x0kYC67B4lIB8i3LLIWk\ncQD1divtSwtsE5rPFyuvZckvH/7cralTA4U21sOuJD5O2DVVmrRZxISzlTR/1/+G\nhaYTGNFMdZG6miMyklU=\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/kubelet.crt",
                            "id": "97433dae120ebe3db1b30427a368aeaa57497682"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.kubelet-key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.kubelet"
                    ],
                    "primary": {
                        "id": "be51c74929826deb302ff97d7ee00919f5f711c0",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEA7NAPjD1XXrI3S/Fb6xm72DWofW6KeQ3nKY5HhMgYuoQ3pDKv\n1aJ6hx2ElhNuXuUyrQXTQfuCKvW0kj61X8yc+ShEiHSJGjXhy5CIJ++oneW1kOzG\ndP3M7E10ANYmKO3ZVTB59i3/DYyf1/SIVPbUZfcmvZY4G4+SCVKDB457quj1Cs2A\nWhAIWc4qO2/1zeRoFRzvNscxSw5QTvd1rHDiw3wosBx9qKMM8oPvdvoDpn1ApANt\nEfEQctLURQ5nIEVejuoxiFu5vhXLogLLXKjVUntH3PJ3FlpIUOygizNqfAPEBs9R\nKU/zgQn2D4zyb4wLTHLan0gYrFWTUji07qGSCQIDAQABAoIBADeCZcKXtl0qJTAV\n+VfYhmGd4krUmHzbt23UPgtv4+wEhg5lGzZWiaYWUzfigiKYUxKfpO94hwCO667E\nKDu2eK0mtTnPJzwPmUfgLyo9UScB61d3SOWvgFN7rE9t4zAA4MrJPC1qhrikV+uF\nFFfmK89i6Z/TEH/VXYP15WTmDzL2SNjEfPcBP9jvN+GIrLCeKJ4yniVbwMoHzGCL\nUfE1bEcBKqOYB3+FzZOtHtuwltmDDdZtiuPZrB4+7eQHMcEyUXQ5HQ6LUMmDRjg4\nMEYSAFRtiE9VU3u9ryCqAWc6/pcg7+iVMaTGKITtm63YX80cs3yoCnBLfP9Cge5r\nIHp8GokCgYEA8p8FhHNHql1C94R3lAFYHw+U8uU/2BoIq8i9PJLFlzZLscjzNp0X\n4G9144zklZnT81jrmmwjHvLHH6I1IqYN2HXe22GZmIGlDglZhNuCGCGe7ZWDyBV+\nyhCHGt5qK0++dRqXnV2SmkBIYpQSwN56+JrX4gWh9PKv79+pUi+TOusCgYEA+d8L\nPxFfohufNxoDxt1D1zsA7kmQk/zJJM1KNn3mZV/We2xMp5tNoVa3NzH7yngVEL5B\nS6RcqJxssNIXVGbzlqc/6Im9PdoV4+ZYJPihlUFtdG2IkQ5emE8b7j2glqBL/XmD\nnzt+vDjSXSHBOT2rT0Nk7TIybt6d/Hy1Mv4JwdsCgYBNdErUn+DPGHrafeWW0F8L\ne3P3nwwktxrxjGItRkXiIilEFnzegIQw2CRwgngu8i7hzw9X+xGzPZooFSaVayGc\navS8YIoiT7EbrAxyB4meno0YF9U8OPCDHYekIkEOlqScyeKBEHBO4hq5rb/W5q+n\nUfd9ZoLvqdJU57gsTpfYBQKBgFCWqFjp8I8nG325DTjJSkUTiaRQ46lnITSWZXYX\nuwQ9Gb7q2fpAs5PylNrfaxcNDbY9tm+ADkZvVPred5nILo4LWShVrExTlzXOp+Uc\nr3ilBnlDjoVCPi4fbaG0DKQoBPo2g8YKeUCZjvdsmJYulp7U3KtHwk5RzGCPlB1j\nI6B7AoGAGB8RKnOF7JrrA/3D0iEaBjrwZIze+Xph+Nb0h9QcBVqRK6Rr/swsXHTc\nUS2Y5kDsbWNirD7k6fVvJbIJs++kE90zewFNAvSZ9f+WRdiutj2ADlHWnN2oqoY2\nRliGm6juu5l5mTuJiq3XkTDEYxHm+s97hoZjkh4fieNm89JGUGQ=\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/kubelet.key",
                            "id": "be51c74929826deb302ff97d7ee00919f5f711c0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.service-account-crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.service-account"
                    ],
                    "primary": {
                        "id": "7a885ec0eef251dfffcf6ddf7fda954dc5ef53d1",
                        "attributes": {
                            "content": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5eGOuyD/paO66pcRQHl+\ndfkWWT/dfNH2pcpxIQlkYEUxm3HZoc13RVR7DwnllaOQZgMaBNjhNSEfXtv1ttrg\nMtukrum4i6P+rFsQgo/XAXrdpG8c0YmPV2aoQrns4Wvv/925rhrW1uWrz4ernAWp\na3fxP02d/5orksOzPcmtVdmK70k+PbOXZysgHgrlkAT4g/rPsDR5VRLb9VeNqajW\nXupPyj28cImHGwdRGC9nMIV1ozxqV3bvxMf3cTm1r8xWyiULc8huU4HWN/zUs49f\nTgdAGDTLpJLKH2ox1sX+Khb/EHIHGf6Kn22qmBsecJbfvcnw+37cLwAw9YvKC0bO\niwIDAQAB\n-----END PUBLIC KEY-----\n",
                            "filename": "assets/tls/service-account.pub",
                            "id": "7a885ec0eef251dfffcf6ddf7fda954dc5ef53d1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.service-account-key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.service-account"
                    ],
                    "primary": {
                        "id": "25b1ce517a62353b1ed32d0c71da2f45f76ddb54",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEA5eGOuyD/paO66pcRQHl+dfkWWT/dfNH2pcpxIQlkYEUxm3HZ\noc13RVR7DwnllaOQZgMaBNjhNSEfXtv1ttrgMtukrum4i6P+rFsQgo/XAXrdpG8c\n0YmPV2aoQrns4Wvv/925rhrW1uWrz4ernAWpa3fxP02d/5orksOzPcmtVdmK70k+\nPbOXZysgHgrlkAT4g/rPsDR5VRLb9VeNqajWXupPyj28cImHGwdRGC9nMIV1ozxq\nV3bvxMf3cTm1r8xWyiULc8huU4HWN/zUs49fTgdAGDTLpJLKH2ox1sX+Khb/EHIH\nGf6Kn22qmBsecJbfvcnw+37cLwAw9YvKC0bOiwIDAQABAoIBAFH1t3PUchFWbOAS\n+F2qc4IQSv2LHabRHUVDBk6nEJiaUvN/Bf8ASJP5aN6Vwrs1U9hrJq2vvau5oXuq\npNKK+wBm+zI5tkhjMfu1hA9oxVmLutZTn0y95NNekIMp0uEUIL9zCC6g9xQrUrRt\nRKweAKeGXgcZ30kwaHStPYy8CQbgGfkdAs9incrtCMtfS0zy9JN5WCG929lyhj0g\nmYBBwOKHcc98j3lqMy9FziybqXq9twBRBaEhYNDDJ5rMI/g4ORseFulpk6xUMbs7\nUy7QvpUUyd/rGDt2GKowv/rJ/ao+K2euggmjDjJ5JOxY4XvxFYqpRwwOMy+Y7crm\n/PiWCDECgYEA98dLzkGPwBMLGVAcO07Ase1B/wAMJaCcShD4Mej8rbRZtwA1Uy1C\nrAsp0bCJKmfE3smoIAmUfGrNsoCzARAMLpAtyMdQGzeMDy4ys739Rt75m0AdXZ/h\n6JS2i3Co3T5EfJEz+PVeaziWz6av5clx8Mi32eYRSgdR9MLKqv6NkrcCgYEA7YI8\nSEwxBPRs8P9SRTy0xy/HhcfHafQR892BOk4lTH1VoJ+g9AhsmpSIWl5neuD++d7n\nVoeRfFV8ZtaVwDYs9WAfsCcE/SuxyIjYwvRYKo6dHUmhO9rx08y6xQPnWePp8A9A\nDWV+1wJQO8GyPZL6lTUy2iGekypJciBAf4igPs0CgYEAjS8rW7Bx15FCTr8eBxE9\nrWSyqTl+smYNCAsZUV8fs17DjAn7WJS+m8eUoZ4E2nvcatHfEbpDuI0m/iJlXSKm\nvlV7MR+Y3plNHk1FqLOGQT7GXZcv5Gw4zk0Govej0MUtQwl94sr1bQUGsfWZ3sZl\nPT0xvWBh05vOMDhaQQrg4osCgYEA0Go5ReP+G+/07SHPasxTgnqt5foiRhqT6mAU\ndzp9xnoxOor5LUt7KcZvRIWU3qIzfMaaUDcUdnt5d7CTpiCkIQohpG0JFrRSBLv5\nIlJST73npvymjKSbEpWTyzCawimabjqjpV3MCRaRm25kX13roCUXo4xe35r66jfd\nAUy9+X0CgYAUQ8Go2HsFPOm1f0Q+bvOyEZbBLu/QEU2OVRq+kxSfxQuSLutrer6j\nNhwryzQNu87FH5hRh3S4xgShTEEu9SGQAaR32bBtxqney2bhbAuwplfkhZPXJWCu\ngefpcYNebIH7cKjxuoT9jdfl1l8sBUX8GnkzeKYK5RJGAjSZ8J+2Fg==\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/service-account.key",
                            "id": "25b1ce517a62353b1ed32d0c71da2f45f76ddb54"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.user-kubeconfig": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.user-kubeconfig"
                    ],
                    "primary": {
                        "id": "5b314fdd851297422e2c4b43aacfe7dee06ecdaf",
                        "attributes": {
                            "content": "apiVersion: v1\nkind: Config\nclusters:\n- name: steve-cluster\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRZTMxdU9NTXFSV01Ma3NSWjRLZ2JCakFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURneApNakV6TURsYUZ3MHhPVEEwTURneE1qRXpNRGxhTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBrM1oKVlUwOU8rdlMvUkszNGxSdVlPcXZUOXdoNCtQZ3Ixb2pmVlVQaVZQVUx2VlVEbGp0a0NSTXBtenEyZXAvbGhGYQpCVXV6bGlIbnVGNGZKeng5ZDVxSEJnVEJZYnJEZjVwZGZWaHprMnlQeDViOWdwZm5RRjVDaUhJT0dnc1lyUkJ4Cm9DTEo2aUh3SUhtQi9BQ1ZOa0x3U0prcEN4ZVQrMXBKZS9ieDZPUHNacVdob25nUVBaNmFXdkRsQS8raE54QXMKeW95V0dFK0pmNkVuRHZlSk9ZVVczaHphVnEzSWdNV29XYjd1WFRXV001S2MyTXZYTlRtRE5QbVo5TUt3czZYWgpXOXNPNWxleUhhRTRhQ0RqR2MyZjVTSzhEaHY5LzMzTE1CV2FiSGM2QWhBdUQ0eFp6YjJwR3JHMFo5OFZaM1hPClhWZEJaaElDWWpqa2RUR3FHUUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVV1hlYWNOckhYT2oxcUh1aEJvMUx2RE04VEFvd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBSnhSUjB6V0NKTWVZc01wbWVreWlHVUxIM2lDNWYxRk90UFB1WnZTbkxsSitqZ2d0b2tLCitiVEV6RkNQWk44MWIwZFBRM09jT2RDdC9Oc3AvQTN6Q014cE1hNW0xbHo2czZyb0pka1lSMldMYkFmVjFPeUoKL0tQV1JRZllOeXBiNlAxNnFueGVLS0V0UENGbkVpT1BsbjFmNzAzMXgvQU85WDRtMEJJeTlHc1Vjd3JTaGJNWQpZYTFwZ3ROYVUxaFFrREJGUlBFVlRmcGJsWXllTW1tb0wzYmsxVldCTFFTUk90SEJDcFEzNmpqQ3JLZG5Ea2wzCndJcXpXVDY2YkhBMkVXSXh6MmduQXFQN3RLelY4SWdmVDBTRWR4d2M0dUVLVUsvT05rWjZOaUxWWGJXdnZ5M2cKeXNBTCtoQlZpVm1INjlIcEd2Q25Rb1JZVlB2TGVlMWRwczg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: steve-user\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lRU3hGY0JMK2cxekd2Vk9sU21JeENkekFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURneApNakV6TURsYUZ3MHhPVEEwTURneE1qRXpNRGxhTUNzeEZ6QVZCZ05WQkFvVERuTjVjM1JsYlRwdFlYTjBaWEp6Ck1SQXdEZ1lEVlFRREV3ZHJkV0psYkdWME1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0MKQVFFQTdOQVBqRDFYWHJJM1MvRmI2eG03MkRXb2ZXNktlUTNuS1k1SGhNZ1l1b1EzcERLdjFhSjZoeDJFbGhOdQpYdVV5clFYVFFmdUNLdlcwa2o2MVg4eWMrU2hFaUhTSkdqWGh5NUNJSisrb25lVzFrT3pHZFAzTTdFMTBBTlltCktPM1pWVEI1OWkzL0RZeWYxL1NJVlBiVVpmY212Wlk0RzQrU0NWS0RCNDU3cXVqMUNzMkFXaEFJV2M0cU8yLzEKemVSb0ZSenZOc2N4U3c1UVR2ZDFySERpdzN3b3NCeDlxS01NOG9QdmR2b0RwbjFBcEFOdEVmRVFjdExVUlE1bgpJRVZlanVveGlGdTV2aFhMb2dMTFhLalZVbnRIM1BKM0ZscElVT3lnaXpOcWZBUEVCczlSS1UvemdRbjJENHp5CmI0d0xUSExhbjBnWXJGV1RVamkwN3FHU0NRSURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWUQKVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdId1lEVlIwagpCQmd3Rm9BVVdYZWFjTnJIWE9qMXFIdWhCbzFMdkRNOFRBb3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQmhuCml5VDF1UUw3N2hKUExicHRoOHE0ZXpyYXBPWFZCZW9GS2VxU2FoeWpQTCtadGRrdkFNMmRSODNSUE1xTU5WOEkKTVRkbllNaUZ0UTRSSENuc0dlUEZ6R3Y0eW1ZdjF4ejNCRTVoaExqOVU3OEo5a0hiQ0t5THlNanJFd3RhU0tlWApTZWw1azFUMHc3aEhvQXBtUTR2ZGRFSUNoS2FyMml5akRjbE5salgwS3h2RVVvSCtwbVVxQXJZVjBnenk3eFR5ClEzdVQvc2lJQzliNXF1a1g0djJpbU9HSGtOcHVCbW91a3JPc2ZvaDE1b0UweDBrWUM2N0I0bElCOGkzTExJV2sKY1FEMWRpdnRTd3RzRTVyUEZ5dXZaY2t2SC83Y3JhbFRBNFUyMXNPdUpENU8yRFZWbXJSWnhJU3psVFIvMS8rRwpoYVlUR05GTWRaRzZtaU15a2xVPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBN05BUGpEMVhYckkzUy9GYjZ4bTcyRFdvZlc2S2VRM25LWTVIaE1nWXVvUTNwREt2CjFhSjZoeDJFbGhOdVh1VXlyUVhUUWZ1Q0t2VzBrajYxWDh5YytTaEVpSFNKR2pYaHk1Q0lKKytvbmVXMWtPekcKZFAzTTdFMTBBTlltS08zWlZUQjU5aTMvRFl5ZjEvU0lWUGJVWmZjbXZaWTRHNCtTQ1ZLREI0NTdxdWoxQ3MyQQpXaEFJV2M0cU8yLzF6ZVJvRlJ6dk5zY3hTdzVRVHZkMXJIRGl3M3dvc0J4OXFLTU04b1B2ZHZvRHBuMUFwQU50CkVmRVFjdExVUlE1bklFVmVqdW94aUZ1NXZoWExvZ0xMWEtqVlVudEgzUEozRmxwSVVPeWdpek5xZkFQRUJzOVIKS1UvemdRbjJENHp5YjR3TFRITGFuMGdZckZXVFVqaTA3cUdTQ1FJREFRQUJBb0lCQURlQ1pjS1h0bDBxSlRBVgorVmZZaG1HZDRrclVtSHpidDIzVVBndHY0K3dFaGc1bEd6WldpYVlXVXpmaWdpS1lVeEtmcE85NGh3Q082NjdFCktEdTJlSzBtdFRuUEp6d1BtVWZnTHlvOVVTY0I2MWQzU09XdmdGTjdyRTl0NHpBQTRNckpQQzFxaHJpa1YrdUYKRkZmbUs4OWk2Wi9URUgvVlhZUDE1V1RtRHpMMlNOakVmUGNCUDlqdk4rR0lyTENlS0o0eW5pVmJ3TW9IekdDTApVZkUxYkVjQktxT1lCMytGelpPdEh0dXdsdG1ERGRadGl1UFpyQjQrN2VRSE1jRXlVWFE1SFE2TFVNbURSamc0Ck1FWVNBRlJ0aUU5VlUzdTlyeUNxQVdjNi9wY2c3K2lWTWFUR0tJVHRtNjNZWDgwY3MzeW9DbkJMZlA5Q2dlNXIKSUhwOEdva0NnWUVBOHA4RmhITkhxbDFDOTRSM2xBRllIdytVOHVVLzJCb0lxOGk5UEpMRmx6WkxzY2p6TnAwWAo0RzkxNDR6a2xablQ4MWpybW13akh2TEhINkkxSXFZTjJIWGUyMkdabUlHbERnbFpoTnVDR0NHZTdaV0R5QlYrCnloQ0hHdDVxSzArK2RScVhuVjJTbWtCSVlwUVN3TjU2K0pyWDRnV2g5UEt2NzkrcFVpK1RPdXNDZ1lFQStkOEwKUHhGZm9odWZOeG9EeHQxRDF6c0E3a21Ray96SkpNMUtObjNtWlYvV2UyeE1wNXROb1ZhM056SDd5bmdWRUw1QgpTNlJjcUp4c3NOSVhWR2J6bHFjLzZJbTlQZG9WNCtaWUpQaWhsVUZ0ZEcySWtRNWVtRThiN2oyZ2xxQkwvWG1ECm56dCt2RGpTWFNIQk9UMnJUME5rN1RJeWJ0NmQvSHkxTXY0Sndkc0NnWUJOZEVyVW4rRFBHSHJhZmVXVzBGOEwKZTNQM253d2t0eHJ4akdJdFJrWGlJaWxFRm56ZWdJUXcyQ1J3Z25ndThpN2h6dzlYK3hHelBab29GU2FWYXlHYwphdlM4WUlvaVQ3RWJyQXh5QjRtZW5vMFlGOVU4T1BDREhZZWtJa0VPbHFTY3llS0JFSEJPNGhxNXJiL1c1cStuClVmZDlab0x2cWRKVTU3Z3NUcGZZQlFLQmdGQ1dxRmpwOEk4bkczMjVEVGpKU2tVVGlhUlE0NmxuSVRTV1pYWVgKdXdROUdiN3EyZnBBczVQeWxOcmZheGNORGJZOXRtK0FEa1p2VlByZWQ1bklMbzRMV1NoVnJFeFRselhPcCtVYwpyM2lsQm5sRGpvVkNQaTRmYmFHMERLUW9CUG8yZzhZS2VVQ1pqdmRzbUpZdWxwN1UzS3RId2s1UnpHQ1BsQjFqCkk2QjdBb0dBR0I4UktuT0Y3SnJyQS8zRDBpRWFCanJ3Wkl6ZStYcGgrTmIwaDlRY0JWcVJLNlJyL3N3c1hIVGMKVVMyWTVrRHNiV05pckQ3azZmVnZKYklKcysra0U5MHpld0ZOQXZTWjlmK1dSZGl1dGoyQURsSFduTjJvcW9ZMgpSbGlHbTZqdXU1bDVtVHVKaXEzWGtUREVZeEhtK3M5N2hvWmpraDRmaWVObTg5SkdVR1E9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\ncontexts:\n- name: steve-context\n  context:\n    cluster: steve-cluster\n    user: steve-user\n",
                            "filename": "assets/auth/steve-config",
                            "id": "5b314fdd851297422e2c4b43aacfe7dee06ecdaf"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "template_dir.bootstrap-manifests": {
                    "type": "template_dir",
                    "depends_on": [],
                    "primary": {
                        "id": "2fab777125ea6064c1f49bc9580cc2c75e15ca22",
                        "attributes": {
                            "destination_dir": "assets/bootstrap-manifests",
                            "id": "2fab777125ea6064c1f49bc9580cc2c75e15ca22",
                            "source_dir": "/opt/cluster-config/terraform/.terraform/modules/ea39d6d476cd18bf0c8b076127e11683/resources/bootstrap-manifests",
                            "vars.%": "5",
                            "vars.cloud_provider": "",
                            "vars.etcd_servers": "https://n2.steve:2379",
                            "vars.hyperkube_image": "gcr.io/google_containers/hyperkube:v1.10.0",
                            "vars.pod_cidr": "10.2.0.0/16",
                            "vars.service_cidr": "10.3.0.0/16"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "template_dir.calico-manifests": {
                    "type": "template_dir",
                    "depends_on": [],
                    "primary": {
                        "id": "04e8761416f34c8037b74d5cb35684cb5805616e",
                        "attributes": {
                            "destination_dir": "assets/manifests-networking",
                            "id": "04e8761416f34c8037b74d5cb35684cb5805616e",
                            "source_dir": "/opt/cluster-config/terraform/.terraform/modules/ea39d6d476cd18bf0c8b076127e11683/resources/calico",
                            "vars.%": "4",
                            "vars.calico_cni_image": "quay.io/calico/cni:v2.0.1",
                            "vars.calico_image": "quay.io/calico/node:v3.0.4",
                            "vars.network_mtu": "1480",
                            "vars.pod_cidr": "10.2.0.0/16"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "template_dir.manifests": {
                    "type": "template_dir",
                    "depends_on": [
                        "tls_locally_signed_cert.apiserver",
                        "tls_locally_signed_cert.client",
                        "tls_private_key.apiserver",
                        "tls_private_key.client",
                        "tls_private_key.service-account",
                        "tls_self_signed_cert.etcd-ca",
                        "tls_self_signed_cert.kube-ca.*"
                    ],
                    "primary": {
                        "id": "dee9b7004883e217ddd4a48f452e61de77f6afa1",
                        "attributes": {
                            "destination_dir": "assets/manifests",
                            "id": "dee9b7004883e217ddd4a48f452e61de77f6afa1",
                            "source_dir": "/opt/cluster-config/terraform/.terraform/modules/ea39d6d476cd18bf0c8b076127e11683/resources/manifests",
                            "vars.%": "20",
                            "vars.apiserver_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR0ekNDQXArZ0F3SUJBZ0lSQU1DWS8xK3FDM0tneG1JNW5NUlBDOWN3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBNApNVEl4TXpBNVdoY05NVGt3TkRBNE1USXhNekE1V2pBdk1SUXdFZ1lEVlFRS0V3dHJkV0psTFcxaGMzUmxjakVYCk1CVUdBMVVFQXhNT2EzVmlaUzFoY0dselpYSjJaWEl3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXcKZ2dFS0FvSUJBUUNsTG5oejZFN3VBTWtpMnk3aFVCYlNQdHlyaHRzdkF4bDM2OGZvYk0ycUdnNGZNNE9FczU1aQpDNVdaN0creTFYVTZITFpNOGFDLzNmajJEbGlWNFJRMjliVWpEMGRsa2pXOEFtd1pHekd6Ni9TSUJtK3RNeGhWCkY0WjJRbjRvZHE3UUJPbFB4VXQ2U2RSSlladzlESFpVcGMyRG5RL21XanZUZytDclVlUzRQOW55UVRhdHptd1UKdEdiN08yL2pUZHg0Tk95Z2xxTnl4NzY0YWVtWjQvNzRxY2ozd0NMWmJIU2VQbzBnTzNMOWI3eXM0SzhvamM1KwpCU1V4WVlwdlE5Q3VNTEp0ZDBISE80ekF3dEtSR3VwcjR3MGZsSmVZbTVuRFdlZERDa291WGwyTWtHM01VRXlHCnVZTWg3Z20xR0xSMmpUK212Z1duNncrVnN0UXlIbnQzQWdNQkFBR2pnZGN3Z2RRd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQjhHQTFVZEl3UVlNQmFBRkZsM21uRGF4MXpvOWFoN29RYU5TN3d6UEV3S01IUUdBMVVkRVFSdE1HdUNCWE4wClpYWmxnZ3ByZFdKbGNtNWxkR1Z6Z2hKcmRXSmxjbTVsZEdWekxtUmxabUYxYkhTQ0ZtdDFZbVZ5Ym1WMFpYTXUKWkdWbVlYVnNkQzV6ZG1PQ0pHdDFZbVZ5Ym1WMFpYTXVaR1ZtWVhWc2RDNXpkbU11WTJ4MWMzUmxjaTVzYjJOaApiSWNFQ2dNQUFUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFsQk0yL1N0cUJVcVVDaldnaEdUbWsxTEd4MHp5Ckp2VUp3NzZYRncxOTRiK3RZQ3Q1L3Bva0tlVXJYNW51RmdtZWdmZHl0Rkk3UnVJS0EybUFhWEhrdE5UbTJvdDgKckExbEYvSDIwRFZJRmY4RjBvZEdvS3VxSEo4K3A3VzJXVGVTRCtvZlBwWmtBT25rVGE3RUplVHRSdVZ3TzdBNgpmZmdzNVRFOTFtSjh3Y2VVV1NRdmlNN0NWZFJxWmQ1WXd1MUQvVW8rYTEvLzVDMXZmVXA3MjhzUjdCa1RDckdCClFURjZQc1V6WUVQVC9RdnJGZWhOWGROazlvMTl3SzBzY2N1K0RYK1Fxc1lRaURYNjExU3BlakZVUzcvOHRJZHIKdUZLV3BjMVNIeEdlQTZrMDhXUWFDbFluOUpCcHlmMmtGOVpGTndTNCtpRG1jdmI0SjRWL2NuMmxvQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
                            "vars.apiserver_key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcFM1NGMraE83Z0RKSXRzdTRWQVcwajdjcTRiYkx3TVpkK3ZINkd6TnFob09Iek9ECmhMT2VZZ3VWbWV4dnN0VjFPaHkyVFBHZ3Y5MzQ5ZzVZbGVFVU52VzFJdzlIWlpJMXZBSnNHUnN4cyt2MGlBWnYKclRNWVZSZUdka0orS0hhdTBBVHBUOFZMZWtuVVNXR2NQUXgyVktYTmc1MFA1bG83MDRQZ3ExSGt1RC9aOGtFMgpyYzVzRkxSbSt6dHY0MDNjZURUc29KYWpjc2UrdUducG1lUCsrS25JOThBaTJXeDBuajZOSUR0eS9XKzhyT0N2CktJM09mZ1VsTVdHS2IwUFFyakN5YlhkQnh6dU13TUxTa1JycWErTU5INVNYbUp1Wncxbm5Rd3BLTGw1ZGpKQnQKekZCTWhybURJZTRKdFJpMGRvMC9wcjRGcCtzUGxiTFVNaDU3ZHdJREFRQUJBb0lCQUNzMTFOeTlVS2lDSEJ1NgpLckZXT2lJVnY3US9PdWM1Y0ZnbW5jejNhWFd1Q3pPdVRpRlF1NFg2Y2RBcVFhNE9tUFB5dnQyeDk5TTVSZjlZCkVXUmoxTjNydU03TEdHcEJyVHpaaFYycjkzeVJwUTVRWUxaMlAwOURNREdQZzJFaWF1aVA0RmkxeStEWm4yYnkKMmVRK2RsWCthWnljWWFSb3htMjJlZmRYSFBYMWttRTFRZGRxb3FBb2VSb0NiK2tISjhzYmVKaU0zWVduSk9UNAp6NUdiR291aUF4VDBXdS9NSnlCcEp3UGlRZ2lMdloyRlFGdzFvZzhXMFA5UFVIVkswbTlBelFuMGxFd0xqQmtICnpZV1JXMkxpOGJoV0xTQUtNUTdVUi8vK2Q4Mlk3Ym1uUmtGenJtc3ZPVFBadjhOS0FnQU0vc0s2dC9DTmlEdDIKVE0yTXRNRUNnWUVBeERWYktIQW1uZ0o1dE9MMEtWdk5maDluV2FtLys3eXQ2b1M5VXBFcU1JcjJRTzQ0SEVaZApqS3IrSmZhTU93dm4vSFN2YkxLOEtTazA0SDh1U1o3QkI4WDdMSnFvNThBUXI2R3ZtL3c0K2N6OEppdFBXWmtnCmVmd2F1dHE4YVBFbCtSU3pXancyc3hCM3NKMDNta2t6aEoydzkxSWpsVjRpSjJhRFdDdzE0V1VDZ1lFQTE0U2oKbDA5RXZrTE5mZHEwVUFqRkM0YzVSVUdKd0tQK01pZUdEblRxWFROV1gyL0w0VDNIUHpUVWlsUDBMV09saGdZMwpRNklNY2dOVVkyektRS0JSN2lXdWx2dit3aS9KSlBlWWJtaDE3MXpkd1NmL1paREF3STN5UW5HR2daeUpreU5VCjVSVWw1OWdDY1pkc2I3UmhXRkFZWTFVUEhDUDBRajNJQjM1TTZhc0NnWUFXR1FCRVJLVkV4SGlhazdqMTgzM28KUjNjblZRUG5RUy9CS3VQN3FaZTcwZHE4STFnMGJ3UllOR1hkTnJCQ2NpdlZkZnJQM2kxczRWUXdPSUtwRGZVbApmL215NDFSRWpaQVRoNzAwYnlxbmo1dVNYT3haNWZJUGF3SkRxeUR2SE1HdkZOTENSZWZQTVBxWjdJcjNtR2p4CjlhU1pwaW1WeC8xR3ZMZnNOVVo0TlFLQmdRQ0E3M0dQakhUci9ydEJtQjVYNDJjL1JsOFU5K2ladjRMTUxxa2MKN1FWcFROVlhzMktlRm4rbGFNM2ZFK3I1WEt3aVNvVzFpTFU1WUpTVUJ2blpRQkRFRVBjcWpRZ1UxTkhacytjVgo1cGpuNHY4b0YrM0xyWllqbk1oYXgrQlltbllUK1FkSkppWFBWb1Bmd1YrMlZJd0ljYUtsaXJYSGVCc2hwaVNOCmx4b2NrUUtCZ1FDT1NjS1dwcmErNTM2UmZubnBLTU1CK2hvS2s2dHowU2JpYzZQcnRPdzF6R1hFdVhuL1RPYzkKY2F2SjdlUmprZHE5ek01Nk1kT2xGaHdyMGxnMitFWDY5STVNY1JuRHB2QW5RTGRzOFUyMnhlb0FxWGUvVzBUeApXUFY5RmFSZjVvKzRwclFLR2FuakRvSmw4d0RmN3FOTkQ1Rjk1dFlhamNFZTgrTWhFaWJJRUE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=",
                            "vars.ca_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRZTMxdU9NTXFSV01Ma3NSWjRLZ2JCakFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURneApNakV6TURsYUZ3MHhPVEEwTURneE1qRXpNRGxhTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBrM1oKVlUwOU8rdlMvUkszNGxSdVlPcXZUOXdoNCtQZ3Ixb2pmVlVQaVZQVUx2VlVEbGp0a0NSTXBtenEyZXAvbGhGYQpCVXV6bGlIbnVGNGZKeng5ZDVxSEJnVEJZYnJEZjVwZGZWaHprMnlQeDViOWdwZm5RRjVDaUhJT0dnc1lyUkJ4Cm9DTEo2aUh3SUhtQi9BQ1ZOa0x3U0prcEN4ZVQrMXBKZS9ieDZPUHNacVdob25nUVBaNmFXdkRsQS8raE54QXMKeW95V0dFK0pmNkVuRHZlSk9ZVVczaHphVnEzSWdNV29XYjd1WFRXV001S2MyTXZYTlRtRE5QbVo5TUt3czZYWgpXOXNPNWxleUhhRTRhQ0RqR2MyZjVTSzhEaHY5LzMzTE1CV2FiSGM2QWhBdUQ0eFp6YjJwR3JHMFo5OFZaM1hPClhWZEJaaElDWWpqa2RUR3FHUUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVV1hlYWNOckhYT2oxcUh1aEJvMUx2RE04VEFvd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBSnhSUjB6V0NKTWVZc01wbWVreWlHVUxIM2lDNWYxRk90UFB1WnZTbkxsSitqZ2d0b2tLCitiVEV6RkNQWk44MWIwZFBRM09jT2RDdC9Oc3AvQTN6Q014cE1hNW0xbHo2czZyb0pka1lSMldMYkFmVjFPeUoKL0tQV1JRZllOeXBiNlAxNnFueGVLS0V0UENGbkVpT1BsbjFmNzAzMXgvQU85WDRtMEJJeTlHc1Vjd3JTaGJNWQpZYTFwZ3ROYVUxaFFrREJGUlBFVlRmcGJsWXllTW1tb0wzYmsxVldCTFFTUk90SEJDcFEzNmpqQ3JLZG5Ea2wzCndJcXpXVDY2YkhBMkVXSXh6MmduQXFQN3RLelY4SWdmVDBTRWR4d2M0dUVLVUsvT05rWjZOaUxWWGJXdnZ5M2cKeXNBTCtoQlZpVm1INjlIcEd2Q25Rb1JZVlB2TGVlMWRwczg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
                            "vars.cloud_provider": "",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.etcd_ca_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lSQU1wS0IrdFpLVHk5RENLWFlsMWxlK2t3RFFZSktvWklodmNOQVFFTEJRQXcKSVRFTk1Bc0dBMVVFQ2hNRVpYUmpaREVRTUE0R0ExVUVBeE1IWlhSalpDMWpZVEFlRncweE9EQTBNRGd4TWpFegpNRGxhRncweE9UQTBNRGd4TWpFek1EbGFNQ0V4RFRBTEJnTlZCQW9UQkdWMFkyUXhFREFPQmdOVkJBTVRCMlYwClkyUXRZMkV3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRG83WVhwR20rdnlvK3UKTHhSU0EySnVVT3ZHUUZIOTNqdjkvQWJFb3QzV09hR1RKcXh0RTJkNlBKWGxScUIxRVRYREo5QmozZEgwSXR3TwpoMkhXNkh1UDZEVTBBVFl4cmlNazdSeGxORDRUa1ZLaUZlNC8wWHFyeFZEc3pRa2dPR2VoS2N6aXM0U2N3UkFLCmtxVzlsdW5xOTA0YjJRTkhDN0JhM1BGeXNRZmhzOVhSOVlvTVgxdkhuVDhjYUF4VDRzSzMvVnBOQ01LbG9JbEIKMjVjeWw2REV1NzhlR0NaTk1wRlRyNGIySlFyeWFmQ2duNkg4MTJBcFpZQlB6NXczdlJrMy9JcjVpOW5rRHdwTApLeW8xbG5oL1hLRElpZ2VMVkkwck5PY3pmREpMR0U2ME5OT0xmeWtJNTlOeTJuTDhQbkV5TjFIVjBPdnFJcTc0CmNqcTFndzJQQWdNQkFBR2pRakJBTUE0R0ExVWREd0VCL3dRRUF3SUNwREFQQmdOVkhSTUJBZjhFQlRBREFRSC8KTUIwR0ExVWREZ1FXQkJTSVQ5M3pQNWhLMDZ1NFA2MEZjVWh5LzA2NytqQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBV0UzVHN0ZVNTdFd2QWUwNUc5T0FoeEdTZjE5Mi9OdGhhVW5tVTh1Uk1UMnZjU0RYSW1Xb3Erb1NkSlZPCnNERDZmcFBiQ3hTN1hwN3YrdFhZMk05dDNJTlh4TGVsL3pKNFlHWWN3S2hZMXg0ckxtZDU1bEx2T0NwT3VBaEIKOS9EdGJYNjh5Ny9xdk9QMk5KYTUzYXphRnZtL0FkRE9pMTZKbTFlVWdCc1hFRjRBSjdoUWQ4OXJqdjJQWGVBWAphNWNJeXhyTmlmdEZhb2hrenJKVWJFL2xnYTY2eXBmTWwwanBTRmM4OG9oQ092K0VOUytYOHNmN0syZDlpZUszCkpCcHliemhCWnQ5SDF6N01BUFNnekk2ZDFqM28yVGUzWi92cWZkVXAvbTJQWUZUbWI4cEozdHlPQ0tkV0lXbSsKOEttUkUvMnBCWEpqVlZDSG5iT0tYMVBkR2c9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
                            "vars.etcd_client_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXVENDQWtHZ0F3SUJBZ0lSQU1KNnRUNnpqZFMveU1CU3dFcUFWRjh3RFFZSktvWklodmNOQVFFTEJRQXcKSVRFTk1Bc0dBMVVFQ2hNRVpYUmpaREVRTUE0R0ExVUVBeE1IWlhSalpDMWpZVEFlRncweE9EQTBNRGd4TWpFegpNRGxhRncweE9UQTBNRGd4TWpFek1EbGFNQ1V4RFRBTEJnTlZCQW9UQkdWMFkyUXhGREFTQmdOVkJBTVRDMlYwClkyUXRZMnhwWlc1ME1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBMGNrbFdtSzEKR2xEUDFNeGUwblBPamFjLy9JODljYkU2U0ZrcVZCd0NHL0F2eDdDeDlOZFNjYW1kZHFkNEUyL2FkVkVkRDF5VQp4RlhPb29OZkdvZmdCK1dRWnJEY1RyWDA2S1hSYjFERFExS3ZiY0tlMUNWVWJZdWY1RFFPZkJWMFhYektVSWlUClE0UXBERXZtK2JQOFhXcEY3Y2N6d3BSNGwxcWt6VFREWXZqLzJmSC9McUJHYTBIWks4K0YzYnJVbFpxdE8yb2EKRG5UMmVodDhNQkhzRHZPeXRsTEJPcnByMHFUWTJkRXBwNTgxWDlCTXRja2RFdUtOSHlwS0J4TGdEVFpDNUZ6YwpML0JONVpOZ3N5cVpYdmJPK2pMY3laeWozd2tZeUpmM3dpV1JiMHRudXpLWStaY0RzYWJWNnF2dlpMY1lYWDdTCnNUN1ZDcXc3TVNJT2xRSURBUUFCbzRHSE1JR0VNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVUKQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JTSQpUOTN6UDVoSzA2dTRQNjBGY1VoeS8wNjcrakFrQmdOVkhSRUVIVEFiZ2dodU1pNXpkR1YyWllJSmJHOWpZV3hvCmIzTjBod1IvQUFBQk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQy96bDkxU05QcFlsQ2FOYkg3TW9ydmFzRG8KUytWQ2FjN0xuMlIza1JxNlZ0TlNkVXJiNTN2MnA2bUVwUlozYmJnY29NbTlab3VKWi90OFMvcVAvRlBUd1UyTwpJRWxBRWxJTFdUN1ZUQWl5SWdISlRjMkxkNFphVUwzLzVCcXFVcE1kaXljeW1HSjVoZFVSbGJQY3lrSHA5MEVRCkJ4Wmd4cUowcE02eWxvNDVvSW1hUkFScW1KL3RiM1lyZGgrSlFHcFhNQ0M3YVhEY3JaSk5ZRytFNzhyeGZRRFMKNHJDZEsyUnJIajh5ZUZoT1NVMWU1dEw3RllNb0xiY3NvSDAwVE9WZ2J6dXJydkkrQ09sYjZWelp3SkozaXZUWAp6K0czZ1JPa1FNZm5DUXJaOHkyN0tTdUVRRUdwbEQ2empWc01sVUYyWXJCN0d6WTVORjNiQXc2YkdON20KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
                            "vars.etcd_client_key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMGNrbFdtSzFHbERQMU14ZTBuUE9qYWMvL0k4OWNiRTZTRmtxVkJ3Q0cvQXZ4N0N4CjlOZFNjYW1kZHFkNEUyL2FkVkVkRDF5VXhGWE9vb05mR29mZ0IrV1FackRjVHJYMDZLWFJiMUREUTFLdmJjS2UKMUNWVWJZdWY1RFFPZkJWMFhYektVSWlUUTRRcERFdm0rYlA4WFdwRjdjY3p3cFI0bDFxa3pUVERZdmovMmZILwpMcUJHYTBIWks4K0YzYnJVbFpxdE8yb2FEblQyZWh0OE1CSHNEdk95dGxMQk9ycHIwcVRZMmRFcHA1ODFYOUJNCnRja2RFdUtOSHlwS0J4TGdEVFpDNUZ6Y0wvQk41Wk5nc3lxWlh2Yk8rakxjeVp5ajN3a1l5SmYzd2lXUmIwdG4KdXpLWStaY0RzYWJWNnF2dlpMY1lYWDdTc1Q3VkNxdzdNU0lPbFFJREFRQUJBb0lCQUQvOUVLMnZLZnBxNTluSwp0S21RdFZJeno2cWpybVE5WUwrc291S2c0R3ZSS1dISm5aNUhCMWl3R2QyVlcyVGlXMG9wZ2FtcjNaeTlaNWZlClptWGJTQlJnaTFrblhTdU5DTFRsenlvYkFsUklwa1hlZFQvVVd4cEcybkJyQ0hnRXUwZkF4cDBsNjNWT25JNnAKb0R4T0VBNFdXbG9heHNqMUxJdE9GTEtiQTNYdVhBcUs0ME55MUVVdFRKd2N5ZWtvWUxHVkJ5SkZrWHZDTVliVQpTRXExNk1FVms0MXhuQWFkTG1BcjBTbE41L1g3bFBLRkREYmtid1dVc25KTytjRCtMZm1MR1YzeUpaRmNXeDNnCjFLbENkUmhoeUtlZmRhUk1XdGxxS0tBQWFZNSt2V0E4RWl5REQ2V01ZNDRDU3RBU2hYWkRoaTdGbXRnYVo0R3cKTEtua0ljRUNnWUVBNmZZTXBPWE9tNEw3KzBiRjc2bzQ0bGhteHJ0TDJNQzJEZmhDcWdJTzVSS3A5UGlYQm1RcwpvWU85SDVFSGs0RUhrZG1vcFV1MkRQTFd0NXJ0NXJSUDd1dmJ4T0YvNzk1RFlmeHZEZXViRmpWeGV3UlFHak1JCko4NUpDMUtrNGt3V2xESjgzdGRoOGNyNC9oY2pOUjhLeWxZRUFwcWNuVzhrY2dKZ3llQzI2SmtDZ1lFQTVZd2IKNG9QQXZidU85K3pCTGRSblQ1S1pjaTBTalp6a3VNMldJdk1tcVZ1ajZtd2tRektrWGpzQVpiOGhiQmlQOS9mWgpwMUFMSmxUUDdPTmVoM0FRT3AzeUwycnZIVXdLcUlVNkhPb21NQjFlZkZWNHA5bitNeGoxZ1lreWRLQnhwc0dYCk5MRnh4L3Y2OU9ZZ0NQVkNRVmw1NytiWXd3ZGg3YXhmMmY0cVoxMENnWUJXTVI5WFlKSk5HR1JjbmlZdHRUaGYKcXRHeVJTNGNIR0wxb3BCc3NYVnJUd1R1Q3VjWW82OE5rY3NLNWhNMGRFU2xwdHBLaXluMmUwQS9SQVNCQ2N5bwo2SnQrWE5VVk9YejVqRllkZXI4WDMzaC9LWWVaSDFQUjFsMXlubS9BTHVmaWtQY1A0YWxqdXJNZ2FNVy92RC90CmF1THZVcWFBR1lJRHZueUo0dzkvZ1FLQmdRRFBpMUcvQ1c4Z1hVL1QzQTJDR1hUYlhtbzg4SUhBNXFWcWJmK2MKVkFxVnY5VEI1TXNZc3RZb21PSXdISkxrZ0lUVEtCWjBENHcxT1NQU1JIVzRzVnNMRkxuZm82alU3V2NKbllQQQpsdmkyTWllMjlUU2xWeFZlTCtmeUdoRXpuOG1DZzdEcUpMSUNwbEx1VUkrUWFlaGcyN3pEYXc1N3I5WWNKZWw0CldUVVB4UUtCZ1FDa003VENlSkxOa0M3NWpVVm41Yy9nMzJGeUpCWjg4Skl0RmRaL1JTaWw5NUlXamk1ZGdkbkoKK3Q3TUowbWk0SmpJMEpyVjVxSVljTlpiWXgwUExUOVMvZno4cll4anRqZnBDN0dxL1BtL2xUN3Rpa3RJbUpPTQp3ejU5QTIrRmRLKzA2ZG9UenBBVzQrWHZMQmpSWHhCT09CcG1Ia1cyNVFJRFpWTGhuM0dta3c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=",
                            "vars.etcd_servers": "https://n2.steve:2379",
                            "vars.hyperkube_image": "gcr.io/google_containers/hyperkube:v1.10.0",
                            "vars.kube_dns_service_ip": "10.3.0.10",
                            "vars.kubedns_dnsmasq_image": "gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.8",
                            "vars.kubedns_image": "gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.8",
                            "vars.kubedns_sidecar_image": "gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.8",
                            "vars.pod_checkpointer_image": "quay.io/coreos/pod-checkpointer:9dc83e1ab3bc36ca25c9f7c18ddef1b91d4a0558",
                            "vars.pod_cidr": "10.2.0.0/16",
                            "vars.server": "https://steve:443",
                            "vars.service_cidr": "10.3.0.0/16",
                            "vars.serviceaccount_key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNWVHT3V5RC9wYU82NnBjUlFIbCtkZmtXV1QvZGZOSDJwY3B4SVFsa1lFVXhtM0haCm9jMTNSVlI3RHdubGxhT1FaZ01hQk5qaE5TRWZYdHYxdHRyZ010dWtydW00aTZQK3JGc1Fnby9YQVhyZHBHOGMKMFltUFYyYW9Rcm5zNFd2di85MjVyaHJXMXVXcno0ZXJuQVdwYTNmeFAwMmQvNW9ya3NPelBjbXRWZG1LNzBrKwpQYk9YWnlzZ0hncmxrQVQ0Zy9yUHNEUjVWUkxiOVZlTnFhaldYdXBQeWoyOGNJbUhHd2RSR0M5bk1JVjFvenhxClYzYnZ4TWYzY1RtMXI4eFd5aVVMYzhodVU0SFdOL3pVczQ5ZlRnZEFHRFRMcEpMS0gyb3gxc1grS2hiL0VISUgKR2Y2S24yMnFtQnNlY0piZnZjbncrMzdjTHdBdzlZdktDMGJPaXdJREFRQUJBb0lCQUZIMXQzUFVjaEZXYk9BUworRjJxYzRJUVN2MkxIYWJSSFVWREJrNm5FSmlhVXZOL0JmOEFTSlA1YU42VndyczFVOWhySnEydnZhdTVvWHVxCnBOS0srd0JtK3pJNXRraGpNZnUxaEE5b3hWbUx1dFpUbjB5OTVOTmVrSU1wMHVFVUlMOXpDQzZnOXhRclVyUnQKUkt3ZUFLZUdYZ2NaMzBrd2FIU3RQWXk4Q1FiZ0dma2RBczlpbmNydENNdGZTMHp5OUpONVdDRzkyOWx5aGowZwptWUJCd09LSGNjOThqM2xxTXk5RnppeWJxWHE5dHdCUkJhRWhZTkRESjVyTUkvZzRPUnNlRnVscGs2eFVNYnM3ClV5N1F2cFVVeWQvckdEdDJHS293di9ySi9hbytLMmV1Z2dtakRqSjVKT3hZNFh2eEZZcXBSd3dPTXkrWTdjcm0KL1BpV0NERUNnWUVBOThkTHprR1B3Qk1MR1ZBY08wN0FzZTFCL3dBTUphQ2NTaEQ0TWVqOHJiUlp0d0ExVXkxQwpyQXNwMGJDSkttZkUzc21vSUFtVWZHck5zb0N6QVJBTUxwQXR5TWRRR3plTUR5NHlzNzM5UnQ3NW0wQWRYWi9oCjZKUzJpM0NvM1Q1RWZKRXorUFZlYXppV3o2YXY1Y2x4OE1pMzJlWVJTZ2RSOU1MS3F2Nk5rcmNDZ1lFQTdZSTgKU0V3eEJQUnM4UDlTUlR5MHh5L0hoY2ZIYWZRUjg5MkJPazRsVEgxVm9KK2c5QWhzbXBTSVdsNW5ldUQrK2Q3bgpWb2VSZkZWOFp0YVZ3RFlzOVdBZnNDY0UvU3V4eUlqWXd2UllLbzZkSFVtaE85cngwOHk2eFFQbldlUHA4QTlBCkRXVisxd0pRTzhHeVBaTDZsVFV5MmlHZWt5cEpjaUJBZjRpZ1BzMENnWUVBalM4clc3QngxNUZDVHI4ZUJ4RTkKcldTeXFUbCtzbVlOQ0FzWlVWOGZzMTdEakFuN1dKUyttOGVVb1o0RTJudmNhdEhmRWJwRHVJMG0vaUpsWFNLbQp2bFY3TVIrWTNwbE5IazFGcUxPR1FUN0dYWmN2NUd3NHprMEdvdmVqME1VdFF3bDk0c3IxYlFVR3NmV1ozc1psClBUMHh2V0JoMDV2T01EaGFRUXJnNG9zQ2dZRUEwR281UmVQK0crLzA3U0hQYXN4VGducXQ1Zm9pUmhxVDZtQVUKZHpwOXhub3hPb3I1TFV0N0tjWnZSSVdVM3FJemZNYWFVRGNVZG50NWQ3Q1RwaUNrSVFvaHBHMEpGclJTQkx2NQpJbEpTVDczbnB2eW1qS1NiRXBXVHl6Q2F3aW1hYmpxanBWM01DUmFSbTI1a1gxM3JvQ1VYbzR4ZTM1cjY2amZkCkFVeTkrWDBDZ1lBVVE4R28ySHNGUE9tMWYwUStidk95RVpiQkx1L1FFVTJPVlJxK2t4U2Z4UXVTTHV0cmVyNmoKTmh3cnl6UU51ODdGSDVoUmgzUzR4Z1NoVEVFdTlTR1FBYVIzMmJCdHhxbmV5MmJoYkF1d3BsZmtoWlBYSldDdQpnZWZwY1lOZWJJSDdjS2p4dW9UOWpkZmwxbDhzQlVYOEdua3plS1lLNVJKR0FqU1o4SisyRmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=",
                            "vars.serviceaccount_pub": "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUE1ZUdPdXlEL3BhTzY2cGNSUUhsKwpkZmtXV1QvZGZOSDJwY3B4SVFsa1lFVXhtM0hab2MxM1JWUjdEd25sbGFPUVpnTWFCTmpoTlNFZlh0djF0dHJnCk10dWtydW00aTZQK3JGc1Fnby9YQVhyZHBHOGMwWW1QVjJhb1FybnM0V3Z2LzkyNXJoclcxdVdyejRlcm5BV3AKYTNmeFAwMmQvNW9ya3NPelBjbXRWZG1LNzBrK1BiT1haeXNnSGdybGtBVDRnL3JQc0RSNVZSTGI5VmVOcWFqVwpYdXBQeWoyOGNJbUhHd2RSR0M5bk1JVjFvenhxVjNidnhNZjNjVG0xcjh4V3lpVUxjOGh1VTRIV04velVzNDlmClRnZEFHRFRMcEpMS0gyb3gxc1grS2hiL0VISUhHZjZLbjIycW1Cc2VjSmJmdmNudyszN2NMd0F3OVl2S0MwYk8KaXdJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg=="
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "tls_cert_request.apiserver": {
                    "type": "tls_cert_request",
                    "depends_on": [
                        "tls_private_key.apiserver"
                    ],
                    "primary": {
                        "id": "236655f93ccfa293928b1f80136610336d5c6445",
                        "attributes": {
                            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIIC/TCCAeUCAQAwLzEUMBIGA1UEChMLa3ViZS1tYXN0ZXIxFzAVBgNVBAMTDmt1\nYmUtYXBpc2VydmVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApS54\nc+hO7gDJItsu4VAW0j7cq4bbLwMZd+vH6GzNqhoOHzODhLOeYguVmexvstV1Ohy2\nTPGgv9349g5YleEUNvW1Iw9HZZI1vAJsGRsxs+v0iAZvrTMYVReGdkJ+KHau0ATp\nT8VLeknUSWGcPQx2VKXNg50P5lo704Pgq1HkuD/Z8kE2rc5sFLRm+ztv403ceDTs\noJajcse+uGnpmeP++KnI98Ai2Wx0nj6NIDty/W+8rOCvKI3OfgUlMWGKb0PQrjCy\nbXdBxzuMwMLSkRrqa+MNH5SXmJuZw1nnQwpKLl5djJBtzFBMhrmDIe4JtRi0do0/\npr4Fp+sPlbLUMh57dwIDAQABoIGIMIGFBgkqhkiG9w0BCQ4xeDB2MHQGA1UdEQRt\nMGuCBXN0ZXZlggprdWJlcm5ldGVzghJrdWJlcm5ldGVzLmRlZmF1bHSCFmt1YmVy\nbmV0ZXMuZGVmYXVsdC5zdmOCJGt1YmVybmV0ZXMuZGVmYXVsdC5zdmMuY2x1c3Rl\nci5sb2NhbIcECgMAATANBgkqhkiG9w0BAQsFAAOCAQEAfgTLs8Ka0aUwaeRA91ZU\nlKVAusUG/Kj+vIgWM6+/2L6bifOElRgpCItXZhvz3iMMH3s6VDNDiD7tm9QcVEi/\nVp7ExLYFjmUUv3/mBb7T6vwZYKPOZPA8ucg3upRIDeRuf8Pc2yX75L4I5QNJ1fAb\nqiJhbojElAiBlw53nkt7UVpjNbrIUN+fkNNPhRhz/VjmRG4MdqGtbE5Z6rUtvHXR\nTdeAMV2xKxeqdRDiQhCicCKEkd1I5iByI9a4MwV2NvZ9MuzmFzb0i/dszsULrTFY\n8IEbSjXtLxZ2IODLDk9uM1fgHtEAmssQbIgatL5N9TxyLXrKwMmvvYns1EXIEwzN\nCw==\n-----END CERTIFICATE REQUEST-----\n",
                            "dns_names.#": "5",
                            "dns_names.0": "steve",
                            "dns_names.1": "kubernetes",
                            "dns_names.2": "kubernetes.default",
                            "dns_names.3": "kubernetes.default.svc",
                            "dns_names.4": "kubernetes.default.svc.cluster.local",
                            "id": "236655f93ccfa293928b1f80136610336d5c6445",
                            "ip_addresses.#": "1",
                            "ip_addresses.0": "10.3.0.1",
                            "key_algorithm": "RSA",
                            "private_key_pem": "6332c55bc4eb3e917ab8fbce90c24c8bf46831a1",
                            "subject.#": "1",
                            "subject.0.common_name": "kube-apiserver",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "kube-master",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_cert_request.client": {
                    "type": "tls_cert_request",
                    "depends_on": [
                        "tls_private_key.client"
                    ],
                    "primary": {
                        "id": "4368912010fb26f99f866a82f79747dcf594e7dd",
                        "attributes": {
                            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIICoTCCAYkCAQAwJTENMAsGA1UEChMEZXRjZDEUMBIGA1UEAxMLZXRjZC1jbGll\nbnQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDRySVaYrUaUM/UzF7S\nc86Npz/8jz1xsTpIWSpUHAIb8C/HsLH011JxqZ12p3gTb9p1UR0PXJTEVc6ig18a\nh+AH5ZBmsNxOtfTopdFvUMNDUq9twp7UJVRti5/kNA58FXRdfMpQiJNDhCkMS+b5\ns/xdakXtxzPClHiXWqTNNMNi+P/Z8f8uoEZrQdkrz4XdutSVmq07ahoOdPZ6G3ww\nEewO87K2UsE6umvSpNjZ0SmnnzVf0Ey1yR0S4o0fKkoHEuANNkLkXNwv8E3lk2Cz\nKple9s76MtzJnKPfCRjIl/fCJZFvS2e7Mpj5lwOxptXqq+9ktxhdftKxPtUKrDsx\nIg6VAgMBAAGgNzA1BgkqhkiG9w0BCQ4xKDAmMCQGA1UdEQQdMBuCCG4yLnN0ZXZl\ngglsb2NhbGhvc3SHBH8AAAEwDQYJKoZIhvcNAQELBQADggEBAHMCz5Mq94LB+25P\nHuND0Ozhn0zrpNXlERcAoPpXxZeGIfrTrIyF78KBRcOHh3XHmR0dwCxp4KdVYICC\nfj1h0JGXcBjyIXgG8ZbFubsVK+RTXLq30yogoyY4IDkSFDo6Wt4q+dL6dTWZJ2gJ\nMC/3xLIGEsNIvuPAnKFtrynakCbfn1oxhTu01zDMIFf84AMf7skHB6o1o1nFnmOD\ncCxeuRLWWKVgGv+m9K6yZArYX4mqUDneA+cGB+UQuIxj8hMLiLUavFVYCZOFcElR\nXL6QTYJgKjn/WYYqHhfdEV6Ko1sqEKzbNtFpM6PRyl7VOXfHBPj3BiGRU8xynLjg\nP1zOmKg=\n-----END CERTIFICATE REQUEST-----\n",
                            "dns_names.#": "2",
                            "dns_names.0": "n2.steve",
                            "dns_names.1": "localhost",
                            "id": "4368912010fb26f99f866a82f79747dcf594e7dd",
                            "ip_addresses.#": "1",
                            "ip_addresses.0": "127.0.0.1",
                            "key_algorithm": "RSA",
                            "private_key_pem": "2e3e26ee1b151027aa73eaf1f93ee2e2fc0fb2be",
                            "subject.#": "1",
                            "subject.0.common_name": "etcd-client",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "etcd",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_cert_request.kubelet": {
                    "type": "tls_cert_request",
                    "depends_on": [
                        "tls_private_key.kubelet"
                    ],
                    "primary": {
                        "id": "1cc048688d37eb59658c63b21a1d4dd6fa7ddfb6",
                        "attributes": {
                            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIICcDCCAVgCAQAwKzEXMBUGA1UEChMOc3lzdGVtOm1hc3RlcnMxEDAOBgNVBAMT\nB2t1YmVsZXQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDs0A+MPVde\nsjdL8VvrGbvYNah9bop5DecpjkeEyBi6hDekMq/VonqHHYSWE25e5TKtBdNB+4Iq\n9bSSPrVfzJz5KESIdIkaNeHLkIgn76id5bWQ7MZ0/czsTXQA1iYo7dlVMHn2Lf8N\njJ/X9IhU9tRl9ya9ljgbj5IJUoMHjnuq6PUKzYBaEAhZzio7b/XN5GgVHO82xzFL\nDlBO93WscOLDfCiwHH2oowzyg+92+gOmfUCkA20R8RBy0tRFDmcgRV6O6jGIW7m+\nFcuiAstcqNVSe0fc8ncWWkhQ7KCLM2p8A8QGz1EpT/OBCfYPjPJvjAtMctqfSBis\nVZNSOLTuoZIJAgMBAAGgADANBgkqhkiG9w0BAQsFAAOCAQEAvSLytY9yd/xnaclE\nrVA+ph9ch1snHeMlczOVVbwHeOysgY1yms6JIPzDxemXB17fyTYirc2kVByMLsaE\neDtM9M2r6YAKbBzOdUAgkPFX83vrobizGdwcL9BGPtdwPfO2BMBZacCFGzTMuo2o\n7fYdo2uc1ejof8uXvtTnxmABMSgHOGPF3nnAJUTpt5HhuIFV3R5a/vCnpxgaw/qi\n7DsMu878BiS6zxSoEGhcPSZ2eXmAD076va75GnUuODUQzXl9m0S7I+HycYHumSE3\n9mKHzMbRITysDsHNopkek5RUO/a91oey7YFtfHGQnIlFtS0vnPxmP57xnbYG9r/z\ng9GXew==\n-----END CERTIFICATE REQUEST-----\n",
                            "id": "1cc048688d37eb59658c63b21a1d4dd6fa7ddfb6",
                            "key_algorithm": "RSA",
                            "private_key_pem": "546f87d992afeca864ff64f9033d52e94346a40a",
                            "subject.#": "1",
                            "subject.0.common_name": "kubelet",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "system:masters",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_cert_request.peer": {
                    "type": "tls_cert_request",
                    "depends_on": [
                        "tls_private_key.peer"
                    ],
                    "primary": {
                        "id": "03173012f84ebe4a8de170c3b382cad04cfd4a21",
                        "attributes": {
                            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIICjjCCAXYCAQAwIzENMAsGA1UEChMEZXRjZDESMBAGA1UEAxMJZXRjZC1wZWVy\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvhylKNBAhSeqT/2nZsjZ\n2kYAaEPxJ4nJcKt/olMSpoDjPXRoHGamwU+Od0PVAv9VwGJnGiQxUXGUylUxefha\n3Xw7xmFBZaTSUDGhUDpWyqZSXIGCFQ1q9YVFrbiWpJ05fSALbHQfWiZ+3CpgmO45\niFElIFhwcvVolwDG2amKb83+zM4HuvBlk2GEdKSidJYE56S9NkiR5yNmipDh8mM7\nCETecA/qeOYoSJK6wxTcmU8MDgkVeb5kfVXVwTUqRnZoqAAKgTvn3o46//vBx9zE\n/LojddJShOOEYb6FM33Y9W9i0s3B6MivhkdBj5G9hM2h6vHsG3TNxS8ZZYrd2nSV\n9QIDAQABoCYwJAYJKoZIhvcNAQkOMRcwFTATBgNVHREEDDAKgghuMi5zdGV2ZTAN\nBgkqhkiG9w0BAQsFAAOCAQEARYa5XjfkToakqe6qLkfNpVL1+8aZ4nXrLsKOQfVz\n8O+gKQMlx1sp6MyVfv0QCZj20A9EgTuxAitow2FXwLvflYeoV/yF4Wyr7SGvZGem\nyDhBsl8DP8BoDXLl1miD0hbETv/nVFyJ4uYI/IXtMXLgEjP57IW/V5wo/9ie9cxW\nz48vICsmwrxcuYdPcKEULsLv/vMORKDMPuE7ehvajyPYJsZ2Vg0dxq9Zi9KeNKPq\nSjPAKNTCEX5AZN2KzGYVf3JCpMBq9D+r3Lc4bVGST0o+83LeBJmTCU9EKnPYJ9Wg\nW/XymyOnznLq3TVsjoVk9ajfyk6gVmKfnyNqozANL1TW+w==\n-----END CERTIFICATE REQUEST-----\n",
                            "dns_names.#": "1",
                            "dns_names.0": "n2.steve",
                            "id": "03173012f84ebe4a8de170c3b382cad04cfd4a21",
                            "key_algorithm": "RSA",
                            "private_key_pem": "6e5c717d77cc336da50cedec2fbab972e087767f",
                            "subject.#": "1",
                            "subject.0.common_name": "etcd-peer",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "etcd",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_cert_request.server": {
                    "type": "tls_cert_request",
                    "depends_on": [
                        "tls_private_key.server"
                    ],
                    "primary": {
                        "id": "7ec69bd870f08bea4bcd6ee586b0e74cde7112b9",
                        "attributes": {
                            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIICoTCCAYkCAQAwJTENMAsGA1UEChMEZXRjZDEUMBIGA1UEAxMLZXRjZC1zZXJ2\nZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQiIhBxTL7Q0rX9eIA\nu/l17ecoCrioGH+oxgrcfDuOD9ITqMXIoAoceGHXKhbRzNoOaznxgUuQK1EgPf76\nXxroUehAb5cYL+P35jT1Ha+3K90CgdDNuRcFcvsr3GpMoUwpaoTVaTx3bo+ew6LE\nzP4jEhwzy+gqLHIloW4dfNlwc3eb1HAXZso3D48qnD15MF0ETCKKTPht7Mlw4xyQ\n2TdgLflELVxdzlnNWWuK78ozmnwiuWN8vI3Z2qCi2E1KFdxgDfEU5t0Id0USgyvm\nytNHqeqeDhVLbKQckMcrC7VGpSS5ulxIm+A9Gnu8UcCdSieXtJGdbQAFoc+a9X8t\nXedBAgMBAAGgNzA1BgkqhkiG9w0BCQ4xKDAmMCQGA1UdEQQdMBuCCG4yLnN0ZXZl\ngglsb2NhbGhvc3SHBH8AAAEwDQYJKoZIhvcNAQELBQADggEBAFQ5X1/SIHbzvo75\naGj6xlzeD9fZ/7pYL9Ed2XL3z4g9y3/j0PdsD4MMUCwd/hKerz3mlF46LiwiWss3\nV4S13CijYHoYjKURD5xg8NWhDpVOHfmuczbDAobo8puaUkpl5+av4U1+tWuTabs0\nxsav5k4u2Jf4d09GEJVHo+ZJ4jEWbi7OABRYBaSJ2JVvmKD9n6vNVqqXfxMcKIg5\nCzR6KrsjUVS1Xe0Q9/kwQLo43dO6PtTQtyuOs5zRYYrAxnLdaXlK3rjwBNsNSpP1\ncxI24VdvylkaWiPaDrzW+66OZFHnygi/NSdEmwDJwfbG+wXBDOJsySlRBd0Lim2Z\nk4l00OI=\n-----END CERTIFICATE REQUEST-----\n",
                            "dns_names.#": "2",
                            "dns_names.0": "n2.steve",
                            "dns_names.1": "localhost",
                            "id": "7ec69bd870f08bea4bcd6ee586b0e74cde7112b9",
                            "ip_addresses.#": "1",
                            "ip_addresses.0": "127.0.0.1",
                            "key_algorithm": "RSA",
                            "private_key_pem": "9be6692515a22bae4c55eb744eb2710c20786417",
                            "subject.#": "1",
                            "subject.0.common_name": "etcd-server",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "etcd",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_locally_signed_cert.apiserver": {
                    "type": "tls_locally_signed_cert",
                    "depends_on": [
                        "tls_cert_request.apiserver",
                        "tls_private_key.kube-ca.*",
                        "tls_self_signed_cert.kube-ca.*"
                    ],
                    "primary": {
                        "id": "256006183906951802597335342001536568279",
                        "attributes": {
                            "allowed_uses.#": "4",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "server_auth",
                            "allowed_uses.3": "client_auth",
                            "ca_cert_pem": "730f60227f2504cafb917ea4fb6623239f9acef4",
                            "ca_key_algorithm": "RSA",
                            "ca_private_key_pem": "b4991df0f4c3d0f71a4d99fe0ee2e290f10a123b",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDtzCCAp+gAwIBAgIRAMCY/1+qC3KgxmI5nMRPC9cwDQYJKoZIhvcNAQELBQAw\nJTERMA8GA1UEChMIYm9vdGt1YmUxEDAOBgNVBAMTB2t1YmUtY2EwHhcNMTgwNDA4\nMTIxMzA5WhcNMTkwNDA4MTIxMzA5WjAvMRQwEgYDVQQKEwtrdWJlLW1hc3RlcjEX\nMBUGA1UEAxMOa3ViZS1hcGlzZXJ2ZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw\nggEKAoIBAQClLnhz6E7uAMki2y7hUBbSPtyrhtsvAxl368fobM2qGg4fM4OEs55i\nC5WZ7G+y1XU6HLZM8aC/3fj2DliV4RQ29bUjD0dlkjW8AmwZGzGz6/SIBm+tMxhV\nF4Z2Qn4odq7QBOlPxUt6SdRJYZw9DHZUpc2DnQ/mWjvTg+CrUeS4P9nyQTatzmwU\ntGb7O2/jTdx4NOyglqNyx764aemZ4/74qcj3wCLZbHSePo0gO3L9b7ys4K8ojc5+\nBSUxYYpvQ9CuMLJtd0HHO4zAwtKRGupr4w0flJeYm5nDWedDCkouXl2MkG3MUEyG\nuYMh7gm1GLR2jT+mvgWn6w+VstQyHnt3AgMBAAGjgdcwgdQwDgYDVR0PAQH/BAQD\nAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAA\nMB8GA1UdIwQYMBaAFFl3mnDax1zo9ah7oQaNS7wzPEwKMHQGA1UdEQRtMGuCBXN0\nZXZlggprdWJlcm5ldGVzghJrdWJlcm5ldGVzLmRlZmF1bHSCFmt1YmVybmV0ZXMu\nZGVmYXVsdC5zdmOCJGt1YmVybmV0ZXMuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2Nh\nbIcECgMAATANBgkqhkiG9w0BAQsFAAOCAQEAlBM2/StqBUqUCjWghGTmk1LGx0zy\nJvUJw76XFw194b+tYCt5/pokKeUrX5nuFgmegfdytFI7RuIKA2mAaXHktNTm2ot8\nrA1lF/H20DVIFf8F0odGoKuqHJ8+p7W2WTeSD+ofPpZkAOnkTa7EJeTtRuVwO7A6\nffgs5TE91mJ8wceUWSQviM7CVdRqZd5Ywu1D/Uo+a1//5C1vfUp728sR7BkTCrGB\nQTF6PsUzYEPT/QvrFehNXdNk9o19wK0sccu+DX+QqsYQiDX611SpejFUS7/8tIdr\nuFKWpc1SHxGeA6k08WQaClYn9JBpyf2kF9ZFNwS4+iDmcvb4J4V/cn2loA==\n-----END CERTIFICATE-----\n",
                            "cert_request_pem": "4b7f5047713529ad5f9381f47cbc2d434a3a4481",
                            "early_renewal_hours": "0",
                            "id": "256006183906951802597335342001536568279",
                            "validity_end_time": "2019-04-08T12:13:09.530941766Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-08T12:13:09.530941766Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_locally_signed_cert.client": {
                    "type": "tls_locally_signed_cert",
                    "depends_on": [
                        "tls_cert_request.client",
                        "tls_private_key.etcd-ca.*",
                        "tls_self_signed_cert.etcd-ca.*"
                    ],
                    "primary": {
                        "id": "258507367482868545128829524946389587039",
                        "attributes": {
                            "allowed_uses.#": "4",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "server_auth",
                            "allowed_uses.3": "client_auth",
                            "ca_cert_pem": "3d1c5e017646aa09dd864a8922f33a59d459fb39",
                            "ca_key_algorithm": "RSA",
                            "ca_private_key_pem": "cbf311cc971f7e87013dd0b4177fca3a26a238ce",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDWTCCAkGgAwIBAgIRAMJ6tT6zjdS/yMBSwEqAVF8wDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDgxMjEz\nMDlaFw0xOTA0MDgxMjEzMDlaMCUxDTALBgNVBAoTBGV0Y2QxFDASBgNVBAMTC2V0\nY2QtY2xpZW50MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0cklWmK1\nGlDP1Mxe0nPOjac//I89cbE6SFkqVBwCG/Avx7Cx9NdScamddqd4E2/adVEdD1yU\nxFXOooNfGofgB+WQZrDcTrX06KXRb1DDQ1KvbcKe1CVUbYuf5DQOfBV0XXzKUIiT\nQ4QpDEvm+bP8XWpF7cczwpR4l1qkzTTDYvj/2fH/LqBGa0HZK8+F3brUlZqtO2oa\nDnT2eht8MBHsDvOytlLBOrpr0qTY2dEpp581X9BMtckdEuKNHypKBxLgDTZC5Fzc\nL/BN5ZNgsyqZXvbO+jLcyZyj3wkYyJf3wiWRb0tnuzKY+ZcDsabV6qvvZLcYXX7S\nsT7VCqw7MSIOlQIDAQABo4GHMIGEMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAU\nBggrBgEFBQcDAQYIKwYBBQUHAwIwDAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBSI\nT93zP5hK06u4P60FcUhy/067+jAkBgNVHREEHTAbgghuMi5zdGV2ZYIJbG9jYWxo\nb3N0hwR/AAABMA0GCSqGSIb3DQEBCwUAA4IBAQC/zl91SNPpYlCaNbH7MorvasDo\nS+VCac7Ln2R3kRq6VtNSdUrb53v2p6mEpRZ3bbgcoMm9ZouJZ/t8S/qP/FPTwU2O\nIElAElILWT7VTAiyIgHJTc2Ld4ZaUL3/5BqqUpMdiycymGJ5hdURlbPcykHp90EQ\nBxZgxqJ0pM6ylo45oImaRARqmJ/tb3Yrdh+JQGpXMCC7aXDcrZJNYG+E78rxfQDS\n4rCdK2RrHj8yeFhOSU1e5tL7FYMoLbcsoH00TOVgbzurrvI+COlb6VzZwJJ3ivTX\nz+G3gROkQMfnCQrZ8y27KSuEQEGplD6zjVsMlUF2YrB7GzY5NF3bAw6bGN7m\n-----END CERTIFICATE-----\n",
                            "cert_request_pem": "dddb8f1425812254bb7a6101cff6c89e36dec737",
                            "early_renewal_hours": "0",
                            "id": "258507367482868545128829524946389587039",
                            "validity_end_time": "2019-04-08T12:13:09.933642413Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-08T12:13:09.933642413Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_locally_signed_cert.kubelet": {
                    "type": "tls_locally_signed_cert",
                    "depends_on": [
                        "tls_cert_request.kubelet",
                        "tls_private_key.kube-ca.*",
                        "tls_self_signed_cert.kube-ca.*"
                    ],
                    "primary": {
                        "id": "99782235088366049780540406255428846199",
                        "attributes": {
                            "allowed_uses.#": "4",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "server_auth",
                            "allowed_uses.3": "client_auth",
                            "ca_cert_pem": "730f60227f2504cafb917ea4fb6623239f9acef4",
                            "ca_key_algorithm": "RSA",
                            "ca_private_key_pem": "b4991df0f4c3d0f71a4d99fe0ee2e290f10a123b",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDOjCCAiKgAwIBAgIQSxFcBL+g1zGvVOlSmIxCdzANBgkqhkiG9w0BAQsFADAl\nMREwDwYDVQQKEwhib290a3ViZTEQMA4GA1UEAxMHa3ViZS1jYTAeFw0xODA0MDgx\nMjEzMDlaFw0xOTA0MDgxMjEzMDlaMCsxFzAVBgNVBAoTDnN5c3RlbTptYXN0ZXJz\nMRAwDgYDVQQDEwdrdWJlbGV0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC\nAQEA7NAPjD1XXrI3S/Fb6xm72DWofW6KeQ3nKY5HhMgYuoQ3pDKv1aJ6hx2ElhNu\nXuUyrQXTQfuCKvW0kj61X8yc+ShEiHSJGjXhy5CIJ++oneW1kOzGdP3M7E10ANYm\nKO3ZVTB59i3/DYyf1/SIVPbUZfcmvZY4G4+SCVKDB457quj1Cs2AWhAIWc4qO2/1\nzeRoFRzvNscxSw5QTvd1rHDiw3wosBx9qKMM8oPvdvoDpn1ApANtEfEQctLURQ5n\nIEVejuoxiFu5vhXLogLLXKjVUntH3PJ3FlpIUOygizNqfAPEBs9RKU/zgQn2D4zy\nb4wLTHLan0gYrFWTUji07qGSCQIDAQABo2AwXjAOBgNVHQ8BAf8EBAMCBaAwHQYD\nVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHwYDVR0j\nBBgwFoAUWXeacNrHXOj1qHuhBo1LvDM8TAowDQYJKoZIhvcNAQELBQADggEBABhn\niyT1uQL77hJPLbpth8q4ezrapOXVBeoFKeqSahyjPL+ZtdkvAM2dR83RPMqMNV8I\nMTdnYMiFtQ4RHCnsGePFzGv4ymYv1xz3BE5hhLj9U78J9kHbCKyLyMjrEwtaSKeX\nSel5k1T0w7hHoApmQ4vddEIChKar2iyjDclNljX0KxvEUoH+pmUqArYV0gzy7xTy\nQ3uT/siIC9b5qukX4v2imOGHkNpuBmoukrOsfoh15oE0x0kYC67B4lIB8i3LLIWk\ncQD1divtSwtsE5rPFyuvZckvH/7cralTA4U21sOuJD5O2DVVmrRZxISzlTR/1/+G\nhaYTGNFMdZG6miMyklU=\n-----END CERTIFICATE-----\n",
                            "cert_request_pem": "596788dc2c7cee434b7aeee489d2e9c7cc49d9ae",
                            "early_renewal_hours": "0",
                            "id": "99782235088366049780540406255428846199",
                            "validity_end_time": "2019-04-08T12:13:09.929190853Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-08T12:13:09.929190853Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_locally_signed_cert.peer": {
                    "type": "tls_locally_signed_cert",
                    "depends_on": [
                        "tls_cert_request.peer",
                        "tls_private_key.etcd-ca.*",
                        "tls_self_signed_cert.etcd-ca.*"
                    ],
                    "primary": {
                        "id": "154339820657515130066640356171272578797",
                        "attributes": {
                            "allowed_uses.#": "4",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "server_auth",
                            "allowed_uses.3": "client_auth",
                            "ca_cert_pem": "3d1c5e017646aa09dd864a8922f33a59d459fb39",
                            "ca_key_algorithm": "RSA",
                            "ca_private_key_pem": "cbf311cc971f7e87013dd0b4177fca3a26a238ce",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDQzCCAiugAwIBAgIQdBzEqisnzMK2bwflBnZm7TANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwODEyMTMw\nOVoXDTE5MDQwODEyMTMwOVowIzENMAsGA1UEChMEZXRjZDESMBAGA1UEAxMJZXRj\nZC1wZWVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvhylKNBAhSeq\nT/2nZsjZ2kYAaEPxJ4nJcKt/olMSpoDjPXRoHGamwU+Od0PVAv9VwGJnGiQxUXGU\nylUxefha3Xw7xmFBZaTSUDGhUDpWyqZSXIGCFQ1q9YVFrbiWpJ05fSALbHQfWiZ+\n3CpgmO45iFElIFhwcvVolwDG2amKb83+zM4HuvBlk2GEdKSidJYE56S9NkiR5yNm\nipDh8mM7CETecA/qeOYoSJK6wxTcmU8MDgkVeb5kfVXVwTUqRnZoqAAKgTvn3o46\n//vBx9zE/LojddJShOOEYb6FM33Y9W9i0s3B6MivhkdBj5G9hM2h6vHsG3TNxS8Z\nZYrd2nSV9QIDAQABo3UwczAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYB\nBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUiE/d8z+Y\nStOruD+tBXFIcv9Ou/owEwYDVR0RBAwwCoIIbjIuc3RldmUwDQYJKoZIhvcNAQEL\nBQADggEBAJhpMOatfeL4sPXIOMTqbtNdcK25EPiODm6uWaCYLb6nPJQwNbQKn9ur\nqgpTmllrzM75jFi/EstKkOdGKZk9rH5+MwTOGWTRb47f9YRbXaD6cct66DiZYZb5\npLdi2qt4evOOKBt5xsxuTSliGUWUgKWvwIRVRCZaKS+bZQN2w3iXFP/Oo5kDzXpI\nnbxQ6HG7ZT35HnjZWhUXZSovdG2+reRG29JxoylxFjAy6aie3xlTfn+tAtLjjpIO\n42kMqRGAMRR6NUDLXeAtqiNWCG2HXpqtE0BNGc4z3Y23OIJfQzcK3mfKLJNYDCcD\nZwjpNGOUuZKAYSwGCCvZj6JxdK5HQME=\n-----END CERTIFICATE-----\n",
                            "cert_request_pem": "f725c91c15549cfa297ea312f5f89470a336efcd",
                            "early_renewal_hours": "0",
                            "id": "154339820657515130066640356171272578797",
                            "validity_end_time": "2019-04-08T12:13:09.884115147Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-08T12:13:09.884115147Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_locally_signed_cert.server": {
                    "type": "tls_locally_signed_cert",
                    "depends_on": [
                        "tls_cert_request.server",
                        "tls_private_key.etcd-ca.*",
                        "tls_self_signed_cert.etcd-ca.*"
                    ],
                    "primary": {
                        "id": "9754745820511579868600758056421457235",
                        "attributes": {
                            "allowed_uses.#": "4",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "server_auth",
                            "allowed_uses.3": "client_auth",
                            "ca_cert_pem": "3d1c5e017646aa09dd864a8922f33a59d459fb39",
                            "ca_key_algorithm": "RSA",
                            "ca_private_key_pem": "cbf311cc971f7e87013dd0b4177fca3a26a238ce",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDWDCCAkCgAwIBAgIQB1ayGeQF2u2oer0SxuR9UzANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwODEyMTMw\nOVoXDTE5MDQwODEyMTMwOVowJTENMAsGA1UEChMEZXRjZDEUMBIGA1UEAxMLZXRj\nZC1zZXJ2ZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDQiIhBxTL7\nQ0rX9eIAu/l17ecoCrioGH+oxgrcfDuOD9ITqMXIoAoceGHXKhbRzNoOaznxgUuQ\nK1EgPf76XxroUehAb5cYL+P35jT1Ha+3K90CgdDNuRcFcvsr3GpMoUwpaoTVaTx3\nbo+ew6LEzP4jEhwzy+gqLHIloW4dfNlwc3eb1HAXZso3D48qnD15MF0ETCKKTPht\n7Mlw4xyQ2TdgLflELVxdzlnNWWuK78ozmnwiuWN8vI3Z2qCi2E1KFdxgDfEU5t0I\nd0USgyvmytNHqeqeDhVLbKQckMcrC7VGpSS5ulxIm+A9Gnu8UcCdSieXtJGdbQAF\noc+a9X8tXedBAgMBAAGjgYcwgYQwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQG\nCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFIhP\n3fM/mErTq7g/rQVxSHL/Trv6MCQGA1UdEQQdMBuCCG4yLnN0ZXZlgglsb2NhbGhv\nc3SHBH8AAAEwDQYJKoZIhvcNAQELBQADggEBAJSubCRiGsvhyHLxgWwsz8QXzYuh\ndJSE9h4C4BMq0lw9uhLWXwmOnJnZqelAKX5KiuIAbeuDYrueWoa/OSEZyd+8IREd\n2lvK/OwDGNVT9UijN4y4V54U9uhDdXVVVYfe+GHUBSMO+Ac92XcprFe4WfWVxQPa\npAOvLFbCSzSnCiAmTgOG4WeZUt6exaNSY1OWYP6f5ED1FP9Cvcgl6hFnyXwThjsd\nOLVoN03NQz4Cy9ZVvkwaUiiXvgND+tAUPzyF9XuwV1FuFn0b0Pr4P3k1+Y/fyfDI\n0B44u1ByY4WAOhwF8kZ1dPFsGDv8GGDOron131uY75jX8FJI1taY8D80kUU=\n-----END CERTIFICATE-----\n",
                            "cert_request_pem": "23778e9ff3c858231808f2acaccc4d49527f97dd",
                            "early_renewal_hours": "0",
                            "id": "9754745820511579868600758056421457235",
                            "validity_end_time": "2019-04-08T12:13:09.898534522Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-08T12:13:09.898534522Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.apiserver": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "2a7e70ee87adc0e98fcd43f88e0e0d9465c4cb52",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "2a7e70ee87adc0e98fcd43f88e0e0d9465c4cb52",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEApS54c+hO7gDJItsu4VAW0j7cq4bbLwMZd+vH6GzNqhoOHzOD\nhLOeYguVmexvstV1Ohy2TPGgv9349g5YleEUNvW1Iw9HZZI1vAJsGRsxs+v0iAZv\nrTMYVReGdkJ+KHau0ATpT8VLeknUSWGcPQx2VKXNg50P5lo704Pgq1HkuD/Z8kE2\nrc5sFLRm+ztv403ceDTsoJajcse+uGnpmeP++KnI98Ai2Wx0nj6NIDty/W+8rOCv\nKI3OfgUlMWGKb0PQrjCybXdBxzuMwMLSkRrqa+MNH5SXmJuZw1nnQwpKLl5djJBt\nzFBMhrmDIe4JtRi0do0/pr4Fp+sPlbLUMh57dwIDAQABAoIBACs11Ny9UKiCHBu6\nKrFWOiIVv7Q/Ouc5cFgmncz3aXWuCzOuTiFQu4X6cdAqQa4OmPPyvt2x99M5Rf9Y\nEWRj1N3ruM7LGGpBrTzZhV2r93yRpQ5QYLZ2P09DMDGPg2EiauiP4Fi1y+DZn2by\n2eQ+dlX+aZycYaRoxm22efdXHPX1kmE1QddqoqAoeRoCb+kHJ8sbeJiM3YWnJOT4\nz5GbGouiAxT0Wu/MJyBpJwPiQgiLvZ2FQFw1og8W0P9PUHVK0m9AzQn0lEwLjBkH\nzYWRW2Li8bhWLSAKMQ7UR//+d82Y7bmnRkFzrmsvOTPZv8NKAgAM/sK6t/CNiDt2\nTM2MtMECgYEAxDVbKHAmngJ5tOL0KVvNfh9nWam/+7yt6oS9UpEqMIr2QO44HEZd\njKr+JfaMOwvn/HSvbLK8KSk04H8uSZ7BB8X7LJqo58AQr6Gvm/w4+cz8JitPWZkg\nefwautq8aPEl+RSzWjw2sxB3sJ03mkkzhJ2w91IjlV4iJ2aDWCw14WUCgYEA14Sj\nl09EvkLNfdq0UAjFC4c5RUGJwKP+MieGDnTqXTNWX2/L4T3HPzTUilP0LWOlhgY3\nQ6IMcgNUY2zKQKBR7iWulvv+wi/JJPeYbmh171zdwSf/ZZDAwI3yQnGGgZyJkyNU\n5RUl59gCcZdsb7RhWFAYY1UPHCP0Qj3IB35M6asCgYAWGQBERKVExHiak7j1833o\nR3cnVQPnQS/BKuP7qZe70dq8I1g0bwRYNGXdNrBCcivVdfrP3i1s4VQwOIKpDfUl\nf/my41REjZATh700byqnj5uSXOxZ5fIPawJDqyDvHMGvFNLCRefPMPqZ7Ir3mGjx\n9aSZpimVx/1GvLfsNUZ4NQKBgQCA73GPjHTr/rtBmB5X42c/Rl8U9+iZv4LMLqkc\n7QVpTNVXs2KeFn+laM3fE+r5XKwiSoW1iLU5YJSUBvnZQBDEEPcqjQgU1NHZs+cV\n5pjn4v8oF+3LrZYjnMhax+BYmnYT+QdJJiXPVoPfwV+2VIwIcaKlirXHeBshpiSN\nlxockQKBgQCOScKWpra+536RfnnpKMMB+hoKk6tz0Sbic6PrtOw1zGXEuXn/TOc9\ncavJ7eRjkdq9zM56MdOlFhwr0lg2+EX69I5McRnDpvAnQLds8U22xeoAqXe/W0Tx\nWPV9FaRf5o+4prQKGanjDoJl8wDf7qNND5F95tYajcEe8+MhEibIEA==\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQClLnhz6E7uAMki2y7hUBbSPtyrhtsvAxl368fobM2qGg4fM4OEs55iC5WZ7G+y1XU6HLZM8aC/3fj2DliV4RQ29bUjD0dlkjW8AmwZGzGz6/SIBm+tMxhVF4Z2Qn4odq7QBOlPxUt6SdRJYZw9DHZUpc2DnQ/mWjvTg+CrUeS4P9nyQTatzmwUtGb7O2/jTdx4NOyglqNyx764aemZ4/74qcj3wCLZbHSePo0gO3L9b7ys4K8ojc5+BSUxYYpvQ9CuMLJtd0HHO4zAwtKRGupr4w0flJeYm5nDWedDCkouXl2MkG3MUEyGuYMh7gm1GLR2jT+mvgWn6w+VstQyHnt3\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApS54c+hO7gDJItsu4VAW\n0j7cq4bbLwMZd+vH6GzNqhoOHzODhLOeYguVmexvstV1Ohy2TPGgv9349g5YleEU\nNvW1Iw9HZZI1vAJsGRsxs+v0iAZvrTMYVReGdkJ+KHau0ATpT8VLeknUSWGcPQx2\nVKXNg50P5lo704Pgq1HkuD/Z8kE2rc5sFLRm+ztv403ceDTsoJajcse+uGnpmeP+\n+KnI98Ai2Wx0nj6NIDty/W+8rOCvKI3OfgUlMWGKb0PQrjCybXdBxzuMwMLSkRrq\na+MNH5SXmJuZw1nnQwpKLl5djJBtzFBMhrmDIe4JtRi0do0/pr4Fp+sPlbLUMh57\ndwIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.client": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "581d4410d309cb3c4da4cb5cc8a155c33cdf2c17",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "581d4410d309cb3c4da4cb5cc8a155c33cdf2c17",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEA0cklWmK1GlDP1Mxe0nPOjac//I89cbE6SFkqVBwCG/Avx7Cx\n9NdScamddqd4E2/adVEdD1yUxFXOooNfGofgB+WQZrDcTrX06KXRb1DDQ1KvbcKe\n1CVUbYuf5DQOfBV0XXzKUIiTQ4QpDEvm+bP8XWpF7cczwpR4l1qkzTTDYvj/2fH/\nLqBGa0HZK8+F3brUlZqtO2oaDnT2eht8MBHsDvOytlLBOrpr0qTY2dEpp581X9BM\ntckdEuKNHypKBxLgDTZC5FzcL/BN5ZNgsyqZXvbO+jLcyZyj3wkYyJf3wiWRb0tn\nuzKY+ZcDsabV6qvvZLcYXX7SsT7VCqw7MSIOlQIDAQABAoIBAD/9EK2vKfpq59nK\ntKmQtVIzz6qjrmQ9YL+souKg4GvRKWHJnZ5HB1iwGd2VW2TiW0opgamr3Zy9Z5fe\nZmXbSBRgi1knXSuNCLTlzyobAlRIpkXedT/UWxpG2nBrCHgEu0fAxp0l63VOnI6p\noDxOEA4WWloaxsj1LItOFLKbA3XuXAqK40Ny1EUtTJwcyekoYLGVByJFkXvCMYbU\nSEq16MEVk41xnAadLmAr0SlN5/X7lPKFDDbkbwWUsnJO+cD+LfmLGV3yJZFcWx3g\n1KlCdRhhyKefdaRMWtlqKKAAaY5+vWA8EiyDD6WMY44CStAShXZDhi7FmtgaZ4Gw\nLKnkIcECgYEA6fYMpOXOm4L7+0bF76o44lhmxrtL2MC2DfhCqgIO5RKp9PiXBmQs\noYO9H5EHk4EHkdmopUu2DPLWt5rt5rRP7uvbxOF/795DYfxvDeubFjVxewRQGjMI\nJ85JC1Kk4kwWlDJ83tdh8cr4/hcjNR8KylYEApqcnW8kcgJgyeC26JkCgYEA5Ywb\n4oPAvbuO9+zBLdRnT5KZci0SjZzkuM2WIvMmqVuj6mwkQzKkXjsAZb8hbBiP9/fZ\np1ALJlTP7ONeh3AQOp3yL2rvHUwKqIU6HOomMB1efFV4p9n+Mxj1gYkydKBxpsGX\nNLFxx/v69OYgCPVCQVl57+bYwwdh7axf2f4qZ10CgYBWMR9XYJJNGGRcniYttThf\nqtGyRS4cHGL1opBssXVrTwTuCucYo68NkcsK5hM0dESlptpKiyn2e0A/RASBCcyo\n6Jt+XNUVOXz5jFYder8X33h/KYeZH1PR1l1ynm/ALufikPcP4aljurMgaMW/vD/t\nauLvUqaAGYIDvnyJ4w9/gQKBgQDPi1G/CW8gXU/T3A2CGXTbXmo88IHA5qVqbf+c\nVAqVv9TB5MsYstYomOIwHJLkgITTKBZ0D4w1OSPSRHW4sVsLFLnfo6jU7WcJnYPA\nlvi2Mie29TSlVxVeL+fyGhEzn8mCg7DqJLICplLuUI+Qaehg27zDaw57r9YcJel4\nWTUPxQKBgQCkM7TCeJLNkC75jUVn5c/g32FyJBZ88JItFdZ/RSil95IWji5dgdnJ\n+t7MJ0mi4JjI0JrV5qIYcNZbYx0PLT9S/fz8rYxjtjfpC7Gq/Pm/lT7tiktImJOM\nwz59A2+FdK+06doTzpAW4+XvLBjRXxBOOBpmHkW25QIDZVLhn3Gmkw==\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDRySVaYrUaUM/UzF7Sc86Npz/8jz1xsTpIWSpUHAIb8C/HsLH011JxqZ12p3gTb9p1UR0PXJTEVc6ig18ah+AH5ZBmsNxOtfTopdFvUMNDUq9twp7UJVRti5/kNA58FXRdfMpQiJNDhCkMS+b5s/xdakXtxzPClHiXWqTNNMNi+P/Z8f8uoEZrQdkrz4XdutSVmq07ahoOdPZ6G3wwEewO87K2UsE6umvSpNjZ0SmnnzVf0Ey1yR0S4o0fKkoHEuANNkLkXNwv8E3lk2CzKple9s76MtzJnKPfCRjIl/fCJZFvS2e7Mpj5lwOxptXqq+9ktxhdftKxPtUKrDsxIg6V\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0cklWmK1GlDP1Mxe0nPO\njac//I89cbE6SFkqVBwCG/Avx7Cx9NdScamddqd4E2/adVEdD1yUxFXOooNfGofg\nB+WQZrDcTrX06KXRb1DDQ1KvbcKe1CVUbYuf5DQOfBV0XXzKUIiTQ4QpDEvm+bP8\nXWpF7cczwpR4l1qkzTTDYvj/2fH/LqBGa0HZK8+F3brUlZqtO2oaDnT2eht8MBHs\nDvOytlLBOrpr0qTY2dEpp581X9BMtckdEuKNHypKBxLgDTZC5FzcL/BN5ZNgsyqZ\nXvbO+jLcyZyj3wkYyJf3wiWRb0tnuzKY+ZcDsabV6qvvZLcYXX7SsT7VCqw7MSIO\nlQIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.etcd-ca": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "0af558b2c3e7587097eaa2779793fab1fa99ea45",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "0af558b2c3e7587097eaa2779793fab1fa99ea45",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEA6O2F6Rpvr8qPri8UUgNiblDrxkBR/d47/fwGxKLd1jmhkyas\nbRNnejyV5UagdRE1wyfQY93R9CLcDodh1uh7j+g1NAE2Ma4jJO0cZTQ+E5FSohXu\nP9F6q8VQ7M0JIDhnoSnM4rOEnMEQCpKlvZbp6vdOG9kDRwuwWtzxcrEH4bPV0fWK\nDF9bx50/HGgMU+LCt/1aTQjCpaCJQduXMpegxLu/HhgmTTKRU6+G9iUK8mnwoJ+h\n/NdgKWWAT8+cN70ZN/yK+YvZ5A8KSysqNZZ4f1ygyIoHi1SNKzTnM3wySxhOtDTT\ni38pCOfTctpy/D5xMjdR1dDr6iKu+HI6tYMNjwIDAQABAoIBAH+O5BC964AHnBu1\nqJkpRVRIeHX/b2dptszmogY5cucIdJWTTkYFpFtqpmQDA4hYvmp7eUHXjkz2cjB6\nr3fzpQcwEULDjxwx0wk72JsLuxsYMHqXK/xDCbzbt++WcXL1sLqvm4Zi7TKy/8fq\ne12SMdP9TwctFwBnRFLeQFOg40IUIDrvHwInkF5iVUbW1lVDJM08/SirH3RY660p\n/iY4cm0IFsPMXnlIp2IKsAwL9C2aBOYDYQGlEKOth/GINe3jwUJPGDix6Jg960TS\nzECEAk1f8GPH8JXYSh91VRJJGsQsic17ZH+fd5On80vqXvEzjMPeT2eIfCVC+36G\ntt1kySECgYEA6RAlE4nWtgTtX7884laXRP24ueIvmbSKkKJ3XruiWAgyNI7xA7ci\npHxEZu+CeT4anPc9MO4Gn+mkLt0MqVtmZ0zvByx2a3yvMCtxCHd/YUvuHpx5uc6n\nr4V2Z7GeHT7R7NpJkurL17vrxrA9Rq1j0LNBTJC/dTgYwSvLMm7KSVkCgYEA/9n4\nkIWKLznqaFX9+dAltvzkEqHFB616OywKXXf7JIw+az8dE2VD3Lr8du2R61qXPLjV\nGltzbAhcGtwVvK2tbEWjX5iSAWImQ7Mtk813hY0lzB0jqOWnmhnB8lXmJi+zr+KV\ng9rysSiyGnTTKb5EOQQRUPce4DUMRwHOLpuTyScCgYAemPwFIKeLpgHz/AtmO7AI\nYrcJ0GQnbchzTKEXUtLxc8IDnHCP6E8oARiJ2w/qEvkzelISRm2gOPBRJrwuz80V\n6sfGzVOOsQPe8xUX43hZsbpFUo24kyT4qjDtVChJ9qFg0xetrh2s6QL/RswEp2bf\nU2lTP/2iygaV9cXrjRgJoQKBgEr6j/OajwKEEIP/H20EaOkVd6lWKy2y0y1gHLGD\npd/yEaDQYC788ERRsAcSXD8Cz2uGJz2QK2Uvlf5xHRWsODSQu+4aAj/RibExY1v7\nTNmgocENkRPAKbvpbIMeVVI/jIMw/ewkUBdG+9rw/akwD0I+ROzbXvsJ0M1GZCwY\nf9jlAoGAI9bmLGjZ0/1SSDxzzCU22bYwOKIXrJCDGSNovBapqcYENEIqlEyJWfJx\ngtKNu8mePb5OMMyZ3EqztkMpktk30D0w73spbJ0B4EWywd2hmj+Ip+tsZxLXEFdZ\nVJvB4C3nBekqYy93l0z1yO4hySoYz2GilCoKgvgrsDhgc76R5M0=\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDo7YXpGm+vyo+uLxRSA2JuUOvGQFH93jv9/AbEot3WOaGTJqxtE2d6PJXlRqB1ETXDJ9Bj3dH0ItwOh2HW6HuP6DU0ATYxriMk7RxlND4TkVKiFe4/0XqrxVDszQkgOGehKczis4ScwRAKkqW9lunq904b2QNHC7Ba3PFysQfhs9XR9YoMX1vHnT8caAxT4sK3/VpNCMKloIlB25cyl6DEu78eGCZNMpFTr4b2JQryafCgn6H812ApZYBPz5w3vRk3/Ir5i9nkDwpLKyo1lnh/XKDIigeLVI0rNOczfDJLGE60NNOLfykI59Ny2nL8PnEyN1HV0OvqIq74cjq1gw2P\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6O2F6Rpvr8qPri8UUgNi\nblDrxkBR/d47/fwGxKLd1jmhkyasbRNnejyV5UagdRE1wyfQY93R9CLcDodh1uh7\nj+g1NAE2Ma4jJO0cZTQ+E5FSohXuP9F6q8VQ7M0JIDhnoSnM4rOEnMEQCpKlvZbp\n6vdOG9kDRwuwWtzxcrEH4bPV0fWKDF9bx50/HGgMU+LCt/1aTQjCpaCJQduXMpeg\nxLu/HhgmTTKRU6+G9iUK8mnwoJ+h/NdgKWWAT8+cN70ZN/yK+YvZ5A8KSysqNZZ4\nf1ygyIoHi1SNKzTnM3wySxhOtDTTi38pCOfTctpy/D5xMjdR1dDr6iKu+HI6tYMN\njwIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.kube-ca": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "48ce87b74f73312801d7e5e3cc27d14e88d54c83",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "48ce87b74f73312801d7e5e3cc27d14e88d54c83",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEA0k3ZVU09O+vS/RK34lRuYOqvT9wh4+Pgr1ojfVUPiVPULvVU\nDljtkCRMpmzq2ep/lhFaBUuzliHnuF4fJzx9d5qHBgTBYbrDf5pdfVhzk2yPx5b9\ngpfnQF5CiHIOGgsYrRBxoCLJ6iHwIHmB/ACVNkLwSJkpCxeT+1pJe/bx6OPsZqWh\nongQPZ6aWvDlA/+hNxAsyoyWGE+Jf6EnDveJOYUW3hzaVq3IgMWoWb7uXTWWM5Kc\n2MvXNTmDNPmZ9MKws6XZW9sO5leyHaE4aCDjGc2f5SK8Dhv9/33LMBWabHc6AhAu\nD4xZzb2pGrG0Z98VZ3XOXVdBZhICYjjkdTGqGQIDAQABAoIBABi8Bz+9IeKWTe5t\n8Sqxe3nyoEPoRCQlfRuiomHvSzB/p4kOWaCGXQqC+nDohoayyebAi7HrwWd6/WH1\nz/wxZSBYEGFo1cXEzZGIek5vxMgmEJMM8ywU6aHsdC7QG1B81Z4lPPf0n4LmEvP+\n1obpGqOTI+el++nOEB2T9OiblsApN7cmEGOf0NXFBnetNsb1B0St+tg1AbLsxqUb\nYlywrFFpmV4FdaIQyxQC0U16pmK/Fcq4OzertWDp8lsAwoaSOCD03QtiqKMtt18v\n8dipb28Q8cZk+2TrIligDznxdZHpn+ctCiOWowE2TD1zBSxoQSc219RVEdOfsCwy\nHOHzDvECgYEA+2hm7TfxMlWz1Pfd0EX1ZyYdNBdBWBgLH3MMp3I+7MBUX/TnAyYf\nmhyLSVucdsH4wVLWCXGcCJNi+uOwcKDpZbj+SoS66edRmIGloE4RywdmRUQzML6N\nxjBJ4GfPVRAL5LgfKxJ/rC9w25pq7nBh/eeUE13rWQSWtno5+BLOJXMCgYEA1iU+\nUlFHWYkiS0aFx/MvncdxMZ61Dz2Pr/9+VJEP/gxSw61VmlxQoleLXYWCY3/0aTXT\nXIopZUMjm/KYBeEK44Rizv+Fge3w5HCQWcaFU5JTIg6T0ahY+FDIlH8vTeJbmL/h\nSrTBAEFlMt+Nwqofg6gAlUvHonqsMRMYhwS7b0MCgYB9ecTtHl+WNKn1X+RoH5J0\ncdRffD/TvORIRP6Kz/1R4kf6QFvP+YYKP7bQ3RVBPFxv+Gz096vdp9ndyCf2foke\niO75uDclqJrT19kXIf/FaiMD7R7zdBeEU/N7ObSECuc0tyRvNeNcx6y3HeHCsXpm\n497Gr7hXjG/AEU6/XnteuwKBgQCrYTkEJhok9NPmTHVKdTw5WGElpe8fWFRDNQUE\nZufWmEQwZ+snUxQRKGDXor6cJM4U2UfjOoswiE/aQYcaxWSyesOdB+/v8N4l5FQS\nFQekv2kay3HPi5xQdk5gUX0pJqvJjl6eLBR9wNhdo33POdlowy5cTT5isSxXRgIO\nJGJhAwKBgCHmxaMAerYuajn0dqzK3xRERaQ20vHH6GpAqpxQ61wgYYlYjBf5FW8F\nfYY0z/OgW7GhGGme3Y1+XNMPwUxnwPkzQMAUxQDg3H5zzKHaxABcdV9JcUTQjX4d\n+/XTOD2Y9OD/LlHeFrZjxf6pVlIa+KCF+9Xk+mc7WDHsEqYG9IeG\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDSTdlVTT0769L9ErfiVG5g6q9P3CHj4+CvWiN9VQ+JU9Qu9VQOWO2QJEymbOrZ6n+WEVoFS7OWIee4Xh8nPH13mocGBMFhusN/ml19WHOTbI/Hlv2Cl+dAXkKIcg4aCxitEHGgIsnqIfAgeYH8AJU2QvBImSkLF5P7Wkl79vHo4+xmpaGieBA9nppa8OUD/6E3ECzKjJYYT4l/oScO94k5hRbeHNpWrciAxahZvu5dNZYzkpzYy9c1OYM0+Zn0wrCzpdlb2w7mV7IdoThoIOMZzZ/lIrwOG/3/fcswFZpsdzoCEC4PjFnNvakasbRn3xVndc5dV0FmEgJiOOR1MaoZ\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0k3ZVU09O+vS/RK34lRu\nYOqvT9wh4+Pgr1ojfVUPiVPULvVUDljtkCRMpmzq2ep/lhFaBUuzliHnuF4fJzx9\nd5qHBgTBYbrDf5pdfVhzk2yPx5b9gpfnQF5CiHIOGgsYrRBxoCLJ6iHwIHmB/ACV\nNkLwSJkpCxeT+1pJe/bx6OPsZqWhongQPZ6aWvDlA/+hNxAsyoyWGE+Jf6EnDveJ\nOYUW3hzaVq3IgMWoWb7uXTWWM5Kc2MvXNTmDNPmZ9MKws6XZW9sO5leyHaE4aCDj\nGc2f5SK8Dhv9/33LMBWabHc6AhAuD4xZzb2pGrG0Z98VZ3XOXVdBZhICYjjkdTGq\nGQIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.kubelet": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "8e26351c3258218f4acb971d2d7a592d35f73c3d",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "8e26351c3258218f4acb971d2d7a592d35f73c3d",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEA7NAPjD1XXrI3S/Fb6xm72DWofW6KeQ3nKY5HhMgYuoQ3pDKv\n1aJ6hx2ElhNuXuUyrQXTQfuCKvW0kj61X8yc+ShEiHSJGjXhy5CIJ++oneW1kOzG\ndP3M7E10ANYmKO3ZVTB59i3/DYyf1/SIVPbUZfcmvZY4G4+SCVKDB457quj1Cs2A\nWhAIWc4qO2/1zeRoFRzvNscxSw5QTvd1rHDiw3wosBx9qKMM8oPvdvoDpn1ApANt\nEfEQctLURQ5nIEVejuoxiFu5vhXLogLLXKjVUntH3PJ3FlpIUOygizNqfAPEBs9R\nKU/zgQn2D4zyb4wLTHLan0gYrFWTUji07qGSCQIDAQABAoIBADeCZcKXtl0qJTAV\n+VfYhmGd4krUmHzbt23UPgtv4+wEhg5lGzZWiaYWUzfigiKYUxKfpO94hwCO667E\nKDu2eK0mtTnPJzwPmUfgLyo9UScB61d3SOWvgFN7rE9t4zAA4MrJPC1qhrikV+uF\nFFfmK89i6Z/TEH/VXYP15WTmDzL2SNjEfPcBP9jvN+GIrLCeKJ4yniVbwMoHzGCL\nUfE1bEcBKqOYB3+FzZOtHtuwltmDDdZtiuPZrB4+7eQHMcEyUXQ5HQ6LUMmDRjg4\nMEYSAFRtiE9VU3u9ryCqAWc6/pcg7+iVMaTGKITtm63YX80cs3yoCnBLfP9Cge5r\nIHp8GokCgYEA8p8FhHNHql1C94R3lAFYHw+U8uU/2BoIq8i9PJLFlzZLscjzNp0X\n4G9144zklZnT81jrmmwjHvLHH6I1IqYN2HXe22GZmIGlDglZhNuCGCGe7ZWDyBV+\nyhCHGt5qK0++dRqXnV2SmkBIYpQSwN56+JrX4gWh9PKv79+pUi+TOusCgYEA+d8L\nPxFfohufNxoDxt1D1zsA7kmQk/zJJM1KNn3mZV/We2xMp5tNoVa3NzH7yngVEL5B\nS6RcqJxssNIXVGbzlqc/6Im9PdoV4+ZYJPihlUFtdG2IkQ5emE8b7j2glqBL/XmD\nnzt+vDjSXSHBOT2rT0Nk7TIybt6d/Hy1Mv4JwdsCgYBNdErUn+DPGHrafeWW0F8L\ne3P3nwwktxrxjGItRkXiIilEFnzegIQw2CRwgngu8i7hzw9X+xGzPZooFSaVayGc\navS8YIoiT7EbrAxyB4meno0YF9U8OPCDHYekIkEOlqScyeKBEHBO4hq5rb/W5q+n\nUfd9ZoLvqdJU57gsTpfYBQKBgFCWqFjp8I8nG325DTjJSkUTiaRQ46lnITSWZXYX\nuwQ9Gb7q2fpAs5PylNrfaxcNDbY9tm+ADkZvVPred5nILo4LWShVrExTlzXOp+Uc\nr3ilBnlDjoVCPi4fbaG0DKQoBPo2g8YKeUCZjvdsmJYulp7U3KtHwk5RzGCPlB1j\nI6B7AoGAGB8RKnOF7JrrA/3D0iEaBjrwZIze+Xph+Nb0h9QcBVqRK6Rr/swsXHTc\nUS2Y5kDsbWNirD7k6fVvJbIJs++kE90zewFNAvSZ9f+WRdiutj2ADlHWnN2oqoY2\nRliGm6juu5l5mTuJiq3XkTDEYxHm+s97hoZjkh4fieNm89JGUGQ=\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDs0A+MPVdesjdL8VvrGbvYNah9bop5DecpjkeEyBi6hDekMq/VonqHHYSWE25e5TKtBdNB+4Iq9bSSPrVfzJz5KESIdIkaNeHLkIgn76id5bWQ7MZ0/czsTXQA1iYo7dlVMHn2Lf8NjJ/X9IhU9tRl9ya9ljgbj5IJUoMHjnuq6PUKzYBaEAhZzio7b/XN5GgVHO82xzFLDlBO93WscOLDfCiwHH2oowzyg+92+gOmfUCkA20R8RBy0tRFDmcgRV6O6jGIW7m+FcuiAstcqNVSe0fc8ncWWkhQ7KCLM2p8A8QGz1EpT/OBCfYPjPJvjAtMctqfSBisVZNSOLTuoZIJ\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7NAPjD1XXrI3S/Fb6xm7\n2DWofW6KeQ3nKY5HhMgYuoQ3pDKv1aJ6hx2ElhNuXuUyrQXTQfuCKvW0kj61X8yc\n+ShEiHSJGjXhy5CIJ++oneW1kOzGdP3M7E10ANYmKO3ZVTB59i3/DYyf1/SIVPbU\nZfcmvZY4G4+SCVKDB457quj1Cs2AWhAIWc4qO2/1zeRoFRzvNscxSw5QTvd1rHDi\nw3wosBx9qKMM8oPvdvoDpn1ApANtEfEQctLURQ5nIEVejuoxiFu5vhXLogLLXKjV\nUntH3PJ3FlpIUOygizNqfAPEBs9RKU/zgQn2D4zyb4wLTHLan0gYrFWTUji07qGS\nCQIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.peer": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "957cc8b0a6fbd04e4754050371d8671e685422cb",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "957cc8b0a6fbd04e4754050371d8671e685422cb",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEAvhylKNBAhSeqT/2nZsjZ2kYAaEPxJ4nJcKt/olMSpoDjPXRo\nHGamwU+Od0PVAv9VwGJnGiQxUXGUylUxefha3Xw7xmFBZaTSUDGhUDpWyqZSXIGC\nFQ1q9YVFrbiWpJ05fSALbHQfWiZ+3CpgmO45iFElIFhwcvVolwDG2amKb83+zM4H\nuvBlk2GEdKSidJYE56S9NkiR5yNmipDh8mM7CETecA/qeOYoSJK6wxTcmU8MDgkV\neb5kfVXVwTUqRnZoqAAKgTvn3o46//vBx9zE/LojddJShOOEYb6FM33Y9W9i0s3B\n6MivhkdBj5G9hM2h6vHsG3TNxS8ZZYrd2nSV9QIDAQABAoIBACkRLQhE/DsHV34S\nEDBe4NiK2JmtW5Gr7QzeryKUiWnYW74xwC+qaQlHM0JGL+SG3bJCT31RJiouu/J9\nNsPfR1mi9ZKj/amEUj4qims3PvpltVLwUvZTQLCqymN9hWUn5XxHCNCzwPYLbMoI\niXdftqPgy4FSOXBL3P0JmOr5+cKuwJxeSNQntJCv2YTY7dM5WEfQ61JJnvIKJfzD\nqoJOcbjnfeYdM/qM9Wc+t0IOpDkJZwRUxZ2GpLbqn6TfJ4OwpB4EMuj+VLtJAqdZ\nVryiEwe5lLH+yVWzwFk5kngQ6iMXA3Z+2Bgxmn4hBYDaKUjtHAbmAWShq+rU8ldw\nUyWHUp0CgYEA0uVxrUj+TRIT/MvbOU7glql7ETgw+c4iA0pMAFqQfP7v3kqjp7UD\n5jrhMOrkJMlhsIvODEius5NTBFEZNgh8KAWsMSny6swANmiTE3uATf9yiRV2FMic\nvxo9UrHotMhCzXlgZCxEKaW6Q22+KykTxCGXvGs+QVk3UUAV73stRxMCgYEA5sVC\nHIVt7sM5x5aD0MJ8D/3f1jZipvMsmvv1QdS1kvTk+vtJrz/FZgRJyaCIakdIAZZO\ndTtT5UEJu9aENpdXLyLRsHz3L7Yses+lnmdmCWkUPWt0W5mAXSPh+48HgxybgxzO\nxKnqcapPjbZ+BNb43j0L2IRg/0/C0FS2puk+J9cCgYB6AzzNYFmgBUGDE/31HelZ\nwRvuTnAnVlbfSHDIE51cc7IbDVu5f0SOQqpePsdXcRsPpRLEkJhiVG3HJZRMaoRK\nM13346kipnvI/p94ug71EUEWhlAWninxdiDcYwma7fGYJwzZZ7LX1YX51Ngc6FsD\nMdwzqmgOLquOWmFWeBEt+QKBgBzzlm25l6ciuvb9PSBNpf7jnNdlD09eprPy9DwE\nEZuUOb37FK111LANzawMBdE/jBsW3lT60nWqiSwVp5Spu/hf5+q6YtCLjF0D/AU5\nd6Wqly11c62iPmZxAALtWMXsKt5yGMa3goAsG7rtsDWvOp23DutlAD5HpWs5lYiv\nLmsVAoGASrIHjHPHkC69FW3zPptWIxxmsA+U/GyA7t42gW/Nq6bwClH2NtoRDKf/\nbK+6t0k6OeCJSF1mGUq28uwcsxcZhM+l3ngtg7Ikd+GgdB9H8kppE9f8KxNWENs8\nWd3hAmOG5VtAWLHRSu2gDj1bISdz12vNDvBT91To9kNl/9Jn/i4=\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC+HKUo0ECFJ6pP/admyNnaRgBoQ/Eniclwq3+iUxKmgOM9dGgcZqbBT453Q9UC/1XAYmcaJDFRcZTKVTF5+FrdfDvGYUFlpNJQMaFQOlbKplJcgYIVDWr1hUWtuJaknTl9IAtsdB9aJn7cKmCY7jmIUSUgWHBy9WiXAMbZqYpvzf7Mzge68GWTYYR0pKJ0lgTnpL02SJHnI2aKkOHyYzsIRN5wD+p45ihIkrrDFNyZTwwOCRV5vmR9VdXBNSpGdmioAAqBO+fejjr/+8HH3MT8uiN10lKE44RhvoUzfdj1b2LSzcHoyK+GR0GPkb2EzaHq8ewbdM3FLxllit3adJX1\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvhylKNBAhSeqT/2nZsjZ\n2kYAaEPxJ4nJcKt/olMSpoDjPXRoHGamwU+Od0PVAv9VwGJnGiQxUXGUylUxefha\n3Xw7xmFBZaTSUDGhUDpWyqZSXIGCFQ1q9YVFrbiWpJ05fSALbHQfWiZ+3CpgmO45\niFElIFhwcvVolwDG2amKb83+zM4HuvBlk2GEdKSidJYE56S9NkiR5yNmipDh8mM7\nCETecA/qeOYoSJK6wxTcmU8MDgkVeb5kfVXVwTUqRnZoqAAKgTvn3o46//vBx9zE\n/LojddJShOOEYb6FM33Y9W9i0s3B6MivhkdBj5G9hM2h6vHsG3TNxS8ZZYrd2nSV\n9QIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.server": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "c29852ea320c2a561b4333a1c475ced60a54b57d",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "c29852ea320c2a561b4333a1c475ced60a54b57d",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpQIBAAKCAQEA0IiIQcUy+0NK1/XiALv5de3nKAq4qBh/qMYK3Hw7jg/SE6jF\nyKAKHHhh1yoW0czaDms58YFLkCtRID3++l8a6FHoQG+XGC/j9+Y09R2vtyvdAoHQ\nzbkXBXL7K9xqTKFMKWqE1Wk8d26PnsOixMz+IxIcM8voKixyJaFuHXzZcHN3m9Rw\nF2bKNw+PKpw9eTBdBEwiikz4bezJcOMckNk3YC35RC1cXc5ZzVlriu/KM5p8Irlj\nfLyN2dqgothNShXcYA3xFObdCHdFEoMr5srTR6nqng4VS2ykHJDHKwu1RqUkubpc\nSJvgPRp7vFHAnUonl7SRnW0ABaHPmvV/LV3nQQIDAQABAoIBADmvWwnelBC/d6ev\n49nSJdrCeaww8w3E4SN9zSla0Fqm87Tufe/WnZVsk5wij3dv1G4iqT+uRYnXAbUK\nkUsPHfFgHwAcHk7ZiJVdwA6CLMZdwuBbqrgN2FlwihyC94DFKb1XMvGaD9j145LG\niXMpRa/L5bNKV6m668SPGFfd3oRlXL8w8X1dNtWGsc6VeeRXjTjxRvYSRz8tz1ux\nLLi6TOmpmfHR3PnbF7iDBJYIqFGaUV0oblsKrGyKZSx5Rb32VLDGwoyHeAPaBT4t\nEykZORbyQrWujwuEeeI2nfrP3iBAbEHllFqYE0lgaiyr6S+PHsanmnC2CyyOZPDo\nZEWHELECgYEA6BAYtcFFkQ3opRsY8yQ93ONRHuqxwoc+9vRW6WwYWSuL8Bd6Ruqo\ng/JaG0W4LVgEUtWn7uhQlsFT+PaB69pXQiUMIKQLb/S3zEsFjphwRFiA8A8hb0V/\neTFGs5BnAP3ScyfuaAOVyELZV0eRoj3hmcaRCw8jKnyR4Yzvmz9yzv0CgYEA5gsb\n+zQ+VolAkUceEGyQws0jEA8lFW4u+sfj0JvD2kQv4xWScFnMsgH9OOY8XdT7qeiZ\nmmAEqdKSsKuN8ZvbipU4TXp5KhGAj7HlKL+rZgXySvpzwydbj2UBaDYPvhGS5tuU\n0nm+4g6fBnnVNA5SOVHnK8gM+WFU7qv9fF3vhpUCgYEArFEHiC7zkTpavf7ZD/Kh\nXRwOaH6tcF0tDANzZfC2Q8BqMOW+DlrAtvmGnymuET2COGAeSvCGpur3h67D2nZO\nxPbtgm9NbtywfipW/gODmbx+QcN6eD2K4lsMvNlFIx9W3duQ0/uVhRbefEjQg0Cf\n/KfNnACphCrryCf247jBb6ECgYEA4IaFR/hkw5dwsprkCAm+fLM1fq4ZdsI1DkXc\n37W4Qad9ybk7VXcAJ9lzKn7k+nwvKVXB3f/LbWj+DXtTrjZ939PmwRBBhELS5O0v\nikcQ5iH1qyKprBcU8W8XIXxqfwuuAq7coVV8bizxH6P36Lf1nsaGx5+YsipCeDTb\n0u/oIcUCgYEAnsaIOCqRzaghZmJ0XpxG08ArQNnOjoZxeU6UMb3z965l9bW8rOmL\nDzNvZhrMOqBZChR1P/B00aRlV7CipYoE1RsGGELKuIWQYX74H01+2VETeg9VAhUX\nopu6cbzuWwxzGKj4HYQ9ts7ogK1Wzc0nzyuC7YjVsytRPQzZtcO1vno=\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDQiIhBxTL7Q0rX9eIAu/l17ecoCrioGH+oxgrcfDuOD9ITqMXIoAoceGHXKhbRzNoOaznxgUuQK1EgPf76XxroUehAb5cYL+P35jT1Ha+3K90CgdDNuRcFcvsr3GpMoUwpaoTVaTx3bo+ew6LEzP4jEhwzy+gqLHIloW4dfNlwc3eb1HAXZso3D48qnD15MF0ETCKKTPht7Mlw4xyQ2TdgLflELVxdzlnNWWuK78ozmnwiuWN8vI3Z2qCi2E1KFdxgDfEU5t0Id0USgyvmytNHqeqeDhVLbKQckMcrC7VGpSS5ulxIm+A9Gnu8UcCdSieXtJGdbQAFoc+a9X8tXedB\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0IiIQcUy+0NK1/XiALv5\nde3nKAq4qBh/qMYK3Hw7jg/SE6jFyKAKHHhh1yoW0czaDms58YFLkCtRID3++l8a\n6FHoQG+XGC/j9+Y09R2vtyvdAoHQzbkXBXL7K9xqTKFMKWqE1Wk8d26PnsOixMz+\nIxIcM8voKixyJaFuHXzZcHN3m9RwF2bKNw+PKpw9eTBdBEwiikz4bezJcOMckNk3\nYC35RC1cXc5ZzVlriu/KM5p8IrljfLyN2dqgothNShXcYA3xFObdCHdFEoMr5srT\nR6nqng4VS2ykHJDHKwu1RqUkubpcSJvgPRp7vFHAnUonl7SRnW0ABaHPmvV/LV3n\nQQIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.service-account": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "36f17174e87f99400ba5a2bdbcc1162678b1a118",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "36f17174e87f99400ba5a2bdbcc1162678b1a118",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEA5eGOuyD/paO66pcRQHl+dfkWWT/dfNH2pcpxIQlkYEUxm3HZ\noc13RVR7DwnllaOQZgMaBNjhNSEfXtv1ttrgMtukrum4i6P+rFsQgo/XAXrdpG8c\n0YmPV2aoQrns4Wvv/925rhrW1uWrz4ernAWpa3fxP02d/5orksOzPcmtVdmK70k+\nPbOXZysgHgrlkAT4g/rPsDR5VRLb9VeNqajWXupPyj28cImHGwdRGC9nMIV1ozxq\nV3bvxMf3cTm1r8xWyiULc8huU4HWN/zUs49fTgdAGDTLpJLKH2ox1sX+Khb/EHIH\nGf6Kn22qmBsecJbfvcnw+37cLwAw9YvKC0bOiwIDAQABAoIBAFH1t3PUchFWbOAS\n+F2qc4IQSv2LHabRHUVDBk6nEJiaUvN/Bf8ASJP5aN6Vwrs1U9hrJq2vvau5oXuq\npNKK+wBm+zI5tkhjMfu1hA9oxVmLutZTn0y95NNekIMp0uEUIL9zCC6g9xQrUrRt\nRKweAKeGXgcZ30kwaHStPYy8CQbgGfkdAs9incrtCMtfS0zy9JN5WCG929lyhj0g\nmYBBwOKHcc98j3lqMy9FziybqXq9twBRBaEhYNDDJ5rMI/g4ORseFulpk6xUMbs7\nUy7QvpUUyd/rGDt2GKowv/rJ/ao+K2euggmjDjJ5JOxY4XvxFYqpRwwOMy+Y7crm\n/PiWCDECgYEA98dLzkGPwBMLGVAcO07Ase1B/wAMJaCcShD4Mej8rbRZtwA1Uy1C\nrAsp0bCJKmfE3smoIAmUfGrNsoCzARAMLpAtyMdQGzeMDy4ys739Rt75m0AdXZ/h\n6JS2i3Co3T5EfJEz+PVeaziWz6av5clx8Mi32eYRSgdR9MLKqv6NkrcCgYEA7YI8\nSEwxBPRs8P9SRTy0xy/HhcfHafQR892BOk4lTH1VoJ+g9AhsmpSIWl5neuD++d7n\nVoeRfFV8ZtaVwDYs9WAfsCcE/SuxyIjYwvRYKo6dHUmhO9rx08y6xQPnWePp8A9A\nDWV+1wJQO8GyPZL6lTUy2iGekypJciBAf4igPs0CgYEAjS8rW7Bx15FCTr8eBxE9\nrWSyqTl+smYNCAsZUV8fs17DjAn7WJS+m8eUoZ4E2nvcatHfEbpDuI0m/iJlXSKm\nvlV7MR+Y3plNHk1FqLOGQT7GXZcv5Gw4zk0Govej0MUtQwl94sr1bQUGsfWZ3sZl\nPT0xvWBh05vOMDhaQQrg4osCgYEA0Go5ReP+G+/07SHPasxTgnqt5foiRhqT6mAU\ndzp9xnoxOor5LUt7KcZvRIWU3qIzfMaaUDcUdnt5d7CTpiCkIQohpG0JFrRSBLv5\nIlJST73npvymjKSbEpWTyzCawimabjqjpV3MCRaRm25kX13roCUXo4xe35r66jfd\nAUy9+X0CgYAUQ8Go2HsFPOm1f0Q+bvOyEZbBLu/QEU2OVRq+kxSfxQuSLutrer6j\nNhwryzQNu87FH5hRh3S4xgShTEEu9SGQAaR32bBtxqney2bhbAuwplfkhZPXJWCu\ngefpcYNebIH7cKjxuoT9jdfl1l8sBUX8GnkzeKYK5RJGAjSZ8J+2Fg==\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDl4Y67IP+lo7rqlxFAeX51+RZZP9180falynEhCWRgRTGbcdmhzXdFVHsPCeWVo5BmAxoE2OE1IR9e2/W22uAy26Su6biLo/6sWxCCj9cBet2kbxzRiY9XZqhCuezha+//3bmuGtbW5avPh6ucBalrd/E/TZ3/miuSw7M9ya1V2YrvST49s5dnKyAeCuWQBPiD+s+wNHlVEtv1V42pqNZe6k/KPbxwiYcbB1EYL2cwhXWjPGpXdu/Ex/dxObWvzFbKJQtzyG5TgdY3/NSzj19OB0AYNMukksofajHWxf4qFv8QcgcZ/oqfbaqYGx5wlt+9yfD7ftwvADD1i8oLRs6L\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5eGOuyD/paO66pcRQHl+\ndfkWWT/dfNH2pcpxIQlkYEUxm3HZoc13RVR7DwnllaOQZgMaBNjhNSEfXtv1ttrg\nMtukrum4i6P+rFsQgo/XAXrdpG8c0YmPV2aoQrns4Wvv/925rhrW1uWrz4ernAWp\na3fxP02d/5orksOzPcmtVdmK70k+PbOXZysgHgrlkAT4g/rPsDR5VRLb9VeNqajW\nXupPyj28cImHGwdRGC9nMIV1ozxqV3bvxMf3cTm1r8xWyiULc8huU4HWN/zUs49f\nTgdAGDTLpJLKH2ox1sX+Khb/EHIHGf6Kn22qmBsecJbfvcnw+37cLwAw9YvKC0bO\niwIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_self_signed_cert.etcd-ca": {
                    "type": "tls_self_signed_cert",
                    "depends_on": [
                        "tls_private_key.etcd-ca"
                    ],
                    "primary": {
                        "id": "268888445739164018646894525767458585577",
                        "attributes": {
                            "allowed_uses.#": "3",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "cert_signing",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDDzCCAfegAwIBAgIRAMpKB+tZKTy9DCKXYl1le+kwDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDgxMjEz\nMDlaFw0xOTA0MDgxMjEzMDlaMCExDTALBgNVBAoTBGV0Y2QxEDAOBgNVBAMTB2V0\nY2QtY2EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDo7YXpGm+vyo+u\nLxRSA2JuUOvGQFH93jv9/AbEot3WOaGTJqxtE2d6PJXlRqB1ETXDJ9Bj3dH0ItwO\nh2HW6HuP6DU0ATYxriMk7RxlND4TkVKiFe4/0XqrxVDszQkgOGehKczis4ScwRAK\nkqW9lunq904b2QNHC7Ba3PFysQfhs9XR9YoMX1vHnT8caAxT4sK3/VpNCMKloIlB\n25cyl6DEu78eGCZNMpFTr4b2JQryafCgn6H812ApZYBPz5w3vRk3/Ir5i9nkDwpL\nKyo1lnh/XKDIigeLVI0rNOczfDJLGE60NNOLfykI59Ny2nL8PnEyN1HV0OvqIq74\ncjq1gw2PAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/\nMB0GA1UdDgQWBBSIT93zP5hK06u4P60FcUhy/067+jANBgkqhkiG9w0BAQsFAAOC\nAQEAWE3TsteSStWvAe05G9OAhxGSf192/NthaUnmU8uRMT2vcSDXImWoq+oSdJVO\nsDD6fpPbCxS7Xp7v+tXY2M9t3INXxLel/zJ4YGYcwKhY1x4rLmd55lLvOCpOuAhB\n9/DtbX68y7/qvOP2NJa53azaFvm/AdDOi16Jm1eUgBsXEF4AJ7hQd89rjv2PXeAX\na5cIyxrNiftFaohkzrJUbE/lga66ypfMl0jpSFc88ohCOv+ENS+X8sf7K2d9ieK3\nJBpybzhBZt9H1z7MAPSgzI6d1j3o2Te3Z/vqfdUp/m2PYFTmb8pJ3tyOCKdWIWm+\n8KmRE/2pBXJjVVCHnbOKX1PdGg==\n-----END CERTIFICATE-----\n",
                            "early_renewal_hours": "0",
                            "id": "268888445739164018646894525767458585577",
                            "is_ca_certificate": "true",
                            "key_algorithm": "RSA",
                            "private_key_pem": "cbf311cc971f7e87013dd0b4177fca3a26a238ce",
                            "subject.#": "1",
                            "subject.0.common_name": "etcd-ca",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "etcd",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0",
                            "validity_end_time": "2019-04-08T12:13:09.797360644Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-08T12:13:09.797360644Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_self_signed_cert.kube-ca": {
                    "type": "tls_self_signed_cert",
                    "depends_on": [
                        "tls_private_key.kube-ca"
                    ],
                    "primary": {
                        "id": "164146316151095687773219148792490105606",
                        "attributes": {
                            "allowed_uses.#": "3",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "cert_signing",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDFjCCAf6gAwIBAgIQe31uOMMqRWMLksRZ4KgbBjANBgkqhkiG9w0BAQsFADAl\nMREwDwYDVQQKEwhib290a3ViZTEQMA4GA1UEAxMHa3ViZS1jYTAeFw0xODA0MDgx\nMjEzMDlaFw0xOTA0MDgxMjEzMDlaMCUxETAPBgNVBAoTCGJvb3RrdWJlMRAwDgYD\nVQQDEwdrdWJlLWNhMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0k3Z\nVU09O+vS/RK34lRuYOqvT9wh4+Pgr1ojfVUPiVPULvVUDljtkCRMpmzq2ep/lhFa\nBUuzliHnuF4fJzx9d5qHBgTBYbrDf5pdfVhzk2yPx5b9gpfnQF5CiHIOGgsYrRBx\noCLJ6iHwIHmB/ACVNkLwSJkpCxeT+1pJe/bx6OPsZqWhongQPZ6aWvDlA/+hNxAs\nyoyWGE+Jf6EnDveJOYUW3hzaVq3IgMWoWb7uXTWWM5Kc2MvXNTmDNPmZ9MKws6XZ\nW9sO5leyHaE4aCDjGc2f5SK8Dhv9/33LMBWabHc6AhAuD4xZzb2pGrG0Z98VZ3XO\nXVdBZhICYjjkdTGqGQIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAqQwDwYDVR0TAQH/\nBAUwAwEB/zAdBgNVHQ4EFgQUWXeacNrHXOj1qHuhBo1LvDM8TAowDQYJKoZIhvcN\nAQELBQADggEBAJxRR0zWCJMeYsMpmekyiGULH3iC5f1FOtPPuZvSnLlJ+jggtokK\n+bTEzFCPZN81b0dPQ3OcOdCt/Nsp/A3zCMxpMa5m1lz6s6roJdkYR2WLbAfV1OyJ\n/KPWRQfYNypb6P16qnxeKKEtPCFnEiOPln1f7031x/AO9X4m0BIy9GsUcwrShbMY\nYa1pgtNaU1hQkDBFRPEVTfpblYyeMmmoL3bk1VWBLQSROtHBCpQ36jjCrKdnDkl3\nwIqzWT66bHA2EWIxz2gnAqP7tKzV8IgfT0SEdxwc4uEKUK/ONkZ6NiLVXbWvvy3g\nysAL+hBViVmH69HpGvCnQoRYVPvLee1dps8=\n-----END CERTIFICATE-----\n",
                            "early_renewal_hours": "0",
                            "id": "164146316151095687773219148792490105606",
                            "is_ca_certificate": "true",
                            "key_algorithm": "RSA",
                            "private_key_pem": "b4991df0f4c3d0f71a4d99fe0ee2e290f10a123b",
                            "subject.#": "1",
                            "subject.0.common_name": "kube-ca",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "bootkube",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0",
                            "validity_end_time": "2019-04-08T12:13:09.100497702Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-08T12:13:09.100497702Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                }
            },
            "depends_on": []
        }
    ]
}
