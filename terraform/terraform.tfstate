{
    "version": 3,
    "terraform_version": "0.11.5",
    "serial": 1,
    "lineage": "a2519bcc-f7df-a386-9ffc-d546af441d2c",
    "modules": [
        {
            "path": [
                "root"
            ],
            "outputs": {},
            "resources": {
                "data.template_file.cl_gateway": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "32cb99d1495210bcc96a37210445d6c23072b7e651b7ab1ee20b473e5ef182dd",
                        "attributes": {
                            "id": "32cb99d1495210bcc96a37210445d6c23072b7e651b7ab1ee20b473e5ef182dd",
                            "rendered": "# storage:\n#   disks:\n#   - device: /dev/sda\n#     wipe_table: true\n#     partitions:\n#     - label: ROOT\n#   filesystems:\n#   - mount:\n#       device: /dev/disk/by-partlabel/ROOT\n#       format: ext4\n#       create:\n#         force: true\n#         options: [-L, ROOT]\n\npasswd:\n  users:\n    - name: core\n      password_hash: \"$6$rounds=4096$LP6daiKkb6c$MGeaex639HmrfnglLpYsxPPruEovlzmkqgvbrouiDmv9XH/zEo7rM9ja/y9ur89OveohZ8VUf8NbdgjGRyEOi1\"\n      ssh_authorized_keys: \"\"\n\nstorage:\n  files:\n    - path: /etc/dnsmasq.conf\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          address=/gateway.steve/10.10.0.1\n\n          address=/steve/10.10.1.2\n\n          address=/n1.steve/10.10.1.1\n          address=/n2.steve/10.10.1.2\n          address=/n3.steve/10.10.1.3\n          address=/n4.steve/10.10.1.4\n          address=/n5.steve/10.10.1.5\n          address=/n6.steve/10.10.1.6\n          address=/n7.steve/10.10.1.7\n          address=/n8.steve/10.10.1.8\n          address=/n9.steve/10.10.1.9\n          address=/n10.steve/10.10.1.10\n          address=/n11.steve/10.10.1.11\n          address=/n12.steve/10.10.1.12\n          address=/n13.steve/10.10.1.13\n\n          address=/vm1.steve/10.10.10.1\n          address=/vm2.steve/10.10.10.2\n          address=/vm3.steve/10.10.10.3\n          address=/vm4.steve/10.10.10.4\n          address=/vm5.steve/10.10.10.5\n          address=/vm6.steve/10.10.10.6\n          address=/vm7.steve/10.10.10.7\n          address=/vm8.steve/10.10.10.8\n          address=/vm9.steve/10.10.10.9\n          address=/vm10.steve/10.10.10.10\n\n          dhcp-host=00:22:19:8E:26:AC,10.10.1.1\n          dhcp-host=00:1E:4F:28:30:12,10.10.1.2\n          dhcp-host=00:22:19:AB:7E:78,10.10.1.3\n          dhcp-host=00:22:19:8E:15:77,10.10.1.4\n          dhcp-host=00:1E:C9:D0:AA:9E,10.10.1.5\n          dhcp-host=00:22:19:8E:26:B6,10.10.1.6\n          dhcp-host=00:22:19:8E:25:A1,10.10.1.7\n          dhcp-host=00:1E:C9:D0:9E:E4,10.10.1.8\n          dhcp-host=00:1E:C9:D0:AA:BC,10.10.1.9\n          dhcp-host=00:1A:A0:15:E3:76,10.10.1.10\n          dhcp-host=00:1D:09:05:9A:C0,10.10.1.11\n          dhcp-host=00:1A:A0:26:DA:B6,10.10.1.12\n          dhcp-host=00:1D:09:05:98:DC,10.10.1.13\n\n          dhcp-host=00:0C:29:90:A9:F3,10.10.10.1\n          dhcp-host=00:50:56:30:35:90,10.10.10.2\n          dhcp-host=00:50:56:30:35:91,10.10.10.3\n\n\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: {{.hostname}}\n\n    - path: /etc/check-asset-status.sh\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          if [ ! -e /opt/cluster-config/assets.ready.processed ]\n          then\n            while [ ! -e /opt/cluster-config/assets.ready ]\n            do\n              sleep 1\n            done\n          else\n            touch /opt/cluster-config/assets.ready\n          fi\n\n    # - path: /root/.ssh/known_hosts\n    #   filesystem: root\n    #   mode: 0644\n    #   contents:\n    #     inline: \"\"\n\n    # - path: /root/.ssh/id_rsa\n    #   filesystem: root\n    #   mode: 0600\n    #   contents:\n    #     remote:\n    #       url: http://{|network.bootstrapper.address.internal|}:8080/assets/keys/bootstrapper\n\n    # - path: /root/.ssh/id_rsa.pub\n    #   filesystem: root\n    #   mode: 0600\n    #   contents:\n    #     remote:\n    #       url: http://{|network.bootstrapper.address.internal|}:8080/assets/keys/bootstrapper.pub\n\nnetworkd:\n  units:\n    - name: gateway.network\n      contents: |\n        [Match]\n        Name={{.interface_internal}}\n\n        [Network]\n        Address={{.address_internal}}/16\n        Address=10.10.0.1/16\n        DNS={{.address_internal}}\n        IPForward=ipv4\n        IPMasquerade=yes\n\nsystemd:\n  units:\n    - name: assets.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for assets to be pushed (assets.path)\n\n        [Service]\n        Type=oneshot\n        ExecStartPre=/usr/bin/bash /etc/check-asset-status.sh\n        ExecStart=/usr/bin/mv /opt/cluster-config/assets.ready /opt/cluster-config/assets.ready.processed\n        RemainAfterExit=true\n\n        [Install]\n        WantedBy=multi-user.target\n\n    - name: matchbox.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=CoreOS matchbox Server\n        After=docker.service assets.service\n        Requires=docker.service assets.service\n\n        [Service]\n        ExecStartPre=-/usr/bin/docker kill matchbox\n        ExecStartPre=-/usr/bin/docker rm matchbox\n        ExecStartPre=/usr/bin/docker pull quay.io/coreos/matchbox\n        ExecStart=/usr/bin/docker run --name=matchbox --net=host \\\n          -v /opt/cluster-config/matchbox:/var/lib/matchbox:Z \\\n          -v /opt/cluster-config/matchbox/etc/tls:/etc/matchbox:Z,ro \\\n          quay.io/coreos/matchbox \\\n            -address=10.10.0.1:8080 \\\n            -rpc-address=10.10.0.1:8081 \\\n            -log-level=debug \\\n            -assets-path=/var/lib/matchbox/assets\n        ExecStop=/usr/bin/docker stop matchbox\n        Restart=always\n\n        [Install]\n        WantedBy=multi-user.target\n\n    - name: dnsmasq.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Run dnsmasq, providing dhcp, dns and network book\n        After=docker.service assets.service\n        Requires=docker.service assets.service\n\n        [Service]\n        ExecStartPre=-/usr/bin/docker kill dnsmasq\n        ExecStartPre=-/usr/bin/docker rm dnsmasq\n        ExecStartPre=/usr/bin/docker pull quay.io/coreos/dnsmasq\n        ExecStart=/usr/bin/docker run \\\n          --name=dnsmasq --cap-add=NET_ADMIN --net=host \\\n          -v /etc/dnsmasq.conf:/etc/dnsmasq.conf quay.io/coreos/dnsmasq -d -q \\\n            --interface={{.interface_internal}} \\\n            --dhcp-option=3,10.10.0.1 \\\n            --dhcp-range={{.interface_internal}},10.10.100.50,10.10.100.100,12h \\\n            --enable-tftp --tftp-root=/var/lib/tftpboot \\\n            --dhcp-userclass=set:ipxe,iPXE \\\n            --dhcp-boot=tag:#ipxe,undionly.kpxe \\\n            --dhcp-boot=tag:ipxe,http://10.10.0.1:8080/boot.ipxe \\\n            --log-queries \\\n            --log-dhcp\n        ExecStop=/usr/bin/docker stop dnsmasq\n        Restart=always\n\n        [Install]\n        WantedBy=multi-user.target\n",
                            "template": "# storage:\n#   disks:\n#   - device: /dev/sda\n#     wipe_table: true\n#     partitions:\n#     - label: ROOT\n#   filesystems:\n#   - mount:\n#       device: /dev/disk/by-partlabel/ROOT\n#       format: ext4\n#       create:\n#         force: true\n#         options: [-L, ROOT]\n\npasswd:\n  users:\n    - name: core\n      password_hash: \"$6$rounds=4096$LP6daiKkb6c$MGeaex639HmrfnglLpYsxPPruEovlzmkqgvbrouiDmv9XH/zEo7rM9ja/y9ur89OveohZ8VUf8NbdgjGRyEOi1\"\n      ssh_authorized_keys: \"\"\n\nstorage:\n  files:\n    - path: /etc/dnsmasq.conf\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n${dnsmasq_conf}\n\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: {{.hostname}}\n\n    - path: /etc/check-asset-status.sh\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          if [ ! -e /opt/cluster-config/assets.ready.processed ]\n          then\n            while [ ! -e /opt/cluster-config/assets.ready ]\n            do\n              sleep 1\n            done\n          else\n            touch /opt/cluster-config/assets.ready\n          fi\n\n    # - path: /root/.ssh/known_hosts\n    #   filesystem: root\n    #   mode: 0644\n    #   contents:\n    #     inline: \"\"\n\n    # - path: /root/.ssh/id_rsa\n    #   filesystem: root\n    #   mode: 0600\n    #   contents:\n    #     remote:\n    #       url: http://{|network.bootstrapper.address.internal|}:8080/assets/keys/bootstrapper\n\n    # - path: /root/.ssh/id_rsa.pub\n    #   filesystem: root\n    #   mode: 0600\n    #   contents:\n    #     remote:\n    #       url: http://{|network.bootstrapper.address.internal|}:8080/assets/keys/bootstrapper.pub\n\nnetworkd:\n  units:\n    - name: gateway.network\n      contents: |\n        [Match]\n        Name={{.interface_internal}}\n\n        [Network]\n        Address={{.address_internal}}/${subnet_short}\n        Address=${gateway_address}/${subnet_short}\n        DNS={{.address_internal}}\n        IPForward=ipv4\n        IPMasquerade=yes\n\nsystemd:\n  units:\n    - name: assets.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for assets to be pushed (assets.path)\n\n        [Service]\n        Type=oneshot\n        ExecStartPre=/usr/bin/bash /etc/check-asset-status.sh\n        ExecStart=/usr/bin/mv /opt/cluster-config/assets.ready /opt/cluster-config/assets.ready.processed\n        RemainAfterExit=true\n\n        [Install]\n        WantedBy=multi-user.target\n\n    - name: matchbox.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=CoreOS matchbox Server\n        After=docker.service assets.service\n        Requires=docker.service assets.service\n\n        [Service]\n        ExecStartPre=-/usr/bin/docker kill matchbox\n        ExecStartPre=-/usr/bin/docker rm matchbox\n        ExecStartPre=/usr/bin/docker pull quay.io/coreos/matchbox\n        ExecStart=/usr/bin/docker run --name=matchbox --net=host \\\n          -v /opt/cluster-config/matchbox:/var/lib/matchbox:Z \\\n          -v /opt/cluster-config/matchbox/etc/tls:/etc/matchbox:Z,ro \\\n          quay.io/coreos/matchbox \\\n            -address=${gateway_address}:8080 \\\n            -rpc-address=${gateway_address}:8081 \\\n            -log-level=debug \\\n            -assets-path=/var/lib/matchbox/assets\n        ExecStop=/usr/bin/docker stop matchbox\n        Restart=always\n\n        [Install]\n        WantedBy=multi-user.target\n\n    - name: dnsmasq.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Run dnsmasq, providing dhcp, dns and network book\n        After=docker.service assets.service\n        Requires=docker.service assets.service\n\n        [Service]\n        ExecStartPre=-/usr/bin/docker kill dnsmasq\n        ExecStartPre=-/usr/bin/docker rm dnsmasq\n        ExecStartPre=/usr/bin/docker pull quay.io/coreos/dnsmasq\n        ExecStart=/usr/bin/docker run \\\n          --name=dnsmasq --cap-add=NET_ADMIN --net=host \\\n          -v /etc/dnsmasq.conf:/etc/dnsmasq.conf quay.io/coreos/dnsmasq -d -q \\\n            --interface={{.interface_internal}} \\\n            --dhcp-option=3,${gateway_address} \\\n            --dhcp-range={{.interface_internal}},${dhcp_start},${dhcp_end},12h \\\n            --enable-tftp --tftp-root=/var/lib/tftpboot \\\n            --dhcp-userclass=set:ipxe,iPXE \\\n            --dhcp-boot=tag:#ipxe,undionly.kpxe \\\n            --dhcp-boot=tag:ipxe,http://${gateway_address}:8080/boot.ipxe \\\n            --log-queries \\\n            --log-dhcp\n        ExecStop=/usr/bin/docker stop dnsmasq\n        Restart=always\n\n        [Install]\n        WantedBy=multi-user.target\n",
                            "vars.%": "7",
                            "vars.dhcp_end": "10.10.100.100",
                            "vars.dhcp_start": "10.10.100.50",
                            "vars.dnsmasq_conf": "          address=/gateway.steve/10.10.0.1\n\n          address=/steve/10.10.1.2\n\n          address=/n1.steve/10.10.1.1\n          address=/n2.steve/10.10.1.2\n          address=/n3.steve/10.10.1.3\n          address=/n4.steve/10.10.1.4\n          address=/n5.steve/10.10.1.5\n          address=/n6.steve/10.10.1.6\n          address=/n7.steve/10.10.1.7\n          address=/n8.steve/10.10.1.8\n          address=/n9.steve/10.10.1.9\n          address=/n10.steve/10.10.1.10\n          address=/n11.steve/10.10.1.11\n          address=/n12.steve/10.10.1.12\n          address=/n13.steve/10.10.1.13\n\n          address=/vm1.steve/10.10.10.1\n          address=/vm2.steve/10.10.10.2\n          address=/vm3.steve/10.10.10.3\n          address=/vm4.steve/10.10.10.4\n          address=/vm5.steve/10.10.10.5\n          address=/vm6.steve/10.10.10.6\n          address=/vm7.steve/10.10.10.7\n          address=/vm8.steve/10.10.10.8\n          address=/vm9.steve/10.10.10.9\n          address=/vm10.steve/10.10.10.10\n\n          dhcp-host=00:22:19:8E:26:AC,10.10.1.1\n          dhcp-host=00:1E:4F:28:30:12,10.10.1.2\n          dhcp-host=00:22:19:AB:7E:78,10.10.1.3\n          dhcp-host=00:22:19:8E:15:77,10.10.1.4\n          dhcp-host=00:1E:C9:D0:AA:9E,10.10.1.5\n          dhcp-host=00:22:19:8E:26:B6,10.10.1.6\n          dhcp-host=00:22:19:8E:25:A1,10.10.1.7\n          dhcp-host=00:1E:C9:D0:9E:E4,10.10.1.8\n          dhcp-host=00:1E:C9:D0:AA:BC,10.10.1.9\n          dhcp-host=00:1A:A0:15:E3:76,10.10.1.10\n          dhcp-host=00:1D:09:05:9A:C0,10.10.1.11\n          dhcp-host=00:1A:A0:26:DA:B6,10.10.1.12\n          dhcp-host=00:1D:09:05:98:DC,10.10.1.13\n\n          dhcp-host=00:0C:29:90:A9:F3,10.10.10.1\n          dhcp-host=00:50:56:30:35:90,10.10.10.2\n          dhcp-host=00:50:56:30:35:91,10.10.10.3\n",
                            "vars.gateway_address": "10.10.0.1",
                            "vars.network_domain": "steve",
                            "vars.subnet_long": "255.255.0.0",
                            "vars.subnet_short": "16"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "matchbox_group.install-reboot-n1": {
                    "type": "matchbox_group",
                    "depends_on": [],
                    "primary": {
                        "id": "install-reboot-n1",
                        "attributes": {
                            "id": "install-reboot-n1",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "",
                            "name": "install-reboot-n1",
                            "profile": "steve-cached-container-linux-install-n2",
                            "selector.%": "1",
                            "selector.mac": "00:22:19:8E:26:AC"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.install-reboot-vm1": {
                    "type": "matchbox_group",
                    "depends_on": [],
                    "primary": {
                        "id": "install-reboot-vm1",
                        "attributes": {
                            "id": "install-reboot-vm1",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "",
                            "name": "install-reboot-vm1",
                            "profile": "steve-cached-container-linux-install-vm2",
                            "selector.%": "1",
                            "selector.mac": "08:00:27:FE:45:EF"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.n1": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.gateway"
                    ],
                    "primary": {
                        "id": "n1",
                        "attributes": {
                            "id": "n1",
                            "metadata.%": "5",
                            "metadata.address_internal": "10.10.1.1",
                            "metadata.hostname": "n1",
                            "metadata.interface_external": "eno1",
                            "metadata.interface_internal": "eno2",
                            "metadata.ssh_authorized_key": "",
                            "name": "n1",
                            "profile": "gateway",
                            "selector.%": "2",
                            "selector.mac": "00:22:19:8E:26:AC",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.vm1": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.gateway"
                    ],
                    "primary": {
                        "id": "vm1",
                        "attributes": {
                            "id": "vm1",
                            "metadata.%": "5",
                            "metadata.address_internal": "10.10.10.1",
                            "metadata.hostname": "vm1",
                            "metadata.interface_external": "enp0s8",
                            "metadata.interface_internal": "enp0s3",
                            "metadata.ssh_authorized_key": "",
                            "name": "vm1",
                            "profile": "gateway",
                            "selector.%": "2",
                            "selector.mac": "08:00:27:FE:45:EF",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.vm2": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.gateway"
                    ],
                    "primary": {
                        "id": "vm2",
                        "attributes": {
                            "id": "vm2",
                            "metadata.%": "5",
                            "metadata.address_internal": "10.10.10.1",
                            "metadata.hostname": "vm1",
                            "metadata.interface_external": "enp0s8",
                            "metadata.interface_internal": "enp0s3",
                            "metadata.ssh_authorized_key": "",
                            "name": "vm2",
                            "profile": "gateway",
                            "selector.%": "2",
                            "selector.mac": "08:00:27:3A:40:26",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.gateway": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cl_gateway"
                    ],
                    "primary": {
                        "id": "gateway",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "coreos.config.url=http://http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.1": "coreos.first_boot=yes",
                            "args.2": "console=tty0",
                            "args.3": "console=ttyS0",
                            "args.4": "coreos.autologin",
                            "container_linux_config": "# storage:\n#   disks:\n#   - device: /dev/sda\n#     wipe_table: true\n#     partitions:\n#     - label: ROOT\n#   filesystems:\n#   - mount:\n#       device: /dev/disk/by-partlabel/ROOT\n#       format: ext4\n#       create:\n#         force: true\n#         options: [-L, ROOT]\n\npasswd:\n  users:\n    - name: core\n      password_hash: \"$6$rounds=4096$LP6daiKkb6c$MGeaex639HmrfnglLpYsxPPruEovlzmkqgvbrouiDmv9XH/zEo7rM9ja/y9ur89OveohZ8VUf8NbdgjGRyEOi1\"\n      ssh_authorized_keys: \"\"\n\nstorage:\n  files:\n    - path: /etc/dnsmasq.conf\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          address=/gateway.steve/10.10.0.1\n\n          address=/steve/10.10.1.2\n\n          address=/n1.steve/10.10.1.1\n          address=/n2.steve/10.10.1.2\n          address=/n3.steve/10.10.1.3\n          address=/n4.steve/10.10.1.4\n          address=/n5.steve/10.10.1.5\n          address=/n6.steve/10.10.1.6\n          address=/n7.steve/10.10.1.7\n          address=/n8.steve/10.10.1.8\n          address=/n9.steve/10.10.1.9\n          address=/n10.steve/10.10.1.10\n          address=/n11.steve/10.10.1.11\n          address=/n12.steve/10.10.1.12\n          address=/n13.steve/10.10.1.13\n\n          address=/vm1.steve/10.10.10.1\n          address=/vm2.steve/10.10.10.2\n          address=/vm3.steve/10.10.10.3\n          address=/vm4.steve/10.10.10.4\n          address=/vm5.steve/10.10.10.5\n          address=/vm6.steve/10.10.10.6\n          address=/vm7.steve/10.10.10.7\n          address=/vm8.steve/10.10.10.8\n          address=/vm9.steve/10.10.10.9\n          address=/vm10.steve/10.10.10.10\n\n          dhcp-host=00:22:19:8E:26:AC,10.10.1.1\n          dhcp-host=00:1E:4F:28:30:12,10.10.1.2\n          dhcp-host=00:22:19:AB:7E:78,10.10.1.3\n          dhcp-host=00:22:19:8E:15:77,10.10.1.4\n          dhcp-host=00:1E:C9:D0:AA:9E,10.10.1.5\n          dhcp-host=00:22:19:8E:26:B6,10.10.1.6\n          dhcp-host=00:22:19:8E:25:A1,10.10.1.7\n          dhcp-host=00:1E:C9:D0:9E:E4,10.10.1.8\n          dhcp-host=00:1E:C9:D0:AA:BC,10.10.1.9\n          dhcp-host=00:1A:A0:15:E3:76,10.10.1.10\n          dhcp-host=00:1D:09:05:9A:C0,10.10.1.11\n          dhcp-host=00:1A:A0:26:DA:B6,10.10.1.12\n          dhcp-host=00:1D:09:05:98:DC,10.10.1.13\n\n          dhcp-host=00:0C:29:90:A9:F3,10.10.10.1\n          dhcp-host=00:50:56:30:35:90,10.10.10.2\n          dhcp-host=00:50:56:30:35:91,10.10.10.3\n\n\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: {{.hostname}}\n\n    - path: /etc/check-asset-status.sh\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          if [ ! -e /opt/cluster-config/assets.ready.processed ]\n          then\n            while [ ! -e /opt/cluster-config/assets.ready ]\n            do\n              sleep 1\n            done\n          else\n            touch /opt/cluster-config/assets.ready\n          fi\n\n    # - path: /root/.ssh/known_hosts\n    #   filesystem: root\n    #   mode: 0644\n    #   contents:\n    #     inline: \"\"\n\n    # - path: /root/.ssh/id_rsa\n    #   filesystem: root\n    #   mode: 0600\n    #   contents:\n    #     remote:\n    #       url: http://{|network.bootstrapper.address.internal|}:8080/assets/keys/bootstrapper\n\n    # - path: /root/.ssh/id_rsa.pub\n    #   filesystem: root\n    #   mode: 0600\n    #   contents:\n    #     remote:\n    #       url: http://{|network.bootstrapper.address.internal|}:8080/assets/keys/bootstrapper.pub\n\nnetworkd:\n  units:\n    - name: gateway.network\n      contents: |\n        [Match]\n        Name={{.interface_internal}}\n\n        [Network]\n        Address={{.address_internal}}/16\n        Address=10.10.0.1/16\n        DNS={{.address_internal}}\n        IPForward=ipv4\n        IPMasquerade=yes\n\nsystemd:\n  units:\n    - name: assets.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for assets to be pushed (assets.path)\n\n        [Service]\n        Type=oneshot\n        ExecStartPre=/usr/bin/bash /etc/check-asset-status.sh\n        ExecStart=/usr/bin/mv /opt/cluster-config/assets.ready /opt/cluster-config/assets.ready.processed\n        RemainAfterExit=true\n\n        [Install]\n        WantedBy=multi-user.target\n\n    - name: matchbox.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=CoreOS matchbox Server\n        After=docker.service assets.service\n        Requires=docker.service assets.service\n\n        [Service]\n        ExecStartPre=-/usr/bin/docker kill matchbox\n        ExecStartPre=-/usr/bin/docker rm matchbox\n        ExecStartPre=/usr/bin/docker pull quay.io/coreos/matchbox\n        ExecStart=/usr/bin/docker run --name=matchbox --net=host \\\n          -v /opt/cluster-config/matchbox:/var/lib/matchbox:Z \\\n          -v /opt/cluster-config/matchbox/etc/tls:/etc/matchbox:Z,ro \\\n          quay.io/coreos/matchbox \\\n            -address=10.10.0.1:8080 \\\n            -rpc-address=10.10.0.1:8081 \\\n            -log-level=debug \\\n            -assets-path=/var/lib/matchbox/assets\n        ExecStop=/usr/bin/docker stop matchbox\n        Restart=always\n\n        [Install]\n        WantedBy=multi-user.target\n\n    - name: dnsmasq.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Run dnsmasq, providing dhcp, dns and network book\n        After=docker.service assets.service\n        Requires=docker.service assets.service\n\n        [Service]\n        ExecStartPre=-/usr/bin/docker kill dnsmasq\n        ExecStartPre=-/usr/bin/docker rm dnsmasq\n        ExecStartPre=/usr/bin/docker pull quay.io/coreos/dnsmasq\n        ExecStart=/usr/bin/docker run \\\n          --name=dnsmasq --cap-add=NET_ADMIN --net=host \\\n          -v /etc/dnsmasq.conf:/etc/dnsmasq.conf quay.io/coreos/dnsmasq -d -q \\\n            --interface={{.interface_internal}} \\\n            --dhcp-option=3,10.10.0.1 \\\n            --dhcp-range={{.interface_internal}},10.10.100.50,10.10.100.100,12h \\\n            --enable-tftp --tftp-root=/var/lib/tftpboot \\\n            --dhcp-userclass=set:ipxe,iPXE \\\n            --dhcp-boot=tag:#ipxe,undionly.kpxe \\\n            --dhcp-boot=tag:ipxe,http://10.10.0.1:8080/boot.ipxe \\\n            --log-queries \\\n            --log-dhcp\n        ExecStop=/usr/bin/docker stop dnsmasq\n        Restart=always\n\n        [Install]\n        WantedBy=multi-user.target\n",
                            "id": "gateway",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "gateway"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "kubernetes"
            ],
            "outputs": {
                "kubeconfig": {
                    "sensitive": false,
                    "type": "string",
                    "value": "apiVersion: v1\nkind: Config\nclusters:\n- name: local\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRQXhKSU1wcFRaaUJuY0hqRG1hbnZ1REFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURZeApOalV4TkRCYUZ3MHhPVEEwTURZeE5qVXhOREJhTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXV6NnoKV0hnMjhBVWViYkp1K2FQOC9WaXZLNUoyMXk5TkdRQnJjNko3VmtxZjZ1QTE3S3ZqMzFYM3ppbDdrRG9EOTQ3cwo3akplUXQybjc1dERvVGpTUFFpQkIvNmxRQVVtRG1HM0RpOStLc0lSQ0pHa3JzdHFYZU0vKzRScXNQSTZZRUgwCkI1SGorUzJFcVk5VGtQcXJNeEhhS3RKMG5Ca3NPMnU0UkZJRElVTkhjUnY5d0NMemJBNTlhb2p6dGpFR0g1QUQKdVFaV3lMdnpNZk9WZ1JlSmNYNy9IUWt6TldLMDlQRGpjazZ0WC9RMC82VW0ySDNIU1JKRDl1TVNwL2I0RUE1SgpoQlhDZVh3MmVoeE9FaFJDMXJmelMxNk9uWTdaeDBHdk5uUU1XMlRSZTVqS2FjYmlnbGZlSE42Qnh0UmM5ZWhPCjRTazg3dFJXdWZvdFpWYjYrUUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVbXZRQ201bmZEdm40aWkzSTJwNFJXUWRqSDJ3d0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQk5mNjNpNnNGVnJ3Y0tNU3k5bXpBNXllS2ZZMDZGZXFjUmp1U2dFdUx3VDJYaDZ5aGV5Cllvd3BWQ0tncXNSRWVjUjFvbWd6bkRqbnk0MUdFd2p4cVl1REdtWWl0d1RTOWg1OW9ZRldoUmw4OXk3aERDVnAKOTVjL05kUHVyM25pMUtqNzVjY2V5cFJla2lhUjJYNGhCY2xDcERWMm8wc29sM3QzMlFWSmtBQWhhVHFuOG9FdwpQc3V6RzFmZ1Z6UkRTTTgvRmFBNjdKSk9BRnEzRVFQUk1HZVMzd3IyRFpPVUpFTWMxb01PbHRFc3d1djVuNmFxCjZicGNpYkdCVmJBRDE1b04wa2xuQUZuU3F6MzIzOUFtTHJPbjNBc00zUUgxOU9pemM2K3hObld2TTRrN1FoUmcKVmU5TW9LcjY2RXVtWHNaL0ZFNzRmSU4vbG53S0dnV3JoQU09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: kubelet\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQU5EMVRBVDhLc2xlYjV2YjZhTE0yeFF3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBMgpNVFkxTVRReFdoY05NVGt3TkRBMk1UWTFNVFF4V2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFKck5xWFVZMVBFQXVKM1pkSHRyRGsvRFdIQ3dJelB0UHdMNjFubHJaL1hFOVdSUGIvbmF2UVJLVXBkdQpSaFhjSDNkeHYwbEhyOFFzZHhBdnRkMkEvczlNY0NaQ0dwNisvUVVzVStvbndkWGJaa3FocmxYWXBNSjFZUkczCkN1OHNrazV2OGNrUkcrZHE5K1JBbUdIMWppT25yL045RGpqTVJ2YWZzM2lKaVlTV01abnVNK0dGVC9LSWNjNm0KZDZYYUlrVFo2eHBvcFZnRzROOUtuNHVOL2pJMHkrTjFCbXYydnNteFc5RE1jcHZqcjVLR2VIQmNoeFdLQURhYgplL2hERkw1b0NhNU5uU0pxRDd5ZFEwQ3RBRkxFN2h5Y09HeGxqMjNiQ0w1ZDRiUnFJZFdYbG5aU1F0bWdtV1E3CkovMTZVdzU0NWJGVjNKNUR0RjJhamdsR0VQa0NBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZKcjBBcHVaM3c3NStJb3R5TnFlRVZrSFl4OXNNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJBClpXcVpOUEZjTUEzYUEvQVVOdjBKN2hveTZVWjB5bDArVkVuemxkUmNGRXRRUTloMnl1aDUvY042eWZJMnZKV0sKK3hRNitESzB2WWZ4d1BWNU5MOFZuTExpbVkvVWVyc3hnWFNZcS9qVlFIajRkU3c5V09KWis3dmh4bncremZqeQpCWmQ0WHl6bXR6MEoyODUwQjVrZW14QytjUFcwa3NnR0p1dWgyMlFobkU1ZENuTjhNalN0QUdaUUVUT1p4REZvCi9jV0t5ZER2LzhqcnVCbWZXTG5yYmNDOVNQZVpHZVRBSE1VMmlGVXIrQnVIamExc0RMZVB2aTNZR3ZCSDVrNnkKQWNCQWxkaFNqRDRnVm5QcU9MbzhzVUU0dGErZTZpQi96c3hyNXl1MUlIQjRpcVdsR0ZZZFhudS9PZm5qZ0NLcAoyc3NrNndhd25hTEt3QWxVZ3EyMgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBbXMycGRSalU4UUM0bmRsMGUyc09UOE5ZY0xBak0rMC9BdnJXZVd0bjljVDFaRTl2CitkcTlCRXBTbDI1R0Zkd2ZkM0cvU1VldnhDeDNFQysxM1lEK3oweHdKa0lhbnI3OUJTeFQ2aWZCMWR0bVNxR3UKVmRpa3duVmhFYmNLN3l5U1RtL3h5UkViNTJyMzVFQ1lZZldPSTZldjgzME9PTXhHOXAremVJbUpoSll4bWU0ego0WVZQOG9oeHpxWjNwZG9pUk5uckdtaWxXQWJnMzBxZmk0MytNalRMNDNVR2EvYSt5YkZiME14eW0rT3Zrb1o0CmNGeUhGWW9BTnB0NytFTVV2bWdKcmsyZEltb1B2SjFEUUswQVVzVHVISnc0YkdXUGJkc0l2bDNodEdvaDFaZVcKZGxKQzJhQ1paRHNuL1hwVERuamxzVlhjbmtPMFhacU9DVVlRK1FJREFRQUJBb0lCQUFiNjNQZ3RyWFJNYndhWApCbnlHSURnU2U4dGc5Y1ZpbmlPNVFiQnAybDhuaVZVRGkrMzlJZWF1bnppNnZTaEJLNTRNSCs3aTc1YnQxbFNCCmdqYkJtVHVwbTZqdDlCdFNTMEJQZGwwcGU4RHp5cEgwNWxKeW1VTTNYYkFaeThGckJoSEpWR0tYaGVXU1dpa04KakpGbUxBbUpoeEo0Z2dxbmswK05kZDhxZkd2Zzg5bU9mQ04vSGpacEdUOEhvVVdhSFlEL05XdGtqL3VFdlhCaQorMy8wdElTNnI2RjdGZTY1T2RiZU1NNFJrcFIySXdNR1dVcCtoWU4wR1dIR1FmRWNTa1hxdy9Cem5LOXJMdXpCCjF0K1RNR3ArZEx2NnBUMU5ON3VuOXZBWmRxNnk3ZStnaVFvWE9UaG5xUmpxNElsNFRsejlTenBBTnlwL2VFZVIKZFR3OE4wMENnWUVBeE9tNzZSU3M3TzZOdjVOL05KNksvNTBOa05UVk9oVk1sd0RCb0ErNmozbFkyWmVSMUY4UQoyeVlhRVdOZTNVQW01d0hHRnQyQkdDL2g5Zm9vanJnNUpUc0d3OVYzNEIzYStIU3JQRDAvVEJLTzlVMkJrYXExCjlaVFNlbnRIbERhTHM4K1M4ZVMzQUZ3RUJhVkJEakYwTFVSOVVPV215RnJOZExwUUFJSGpxOHNDZ1lFQXlVRXcKMkloNFArSXFYNzdZa3JYdFo0VFMwR01JVnozUVRBWXRMVkZicWpPRGRwSC9mUmRIdkV5eUZxOW8yVnkzQmxJVgpyK2RBOTFpUXFkTWllQzFraFRKZi9GMFRVb3NjY2luOXF3OWc0aHRuS05vL01RYnozVmgvR3NaalFHVmlxY0IvCmJqSWRSTVo2NjRxbkoxNUdHTnJuNVpPdVEycW15RUVvc2ttcHBjc0NnWUIxU0NtdHg2eS9hYzV2Zm5CVGJPS3AKSUdmR0RaMzZmRmtqejBXRUNobzUvaktYVnhsNmZpelIrajJvZ2FFczhscTVXR3NkajB5bWxVNW1iVnJldG9jQwp6OGRWdUwwdmRWaklodVMrZWxSTEFQcTR6RE1TQ2JWYTBnc1MvSDVEbnNGU2xaMldDWDJkN3pCT0ZJRk03Tk9mCmFwMmhJMGRWS2hBWktDY2lSanJPUlFLQmdRQ254RmhicVNmVTJVeEpsR1lscHRMSXdNaWNQbkh0aC9IajdpSXEKN085azZweGtjMEJ2bnNDR0Q4bEZiK1FQam1Ka09ua3BzYlZPZTkzY004MUFNVmJpVWlRQjAvVVBramVjVTdUSwpySDh1L1hqNWJUWFFRT041V1JSYjFaVlhVU3oySlNvVlNtRnJ1NmtzUU9FbXlFZlc0R1QvMUNRb3Z2ZFphRGZzCnA4dHNFUUtCZ0FFTmh6dDdpNVlCalk3RjdJbUZCZkZ1dFQzMnJYa05KVmhzQWZWRW5KY2M2SEZOcVBXSUVNWjEKWW1ScG5oM0tuWW9MUzFVUHVOZ0VUVWRHZjZlODkzVGtjZlFHaTZwbnRta09jMDVPRGN0dkwyYTBua1cxSnp0ZwpoNVhGRDd6aWp2UzRtVUJ6bDNTVzMwNUVZMGxHL0YyeXZtcFg2WUFuYkMxSGhmWTVlbk9VCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\ncontexts:\n- context:\n    cluster: local\n    user: kubelet\n"
                }
            },
            "resources": {
                "data.template_file.cached-container-linux-install-configs.0": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.1": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.10": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.11": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.2": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.3": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.4": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.5": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.6": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.7": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.8": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.cached-container-linux-install-configs.9": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                        "attributes": {
                            "id": "868f7252398cabf3058e2c0d3bc6a471d0fd7f1f0cfbe4691ecd46264f1629f0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "-b http://10.10.0.1:8080/assets/coreos",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.0": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.1": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.10": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.11": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.2": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.3": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.4": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.5": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.6": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.7": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.8": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.container-linux-install-configs.9": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                        "attributes": {
                            "id": "dea3d5031e0170a230558601f70c7e89c72fa3e029ec753f16c9e342e7bb6c84",
                            "rendered": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "template": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"${ignition_endpoint}?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d ${install_disk} \\\n            -C ${container_linux_channel} \\\n            -V ${container_linux_version} \\\n            -o \"${container_linux_oem}\" \\\n            ${baseurl_flag} \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "vars.%": "6",
                            "vars.baseurl_flag": "",
                            "vars.container_linux_channel": "stable",
                            "vars.container_linux_oem": "",
                            "vars.container_linux_version": "1688.4.0",
                            "vars.ignition_endpoint": "http://10.10.0.1:8080/ignition",
                            "vars.install_disk": "/dev/sda"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.controller-configs": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "5098e15d368b14da333d79b520d24d07f26cb4ebd63c47d4098fa6d4439a0b75",
                        "attributes": {
                            "id": "5098e15d368b14da333d79b520d24d07f26cb4ebd63c47d4098fa6d4439a0b75",
                            "rendered": "---\nsystemd:\n  units:\n    - name: etcd-member.service\n      enable: true\n      dropins:\n        - name: 40-etcd-cluster.conf\n          contents: |\n            [Service]\n            Environment=\"ETCD_IMAGE_TAG=v3.3.2\"\n            Environment=\"ETCD_NAME=n2\"\n            Environment=\"ETCD_ADVERTISE_CLIENT_URLS=https://n2.steve:2379\"\n            Environment=\"ETCD_INITIAL_ADVERTISE_PEER_URLS=https://n2.steve:2380\"\n            Environment=\"ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379\"\n            Environment=\"ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380\"\n            Environment=\"ETCD_INITIAL_CLUSTER=n2=https://n2.steve:2380\"\n            Environment=\"ETCD_STRICT_RECONFIG_CHECK=true\"\n            Environment=\"ETCD_SSL_DIR=/etc/ssl/etcd\"\n            Environment=\"ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/server-ca.crt\"\n            Environment=\"ETCD_CERT_FILE=/etc/ssl/certs/etcd/server.crt\"\n            Environment=\"ETCD_KEY_FILE=/etc/ssl/certs/etcd/server.key\"\n            Environment=\"ETCD_CLIENT_CERT_AUTH=true\"\n            Environment=\"ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/peer-ca.crt\"\n            Environment=\"ETCD_PEER_CERT_FILE=/etc/ssl/certs/etcd/peer.crt\"\n            Environment=\"ETCD_PEER_KEY_FILE=/etc/ssl/certs/etcd/peer.key\"\n            Environment=\"ETCD_PEER_CLIENT_CERT_AUTH=true\"\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n        RequiredBy=etcd-member.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n2.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/master \\\n          --node-labels=node-role.kubernetes.io/controller=\"true\" \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --register-with-taints=node-role.kubernetes.io/master=:NoSchedule \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=10\n        [Install]\n        WantedBy=multi-user.target\n    - name: bootkube.service\n      contents: |\n        [Unit]\n        Description=Bootstrap a Kubernetes control plane with a temp api-server\n        ConditionPathExists=!/opt/bootkube/init_bootkube.done\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        WorkingDirectory=/opt/bootkube\n        ExecStart=/opt/bootkube/bootkube-start\n        ExecStartPost=/bin/touch /opt/bootkube/init_bootkube.done\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n2.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\n    - path: /opt/bootkube/bootkube-start\n      filesystem: root\n      mode: 0544\n      user:\n        id: 500\n      group:\n        id: 500\n      contents:\n        inline: |\n          #!/bin/bash\n          # Wrapper for bootkube start\n          set -e\n          # Move experimental manifests\n          [ -n \"$(ls /opt/bootkube/assets/manifests-*/* 2\u003e/dev/null)\" ] \u0026\u0026 mv /opt/bootkube/assets/manifests-*/* /opt/bootkube/assets/manifests \u0026\u0026 rm -rf /opt/bootkube/assets/manifests-*\n          BOOTKUBE_ACI=\"${BOOTKUBE_ACI:-quay.io/coreos/bootkube}\"\n          BOOTKUBE_VERSION=\"${BOOTKUBE_VERSION:-v0.11.0}\"\n          BOOTKUBE_ASSETS=\"${BOOTKUBE_ASSETS:-/opt/bootkube/assets}\"\n          exec /usr/bin/rkt run \\\n            --trust-keys-from-https \\\n            --volume assets,kind=host,source=$BOOTKUBE_ASSETS \\\n            --mount volume=assets,target=/assets \\\n            --volume bootstrap,kind=host,source=/etc/kubernetes \\\n            --mount volume=bootstrap,target=/etc/kubernetes \\\n            $RKT_OPTS \\\n            ${BOOTKUBE_ACI}:${BOOTKUBE_VERSION} \\\n            --net=host \\\n            --dns=host \\\n            --exec=/bootkube -- start --asset-dir=/assets \"$@\"\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - \n",
                            "template": "---\nsystemd:\n  units:\n    - name: etcd-member.service\n      enable: true\n      dropins:\n        - name: 40-etcd-cluster.conf\n          contents: |\n            [Service]\n            Environment=\"ETCD_IMAGE_TAG=v3.3.2\"\n            Environment=\"ETCD_NAME=${etcd_name}\"\n            Environment=\"ETCD_ADVERTISE_CLIENT_URLS=https://${domain_name}:2379\"\n            Environment=\"ETCD_INITIAL_ADVERTISE_PEER_URLS=https://${domain_name}:2380\"\n            Environment=\"ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379\"\n            Environment=\"ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380\"\n            Environment=\"ETCD_INITIAL_CLUSTER=${etcd_initial_cluster}\"\n            Environment=\"ETCD_STRICT_RECONFIG_CHECK=true\"\n            Environment=\"ETCD_SSL_DIR=/etc/ssl/etcd\"\n            Environment=\"ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/server-ca.crt\"\n            Environment=\"ETCD_CERT_FILE=/etc/ssl/certs/etcd/server.crt\"\n            Environment=\"ETCD_KEY_FILE=/etc/ssl/certs/etcd/server.key\"\n            Environment=\"ETCD_CLIENT_CERT_AUTH=true\"\n            Environment=\"ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/peer-ca.crt\"\n            Environment=\"ETCD_PEER_CERT_FILE=/etc/ssl/certs/etcd/peer.crt\"\n            Environment=\"ETCD_PEER_KEY_FILE=/etc/ssl/certs/etcd/peer.key\"\n            Environment=\"ETCD_PEER_CLIENT_CERT_AUTH=true\"\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n        RequiredBy=etcd-member.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/master \\\n          --node-labels=node-role.kubernetes.io/controller=\"true\" \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --register-with-taints=node-role.kubernetes.io/master=:NoSchedule \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=10\n        [Install]\n        WantedBy=multi-user.target\n    - name: bootkube.service\n      contents: |\n        [Unit]\n        Description=Bootstrap a Kubernetes control plane with a temp api-server\n        ConditionPathExists=!/opt/bootkube/init_bootkube.done\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        WorkingDirectory=/opt/bootkube\n        ExecStart=/opt/bootkube/bootkube-start\n        ExecStartPost=/bin/touch /opt/bootkube/init_bootkube.done\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\n    - path: /opt/bootkube/bootkube-start\n      filesystem: root\n      mode: 0544\n      user:\n        id: 500\n      group:\n        id: 500\n      contents:\n        inline: |\n          #!/bin/bash\n          # Wrapper for bootkube start\n          set -e\n          # Move experimental manifests\n          [ -n \"$(ls /opt/bootkube/assets/manifests-*/* 2\u003e/dev/null)\" ] \u0026\u0026 mv /opt/bootkube/assets/manifests-*/* /opt/bootkube/assets/manifests \u0026\u0026 rm -rf /opt/bootkube/assets/manifests-*\n          BOOTKUBE_ACI=\"$${BOOTKUBE_ACI:-quay.io/coreos/bootkube}\"\n          BOOTKUBE_VERSION=\"$${BOOTKUBE_VERSION:-v0.11.0}\"\n          BOOTKUBE_ASSETS=\"$${BOOTKUBE_ASSETS:-/opt/bootkube/assets}\"\n          exec /usr/bin/rkt run \\\n            --trust-keys-from-https \\\n            --volume assets,kind=host,source=$BOOTKUBE_ASSETS \\\n            --mount volume=assets,target=/assets \\\n            --volume bootstrap,kind=host,source=/etc/kubernetes \\\n            --mount volume=bootstrap,target=/etc/kubernetes \\\n            $$RKT_OPTS \\\n            $${BOOTKUBE_ACI}:$${BOOTKUBE_VERSION} \\\n            --net=host \\\n            --dns=host \\\n            --exec=/bootkube -- start --asset-dir=/assets \"$@\"\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n",
                            "vars.%": "7",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n2.steve",
                            "vars.etcd_initial_cluster": "n2=https://n2.steve:2380",
                            "vars.etcd_name": "n2",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.0": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "0d57040178bdec0254454cdccb6157e58d5e11547dabbcbae6d5ab5bf6b2edee",
                        "attributes": {
                            "id": "0d57040178bdec0254454cdccb6157e58d5e11547dabbcbae6d5ab5bf6b2edee",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n3.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n3.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - \n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n3.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.1": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "debe20fe150874d352d4f4cf9685719ec6dcb6f64d4a0ade4db6308d22516739",
                        "attributes": {
                            "id": "debe20fe150874d352d4f4cf9685719ec6dcb6f64d4a0ade4db6308d22516739",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n4.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n4.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - \n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n4.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.10": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "38821cc862e001891b1ae0fdf33d60251ff027a7c6ba34bd69bdaf39c0aed5c3",
                        "attributes": {
                            "id": "38821cc862e001891b1ae0fdf33d60251ff027a7c6ba34bd69bdaf39c0aed5c3",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n13.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n13.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - \n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n13.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.2": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "d5309f3a540a02274116badb1f81536f7097deb02691d21ab8c7de24bbdd5579",
                        "attributes": {
                            "id": "d5309f3a540a02274116badb1f81536f7097deb02691d21ab8c7de24bbdd5579",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n5.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n5.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - \n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n5.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.3": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "774a6871e57e6802e55142a6787c8a890a36cdfe6e458e6b111f04530ee0c2d0",
                        "attributes": {
                            "id": "774a6871e57e6802e55142a6787c8a890a36cdfe6e458e6b111f04530ee0c2d0",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n6.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n6.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - \n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n6.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.4": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "c68660c98dcaba8b77aab8b5adb8b6673180c041fcece5737d161148c236e75d",
                        "attributes": {
                            "id": "c68660c98dcaba8b77aab8b5adb8b6673180c041fcece5737d161148c236e75d",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n7.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n7.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - \n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n7.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.5": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "558a6040cb7fabf7b231ec3544b5e0b7eb12323c1082e3c0d618bdb31d4d6551",
                        "attributes": {
                            "id": "558a6040cb7fabf7b231ec3544b5e0b7eb12323c1082e3c0d618bdb31d4d6551",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n8.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n8.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - \n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n8.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.6": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "0923f0a4036c13ad2394a5b9d5b565b25c4fe1730defe486640375b3d734de9f",
                        "attributes": {
                            "id": "0923f0a4036c13ad2394a5b9d5b565b25c4fe1730defe486640375b3d734de9f",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n9.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n9.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - \n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n9.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.7": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "7987d7f11df907769d519bee307c91461380513cdcfdd16b4ed15933b25d0c2f",
                        "attributes": {
                            "id": "7987d7f11df907769d519bee307c91461380513cdcfdd16b4ed15933b25d0c2f",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n10.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n10.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - \n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n10.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.8": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "cc550da460f167eec3d7200ecea47c82800d68aace9ef53e73ad7c2edc3cadb5",
                        "attributes": {
                            "id": "cc550da460f167eec3d7200ecea47c82800d68aace9ef53e73ad7c2edc3cadb5",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n11.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n11.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - \n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n11.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.worker-configs.9": {
                    "type": "template_file",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "1260b3fb6e84bddfa9b80473eb80d754ba0a331d5d337ae4891c910ac677208a",
                        "attributes": {
                            "id": "1260b3fb6e84bddfa9b80473eb80d754ba0a331d5d337ae4891c910ac677208a",
                            "rendered": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n12.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n12.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - \n\n",
                            "template": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=${k8s_dns_service_ip} \\\n          --cluster_domain=${cluster_domain_suffix} \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=${domain_name} \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          ${domain_name}\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  ${networkd_content}\npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - ${ssh_authorized_key}\n\n",
                            "vars.%": "5",
                            "vars.cluster_domain_suffix": "cluster.local",
                            "vars.domain_name": "n12.steve",
                            "vars.k8s_dns_service_ip": "10.3.0.10",
                            "vars.networkd_content": "",
                            "vars.ssh_authorized_key": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "matchbox_group.container-linux-install.0": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n2",
                        "attributes": {
                            "id": "container-linux-install-n2",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "",
                            "name": "container-linux-install-n2",
                            "profile": "steve-cached-container-linux-install-n2",
                            "selector.%": "1",
                            "selector.mac": "00:1E:4F:28:30:12"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.1": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n3",
                        "attributes": {
                            "id": "container-linux-install-n3",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "",
                            "name": "container-linux-install-n3",
                            "profile": "steve-cached-container-linux-install-n3",
                            "selector.%": "1",
                            "selector.mac": "00:22:19:AB:7E:78"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.10": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n12",
                        "attributes": {
                            "id": "container-linux-install-n12",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "",
                            "name": "container-linux-install-n12",
                            "profile": "steve-cached-container-linux-install-n12",
                            "selector.%": "1",
                            "selector.mac": "00:1A:A0:26:DA:B6"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.11": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n13",
                        "attributes": {
                            "id": "container-linux-install-n13",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "",
                            "name": "container-linux-install-n13",
                            "profile": "steve-cached-container-linux-install-n13",
                            "selector.%": "1",
                            "selector.mac": "00:1D:09:05:98:DC"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.2": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n4",
                        "attributes": {
                            "id": "container-linux-install-n4",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "",
                            "name": "container-linux-install-n4",
                            "profile": "steve-cached-container-linux-install-n4",
                            "selector.%": "1",
                            "selector.mac": "00:22:19:8E:15:77"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.3": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n5",
                        "attributes": {
                            "id": "container-linux-install-n5",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "",
                            "name": "container-linux-install-n5",
                            "profile": "steve-cached-container-linux-install-n5",
                            "selector.%": "1",
                            "selector.mac": "00:1E:C9:D0:AA:9E"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.4": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n6",
                        "attributes": {
                            "id": "container-linux-install-n6",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "",
                            "name": "container-linux-install-n6",
                            "profile": "steve-cached-container-linux-install-n6",
                            "selector.%": "1",
                            "selector.mac": "00:22:19:8E:26:B6"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.5": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n7",
                        "attributes": {
                            "id": "container-linux-install-n7",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "",
                            "name": "container-linux-install-n7",
                            "profile": "steve-cached-container-linux-install-n7",
                            "selector.%": "1",
                            "selector.mac": "00:22:19:8E:25:A1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.6": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n8",
                        "attributes": {
                            "id": "container-linux-install-n8",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "",
                            "name": "container-linux-install-n8",
                            "profile": "steve-cached-container-linux-install-n8",
                            "selector.%": "1",
                            "selector.mac": "00:22:19:8E:26:00"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.7": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n9",
                        "attributes": {
                            "id": "container-linux-install-n9",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "",
                            "name": "container-linux-install-n9",
                            "profile": "steve-cached-container-linux-install-n9",
                            "selector.%": "1",
                            "selector.mac": "00:1E:C9:D0:AA:BC"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.8": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n10",
                        "attributes": {
                            "id": "container-linux-install-n10",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "",
                            "name": "container-linux-install-n10",
                            "profile": "steve-cached-container-linux-install-n10",
                            "selector.%": "1",
                            "selector.mac": "00:1A:A0:15:E3:76"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.container-linux-install.9": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.cached-container-linux-install.*",
                        "matchbox_profile.container-linux-install.*"
                    ],
                    "primary": {
                        "id": "container-linux-install-n11",
                        "attributes": {
                            "id": "container-linux-install-n11",
                            "metadata.%": "1",
                            "metadata.ssh_authorized_key": "",
                            "name": "container-linux-install-n11",
                            "profile": "steve-cached-container-linux-install-n11",
                            "selector.%": "1",
                            "selector.mac": "00:1D:09:05:9A:C0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.controller": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.controllers.*"
                    ],
                    "primary": {
                        "id": "steve-n2",
                        "attributes": {
                            "id": "steve-n2",
                            "name": "steve-n2",
                            "profile": "steve-controller-n2",
                            "selector.%": "2",
                            "selector.mac": "00:1E:4F:28:30:12",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.0": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n3",
                        "attributes": {
                            "id": "steve-n3",
                            "name": "steve-n3",
                            "profile": "steve-worker-n3",
                            "selector.%": "2",
                            "selector.mac": "00:22:19:AB:7E:78",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.1": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n4",
                        "attributes": {
                            "id": "steve-n4",
                            "name": "steve-n4",
                            "profile": "steve-worker-n4",
                            "selector.%": "2",
                            "selector.mac": "00:22:19:8E:15:77",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.10": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n13",
                        "attributes": {
                            "id": "steve-n13",
                            "name": "steve-n13",
                            "profile": "steve-worker-n13",
                            "selector.%": "2",
                            "selector.mac": "00:1D:09:05:98:DC",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.2": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n5",
                        "attributes": {
                            "id": "steve-n5",
                            "name": "steve-n5",
                            "profile": "steve-worker-n5",
                            "selector.%": "2",
                            "selector.mac": "00:1E:C9:D0:AA:9E",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.3": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n6",
                        "attributes": {
                            "id": "steve-n6",
                            "name": "steve-n6",
                            "profile": "steve-worker-n6",
                            "selector.%": "2",
                            "selector.mac": "00:22:19:8E:26:B6",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.4": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n7",
                        "attributes": {
                            "id": "steve-n7",
                            "name": "steve-n7",
                            "profile": "steve-worker-n7",
                            "selector.%": "2",
                            "selector.mac": "00:22:19:8E:25:A1",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.5": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n8",
                        "attributes": {
                            "id": "steve-n8",
                            "name": "steve-n8",
                            "profile": "steve-worker-n8",
                            "selector.%": "2",
                            "selector.mac": "00:22:19:8E:26:00",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.6": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n9",
                        "attributes": {
                            "id": "steve-n9",
                            "name": "steve-n9",
                            "profile": "steve-worker-n9",
                            "selector.%": "2",
                            "selector.mac": "00:1E:C9:D0:AA:BC",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.7": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n10",
                        "attributes": {
                            "id": "steve-n10",
                            "name": "steve-n10",
                            "profile": "steve-worker-n10",
                            "selector.%": "2",
                            "selector.mac": "00:1A:A0:15:E3:76",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.8": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n11",
                        "attributes": {
                            "id": "steve-n11",
                            "name": "steve-n11",
                            "profile": "steve-worker-n11",
                            "selector.%": "2",
                            "selector.mac": "00:1D:09:05:9A:C0",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_group.worker.9": {
                    "type": "matchbox_group",
                    "depends_on": [
                        "matchbox_profile.workers.*"
                    ],
                    "primary": {
                        "id": "steve-n12",
                        "attributes": {
                            "id": "steve-n12",
                            "name": "steve-n12",
                            "profile": "steve-worker-n12",
                            "selector.%": "2",
                            "selector.mac": "00:1A:A0:26:DA:B6",
                            "selector.os": "installed"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.0": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n2",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n2",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n2"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.1": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n3",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n3",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n3"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.10": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n12",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n12",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n12"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.11": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n13",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n13",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n13"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.2": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n4",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n4",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n4"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.3": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n5",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n5",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n5"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.4": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n6",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n6",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n6"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.5": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n7",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n7",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n7"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.6": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n8",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n8",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n8"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.7": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n9",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n9",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n9"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.8": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n10",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n10",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n10"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.cached-container-linux-install.9": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.cached-container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-cached-container-linux-install-n11",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n            -b http://10.10.0.1:8080/assets/coreos \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-cached-container-linux-install-n11",
                            "initrd.#": "1",
                            "initrd.0": "/assets/coreos/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "/assets/coreos/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-cached-container-linux-install-n11"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.0": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n2",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n2",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n2"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.1": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n3",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n3",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n3"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.10": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n12",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n12",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n12"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.11": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n13",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n13",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n13"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.2": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n4",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n4",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n4"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.3": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n5",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n5",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n5"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.4": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n6",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n6",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n6"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.5": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n7",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n7",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n7"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.6": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n8",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n8",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n8"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.7": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n9",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n9",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n9"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.8": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n10",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n10",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n10"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.container-linux-install.9": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.container-linux-install-configs.*"
                    ],
                    "primary": {
                        "id": "steve-container-linux-install-n11",
                        "attributes": {
                            "args.#": "5",
                            "args.0": "initrd=coreos_production_pxe_image.cpio.gz",
                            "args.1": "coreos.config.url=http://10.10.0.1:8080/ignition?uuid=${uuid}\u0026mac=${mac:hexhyp}",
                            "args.2": "coreos.first_boot=yes",
                            "args.3": "console=tty0",
                            "args.4": "console=ttyS0",
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: installer.service\n      enable: true\n      contents: |\n        [Unit]\n        Requires=network-online.target\n        After=network-online.target\n        [Service]\n        Type=simple\n        ExecStart=/opt/installer\n        [Install]\n        WantedBy=multi-user.target\nstorage:\n  files:\n    - path: /opt/installer\n      filesystem: root\n      mode: 0500\n      contents:\n        inline: |\n          #!/bin/bash -ex\n          curl --retry 10 \"http://10.10.0.1:8080/ignition?{{.request.raw_query}}\u0026os=installed\" -o ignition.json\n          coreos-install \\\n            -d /dev/sda \\\n            -C stable \\\n            -V 1688.4.0 \\\n            -o \"\" \\\n             \\\n            -i ignition.json\n          udevadm settle\n          systemctl reboot\npasswd:\n  users:\n    # Avoid using standard name \"core\" so terraform apply cannot SSH until post-install.\n    - name: debug\n      create:\n        groups:\n          - sudo\n          - docker\n      ssh_authorized_keys:\n        - {{.ssh_authorized_key}}\n",
                            "id": "steve-container-linux-install-n11",
                            "initrd.#": "1",
                            "initrd.0": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe_image.cpio.gz",
                            "kernel": "http://stable.release.core-os.net/amd64-usr/1688.4.0/coreos_production_pxe.vmlinuz",
                            "name": "steve-container-linux-install-n11"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.controllers": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.controller-configs.*"
                    ],
                    "primary": {
                        "id": "steve-controller-n2",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: etcd-member.service\n      enable: true\n      dropins:\n        - name: 40-etcd-cluster.conf\n          contents: |\n            [Service]\n            Environment=\"ETCD_IMAGE_TAG=v3.3.2\"\n            Environment=\"ETCD_NAME=n2\"\n            Environment=\"ETCD_ADVERTISE_CLIENT_URLS=https://n2.steve:2379\"\n            Environment=\"ETCD_INITIAL_ADVERTISE_PEER_URLS=https://n2.steve:2380\"\n            Environment=\"ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379\"\n            Environment=\"ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380\"\n            Environment=\"ETCD_INITIAL_CLUSTER=n2=https://n2.steve:2380\"\n            Environment=\"ETCD_STRICT_RECONFIG_CHECK=true\"\n            Environment=\"ETCD_SSL_DIR=/etc/ssl/etcd\"\n            Environment=\"ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/server-ca.crt\"\n            Environment=\"ETCD_CERT_FILE=/etc/ssl/certs/etcd/server.crt\"\n            Environment=\"ETCD_KEY_FILE=/etc/ssl/certs/etcd/server.key\"\n            Environment=\"ETCD_CLIENT_CERT_AUTH=true\"\n            Environment=\"ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/peer-ca.crt\"\n            Environment=\"ETCD_PEER_CERT_FILE=/etc/ssl/certs/etcd/peer.crt\"\n            Environment=\"ETCD_PEER_KEY_FILE=/etc/ssl/certs/etcd/peer.key\"\n            Environment=\"ETCD_PEER_CLIENT_CERT_AUTH=true\"\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n        RequiredBy=etcd-member.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n2.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/master \\\n          --node-labels=node-role.kubernetes.io/controller=\"true\" \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --register-with-taints=node-role.kubernetes.io/master=:NoSchedule \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=10\n        [Install]\n        WantedBy=multi-user.target\n    - name: bootkube.service\n      contents: |\n        [Unit]\n        Description=Bootstrap a Kubernetes control plane with a temp api-server\n        ConditionPathExists=!/opt/bootkube/init_bootkube.done\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        WorkingDirectory=/opt/bootkube\n        ExecStart=/opt/bootkube/bootkube-start\n        ExecStartPost=/bin/touch /opt/bootkube/init_bootkube.done\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n2.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\n    - path: /opt/bootkube/bootkube-start\n      filesystem: root\n      mode: 0544\n      user:\n        id: 500\n      group:\n        id: 500\n      contents:\n        inline: |\n          #!/bin/bash\n          # Wrapper for bootkube start\n          set -e\n          # Move experimental manifests\n          [ -n \"$(ls /opt/bootkube/assets/manifests-*/* 2\u003e/dev/null)\" ] \u0026\u0026 mv /opt/bootkube/assets/manifests-*/* /opt/bootkube/assets/manifests \u0026\u0026 rm -rf /opt/bootkube/assets/manifests-*\n          BOOTKUBE_ACI=\"${BOOTKUBE_ACI:-quay.io/coreos/bootkube}\"\n          BOOTKUBE_VERSION=\"${BOOTKUBE_VERSION:-v0.11.0}\"\n          BOOTKUBE_ASSETS=\"${BOOTKUBE_ASSETS:-/opt/bootkube/assets}\"\n          exec /usr/bin/rkt run \\\n            --trust-keys-from-https \\\n            --volume assets,kind=host,source=$BOOTKUBE_ASSETS \\\n            --mount volume=assets,target=/assets \\\n            --volume bootstrap,kind=host,source=/etc/kubernetes \\\n            --mount volume=bootstrap,target=/etc/kubernetes \\\n            $RKT_OPTS \\\n            ${BOOTKUBE_ACI}:${BOOTKUBE_VERSION} \\\n            --net=host \\\n            --dns=host \\\n            --exec=/bootkube -- start --asset-dir=/assets \"$@\"\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - \n",
                            "id": "steve-controller-n2",
                            "name": "steve-controller-n2"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.0": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n3",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n3.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n3.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - \n\n",
                            "id": "steve-worker-n3",
                            "name": "steve-worker-n3"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.1": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n4",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n4.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n4.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - \n\n",
                            "id": "steve-worker-n4",
                            "name": "steve-worker-n4"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.10": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n13",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n13.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n13.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - \n\n",
                            "id": "steve-worker-n13",
                            "name": "steve-worker-n13"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.2": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n5",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n5.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n5.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - \n\n",
                            "id": "steve-worker-n5",
                            "name": "steve-worker-n5"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.3": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n6",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n6.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n6.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - \n\n",
                            "id": "steve-worker-n6",
                            "name": "steve-worker-n6"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.4": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n7",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n7.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n7.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - \n\n",
                            "id": "steve-worker-n7",
                            "name": "steve-worker-n7"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.5": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n8",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n8.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n8.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - \n\n",
                            "id": "steve-worker-n8",
                            "name": "steve-worker-n8"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.6": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n9",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n9.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n9.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - \n\n",
                            "id": "steve-worker-n9",
                            "name": "steve-worker-n9"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.7": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n10",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n10.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n10.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - \n\n",
                            "id": "steve-worker-n10",
                            "name": "steve-worker-n10"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.8": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n11",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n11.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n11.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - \n\n",
                            "id": "steve-worker-n11",
                            "name": "steve-worker-n11"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "matchbox_profile.workers.9": {
                    "type": "matchbox_profile",
                    "depends_on": [
                        "data.template_file.worker-configs.*"
                    ],
                    "primary": {
                        "id": "steve-worker-n12",
                        "attributes": {
                            "container_linux_config": "---\nsystemd:\n  units:\n    - name: docker.service\n      enable: true\n    - name: locksmithd.service\n      mask: true\n    - name: kubelet.path\n      enable: true\n      contents: |\n        [Unit]\n        Description=Watch for kubeconfig\n        [Path]\n        PathExists=/etc/kubernetes/kubeconfig\n        [Install]\n        WantedBy=multi-user.target\n    - name: wait-for-dns.service\n      enable: true\n      contents: |\n        [Unit]\n        Description=Wait for DNS entries\n        Wants=systemd-resolved.service\n        Before=kubelet.service\n        [Service]\n        Type=oneshot\n        RemainAfterExit=true\n        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf \u003e /dev/null; do sleep 1; done'\n        [Install]\n        RequiredBy=kubelet.service\n    - name: kubelet.service\n      contents: |\n        [Unit]\n        Description=Kubelet via Hyperkube\n        Wants=rpc-statd.service\n        [Service]\n        EnvironmentFile=/etc/kubernetes/kubelet.env\n        Environment=\"RKT_RUN_ARGS=--uuid-file-save=/var/cache/kubelet-pod.uuid \\\n          --volume=resolv,kind=host,source=/etc/resolv.conf \\\n          --mount volume=resolv,target=/etc/resolv.conf \\\n          --volume var-lib-cni,kind=host,source=/var/lib/cni \\\n          --mount volume=var-lib-cni,target=/var/lib/cni \\\n          --volume opt-cni-bin,kind=host,source=/opt/cni/bin \\\n          --mount volume=opt-cni-bin,target=/opt/cni/bin \\\n          --volume var-log,kind=host,source=/var/log \\\n          --mount volume=var-log,target=/var/log \\\n          --insecure-options=image\"\n        ExecStartPre=/bin/mkdir -p /opt/cni/bin\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets\n        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests\n        ExecStartPre=/bin/mkdir -p /var/lib/cni\n        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins\n        ExecStartPre=/usr/bin/bash -c \"grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d \u003e /etc/kubernetes/ca.crt\"\n        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/cache/kubelet-pod.uuid\n        ExecStart=/usr/lib/coreos/kubelet-wrapper \\\n          --allow-privileged \\\n          --anonymous-auth=false \\\n          --client-ca-file=/etc/kubernetes/ca.crt \\\n          --cluster_dns=10.3.0.10 \\\n          --cluster_domain=cluster.local \\\n          --cni-conf-dir=/etc/kubernetes/cni/net.d \\\n          --exit-on-lock-contention \\\n          --hostname-override=n12.steve \\\n          --kubeconfig=/etc/kubernetes/kubeconfig \\\n          --lock-file=/var/run/lock/kubelet.lock \\\n          --network-plugin=cni \\\n          --node-labels=node-role.kubernetes.io/node \\\n          --pod-manifest-path=/etc/kubernetes/manifests \\\n          --volume-plugin-dir=/var/lib/kubelet/volumeplugins\n        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/cache/kubelet-pod.uuid\n        Restart=always\n        RestartSec=5\n        [Install]\n        WantedBy=multi-user.target\n\nstorage:\n  files:\n    - path: /etc/kubernetes/kubelet.env\n      filesystem: root\n      mode: 0644\n      contents:\n        inline: |\n          KUBELET_IMAGE_URL=docker://gcr.io/google_containers/hyperkube\n          KUBELET_IMAGE_TAG=v1.10.0\n    - path: /etc/hostname\n      filesystem: root\n      mode: 0644\n      contents:\n        inline:\n          n12.steve\n    - path: /etc/sysctl.d/max-user-watches.conf\n      filesystem: root\n      contents:\n        inline: |\n          fs.inotify.max_user_watches=16184\nnetworkd:\n  \npasswd:\n  users:\n    - name: core\n      ssh_authorized_keys:\n        - \n\n",
                            "id": "steve-worker-n12",
                            "name": "steve-worker-n12"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.matchbox"
                },
                "null_resource.copy-controller-secrets": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "7352697111455529002",
                        "attributes": {
                            "id": "7352697111455529002"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.1": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "1300656532815194322",
                        "attributes": {
                            "id": "1300656532815194322"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.10": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "7398308489099069899",
                        "attributes": {
                            "id": "7398308489099069899"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.2": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "534821636299516762",
                        "attributes": {
                            "id": "534821636299516762"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.3": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "3476038318964929218",
                        "attributes": {
                            "id": "3476038318964929218"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.4": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "5736752585050963530",
                        "attributes": {
                            "id": "5736752585050963530"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.5": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "3587814980764894885",
                        "attributes": {
                            "id": "3587814980764894885"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.7": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "2641276363301618166",
                        "attributes": {
                            "id": "2641276363301618166"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.8": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "8978725698556061684",
                        "attributes": {
                            "id": "8978725698556061684"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                },
                "null_resource.copy-worker-secrets.9": {
                    "type": "null_resource",
                    "depends_on": [
                        "module.bootkube"
                    ],
                    "primary": {
                        "id": "7842603443409982704",
                        "attributes": {
                            "id": "7842603443409982704"
                        },
                        "meta": {},
                        "tainted": true
                    },
                    "deposed": [],
                    "provider": "provider.null.default"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "kubernetes",
                "bootkube"
            ],
            "outputs": {
                "ca_cert": {
                    "sensitive": false,
                    "type": "string",
                    "value": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRQXhKSU1wcFRaaUJuY0hqRG1hbnZ1REFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURZeApOalV4TkRCYUZ3MHhPVEEwTURZeE5qVXhOREJhTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXV6NnoKV0hnMjhBVWViYkp1K2FQOC9WaXZLNUoyMXk5TkdRQnJjNko3VmtxZjZ1QTE3S3ZqMzFYM3ppbDdrRG9EOTQ3cwo3akplUXQybjc1dERvVGpTUFFpQkIvNmxRQVVtRG1HM0RpOStLc0lSQ0pHa3JzdHFYZU0vKzRScXNQSTZZRUgwCkI1SGorUzJFcVk5VGtQcXJNeEhhS3RKMG5Ca3NPMnU0UkZJRElVTkhjUnY5d0NMemJBNTlhb2p6dGpFR0g1QUQKdVFaV3lMdnpNZk9WZ1JlSmNYNy9IUWt6TldLMDlQRGpjazZ0WC9RMC82VW0ySDNIU1JKRDl1TVNwL2I0RUE1SgpoQlhDZVh3MmVoeE9FaFJDMXJmelMxNk9uWTdaeDBHdk5uUU1XMlRSZTVqS2FjYmlnbGZlSE42Qnh0UmM5ZWhPCjRTazg3dFJXdWZvdFpWYjYrUUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVbXZRQ201bmZEdm40aWkzSTJwNFJXUWRqSDJ3d0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQk5mNjNpNnNGVnJ3Y0tNU3k5bXpBNXllS2ZZMDZGZXFjUmp1U2dFdUx3VDJYaDZ5aGV5Cllvd3BWQ0tncXNSRWVjUjFvbWd6bkRqbnk0MUdFd2p4cVl1REdtWWl0d1RTOWg1OW9ZRldoUmw4OXk3aERDVnAKOTVjL05kUHVyM25pMUtqNzVjY2V5cFJla2lhUjJYNGhCY2xDcERWMm8wc29sM3QzMlFWSmtBQWhhVHFuOG9FdwpQc3V6RzFmZ1Z6UkRTTTgvRmFBNjdKSk9BRnEzRVFQUk1HZVMzd3IyRFpPVUpFTWMxb01PbHRFc3d1djVuNmFxCjZicGNpYkdCVmJBRDE1b04wa2xuQUZuU3F6MzIzOUFtTHJPbjNBc00zUUgxOU9pemM2K3hObld2TTRrN1FoUmcKVmU5TW9LcjY2RXVtWHNaL0ZFNzRmSU4vbG53S0dnV3JoQU09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
                },
                "etcd_ca_cert": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN CERTIFICATE-----\nMIIDDzCCAfegAwIBAgIRAIMrupgK76fi3tUjd2C579swDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDYxNjUx\nNDBaFw0xOTA0MDYxNjUxNDBaMCExDTALBgNVBAoTBGV0Y2QxEDAOBgNVBAMTB2V0\nY2QtY2EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC+md94VZty+EfX\n5qmiT7hfmS6cLcQT7YwPyxNSDtSILopvJVwnh+ObbVgaQxPoP+fKNOocVHohRnh/\nfqGiV5aJt+mG6SJEuslduKzXa0iqXan4qwSDvTeMSw+cDEgnUon4p+hazXaU6dZU\n57qqg4quYfiIYx7aJVj6TqQGelDq9SGHAHLcuDSCh2HXuGg/rpkrFrtM4IkVQ9Vr\nyz188jIZuoQQgqds2dZl6Tys8Ve68ZHKgrhiUdz2xq87nWR0PtDDdn52sn7cRht9\nEjVC34AyGPkTHbh1BjE68yFHzvb3db6BNyLUfyI9cEa04Ao7MSu7ZM7UYyo+LAN2\ngiaF0GqZAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/\nMB0GA1UdDgQWBBTyTTSC68BruJif51HQqLH7IkOcKDANBgkqhkiG9w0BAQsFAAOC\nAQEAL663DahpcmezVTVBV9FHHLG3LYZyCJPX9kCJ4T3AJD8kpWRePUaP0H+ZM27j\nGgW78r9x5EmEXhtaLYeP/skRlkVxu0ytrPoU0e46T/6GOkSWeMJaa9+i1jw6qyq9\nwcfj/yR2vJB7LLcygwW/itdFSti9vKMmw6Om/8AnRgxYXsv9oqzkvAvqJ1jAzoCu\noMhhXGblJFxfwdl0doitiTZCGFwBNARfGN1+ZpuQ75QGuxB8bb2vWUnWE2g1d+oR\nlB5AR2GvK9lotw04BRVnAOHCAL6mZITDIyEF8EDkg3ii22bOivNyiGUn/YTAYMsZ\naXnI2soIL/NUVaLQDIr+vUsHIA==\n-----END CERTIFICATE-----\n"
                },
                "etcd_client_cert": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN CERTIFICATE-----\nMIIDWDCCAkCgAwIBAgIQLEYZVaTqH8rAcdjyfq+/3DANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwNjE2NTE0\nMVoXDTE5MDQwNjE2NTE0MVowJTENMAsGA1UEChMEZXRjZDEUMBIGA1UEAxMLZXRj\nZC1jbGllbnQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDFNdePWwHp\n2iNMWaDxHnW/jB1vgjSgm3cmgg5Q54rLyOYqLFRtdtznWVs1N0o16QWysCbgCw95\nRsAdmEieVSS9ZF/Y/+yfFUAPQh53aANN6wXVXEft4isjn0LbHS/fZ4o37znn4Mom\nKMX8l5cFF6cr7JQORhilnEvLb3pTYrqI96Cy6f05l3c0HBbrk6ywyft/0LzeNXOj\nNNVC48GJFbtjr64EapBOqk3lYlPFzID+45g/2KVIcQnhC1j58w259Y9/UEILd5jC\nuPipzSHN+DqhykV9DoG6JIbRhUD1ID10OQ/KfVzXpdSF/X7iWWZtGav1un+TA7ba\n1najMSEWXTetAgMBAAGjgYcwgYQwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQG\nCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFPJN\nNILrwGu4mJ/nUdCosfsiQ5woMCQGA1UdEQQdMBuCCG4yLnN0ZXZlgglsb2NhbGhv\nc3SHBH8AAAEwDQYJKoZIhvcNAQELBQADggEBAIjReiYxAr7LGmUn2IajEsBx8QIg\n+r1dXH401abED6BvEUm68HqbK8cJvbyuoPdt9Y/Uu61ymIr4yS4Q9T1wPpNnrKXF\nxUoUfq/DxnhUibLkBcbHdp1iT9C76RuvTAlnqF4Q1JRkzW8DILj16xfD6kbE2cut\nmNepjHTi3VsCSmQ8M6mDusn6G8L7P9y5mTqiGk1PHlyrcwVchVmAsAJXyYoy1wBZ\nttO2JuqBBxPrlLIzdEuJIQA6PMEmCvnKxM8nxc/sRQIF56VFeWFbRb3/JKiWbfHi\n1ofJdvzVSmaAR1DPrb/PimyUtbzWBFB7j2BUeQHr+jq8IF/f1UyXMa/BHOQ=\n-----END CERTIFICATE-----\n"
                },
                "etcd_client_key": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpQIBAAKCAQEAxTXXj1sB6dojTFmg8R51v4wdb4I0oJt3JoIOUOeKy8jmKixU\nbXbc51lbNTdKNekFsrAm4AsPeUbAHZhInlUkvWRf2P/snxVAD0Ied2gDTesF1VxH\n7eIrI59C2x0v32eKN+855+DKJijF/JeXBRenK+yUDkYYpZxLy296U2K6iPegsun9\nOZd3NBwW65OssMn7f9C83jVzozTVQuPBiRW7Y6+uBGqQTqpN5WJTxcyA/uOYP9il\nSHEJ4QtY+fMNufWPf1BCC3eYwrj4qc0hzfg6ocpFfQ6BuiSG0YVA9SA9dDkPyn1c\n16XUhf1+4llmbRmr9bp/kwO22tZ2ozEhFl03rQIDAQABAoIBAQC/fKdBADocan4J\nvaGjXlMw2YkfZAtbw3jvQCtMbXb8pqauXnrgCyE11jLUuknpjMjGl3o34yV0ObmD\nQwGIE95ns5XJq76DPWwFJMtWX/2NY943LLJ/DjObFCIjhfSc9PlllHjiaQeAA+ky\nebLe8/eTk9SzA2cdL2T9NNJPMzcyk6HZyM39flr/gZpjImsW0HFc2vSKliZL8cC9\nnzjf0qCfSho/bUwpUjPMBxAYBi2nh0oP3yu0Cm8a0vfR01yQLSK8dU9VoVFhUQiI\nWx4QxtoDDCfl7YF4f3Rpe9lYkxfNMnrKI4hBKTlOsLPFHK/jx/N96BzYbtwVnUcZ\nYGhRx8X1AoGBANFRc5MwGQQkxt0F11W3ZTf+WmPcwwUHr/UifSkJt2W3dD4k80Mk\nmC0Krlq2j18BK59lVfxzy0whyZwnf8Mj3jntbRl4fPPDjvhJZH2g35DRHnE8pol8\nRHeCAgLWt0/wRpZVW+4IAjx670rr3Pn5F5YOOlajBOgIzRdPrGr2fa8XAoGBAPEx\nHseBRIRgDQTOw/Zarq0wcm2AGDKqTqOySO/CTum1mku8mNOGLbzBJ2QBTmaKCPze\nKIPc7AyyQiQtJJKmsOcFYb/RIoxNJaxjVr/lCJ/tWJg5k9vATrH0VOQXdun/ifVb\nkUkCO9H5UoK9qP1jzvLmt73szFy0KCEBEv35OGnbAoGBALxu7PKWHA8k5HlYps+d\nd9t+ePTpag7/KqItWCs3eghxrI29Sdkp+myh7u/u5QaL0S9/VHcd7ugsioiu7k9H\n3OidGtgRJbt0UyKlP3fw+RIvj441IV8npaNIQHM5xHCMR59SXJ3eS9USfpUd3CKU\n4WzOhio0O1h/g9H2gasRF3glAoGBALuF31Jp9OWe8EBOqhl+A9Vvl2f/cdDijOXF\nFeQjhMs8gMxlw8ShzCm3W3LreRNMOxSvfXyYZYaxia8q0gabR2s2yfsjFONUj/fp\n/GaSIhSFqp4gFg+DAyxktSPqAnCIV7DGEr1a2Tu1xysTXrIzyZEdRLqLw5BIGfMf\nLK7995iFAoGAHGhD5GhbTi6rL/vE8alKL5MCGM3CRkLTx4RdFWE8DYjCiT6OVeEY\ny5X9SC5wc6hFFRpiyJfwZbjaD99cuZc6kEf25Us9pnyMo4NIFXCgMTlaO7r3tFyS\nG6EFMuD+GZ8s+PETnG1UxlIuVX4t++FPgnGIM+kGzZVSPqydVMdjqqE=\n-----END RSA PRIVATE KEY-----\n"
                },
                "etcd_peer_cert": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN CERTIFICATE-----\nMIIDQzCCAiugAwIBAgIQTtzGNk40q1hyzzQiTV0eBDANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwNjE2NTE0\nMVoXDTE5MDQwNjE2NTE0MVowIzENMAsGA1UEChMEZXRjZDESMBAGA1UEAxMJZXRj\nZC1wZWVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA9YK4piCwT6KP\nCncTuAQ7sdBssQO3aOf7cSYyKtcdgfZsKFrrj6RjQ/ko2OUKFLYsrEa/FeuuWx/x\n5SeB+1cF6YxxbbQNMPyVwDhdZXDQqG7OH6lvxH4xOqwo50PAnVc5BQNFRDmV22X+\n5iHlTMLRLruoSHk63fDDcQnCDUPXJT5YDdM0C3AtKgf5VD7YEQDZYPexKl8ZyBar\n3AeTPhsH3ezlX1qrDbDD9Feu4p/besPlWoS2fFWP/tymqs0SN2eh91VuFWuFTGpg\ndWQKShNAhJK4+y8NSKEbOONkOdRAtiUY5wHgb0mEHpXovn7IRj9nJJVSiRfrn1IZ\n9HX/0P0gHQIDAQABo3UwczAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYB\nBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAU8k00guvA\na7iYn+dR0Kix+yJDnCgwEwYDVR0RBAwwCoIIbjIuc3RldmUwDQYJKoZIhvcNAQEL\nBQADggEBAJYHMyD+EWS9dXZeoyRUIvJgUjMRLjuDivgtBQIqV2ZQarp0BK91DGjE\n3WH31Q1k7VsrUP1LZIyMDe1vGVTZfXAZi9J93t1mb77VJk4UKLWaWC84QuPCPkxw\nkUlEeAULmtMbb1MzRBEPuzLXLra3AIUmGzjnP/LTGH6IrCCrfiJ3+T9QadlOkIoZ\nGxSD0F1vIgEsIQr9TLKyBmntzvm63o3ebwluM5JEe9gsotm7ugWe/QyDf1lc7OEn\nCjKUJHVttuujJj5OyS6QXgh6nBtg4i2tjVKwgiMfZ1L3m/2JwZ9v+i/n6oE/Vf1S\nNtG3zbs7ugCIuJyyUHti0SH6qM6sbVU=\n-----END CERTIFICATE-----\n"
                },
                "etcd_peer_key": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpgIBAAKCAQEA9YK4piCwT6KPCncTuAQ7sdBssQO3aOf7cSYyKtcdgfZsKFrr\nj6RjQ/ko2OUKFLYsrEa/FeuuWx/x5SeB+1cF6YxxbbQNMPyVwDhdZXDQqG7OH6lv\nxH4xOqwo50PAnVc5BQNFRDmV22X+5iHlTMLRLruoSHk63fDDcQnCDUPXJT5YDdM0\nC3AtKgf5VD7YEQDZYPexKl8ZyBar3AeTPhsH3ezlX1qrDbDD9Feu4p/besPlWoS2\nfFWP/tymqs0SN2eh91VuFWuFTGpgdWQKShNAhJK4+y8NSKEbOONkOdRAtiUY5wHg\nb0mEHpXovn7IRj9nJJVSiRfrn1IZ9HX/0P0gHQIDAQABAoIBAQCKx4gFMHk5qtRc\nwA7/eDUeQIkQTt+Ah5HU1hiJquvdKSTecvaxTeVm6RMz99SI/KmoAJ3HkGAQ1q/w\nLzMElp6a9G6x6pOCW2VzMOlqjCkG7QvLTgYF9qdxWRwODnh0+Hcc5EplVH/nc3Jx\nODvb9kw0tJNd1Fl4V77CyRdOVEjrnYTEKMzJiQlxLuQ0RPgeolLKzlzujfOtpGoL\nvs825AP3/Ne/TZ9FTk9Msic2xoQXhCndluObJnStYA+Qbd36ezGxLQDaeGGlqIND\nMbs2YxhRIGVLtCZ0wplXvklFWSwG8uGodwZflBm3WdH43tk9203Qw2EbNgYpZz3r\nbLM6Bo4pAoGBAP8Al4+ENDep2+gniy+WRu8uPqglOvGp1IzEyLr1/8OB8MaNWAWY\nBLv/5LPGm+Ty5uFsvOetAgh7byAW//XKwjOz9p/cSjZhurO1z0JTI0kfN0lG1KwI\nwq+Gd3aRIB5FE0EJS2R9+C0jpDoip9vbfdwNjHT3A1B5AXHZ1E6wwGQzAoGBAPZ4\nn1ooMNcmJF+LJN/OZLbm4YEBMj0EkKcOq7ejrHX9QKGXI4IEX4eRX2XMaQ4byLeS\nSFTpUpAnCBptZcVrxHT2sEOpMXpFmO73E/vOGF+E6ysSCITfctqT5PLmSRH6/loW\nu20YWA+9EnuwTWErRiQVjC0sa/iDHG7eOybmiZpvAoGBAKTrLBosZV0OpOOLF5Bq\nP2wW230BvxJmRMnZxvxrdsNpuV+gMCpF++HeiHngXBiBI+Ls4WtwT91OfzsgxN+h\nB2JK5JjU7sYnBImPbwC1Jh/3aVkhzw+IBulgLMjo6P3KrL4mFbVjZutCnsbefPNL\nDCYSOSG4U1NrPwzz1UQjOfpTAoGBAL+8kILLd0s4Id2t2i69Wf4rWExKSPHM5lb/\ng7hlfJmBPVE3yWiwzDwjbCo+PY+7L4cXJmvf4tm/c39TkXNmZbtz2SWZrqLnF5T2\n4zXlW3KbbXLhIX10ct31ZYtMeJWjQ1GEE6RH5uG/fWx5d4ja6ELT/Gt7/jaikHDz\nMuMNPwjDAoGBAIi+OYsOtgiwj+Pe+9dnOxWX5McRrEnMhD3yCkimjywjGWxzYWTZ\nQkuqHqAg4QDtKB2kFdRMgmvqdCYqxj5rekBE//gL48LVkGry/yUUev1pWdka1GqQ\nCPXWvpJXwX9mG3hCEswRX6mIp4OW0uuCQfGtWD7/nqt6YI2YDqIK+Q38\n-----END RSA PRIVATE KEY-----\n"
                },
                "etcd_server_cert": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN CERTIFICATE-----\nMIIDWTCCAkGgAwIBAgIRAMvY8NNV3cZk2mhN4tCEPHkwDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDYxNjUx\nNDFaFw0xOTA0MDYxNjUxNDFaMCUxDTALBgNVBAoTBGV0Y2QxFDASBgNVBAMTC2V0\nY2Qtc2VydmVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAst4wS2qf\nHE60I+w+i5IcIqz5I6N+ao305/NavSrxkCYOmqzBVTUtJuWjHQD6UmcgZb0FUqNB\nJhEIHD+KlgJLRHGfZDeLWQo/RD9LCBgthLvNexpz0CxMg85PY/9rQozOH0wfgd94\n2M+9GfkZb8zFgxrL2MTTmdxdr43Xl+6GdeLjoWqlRj2xsIcrcecQlUmi2r1xG/eg\nkHtskriQFt6qq1aCK3vrn8cwwtHitoR+2/wNXgDWOyi2e1oRP8yH6Pd5z7E16/fX\ng//rsNetBAzW7Ekgwn52205XP3VVNmPu52op8IBr1vEHP/32eQxF5SYCCWKpAQ+T\n20SoRkXznW176wIDAQABo4GHMIGEMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAU\nBggrBgEFBQcDAQYIKwYBBQUHAwIwDAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBTy\nTTSC68BruJif51HQqLH7IkOcKDAkBgNVHREEHTAbgghuMi5zdGV2ZYIJbG9jYWxo\nb3N0hwR/AAABMA0GCSqGSIb3DQEBCwUAA4IBAQAH3JkZm2L+DY0MUhG8i823HP09\nwULNam7FdpN0sj4uJOf5qpC+xNjzBoiq0lDHO/hkO0/FK57zEJIWEamJmqf9TsHN\nVnUAxqp88xfE2ACDJ3oyfGpsBNe2CDeG1+eWcEcIc9IRZNMylu0wQsCaMLSwRRTD\n2MraVQwy+18eyqFwrmAivqHMWBu7mCIHQZPRSyDIHpy/1grAJc0sOwg/YBF5K5Be\nnYEnh9hm9w9rORNTnpPbxrbpPXegzQbsgc3WMdLZrcqV5cKuUL18DmZkWlYkc32y\n/SYaV93Yp+y/CYrCPvrA4lONhwGtfoun6uv8ZX3sGVZ2T9LLfYQ0gbfc7uOd\n-----END CERTIFICATE-----\n"
                },
                "etcd_server_key": {
                    "sensitive": false,
                    "type": "string",
                    "value": "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEAst4wS2qfHE60I+w+i5IcIqz5I6N+ao305/NavSrxkCYOmqzB\nVTUtJuWjHQD6UmcgZb0FUqNBJhEIHD+KlgJLRHGfZDeLWQo/RD9LCBgthLvNexpz\n0CxMg85PY/9rQozOH0wfgd942M+9GfkZb8zFgxrL2MTTmdxdr43Xl+6GdeLjoWql\nRj2xsIcrcecQlUmi2r1xG/egkHtskriQFt6qq1aCK3vrn8cwwtHitoR+2/wNXgDW\nOyi2e1oRP8yH6Pd5z7E16/fXg//rsNetBAzW7Ekgwn52205XP3VVNmPu52op8IBr\n1vEHP/32eQxF5SYCCWKpAQ+T20SoRkXznW176wIDAQABAoIBAETLPBvleCi1BIfE\ndxHLMlML4A6a9SYaTxVe/YlAGQRt/rPyubEB8MnDDIc9Nwm2bDl1B7UO4SG47zue\nHLkxTK2YXct3qXqnfEnNZhhI5EjmylMMi3qHby5KjTJSrHg+G5DiAEQ9JQeObpas\nveHICjcweTJ4EUJeBRJeJYtjzAdOhS+QX6gpXxh2TfjaR9WG/jRxLDuY2l/qv2gr\nEhynm7+w+dN87afsgL3K3GSsKU3IlL8L8f90TO9TSbkds1wOCRSaLIbacUEC9uhd\nbds95iPOn298cCP6duZY+DzjadjIZuC/LBVauSMo9cAczyUKxWlI26x1Gr/0vHPM\nSElW8VECgYEA6Xc2baCu6UEsfRBXPf78CdEBZSfNbR1llPZGu17NZkYZNwURjZDm\nkJ8W8aJOf44RHG57uBJ8ma4Y9AYS541DdnWrm6NCkq/v4rAe+1oFu4vKtvz3dHqz\nt9H1a37s5NDubEc9roxz0jOZkOED7xNKDcL6kwriXdkQWAxQjwVLOw8CgYEAxCHm\njMBMjRAYF4xRO4D3af/uDK1dRGccGvqRiT12mk3+krTr1BYL0uCkRVxbEWx9Sclt\nQpsXHY6g1j/DiLyzvMynUgBTCTIwahA3cUlh/e02QAct1zV0Lq82WuE2At/2NYjc\njvkMLssWCrRNVA8KqytY8XJMlOsyA4+maqa54WUCgYA4OXyDJEpbZFW5fMD17j12\ng74pRU+ksoqvOCxKnYcr1T/nTzIt/LJ6K8YTxTnQYD9gsH7dEp6tSA88XWYaG5we\noDIG1meG+hX0auPbNo/g3cahEQTrKU20vDy1eajFZke1Decd7TdLbR/Tk00mO2f/\nLnC4Dsv7O/ZCrhyMhQLcIwKBgBRZsCJKkabRVK6c0JDsAL/u3jRSiKrgR/pEpXUn\n+3ZnQVLXkuCeqPtoc6L+wjQ8nYNacwvGK8/VTLruQsudSMj+Mx4/Cl6Z5owawqXu\nh0xhoI9kL011LmjppSoo1AHYWyOS38+1552zVMYnjx55sRGxnbjvsyKAhN/5t7q5\nMfBBAoGADNPYe4lJ5xdjEnTjNUC/fsBxCZh8XSTcADT3z2neM1HaUum7b/QboGIk\n7uVNeTzgSEaOwmW1r6xMVOsQBXJawrINjP86CowzIeLZk7URIhs+2a4QYiV8QKir\n1EJ8tYuHDuPjjD+lXWlSXugjHXa/BhgLSYPAUpJq+T17L9gbwX0=\n-----END RSA PRIVATE KEY-----\n"
                },
                "id": {
                    "sensitive": false,
                    "type": "string",
                    "value": "69f3b03a14d73d202a7df91d275c366b0d602aa4"
                },
                "kube_dns_service_ip": {
                    "sensitive": false,
                    "type": "string",
                    "value": "10.3.0.10"
                },
                "kubeconfig": {
                    "sensitive": false,
                    "type": "string",
                    "value": "apiVersion: v1\nkind: Config\nclusters:\n- name: local\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRQXhKSU1wcFRaaUJuY0hqRG1hbnZ1REFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURZeApOalV4TkRCYUZ3MHhPVEEwTURZeE5qVXhOREJhTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXV6NnoKV0hnMjhBVWViYkp1K2FQOC9WaXZLNUoyMXk5TkdRQnJjNko3VmtxZjZ1QTE3S3ZqMzFYM3ppbDdrRG9EOTQ3cwo3akplUXQybjc1dERvVGpTUFFpQkIvNmxRQVVtRG1HM0RpOStLc0lSQ0pHa3JzdHFYZU0vKzRScXNQSTZZRUgwCkI1SGorUzJFcVk5VGtQcXJNeEhhS3RKMG5Ca3NPMnU0UkZJRElVTkhjUnY5d0NMemJBNTlhb2p6dGpFR0g1QUQKdVFaV3lMdnpNZk9WZ1JlSmNYNy9IUWt6TldLMDlQRGpjazZ0WC9RMC82VW0ySDNIU1JKRDl1TVNwL2I0RUE1SgpoQlhDZVh3MmVoeE9FaFJDMXJmelMxNk9uWTdaeDBHdk5uUU1XMlRSZTVqS2FjYmlnbGZlSE42Qnh0UmM5ZWhPCjRTazg3dFJXdWZvdFpWYjYrUUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVbXZRQ201bmZEdm40aWkzSTJwNFJXUWRqSDJ3d0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQk5mNjNpNnNGVnJ3Y0tNU3k5bXpBNXllS2ZZMDZGZXFjUmp1U2dFdUx3VDJYaDZ5aGV5Cllvd3BWQ0tncXNSRWVjUjFvbWd6bkRqbnk0MUdFd2p4cVl1REdtWWl0d1RTOWg1OW9ZRldoUmw4OXk3aERDVnAKOTVjL05kUHVyM25pMUtqNzVjY2V5cFJla2lhUjJYNGhCY2xDcERWMm8wc29sM3QzMlFWSmtBQWhhVHFuOG9FdwpQc3V6RzFmZ1Z6UkRTTTgvRmFBNjdKSk9BRnEzRVFQUk1HZVMzd3IyRFpPVUpFTWMxb01PbHRFc3d1djVuNmFxCjZicGNpYkdCVmJBRDE1b04wa2xuQUZuU3F6MzIzOUFtTHJPbjNBc00zUUgxOU9pemM2K3hObld2TTRrN1FoUmcKVmU5TW9LcjY2RXVtWHNaL0ZFNzRmSU4vbG53S0dnV3JoQU09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: kubelet\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQU5EMVRBVDhLc2xlYjV2YjZhTE0yeFF3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBMgpNVFkxTVRReFdoY05NVGt3TkRBMk1UWTFNVFF4V2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFKck5xWFVZMVBFQXVKM1pkSHRyRGsvRFdIQ3dJelB0UHdMNjFubHJaL1hFOVdSUGIvbmF2UVJLVXBkdQpSaFhjSDNkeHYwbEhyOFFzZHhBdnRkMkEvczlNY0NaQ0dwNisvUVVzVStvbndkWGJaa3FocmxYWXBNSjFZUkczCkN1OHNrazV2OGNrUkcrZHE5K1JBbUdIMWppT25yL045RGpqTVJ2YWZzM2lKaVlTV01abnVNK0dGVC9LSWNjNm0KZDZYYUlrVFo2eHBvcFZnRzROOUtuNHVOL2pJMHkrTjFCbXYydnNteFc5RE1jcHZqcjVLR2VIQmNoeFdLQURhYgplL2hERkw1b0NhNU5uU0pxRDd5ZFEwQ3RBRkxFN2h5Y09HeGxqMjNiQ0w1ZDRiUnFJZFdYbG5aU1F0bWdtV1E3CkovMTZVdzU0NWJGVjNKNUR0RjJhamdsR0VQa0NBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZKcjBBcHVaM3c3NStJb3R5TnFlRVZrSFl4OXNNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJBClpXcVpOUEZjTUEzYUEvQVVOdjBKN2hveTZVWjB5bDArVkVuemxkUmNGRXRRUTloMnl1aDUvY042eWZJMnZKV0sKK3hRNitESzB2WWZ4d1BWNU5MOFZuTExpbVkvVWVyc3hnWFNZcS9qVlFIajRkU3c5V09KWis3dmh4bncremZqeQpCWmQ0WHl6bXR6MEoyODUwQjVrZW14QytjUFcwa3NnR0p1dWgyMlFobkU1ZENuTjhNalN0QUdaUUVUT1p4REZvCi9jV0t5ZER2LzhqcnVCbWZXTG5yYmNDOVNQZVpHZVRBSE1VMmlGVXIrQnVIamExc0RMZVB2aTNZR3ZCSDVrNnkKQWNCQWxkaFNqRDRnVm5QcU9MbzhzVUU0dGErZTZpQi96c3hyNXl1MUlIQjRpcVdsR0ZZZFhudS9PZm5qZ0NLcAoyc3NrNndhd25hTEt3QWxVZ3EyMgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBbXMycGRSalU4UUM0bmRsMGUyc09UOE5ZY0xBak0rMC9BdnJXZVd0bjljVDFaRTl2CitkcTlCRXBTbDI1R0Zkd2ZkM0cvU1VldnhDeDNFQysxM1lEK3oweHdKa0lhbnI3OUJTeFQ2aWZCMWR0bVNxR3UKVmRpa3duVmhFYmNLN3l5U1RtL3h5UkViNTJyMzVFQ1lZZldPSTZldjgzME9PTXhHOXAremVJbUpoSll4bWU0ego0WVZQOG9oeHpxWjNwZG9pUk5uckdtaWxXQWJnMzBxZmk0MytNalRMNDNVR2EvYSt5YkZiME14eW0rT3Zrb1o0CmNGeUhGWW9BTnB0NytFTVV2bWdKcmsyZEltb1B2SjFEUUswQVVzVHVISnc0YkdXUGJkc0l2bDNodEdvaDFaZVcKZGxKQzJhQ1paRHNuL1hwVERuamxzVlhjbmtPMFhacU9DVVlRK1FJREFRQUJBb0lCQUFiNjNQZ3RyWFJNYndhWApCbnlHSURnU2U4dGc5Y1ZpbmlPNVFiQnAybDhuaVZVRGkrMzlJZWF1bnppNnZTaEJLNTRNSCs3aTc1YnQxbFNCCmdqYkJtVHVwbTZqdDlCdFNTMEJQZGwwcGU4RHp5cEgwNWxKeW1VTTNYYkFaeThGckJoSEpWR0tYaGVXU1dpa04KakpGbUxBbUpoeEo0Z2dxbmswK05kZDhxZkd2Zzg5bU9mQ04vSGpacEdUOEhvVVdhSFlEL05XdGtqL3VFdlhCaQorMy8wdElTNnI2RjdGZTY1T2RiZU1NNFJrcFIySXdNR1dVcCtoWU4wR1dIR1FmRWNTa1hxdy9Cem5LOXJMdXpCCjF0K1RNR3ArZEx2NnBUMU5ON3VuOXZBWmRxNnk3ZStnaVFvWE9UaG5xUmpxNElsNFRsejlTenBBTnlwL2VFZVIKZFR3OE4wMENnWUVBeE9tNzZSU3M3TzZOdjVOL05KNksvNTBOa05UVk9oVk1sd0RCb0ErNmozbFkyWmVSMUY4UQoyeVlhRVdOZTNVQW01d0hHRnQyQkdDL2g5Zm9vanJnNUpUc0d3OVYzNEIzYStIU3JQRDAvVEJLTzlVMkJrYXExCjlaVFNlbnRIbERhTHM4K1M4ZVMzQUZ3RUJhVkJEakYwTFVSOVVPV215RnJOZExwUUFJSGpxOHNDZ1lFQXlVRXcKMkloNFArSXFYNzdZa3JYdFo0VFMwR01JVnozUVRBWXRMVkZicWpPRGRwSC9mUmRIdkV5eUZxOW8yVnkzQmxJVgpyK2RBOTFpUXFkTWllQzFraFRKZi9GMFRVb3NjY2luOXF3OWc0aHRuS05vL01RYnozVmgvR3NaalFHVmlxY0IvCmJqSWRSTVo2NjRxbkoxNUdHTnJuNVpPdVEycW15RUVvc2ttcHBjc0NnWUIxU0NtdHg2eS9hYzV2Zm5CVGJPS3AKSUdmR0RaMzZmRmtqejBXRUNobzUvaktYVnhsNmZpelIrajJvZ2FFczhscTVXR3NkajB5bWxVNW1iVnJldG9jQwp6OGRWdUwwdmRWaklodVMrZWxSTEFQcTR6RE1TQ2JWYTBnc1MvSDVEbnNGU2xaMldDWDJkN3pCT0ZJRk03Tk9mCmFwMmhJMGRWS2hBWktDY2lSanJPUlFLQmdRQ254RmhicVNmVTJVeEpsR1lscHRMSXdNaWNQbkh0aC9IajdpSXEKN085azZweGtjMEJ2bnNDR0Q4bEZiK1FQam1Ka09ua3BzYlZPZTkzY004MUFNVmJpVWlRQjAvVVBramVjVTdUSwpySDh1L1hqNWJUWFFRT041V1JSYjFaVlhVU3oySlNvVlNtRnJ1NmtzUU9FbXlFZlc0R1QvMUNRb3Z2ZFphRGZzCnA4dHNFUUtCZ0FFTmh6dDdpNVlCalk3RjdJbUZCZkZ1dFQzMnJYa05KVmhzQWZWRW5KY2M2SEZOcVBXSUVNWjEKWW1ScG5oM0tuWW9MUzFVUHVOZ0VUVWRHZjZlODkzVGtjZlFHaTZwbnRta09jMDVPRGN0dkwyYTBua1cxSnp0ZwpoNVhGRDd6aWp2UzRtVUJ6bDNTVzMwNUVZMGxHL0YyeXZtcFg2WUFuYkMxSGhmWTVlbk9VCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\ncontexts:\n- context:\n    cluster: local\n    user: kubelet\n"
                },
                "kubelet_cert": {
                    "sensitive": false,
                    "type": "string",
                    "value": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQU5EMVRBVDhLc2xlYjV2YjZhTE0yeFF3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBMgpNVFkxTVRReFdoY05NVGt3TkRBMk1UWTFNVFF4V2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFKck5xWFVZMVBFQXVKM1pkSHRyRGsvRFdIQ3dJelB0UHdMNjFubHJaL1hFOVdSUGIvbmF2UVJLVXBkdQpSaFhjSDNkeHYwbEhyOFFzZHhBdnRkMkEvczlNY0NaQ0dwNisvUVVzVStvbndkWGJaa3FocmxYWXBNSjFZUkczCkN1OHNrazV2OGNrUkcrZHE5K1JBbUdIMWppT25yL045RGpqTVJ2YWZzM2lKaVlTV01abnVNK0dGVC9LSWNjNm0KZDZYYUlrVFo2eHBvcFZnRzROOUtuNHVOL2pJMHkrTjFCbXYydnNteFc5RE1jcHZqcjVLR2VIQmNoeFdLQURhYgplL2hERkw1b0NhNU5uU0pxRDd5ZFEwQ3RBRkxFN2h5Y09HeGxqMjNiQ0w1ZDRiUnFJZFdYbG5aU1F0bWdtV1E3CkovMTZVdzU0NWJGVjNKNUR0RjJhamdsR0VQa0NBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZKcjBBcHVaM3c3NStJb3R5TnFlRVZrSFl4OXNNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJBClpXcVpOUEZjTUEzYUEvQVVOdjBKN2hveTZVWjB5bDArVkVuemxkUmNGRXRRUTloMnl1aDUvY042eWZJMnZKV0sKK3hRNitESzB2WWZ4d1BWNU5MOFZuTExpbVkvVWVyc3hnWFNZcS9qVlFIajRkU3c5V09KWis3dmh4bncremZqeQpCWmQ0WHl6bXR6MEoyODUwQjVrZW14QytjUFcwa3NnR0p1dWgyMlFobkU1ZENuTjhNalN0QUdaUUVUT1p4REZvCi9jV0t5ZER2LzhqcnVCbWZXTG5yYmNDOVNQZVpHZVRBSE1VMmlGVXIrQnVIamExc0RMZVB2aTNZR3ZCSDVrNnkKQWNCQWxkaFNqRDRnVm5QcU9MbzhzVUU0dGErZTZpQi96c3hyNXl1MUlIQjRpcVdsR0ZZZFhudS9PZm5qZ0NLcAoyc3NrNndhd25hTEt3QWxVZ3EyMgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
                },
                "kubelet_key": {
                    "sensitive": false,
                    "type": "string",
                    "value": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBbXMycGRSalU4UUM0bmRsMGUyc09UOE5ZY0xBak0rMC9BdnJXZVd0bjljVDFaRTl2CitkcTlCRXBTbDI1R0Zkd2ZkM0cvU1VldnhDeDNFQysxM1lEK3oweHdKa0lhbnI3OUJTeFQ2aWZCMWR0bVNxR3UKVmRpa3duVmhFYmNLN3l5U1RtL3h5UkViNTJyMzVFQ1lZZldPSTZldjgzME9PTXhHOXAremVJbUpoSll4bWU0ego0WVZQOG9oeHpxWjNwZG9pUk5uckdtaWxXQWJnMzBxZmk0MytNalRMNDNVR2EvYSt5YkZiME14eW0rT3Zrb1o0CmNGeUhGWW9BTnB0NytFTVV2bWdKcmsyZEltb1B2SjFEUUswQVVzVHVISnc0YkdXUGJkc0l2bDNodEdvaDFaZVcKZGxKQzJhQ1paRHNuL1hwVERuamxzVlhjbmtPMFhacU9DVVlRK1FJREFRQUJBb0lCQUFiNjNQZ3RyWFJNYndhWApCbnlHSURnU2U4dGc5Y1ZpbmlPNVFiQnAybDhuaVZVRGkrMzlJZWF1bnppNnZTaEJLNTRNSCs3aTc1YnQxbFNCCmdqYkJtVHVwbTZqdDlCdFNTMEJQZGwwcGU4RHp5cEgwNWxKeW1VTTNYYkFaeThGckJoSEpWR0tYaGVXU1dpa04KakpGbUxBbUpoeEo0Z2dxbmswK05kZDhxZkd2Zzg5bU9mQ04vSGpacEdUOEhvVVdhSFlEL05XdGtqL3VFdlhCaQorMy8wdElTNnI2RjdGZTY1T2RiZU1NNFJrcFIySXdNR1dVcCtoWU4wR1dIR1FmRWNTa1hxdy9Cem5LOXJMdXpCCjF0K1RNR3ArZEx2NnBUMU5ON3VuOXZBWmRxNnk3ZStnaVFvWE9UaG5xUmpxNElsNFRsejlTenBBTnlwL2VFZVIKZFR3OE4wMENnWUVBeE9tNzZSU3M3TzZOdjVOL05KNksvNTBOa05UVk9oVk1sd0RCb0ErNmozbFkyWmVSMUY4UQoyeVlhRVdOZTNVQW01d0hHRnQyQkdDL2g5Zm9vanJnNUpUc0d3OVYzNEIzYStIU3JQRDAvVEJLTzlVMkJrYXExCjlaVFNlbnRIbERhTHM4K1M4ZVMzQUZ3RUJhVkJEakYwTFVSOVVPV215RnJOZExwUUFJSGpxOHNDZ1lFQXlVRXcKMkloNFArSXFYNzdZa3JYdFo0VFMwR01JVnozUVRBWXRMVkZicWpPRGRwSC9mUmRIdkV5eUZxOW8yVnkzQmxJVgpyK2RBOTFpUXFkTWllQzFraFRKZi9GMFRVb3NjY2luOXF3OWc0aHRuS05vL01RYnozVmgvR3NaalFHVmlxY0IvCmJqSWRSTVo2NjRxbkoxNUdHTnJuNVpPdVEycW15RUVvc2ttcHBjc0NnWUIxU0NtdHg2eS9hYzV2Zm5CVGJPS3AKSUdmR0RaMzZmRmtqejBXRUNobzUvaktYVnhsNmZpelIrajJvZ2FFczhscTVXR3NkajB5bWxVNW1iVnJldG9jQwp6OGRWdUwwdmRWaklodVMrZWxSTEFQcTR6RE1TQ2JWYTBnc1MvSDVEbnNGU2xaMldDWDJkN3pCT0ZJRk03Tk9mCmFwMmhJMGRWS2hBWktDY2lSanJPUlFLQmdRQ254RmhicVNmVTJVeEpsR1lscHRMSXdNaWNQbkh0aC9IajdpSXEKN085azZweGtjMEJ2bnNDR0Q4bEZiK1FQam1Ka09ua3BzYlZPZTkzY004MUFNVmJpVWlRQjAvVVBramVjVTdUSwpySDh1L1hqNWJUWFFRT041V1JSYjFaVlhVU3oySlNvVlNtRnJ1NmtzUU9FbXlFZlc0R1QvMUNRb3Z2ZFphRGZzCnA4dHNFUUtCZ0FFTmh6dDdpNVlCalk3RjdJbUZCZkZ1dFQzMnJYa05KVmhzQWZWRW5KY2M2SEZOcVBXSUVNWjEKWW1ScG5oM0tuWW9MUzFVUHVOZ0VUVWRHZjZlODkzVGtjZlFHaTZwbnRta09jMDVPRGN0dkwyYTBua1cxSnp0ZwpoNVhGRDd6aWp2UzRtVUJ6bDNTVzMwNUVZMGxHL0YyeXZtcFg2WUFuYkMxSGhmWTVlbk9VCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
                },
                "server": {
                    "sensitive": false,
                    "type": "string",
                    "value": "https://steve:443"
                },
                "user-kubeconfig": {
                    "sensitive": false,
                    "type": "string",
                    "value": "apiVersion: v1\nkind: Config\nclusters:\n- name: steve-cluster\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRQXhKSU1wcFRaaUJuY0hqRG1hbnZ1REFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURZeApOalV4TkRCYUZ3MHhPVEEwTURZeE5qVXhOREJhTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXV6NnoKV0hnMjhBVWViYkp1K2FQOC9WaXZLNUoyMXk5TkdRQnJjNko3VmtxZjZ1QTE3S3ZqMzFYM3ppbDdrRG9EOTQ3cwo3akplUXQybjc1dERvVGpTUFFpQkIvNmxRQVVtRG1HM0RpOStLc0lSQ0pHa3JzdHFYZU0vKzRScXNQSTZZRUgwCkI1SGorUzJFcVk5VGtQcXJNeEhhS3RKMG5Ca3NPMnU0UkZJRElVTkhjUnY5d0NMemJBNTlhb2p6dGpFR0g1QUQKdVFaV3lMdnpNZk9WZ1JlSmNYNy9IUWt6TldLMDlQRGpjazZ0WC9RMC82VW0ySDNIU1JKRDl1TVNwL2I0RUE1SgpoQlhDZVh3MmVoeE9FaFJDMXJmelMxNk9uWTdaeDBHdk5uUU1XMlRSZTVqS2FjYmlnbGZlSE42Qnh0UmM5ZWhPCjRTazg3dFJXdWZvdFpWYjYrUUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVbXZRQ201bmZEdm40aWkzSTJwNFJXUWRqSDJ3d0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQk5mNjNpNnNGVnJ3Y0tNU3k5bXpBNXllS2ZZMDZGZXFjUmp1U2dFdUx3VDJYaDZ5aGV5Cllvd3BWQ0tncXNSRWVjUjFvbWd6bkRqbnk0MUdFd2p4cVl1REdtWWl0d1RTOWg1OW9ZRldoUmw4OXk3aERDVnAKOTVjL05kUHVyM25pMUtqNzVjY2V5cFJla2lhUjJYNGhCY2xDcERWMm8wc29sM3QzMlFWSmtBQWhhVHFuOG9FdwpQc3V6RzFmZ1Z6UkRTTTgvRmFBNjdKSk9BRnEzRVFQUk1HZVMzd3IyRFpPVUpFTWMxb01PbHRFc3d1djVuNmFxCjZicGNpYkdCVmJBRDE1b04wa2xuQUZuU3F6MzIzOUFtTHJPbjNBc00zUUgxOU9pemM2K3hObld2TTRrN1FoUmcKVmU5TW9LcjY2RXVtWHNaL0ZFNzRmSU4vbG53S0dnV3JoQU09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: steve-user\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQU5EMVRBVDhLc2xlYjV2YjZhTE0yeFF3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBMgpNVFkxTVRReFdoY05NVGt3TkRBMk1UWTFNVFF4V2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFKck5xWFVZMVBFQXVKM1pkSHRyRGsvRFdIQ3dJelB0UHdMNjFubHJaL1hFOVdSUGIvbmF2UVJLVXBkdQpSaFhjSDNkeHYwbEhyOFFzZHhBdnRkMkEvczlNY0NaQ0dwNisvUVVzVStvbndkWGJaa3FocmxYWXBNSjFZUkczCkN1OHNrazV2OGNrUkcrZHE5K1JBbUdIMWppT25yL045RGpqTVJ2YWZzM2lKaVlTV01abnVNK0dGVC9LSWNjNm0KZDZYYUlrVFo2eHBvcFZnRzROOUtuNHVOL2pJMHkrTjFCbXYydnNteFc5RE1jcHZqcjVLR2VIQmNoeFdLQURhYgplL2hERkw1b0NhNU5uU0pxRDd5ZFEwQ3RBRkxFN2h5Y09HeGxqMjNiQ0w1ZDRiUnFJZFdYbG5aU1F0bWdtV1E3CkovMTZVdzU0NWJGVjNKNUR0RjJhamdsR0VQa0NBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZKcjBBcHVaM3c3NStJb3R5TnFlRVZrSFl4OXNNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJBClpXcVpOUEZjTUEzYUEvQVVOdjBKN2hveTZVWjB5bDArVkVuemxkUmNGRXRRUTloMnl1aDUvY042eWZJMnZKV0sKK3hRNitESzB2WWZ4d1BWNU5MOFZuTExpbVkvVWVyc3hnWFNZcS9qVlFIajRkU3c5V09KWis3dmh4bncremZqeQpCWmQ0WHl6bXR6MEoyODUwQjVrZW14QytjUFcwa3NnR0p1dWgyMlFobkU1ZENuTjhNalN0QUdaUUVUT1p4REZvCi9jV0t5ZER2LzhqcnVCbWZXTG5yYmNDOVNQZVpHZVRBSE1VMmlGVXIrQnVIamExc0RMZVB2aTNZR3ZCSDVrNnkKQWNCQWxkaFNqRDRnVm5QcU9MbzhzVUU0dGErZTZpQi96c3hyNXl1MUlIQjRpcVdsR0ZZZFhudS9PZm5qZ0NLcAoyc3NrNndhd25hTEt3QWxVZ3EyMgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBbXMycGRSalU4UUM0bmRsMGUyc09UOE5ZY0xBak0rMC9BdnJXZVd0bjljVDFaRTl2CitkcTlCRXBTbDI1R0Zkd2ZkM0cvU1VldnhDeDNFQysxM1lEK3oweHdKa0lhbnI3OUJTeFQ2aWZCMWR0bVNxR3UKVmRpa3duVmhFYmNLN3l5U1RtL3h5UkViNTJyMzVFQ1lZZldPSTZldjgzME9PTXhHOXAremVJbUpoSll4bWU0ego0WVZQOG9oeHpxWjNwZG9pUk5uckdtaWxXQWJnMzBxZmk0MytNalRMNDNVR2EvYSt5YkZiME14eW0rT3Zrb1o0CmNGeUhGWW9BTnB0NytFTVV2bWdKcmsyZEltb1B2SjFEUUswQVVzVHVISnc0YkdXUGJkc0l2bDNodEdvaDFaZVcKZGxKQzJhQ1paRHNuL1hwVERuamxzVlhjbmtPMFhacU9DVVlRK1FJREFRQUJBb0lCQUFiNjNQZ3RyWFJNYndhWApCbnlHSURnU2U4dGc5Y1ZpbmlPNVFiQnAybDhuaVZVRGkrMzlJZWF1bnppNnZTaEJLNTRNSCs3aTc1YnQxbFNCCmdqYkJtVHVwbTZqdDlCdFNTMEJQZGwwcGU4RHp5cEgwNWxKeW1VTTNYYkFaeThGckJoSEpWR0tYaGVXU1dpa04KakpGbUxBbUpoeEo0Z2dxbmswK05kZDhxZkd2Zzg5bU9mQ04vSGpacEdUOEhvVVdhSFlEL05XdGtqL3VFdlhCaQorMy8wdElTNnI2RjdGZTY1T2RiZU1NNFJrcFIySXdNR1dVcCtoWU4wR1dIR1FmRWNTa1hxdy9Cem5LOXJMdXpCCjF0K1RNR3ArZEx2NnBUMU5ON3VuOXZBWmRxNnk3ZStnaVFvWE9UaG5xUmpxNElsNFRsejlTenBBTnlwL2VFZVIKZFR3OE4wMENnWUVBeE9tNzZSU3M3TzZOdjVOL05KNksvNTBOa05UVk9oVk1sd0RCb0ErNmozbFkyWmVSMUY4UQoyeVlhRVdOZTNVQW01d0hHRnQyQkdDL2g5Zm9vanJnNUpUc0d3OVYzNEIzYStIU3JQRDAvVEJLTzlVMkJrYXExCjlaVFNlbnRIbERhTHM4K1M4ZVMzQUZ3RUJhVkJEakYwTFVSOVVPV215RnJOZExwUUFJSGpxOHNDZ1lFQXlVRXcKMkloNFArSXFYNzdZa3JYdFo0VFMwR01JVnozUVRBWXRMVkZicWpPRGRwSC9mUmRIdkV5eUZxOW8yVnkzQmxJVgpyK2RBOTFpUXFkTWllQzFraFRKZi9GMFRVb3NjY2luOXF3OWc0aHRuS05vL01RYnozVmgvR3NaalFHVmlxY0IvCmJqSWRSTVo2NjRxbkoxNUdHTnJuNVpPdVEycW15RUVvc2ttcHBjc0NnWUIxU0NtdHg2eS9hYzV2Zm5CVGJPS3AKSUdmR0RaMzZmRmtqejBXRUNobzUvaktYVnhsNmZpelIrajJvZ2FFczhscTVXR3NkajB5bWxVNW1iVnJldG9jQwp6OGRWdUwwdmRWaklodVMrZWxSTEFQcTR6RE1TQ2JWYTBnc1MvSDVEbnNGU2xaMldDWDJkN3pCT0ZJRk03Tk9mCmFwMmhJMGRWS2hBWktDY2lSanJPUlFLQmdRQ254RmhicVNmVTJVeEpsR1lscHRMSXdNaWNQbkh0aC9IajdpSXEKN085azZweGtjMEJ2bnNDR0Q4bEZiK1FQam1Ka09ua3BzYlZPZTkzY004MUFNVmJpVWlRQjAvVVBramVjVTdUSwpySDh1L1hqNWJUWFFRT041V1JSYjFaVlhVU3oySlNvVlNtRnJ1NmtzUU9FbXlFZlc0R1QvMUNRb3Z2ZFphRGZzCnA4dHNFUUtCZ0FFTmh6dDdpNVlCalk3RjdJbUZCZkZ1dFQzMnJYa05KVmhzQWZWRW5KY2M2SEZOcVBXSUVNWjEKWW1ScG5oM0tuWW9MUzFVUHVOZ0VUVWRHZjZlODkzVGtjZlFHaTZwbnRta09jMDVPRGN0dkwyYTBua1cxSnp0ZwpoNVhGRDd6aWp2UzRtVUJ6bDNTVzMwNUVZMGxHL0YyeXZtcFg2WUFuYkMxSGhmWTVlbk9VCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\ncontexts:\n- name: steve-context\n  context:\n    cluster: steve-cluster\n    user: steve-user\n"
                }
            },
            "resources": {
                "data.template_file.kubeconfig": {
                    "type": "template_file",
                    "depends_on": [
                        "tls_locally_signed_cert.kubelet",
                        "tls_private_key.kubelet",
                        "tls_self_signed_cert.kube-ca.*"
                    ],
                    "primary": {
                        "id": "d3eefeac5f338962ccaa681262f92bb3d8ae72966bbe7a5850c169c96bcbed48",
                        "attributes": {
                            "id": "d3eefeac5f338962ccaa681262f92bb3d8ae72966bbe7a5850c169c96bcbed48",
                            "rendered": "apiVersion: v1\nkind: Config\nclusters:\n- name: local\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRQXhKSU1wcFRaaUJuY0hqRG1hbnZ1REFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURZeApOalV4TkRCYUZ3MHhPVEEwTURZeE5qVXhOREJhTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXV6NnoKV0hnMjhBVWViYkp1K2FQOC9WaXZLNUoyMXk5TkdRQnJjNko3VmtxZjZ1QTE3S3ZqMzFYM3ppbDdrRG9EOTQ3cwo3akplUXQybjc1dERvVGpTUFFpQkIvNmxRQVVtRG1HM0RpOStLc0lSQ0pHa3JzdHFYZU0vKzRScXNQSTZZRUgwCkI1SGorUzJFcVk5VGtQcXJNeEhhS3RKMG5Ca3NPMnU0UkZJRElVTkhjUnY5d0NMemJBNTlhb2p6dGpFR0g1QUQKdVFaV3lMdnpNZk9WZ1JlSmNYNy9IUWt6TldLMDlQRGpjazZ0WC9RMC82VW0ySDNIU1JKRDl1TVNwL2I0RUE1SgpoQlhDZVh3MmVoeE9FaFJDMXJmelMxNk9uWTdaeDBHdk5uUU1XMlRSZTVqS2FjYmlnbGZlSE42Qnh0UmM5ZWhPCjRTazg3dFJXdWZvdFpWYjYrUUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVbXZRQ201bmZEdm40aWkzSTJwNFJXUWRqSDJ3d0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQk5mNjNpNnNGVnJ3Y0tNU3k5bXpBNXllS2ZZMDZGZXFjUmp1U2dFdUx3VDJYaDZ5aGV5Cllvd3BWQ0tncXNSRWVjUjFvbWd6bkRqbnk0MUdFd2p4cVl1REdtWWl0d1RTOWg1OW9ZRldoUmw4OXk3aERDVnAKOTVjL05kUHVyM25pMUtqNzVjY2V5cFJla2lhUjJYNGhCY2xDcERWMm8wc29sM3QzMlFWSmtBQWhhVHFuOG9FdwpQc3V6RzFmZ1Z6UkRTTTgvRmFBNjdKSk9BRnEzRVFQUk1HZVMzd3IyRFpPVUpFTWMxb01PbHRFc3d1djVuNmFxCjZicGNpYkdCVmJBRDE1b04wa2xuQUZuU3F6MzIzOUFtTHJPbjNBc00zUUgxOU9pemM2K3hObld2TTRrN1FoUmcKVmU5TW9LcjY2RXVtWHNaL0ZFNzRmSU4vbG53S0dnV3JoQU09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: kubelet\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQU5EMVRBVDhLc2xlYjV2YjZhTE0yeFF3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBMgpNVFkxTVRReFdoY05NVGt3TkRBMk1UWTFNVFF4V2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFKck5xWFVZMVBFQXVKM1pkSHRyRGsvRFdIQ3dJelB0UHdMNjFubHJaL1hFOVdSUGIvbmF2UVJLVXBkdQpSaFhjSDNkeHYwbEhyOFFzZHhBdnRkMkEvczlNY0NaQ0dwNisvUVVzVStvbndkWGJaa3FocmxYWXBNSjFZUkczCkN1OHNrazV2OGNrUkcrZHE5K1JBbUdIMWppT25yL045RGpqTVJ2YWZzM2lKaVlTV01abnVNK0dGVC9LSWNjNm0KZDZYYUlrVFo2eHBvcFZnRzROOUtuNHVOL2pJMHkrTjFCbXYydnNteFc5RE1jcHZqcjVLR2VIQmNoeFdLQURhYgplL2hERkw1b0NhNU5uU0pxRDd5ZFEwQ3RBRkxFN2h5Y09HeGxqMjNiQ0w1ZDRiUnFJZFdYbG5aU1F0bWdtV1E3CkovMTZVdzU0NWJGVjNKNUR0RjJhamdsR0VQa0NBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZKcjBBcHVaM3c3NStJb3R5TnFlRVZrSFl4OXNNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJBClpXcVpOUEZjTUEzYUEvQVVOdjBKN2hveTZVWjB5bDArVkVuemxkUmNGRXRRUTloMnl1aDUvY042eWZJMnZKV0sKK3hRNitESzB2WWZ4d1BWNU5MOFZuTExpbVkvVWVyc3hnWFNZcS9qVlFIajRkU3c5V09KWis3dmh4bncremZqeQpCWmQ0WHl6bXR6MEoyODUwQjVrZW14QytjUFcwa3NnR0p1dWgyMlFobkU1ZENuTjhNalN0QUdaUUVUT1p4REZvCi9jV0t5ZER2LzhqcnVCbWZXTG5yYmNDOVNQZVpHZVRBSE1VMmlGVXIrQnVIamExc0RMZVB2aTNZR3ZCSDVrNnkKQWNCQWxkaFNqRDRnVm5QcU9MbzhzVUU0dGErZTZpQi96c3hyNXl1MUlIQjRpcVdsR0ZZZFhudS9PZm5qZ0NLcAoyc3NrNndhd25hTEt3QWxVZ3EyMgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBbXMycGRSalU4UUM0bmRsMGUyc09UOE5ZY0xBak0rMC9BdnJXZVd0bjljVDFaRTl2CitkcTlCRXBTbDI1R0Zkd2ZkM0cvU1VldnhDeDNFQysxM1lEK3oweHdKa0lhbnI3OUJTeFQ2aWZCMWR0bVNxR3UKVmRpa3duVmhFYmNLN3l5U1RtL3h5UkViNTJyMzVFQ1lZZldPSTZldjgzME9PTXhHOXAremVJbUpoSll4bWU0ego0WVZQOG9oeHpxWjNwZG9pUk5uckdtaWxXQWJnMzBxZmk0MytNalRMNDNVR2EvYSt5YkZiME14eW0rT3Zrb1o0CmNGeUhGWW9BTnB0NytFTVV2bWdKcmsyZEltb1B2SjFEUUswQVVzVHVISnc0YkdXUGJkc0l2bDNodEdvaDFaZVcKZGxKQzJhQ1paRHNuL1hwVERuamxzVlhjbmtPMFhacU9DVVlRK1FJREFRQUJBb0lCQUFiNjNQZ3RyWFJNYndhWApCbnlHSURnU2U4dGc5Y1ZpbmlPNVFiQnAybDhuaVZVRGkrMzlJZWF1bnppNnZTaEJLNTRNSCs3aTc1YnQxbFNCCmdqYkJtVHVwbTZqdDlCdFNTMEJQZGwwcGU4RHp5cEgwNWxKeW1VTTNYYkFaeThGckJoSEpWR0tYaGVXU1dpa04KakpGbUxBbUpoeEo0Z2dxbmswK05kZDhxZkd2Zzg5bU9mQ04vSGpacEdUOEhvVVdhSFlEL05XdGtqL3VFdlhCaQorMy8wdElTNnI2RjdGZTY1T2RiZU1NNFJrcFIySXdNR1dVcCtoWU4wR1dIR1FmRWNTa1hxdy9Cem5LOXJMdXpCCjF0K1RNR3ArZEx2NnBUMU5ON3VuOXZBWmRxNnk3ZStnaVFvWE9UaG5xUmpxNElsNFRsejlTenBBTnlwL2VFZVIKZFR3OE4wMENnWUVBeE9tNzZSU3M3TzZOdjVOL05KNksvNTBOa05UVk9oVk1sd0RCb0ErNmozbFkyWmVSMUY4UQoyeVlhRVdOZTNVQW01d0hHRnQyQkdDL2g5Zm9vanJnNUpUc0d3OVYzNEIzYStIU3JQRDAvVEJLTzlVMkJrYXExCjlaVFNlbnRIbERhTHM4K1M4ZVMzQUZ3RUJhVkJEakYwTFVSOVVPV215RnJOZExwUUFJSGpxOHNDZ1lFQXlVRXcKMkloNFArSXFYNzdZa3JYdFo0VFMwR01JVnozUVRBWXRMVkZicWpPRGRwSC9mUmRIdkV5eUZxOW8yVnkzQmxJVgpyK2RBOTFpUXFkTWllQzFraFRKZi9GMFRVb3NjY2luOXF3OWc0aHRuS05vL01RYnozVmgvR3NaalFHVmlxY0IvCmJqSWRSTVo2NjRxbkoxNUdHTnJuNVpPdVEycW15RUVvc2ttcHBjc0NnWUIxU0NtdHg2eS9hYzV2Zm5CVGJPS3AKSUdmR0RaMzZmRmtqejBXRUNobzUvaktYVnhsNmZpelIrajJvZ2FFczhscTVXR3NkajB5bWxVNW1iVnJldG9jQwp6OGRWdUwwdmRWaklodVMrZWxSTEFQcTR6RE1TQ2JWYTBnc1MvSDVEbnNGU2xaMldDWDJkN3pCT0ZJRk03Tk9mCmFwMmhJMGRWS2hBWktDY2lSanJPUlFLQmdRQ254RmhicVNmVTJVeEpsR1lscHRMSXdNaWNQbkh0aC9IajdpSXEKN085azZweGtjMEJ2bnNDR0Q4bEZiK1FQam1Ka09ua3BzYlZPZTkzY004MUFNVmJpVWlRQjAvVVBramVjVTdUSwpySDh1L1hqNWJUWFFRT041V1JSYjFaVlhVU3oySlNvVlNtRnJ1NmtzUU9FbXlFZlc0R1QvMUNRb3Z2ZFphRGZzCnA4dHNFUUtCZ0FFTmh6dDdpNVlCalk3RjdJbUZCZkZ1dFQzMnJYa05KVmhzQWZWRW5KY2M2SEZOcVBXSUVNWjEKWW1ScG5oM0tuWW9MUzFVUHVOZ0VUVWRHZjZlODkzVGtjZlFHaTZwbnRta09jMDVPRGN0dkwyYTBua1cxSnp0ZwpoNVhGRDd6aWp2UzRtVUJ6bDNTVzMwNUVZMGxHL0YyeXZtcFg2WUFuYkMxSGhmWTVlbk9VCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\ncontexts:\n- context:\n    cluster: local\n    user: kubelet\n",
                            "template": "apiVersion: v1\nkind: Config\nclusters:\n- name: local\n  cluster:\n    server: ${server}\n    certificate-authority-data: ${ca_cert}\nusers:\n- name: kubelet\n  user:\n    client-certificate-data: ${kubelet_cert}\n    client-key-data: ${kubelet_key}\ncontexts:\n- context:\n    cluster: local\n    user: kubelet\n",
                            "vars.%": "4",
                            "vars.ca_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRQXhKSU1wcFRaaUJuY0hqRG1hbnZ1REFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURZeApOalV4TkRCYUZ3MHhPVEEwTURZeE5qVXhOREJhTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXV6NnoKV0hnMjhBVWViYkp1K2FQOC9WaXZLNUoyMXk5TkdRQnJjNko3VmtxZjZ1QTE3S3ZqMzFYM3ppbDdrRG9EOTQ3cwo3akplUXQybjc1dERvVGpTUFFpQkIvNmxRQVVtRG1HM0RpOStLc0lSQ0pHa3JzdHFYZU0vKzRScXNQSTZZRUgwCkI1SGorUzJFcVk5VGtQcXJNeEhhS3RKMG5Ca3NPMnU0UkZJRElVTkhjUnY5d0NMemJBNTlhb2p6dGpFR0g1QUQKdVFaV3lMdnpNZk9WZ1JlSmNYNy9IUWt6TldLMDlQRGpjazZ0WC9RMC82VW0ySDNIU1JKRDl1TVNwL2I0RUE1SgpoQlhDZVh3MmVoeE9FaFJDMXJmelMxNk9uWTdaeDBHdk5uUU1XMlRSZTVqS2FjYmlnbGZlSE42Qnh0UmM5ZWhPCjRTazg3dFJXdWZvdFpWYjYrUUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVbXZRQ201bmZEdm40aWkzSTJwNFJXUWRqSDJ3d0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQk5mNjNpNnNGVnJ3Y0tNU3k5bXpBNXllS2ZZMDZGZXFjUmp1U2dFdUx3VDJYaDZ5aGV5Cllvd3BWQ0tncXNSRWVjUjFvbWd6bkRqbnk0MUdFd2p4cVl1REdtWWl0d1RTOWg1OW9ZRldoUmw4OXk3aERDVnAKOTVjL05kUHVyM25pMUtqNzVjY2V5cFJla2lhUjJYNGhCY2xDcERWMm8wc29sM3QzMlFWSmtBQWhhVHFuOG9FdwpQc3V6RzFmZ1Z6UkRTTTgvRmFBNjdKSk9BRnEzRVFQUk1HZVMzd3IyRFpPVUpFTWMxb01PbHRFc3d1djVuNmFxCjZicGNpYkdCVmJBRDE1b04wa2xuQUZuU3F6MzIzOUFtTHJPbjNBc00zUUgxOU9pemM2K3hObld2TTRrN1FoUmcKVmU5TW9LcjY2RXVtWHNaL0ZFNzRmSU4vbG53S0dnV3JoQU09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
                            "vars.kubelet_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQU5EMVRBVDhLc2xlYjV2YjZhTE0yeFF3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBMgpNVFkxTVRReFdoY05NVGt3TkRBMk1UWTFNVFF4V2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFKck5xWFVZMVBFQXVKM1pkSHRyRGsvRFdIQ3dJelB0UHdMNjFubHJaL1hFOVdSUGIvbmF2UVJLVXBkdQpSaFhjSDNkeHYwbEhyOFFzZHhBdnRkMkEvczlNY0NaQ0dwNisvUVVzVStvbndkWGJaa3FocmxYWXBNSjFZUkczCkN1OHNrazV2OGNrUkcrZHE5K1JBbUdIMWppT25yL045RGpqTVJ2YWZzM2lKaVlTV01abnVNK0dGVC9LSWNjNm0KZDZYYUlrVFo2eHBvcFZnRzROOUtuNHVOL2pJMHkrTjFCbXYydnNteFc5RE1jcHZqcjVLR2VIQmNoeFdLQURhYgplL2hERkw1b0NhNU5uU0pxRDd5ZFEwQ3RBRkxFN2h5Y09HeGxqMjNiQ0w1ZDRiUnFJZFdYbG5aU1F0bWdtV1E3CkovMTZVdzU0NWJGVjNKNUR0RjJhamdsR0VQa0NBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZKcjBBcHVaM3c3NStJb3R5TnFlRVZrSFl4OXNNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJBClpXcVpOUEZjTUEzYUEvQVVOdjBKN2hveTZVWjB5bDArVkVuemxkUmNGRXRRUTloMnl1aDUvY042eWZJMnZKV0sKK3hRNitESzB2WWZ4d1BWNU5MOFZuTExpbVkvVWVyc3hnWFNZcS9qVlFIajRkU3c5V09KWis3dmh4bncremZqeQpCWmQ0WHl6bXR6MEoyODUwQjVrZW14QytjUFcwa3NnR0p1dWgyMlFobkU1ZENuTjhNalN0QUdaUUVUT1p4REZvCi9jV0t5ZER2LzhqcnVCbWZXTG5yYmNDOVNQZVpHZVRBSE1VMmlGVXIrQnVIamExc0RMZVB2aTNZR3ZCSDVrNnkKQWNCQWxkaFNqRDRnVm5QcU9MbzhzVUU0dGErZTZpQi96c3hyNXl1MUlIQjRpcVdsR0ZZZFhudS9PZm5qZ0NLcAoyc3NrNndhd25hTEt3QWxVZ3EyMgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
                            "vars.kubelet_key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBbXMycGRSalU4UUM0bmRsMGUyc09UOE5ZY0xBak0rMC9BdnJXZVd0bjljVDFaRTl2CitkcTlCRXBTbDI1R0Zkd2ZkM0cvU1VldnhDeDNFQysxM1lEK3oweHdKa0lhbnI3OUJTeFQ2aWZCMWR0bVNxR3UKVmRpa3duVmhFYmNLN3l5U1RtL3h5UkViNTJyMzVFQ1lZZldPSTZldjgzME9PTXhHOXAremVJbUpoSll4bWU0ego0WVZQOG9oeHpxWjNwZG9pUk5uckdtaWxXQWJnMzBxZmk0MytNalRMNDNVR2EvYSt5YkZiME14eW0rT3Zrb1o0CmNGeUhGWW9BTnB0NytFTVV2bWdKcmsyZEltb1B2SjFEUUswQVVzVHVISnc0YkdXUGJkc0l2bDNodEdvaDFaZVcKZGxKQzJhQ1paRHNuL1hwVERuamxzVlhjbmtPMFhacU9DVVlRK1FJREFRQUJBb0lCQUFiNjNQZ3RyWFJNYndhWApCbnlHSURnU2U4dGc5Y1ZpbmlPNVFiQnAybDhuaVZVRGkrMzlJZWF1bnppNnZTaEJLNTRNSCs3aTc1YnQxbFNCCmdqYkJtVHVwbTZqdDlCdFNTMEJQZGwwcGU4RHp5cEgwNWxKeW1VTTNYYkFaeThGckJoSEpWR0tYaGVXU1dpa04KakpGbUxBbUpoeEo0Z2dxbmswK05kZDhxZkd2Zzg5bU9mQ04vSGpacEdUOEhvVVdhSFlEL05XdGtqL3VFdlhCaQorMy8wdElTNnI2RjdGZTY1T2RiZU1NNFJrcFIySXdNR1dVcCtoWU4wR1dIR1FmRWNTa1hxdy9Cem5LOXJMdXpCCjF0K1RNR3ArZEx2NnBUMU5ON3VuOXZBWmRxNnk3ZStnaVFvWE9UaG5xUmpxNElsNFRsejlTenBBTnlwL2VFZVIKZFR3OE4wMENnWUVBeE9tNzZSU3M3TzZOdjVOL05KNksvNTBOa05UVk9oVk1sd0RCb0ErNmozbFkyWmVSMUY4UQoyeVlhRVdOZTNVQW01d0hHRnQyQkdDL2g5Zm9vanJnNUpUc0d3OVYzNEIzYStIU3JQRDAvVEJLTzlVMkJrYXExCjlaVFNlbnRIbERhTHM4K1M4ZVMzQUZ3RUJhVkJEakYwTFVSOVVPV215RnJOZExwUUFJSGpxOHNDZ1lFQXlVRXcKMkloNFArSXFYNzdZa3JYdFo0VFMwR01JVnozUVRBWXRMVkZicWpPRGRwSC9mUmRIdkV5eUZxOW8yVnkzQmxJVgpyK2RBOTFpUXFkTWllQzFraFRKZi9GMFRVb3NjY2luOXF3OWc0aHRuS05vL01RYnozVmgvR3NaalFHVmlxY0IvCmJqSWRSTVo2NjRxbkoxNUdHTnJuNVpPdVEycW15RUVvc2ttcHBjc0NnWUIxU0NtdHg2eS9hYzV2Zm5CVGJPS3AKSUdmR0RaMzZmRmtqejBXRUNobzUvaktYVnhsNmZpelIrajJvZ2FFczhscTVXR3NkajB5bWxVNW1iVnJldG9jQwp6OGRWdUwwdmRWaklodVMrZWxSTEFQcTR6RE1TQ2JWYTBnc1MvSDVEbnNGU2xaMldDWDJkN3pCT0ZJRk03Tk9mCmFwMmhJMGRWS2hBWktDY2lSanJPUlFLQmdRQ254RmhicVNmVTJVeEpsR1lscHRMSXdNaWNQbkh0aC9IajdpSXEKN085azZweGtjMEJ2bnNDR0Q4bEZiK1FQam1Ka09ua3BzYlZPZTkzY004MUFNVmJpVWlRQjAvVVBramVjVTdUSwpySDh1L1hqNWJUWFFRT041V1JSYjFaVlhVU3oySlNvVlNtRnJ1NmtzUU9FbXlFZlc0R1QvMUNRb3Z2ZFphRGZzCnA4dHNFUUtCZ0FFTmh6dDdpNVlCalk3RjdJbUZCZkZ1dFQzMnJYa05KVmhzQWZWRW5KY2M2SEZOcVBXSUVNWjEKWW1ScG5oM0tuWW9MUzFVUHVOZ0VUVWRHZjZlODkzVGtjZlFHaTZwbnRta09jMDVPRGN0dkwyYTBua1cxSnp0ZwpoNVhGRDd6aWp2UzRtVUJ6bDNTVzMwNUVZMGxHL0YyeXZtcFg2WUFuYkMxSGhmWTVlbk9VCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
                            "vars.server": "https://steve:443"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "data.template_file.user-kubeconfig": {
                    "type": "template_file",
                    "depends_on": [
                        "tls_locally_signed_cert.kubelet",
                        "tls_private_key.kubelet",
                        "tls_self_signed_cert.kube-ca.*"
                    ],
                    "primary": {
                        "id": "2c4dca5352ae0037c11fd01c657f241598bf122c88e35213d2c55857b1161e6c",
                        "attributes": {
                            "id": "2c4dca5352ae0037c11fd01c657f241598bf122c88e35213d2c55857b1161e6c",
                            "rendered": "apiVersion: v1\nkind: Config\nclusters:\n- name: steve-cluster\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRQXhKSU1wcFRaaUJuY0hqRG1hbnZ1REFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURZeApOalV4TkRCYUZ3MHhPVEEwTURZeE5qVXhOREJhTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXV6NnoKV0hnMjhBVWViYkp1K2FQOC9WaXZLNUoyMXk5TkdRQnJjNko3VmtxZjZ1QTE3S3ZqMzFYM3ppbDdrRG9EOTQ3cwo3akplUXQybjc1dERvVGpTUFFpQkIvNmxRQVVtRG1HM0RpOStLc0lSQ0pHa3JzdHFYZU0vKzRScXNQSTZZRUgwCkI1SGorUzJFcVk5VGtQcXJNeEhhS3RKMG5Ca3NPMnU0UkZJRElVTkhjUnY5d0NMemJBNTlhb2p6dGpFR0g1QUQKdVFaV3lMdnpNZk9WZ1JlSmNYNy9IUWt6TldLMDlQRGpjazZ0WC9RMC82VW0ySDNIU1JKRDl1TVNwL2I0RUE1SgpoQlhDZVh3MmVoeE9FaFJDMXJmelMxNk9uWTdaeDBHdk5uUU1XMlRSZTVqS2FjYmlnbGZlSE42Qnh0UmM5ZWhPCjRTazg3dFJXdWZvdFpWYjYrUUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVbXZRQ201bmZEdm40aWkzSTJwNFJXUWRqSDJ3d0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQk5mNjNpNnNGVnJ3Y0tNU3k5bXpBNXllS2ZZMDZGZXFjUmp1U2dFdUx3VDJYaDZ5aGV5Cllvd3BWQ0tncXNSRWVjUjFvbWd6bkRqbnk0MUdFd2p4cVl1REdtWWl0d1RTOWg1OW9ZRldoUmw4OXk3aERDVnAKOTVjL05kUHVyM25pMUtqNzVjY2V5cFJla2lhUjJYNGhCY2xDcERWMm8wc29sM3QzMlFWSmtBQWhhVHFuOG9FdwpQc3V6RzFmZ1Z6UkRTTTgvRmFBNjdKSk9BRnEzRVFQUk1HZVMzd3IyRFpPVUpFTWMxb01PbHRFc3d1djVuNmFxCjZicGNpYkdCVmJBRDE1b04wa2xuQUZuU3F6MzIzOUFtTHJPbjNBc00zUUgxOU9pemM2K3hObld2TTRrN1FoUmcKVmU5TW9LcjY2RXVtWHNaL0ZFNzRmSU4vbG53S0dnV3JoQU09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: steve-user\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQU5EMVRBVDhLc2xlYjV2YjZhTE0yeFF3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBMgpNVFkxTVRReFdoY05NVGt3TkRBMk1UWTFNVFF4V2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFKck5xWFVZMVBFQXVKM1pkSHRyRGsvRFdIQ3dJelB0UHdMNjFubHJaL1hFOVdSUGIvbmF2UVJLVXBkdQpSaFhjSDNkeHYwbEhyOFFzZHhBdnRkMkEvczlNY0NaQ0dwNisvUVVzVStvbndkWGJaa3FocmxYWXBNSjFZUkczCkN1OHNrazV2OGNrUkcrZHE5K1JBbUdIMWppT25yL045RGpqTVJ2YWZzM2lKaVlTV01abnVNK0dGVC9LSWNjNm0KZDZYYUlrVFo2eHBvcFZnRzROOUtuNHVOL2pJMHkrTjFCbXYydnNteFc5RE1jcHZqcjVLR2VIQmNoeFdLQURhYgplL2hERkw1b0NhNU5uU0pxRDd5ZFEwQ3RBRkxFN2h5Y09HeGxqMjNiQ0w1ZDRiUnFJZFdYbG5aU1F0bWdtV1E3CkovMTZVdzU0NWJGVjNKNUR0RjJhamdsR0VQa0NBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZKcjBBcHVaM3c3NStJb3R5TnFlRVZrSFl4OXNNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJBClpXcVpOUEZjTUEzYUEvQVVOdjBKN2hveTZVWjB5bDArVkVuemxkUmNGRXRRUTloMnl1aDUvY042eWZJMnZKV0sKK3hRNitESzB2WWZ4d1BWNU5MOFZuTExpbVkvVWVyc3hnWFNZcS9qVlFIajRkU3c5V09KWis3dmh4bncremZqeQpCWmQ0WHl6bXR6MEoyODUwQjVrZW14QytjUFcwa3NnR0p1dWgyMlFobkU1ZENuTjhNalN0QUdaUUVUT1p4REZvCi9jV0t5ZER2LzhqcnVCbWZXTG5yYmNDOVNQZVpHZVRBSE1VMmlGVXIrQnVIamExc0RMZVB2aTNZR3ZCSDVrNnkKQWNCQWxkaFNqRDRnVm5QcU9MbzhzVUU0dGErZTZpQi96c3hyNXl1MUlIQjRpcVdsR0ZZZFhudS9PZm5qZ0NLcAoyc3NrNndhd25hTEt3QWxVZ3EyMgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBbXMycGRSalU4UUM0bmRsMGUyc09UOE5ZY0xBak0rMC9BdnJXZVd0bjljVDFaRTl2CitkcTlCRXBTbDI1R0Zkd2ZkM0cvU1VldnhDeDNFQysxM1lEK3oweHdKa0lhbnI3OUJTeFQ2aWZCMWR0bVNxR3UKVmRpa3duVmhFYmNLN3l5U1RtL3h5UkViNTJyMzVFQ1lZZldPSTZldjgzME9PTXhHOXAremVJbUpoSll4bWU0ego0WVZQOG9oeHpxWjNwZG9pUk5uckdtaWxXQWJnMzBxZmk0MytNalRMNDNVR2EvYSt5YkZiME14eW0rT3Zrb1o0CmNGeUhGWW9BTnB0NytFTVV2bWdKcmsyZEltb1B2SjFEUUswQVVzVHVISnc0YkdXUGJkc0l2bDNodEdvaDFaZVcKZGxKQzJhQ1paRHNuL1hwVERuamxzVlhjbmtPMFhacU9DVVlRK1FJREFRQUJBb0lCQUFiNjNQZ3RyWFJNYndhWApCbnlHSURnU2U4dGc5Y1ZpbmlPNVFiQnAybDhuaVZVRGkrMzlJZWF1bnppNnZTaEJLNTRNSCs3aTc1YnQxbFNCCmdqYkJtVHVwbTZqdDlCdFNTMEJQZGwwcGU4RHp5cEgwNWxKeW1VTTNYYkFaeThGckJoSEpWR0tYaGVXU1dpa04KakpGbUxBbUpoeEo0Z2dxbmswK05kZDhxZkd2Zzg5bU9mQ04vSGpacEdUOEhvVVdhSFlEL05XdGtqL3VFdlhCaQorMy8wdElTNnI2RjdGZTY1T2RiZU1NNFJrcFIySXdNR1dVcCtoWU4wR1dIR1FmRWNTa1hxdy9Cem5LOXJMdXpCCjF0K1RNR3ArZEx2NnBUMU5ON3VuOXZBWmRxNnk3ZStnaVFvWE9UaG5xUmpxNElsNFRsejlTenBBTnlwL2VFZVIKZFR3OE4wMENnWUVBeE9tNzZSU3M3TzZOdjVOL05KNksvNTBOa05UVk9oVk1sd0RCb0ErNmozbFkyWmVSMUY4UQoyeVlhRVdOZTNVQW01d0hHRnQyQkdDL2g5Zm9vanJnNUpUc0d3OVYzNEIzYStIU3JQRDAvVEJLTzlVMkJrYXExCjlaVFNlbnRIbERhTHM4K1M4ZVMzQUZ3RUJhVkJEakYwTFVSOVVPV215RnJOZExwUUFJSGpxOHNDZ1lFQXlVRXcKMkloNFArSXFYNzdZa3JYdFo0VFMwR01JVnozUVRBWXRMVkZicWpPRGRwSC9mUmRIdkV5eUZxOW8yVnkzQmxJVgpyK2RBOTFpUXFkTWllQzFraFRKZi9GMFRVb3NjY2luOXF3OWc0aHRuS05vL01RYnozVmgvR3NaalFHVmlxY0IvCmJqSWRSTVo2NjRxbkoxNUdHTnJuNVpPdVEycW15RUVvc2ttcHBjc0NnWUIxU0NtdHg2eS9hYzV2Zm5CVGJPS3AKSUdmR0RaMzZmRmtqejBXRUNobzUvaktYVnhsNmZpelIrajJvZ2FFczhscTVXR3NkajB5bWxVNW1iVnJldG9jQwp6OGRWdUwwdmRWaklodVMrZWxSTEFQcTR6RE1TQ2JWYTBnc1MvSDVEbnNGU2xaMldDWDJkN3pCT0ZJRk03Tk9mCmFwMmhJMGRWS2hBWktDY2lSanJPUlFLQmdRQ254RmhicVNmVTJVeEpsR1lscHRMSXdNaWNQbkh0aC9IajdpSXEKN085azZweGtjMEJ2bnNDR0Q4bEZiK1FQam1Ka09ua3BzYlZPZTkzY004MUFNVmJpVWlRQjAvVVBramVjVTdUSwpySDh1L1hqNWJUWFFRT041V1JSYjFaVlhVU3oySlNvVlNtRnJ1NmtzUU9FbXlFZlc0R1QvMUNRb3Z2ZFphRGZzCnA4dHNFUUtCZ0FFTmh6dDdpNVlCalk3RjdJbUZCZkZ1dFQzMnJYa05KVmhzQWZWRW5KY2M2SEZOcVBXSUVNWjEKWW1ScG5oM0tuWW9MUzFVUHVOZ0VUVWRHZjZlODkzVGtjZlFHaTZwbnRta09jMDVPRGN0dkwyYTBua1cxSnp0ZwpoNVhGRDd6aWp2UzRtVUJ6bDNTVzMwNUVZMGxHL0YyeXZtcFg2WUFuYkMxSGhmWTVlbk9VCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\ncontexts:\n- name: steve-context\n  context:\n    cluster: steve-cluster\n    user: steve-user\n",
                            "template": "apiVersion: v1\nkind: Config\nclusters:\n- name: ${name}-cluster\n  cluster:\n    server: ${server}\n    certificate-authority-data: ${ca_cert}\nusers:\n- name: ${name}-user\n  user:\n    client-certificate-data: ${kubelet_cert}\n    client-key-data: ${kubelet_key}\ncontexts:\n- name: ${name}-context\n  context:\n    cluster: ${name}-cluster\n    user: ${name}-user\n",
                            "vars.%": "5",
                            "vars.ca_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRQXhKSU1wcFRaaUJuY0hqRG1hbnZ1REFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURZeApOalV4TkRCYUZ3MHhPVEEwTURZeE5qVXhOREJhTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXV6NnoKV0hnMjhBVWViYkp1K2FQOC9WaXZLNUoyMXk5TkdRQnJjNko3VmtxZjZ1QTE3S3ZqMzFYM3ppbDdrRG9EOTQ3cwo3akplUXQybjc1dERvVGpTUFFpQkIvNmxRQVVtRG1HM0RpOStLc0lSQ0pHa3JzdHFYZU0vKzRScXNQSTZZRUgwCkI1SGorUzJFcVk5VGtQcXJNeEhhS3RKMG5Ca3NPMnU0UkZJRElVTkhjUnY5d0NMemJBNTlhb2p6dGpFR0g1QUQKdVFaV3lMdnpNZk9WZ1JlSmNYNy9IUWt6TldLMDlQRGpjazZ0WC9RMC82VW0ySDNIU1JKRDl1TVNwL2I0RUE1SgpoQlhDZVh3MmVoeE9FaFJDMXJmelMxNk9uWTdaeDBHdk5uUU1XMlRSZTVqS2FjYmlnbGZlSE42Qnh0UmM5ZWhPCjRTazg3dFJXdWZvdFpWYjYrUUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVbXZRQ201bmZEdm40aWkzSTJwNFJXUWRqSDJ3d0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQk5mNjNpNnNGVnJ3Y0tNU3k5bXpBNXllS2ZZMDZGZXFjUmp1U2dFdUx3VDJYaDZ5aGV5Cllvd3BWQ0tncXNSRWVjUjFvbWd6bkRqbnk0MUdFd2p4cVl1REdtWWl0d1RTOWg1OW9ZRldoUmw4OXk3aERDVnAKOTVjL05kUHVyM25pMUtqNzVjY2V5cFJla2lhUjJYNGhCY2xDcERWMm8wc29sM3QzMlFWSmtBQWhhVHFuOG9FdwpQc3V6RzFmZ1Z6UkRTTTgvRmFBNjdKSk9BRnEzRVFQUk1HZVMzd3IyRFpPVUpFTWMxb01PbHRFc3d1djVuNmFxCjZicGNpYkdCVmJBRDE1b04wa2xuQUZuU3F6MzIzOUFtTHJPbjNBc00zUUgxOU9pemM2K3hObld2TTRrN1FoUmcKVmU5TW9LcjY2RXVtWHNaL0ZFNzRmSU4vbG53S0dnV3JoQU09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
                            "vars.kubelet_cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQU5EMVRBVDhLc2xlYjV2YjZhTE0yeFF3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBMgpNVFkxTVRReFdoY05NVGt3TkRBMk1UWTFNVFF4V2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFKck5xWFVZMVBFQXVKM1pkSHRyRGsvRFdIQ3dJelB0UHdMNjFubHJaL1hFOVdSUGIvbmF2UVJLVXBkdQpSaFhjSDNkeHYwbEhyOFFzZHhBdnRkMkEvczlNY0NaQ0dwNisvUVVzVStvbndkWGJaa3FocmxYWXBNSjFZUkczCkN1OHNrazV2OGNrUkcrZHE5K1JBbUdIMWppT25yL045RGpqTVJ2YWZzM2lKaVlTV01abnVNK0dGVC9LSWNjNm0KZDZYYUlrVFo2eHBvcFZnRzROOUtuNHVOL2pJMHkrTjFCbXYydnNteFc5RE1jcHZqcjVLR2VIQmNoeFdLQURhYgplL2hERkw1b0NhNU5uU0pxRDd5ZFEwQ3RBRkxFN2h5Y09HeGxqMjNiQ0w1ZDRiUnFJZFdYbG5aU1F0bWdtV1E3CkovMTZVdzU0NWJGVjNKNUR0RjJhamdsR0VQa0NBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZKcjBBcHVaM3c3NStJb3R5TnFlRVZrSFl4OXNNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJBClpXcVpOUEZjTUEzYUEvQVVOdjBKN2hveTZVWjB5bDArVkVuemxkUmNGRXRRUTloMnl1aDUvY042eWZJMnZKV0sKK3hRNitESzB2WWZ4d1BWNU5MOFZuTExpbVkvVWVyc3hnWFNZcS9qVlFIajRkU3c5V09KWis3dmh4bncremZqeQpCWmQ0WHl6bXR6MEoyODUwQjVrZW14QytjUFcwa3NnR0p1dWgyMlFobkU1ZENuTjhNalN0QUdaUUVUT1p4REZvCi9jV0t5ZER2LzhqcnVCbWZXTG5yYmNDOVNQZVpHZVRBSE1VMmlGVXIrQnVIamExc0RMZVB2aTNZR3ZCSDVrNnkKQWNCQWxkaFNqRDRnVm5QcU9MbzhzVUU0dGErZTZpQi96c3hyNXl1MUlIQjRpcVdsR0ZZZFhudS9PZm5qZ0NLcAoyc3NrNndhd25hTEt3QWxVZ3EyMgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
                            "vars.kubelet_key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBbXMycGRSalU4UUM0bmRsMGUyc09UOE5ZY0xBak0rMC9BdnJXZVd0bjljVDFaRTl2CitkcTlCRXBTbDI1R0Zkd2ZkM0cvU1VldnhDeDNFQysxM1lEK3oweHdKa0lhbnI3OUJTeFQ2aWZCMWR0bVNxR3UKVmRpa3duVmhFYmNLN3l5U1RtL3h5UkViNTJyMzVFQ1lZZldPSTZldjgzME9PTXhHOXAremVJbUpoSll4bWU0ego0WVZQOG9oeHpxWjNwZG9pUk5uckdtaWxXQWJnMzBxZmk0MytNalRMNDNVR2EvYSt5YkZiME14eW0rT3Zrb1o0CmNGeUhGWW9BTnB0NytFTVV2bWdKcmsyZEltb1B2SjFEUUswQVVzVHVISnc0YkdXUGJkc0l2bDNodEdvaDFaZVcKZGxKQzJhQ1paRHNuL1hwVERuamxzVlhjbmtPMFhacU9DVVlRK1FJREFRQUJBb0lCQUFiNjNQZ3RyWFJNYndhWApCbnlHSURnU2U4dGc5Y1ZpbmlPNVFiQnAybDhuaVZVRGkrMzlJZWF1bnppNnZTaEJLNTRNSCs3aTc1YnQxbFNCCmdqYkJtVHVwbTZqdDlCdFNTMEJQZGwwcGU4RHp5cEgwNWxKeW1VTTNYYkFaeThGckJoSEpWR0tYaGVXU1dpa04KakpGbUxBbUpoeEo0Z2dxbmswK05kZDhxZkd2Zzg5bU9mQ04vSGpacEdUOEhvVVdhSFlEL05XdGtqL3VFdlhCaQorMy8wdElTNnI2RjdGZTY1T2RiZU1NNFJrcFIySXdNR1dVcCtoWU4wR1dIR1FmRWNTa1hxdy9Cem5LOXJMdXpCCjF0K1RNR3ArZEx2NnBUMU5ON3VuOXZBWmRxNnk3ZStnaVFvWE9UaG5xUmpxNElsNFRsejlTenBBTnlwL2VFZVIKZFR3OE4wMENnWUVBeE9tNzZSU3M3TzZOdjVOL05KNksvNTBOa05UVk9oVk1sd0RCb0ErNmozbFkyWmVSMUY4UQoyeVlhRVdOZTNVQW01d0hHRnQyQkdDL2g5Zm9vanJnNUpUc0d3OVYzNEIzYStIU3JQRDAvVEJLTzlVMkJrYXExCjlaVFNlbnRIbERhTHM4K1M4ZVMzQUZ3RUJhVkJEakYwTFVSOVVPV215RnJOZExwUUFJSGpxOHNDZ1lFQXlVRXcKMkloNFArSXFYNzdZa3JYdFo0VFMwR01JVnozUVRBWXRMVkZicWpPRGRwSC9mUmRIdkV5eUZxOW8yVnkzQmxJVgpyK2RBOTFpUXFkTWllQzFraFRKZi9GMFRVb3NjY2luOXF3OWc0aHRuS05vL01RYnozVmgvR3NaalFHVmlxY0IvCmJqSWRSTVo2NjRxbkoxNUdHTnJuNVpPdVEycW15RUVvc2ttcHBjc0NnWUIxU0NtdHg2eS9hYzV2Zm5CVGJPS3AKSUdmR0RaMzZmRmtqejBXRUNobzUvaktYVnhsNmZpelIrajJvZ2FFczhscTVXR3NkajB5bWxVNW1iVnJldG9jQwp6OGRWdUwwdmRWaklodVMrZWxSTEFQcTR6RE1TQ2JWYTBnc1MvSDVEbnNGU2xaMldDWDJkN3pCT0ZJRk03Tk9mCmFwMmhJMGRWS2hBWktDY2lSanJPUlFLQmdRQ254RmhicVNmVTJVeEpsR1lscHRMSXdNaWNQbkh0aC9IajdpSXEKN085azZweGtjMEJ2bnNDR0Q4bEZiK1FQam1Ka09ua3BzYlZPZTkzY004MUFNVmJpVWlRQjAvVVBramVjVTdUSwpySDh1L1hqNWJUWFFRT041V1JSYjFaVlhVU3oySlNvVlNtRnJ1NmtzUU9FbXlFZlc0R1QvMUNRb3Z2ZFphRGZzCnA4dHNFUUtCZ0FFTmh6dDdpNVlCalk3RjdJbUZCZkZ1dFQzMnJYa05KVmhzQWZWRW5KY2M2SEZOcVBXSUVNWjEKWW1ScG5oM0tuWW9MUzFVUHVOZ0VUVWRHZjZlODkzVGtjZlFHaTZwbnRta09jMDVPRGN0dkwyYTBua1cxSnp0ZwpoNVhGRDd6aWp2UzRtVUJ6bDNTVzMwNUVZMGxHL0YyeXZtcFg2WUFuYkMxSGhmWTVlbk9VCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
                            "vars.name": "steve",
                            "vars.server": "https://steve:443"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "local_file.apiserver-key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.apiserver"
                    ],
                    "primary": {
                        "id": "d019991773757d19610ef33392a250abbfff3a35",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAuZXLUS990hm3iu3zUndyvRFaBmvLCZrS00G4LXj5sTNC2CJa\nib1IPy+gi/zoj+l3PE8vu2e+WhxsnWYhSgY3cbI8IzjFKCn8suhawi9iwrzr3JR4\nNHSHYxIK3lGoB9aJu2KwKLnDBvHDEfRGuyB0FLnStjU75RKik2hBIJbG5EQObGoz\nprywqcaU11bd9eiR5YrEaZJjf1q7Q4Et8WEmz1sToEp3t3sH8chb2VyskpGUSaaL\n4AUqFsMfPTgkIcgCayfhkgH4MjvJEXtkeHkiDiYl8woQuGDlsjSFikJzYMOKvHRM\n1kv6vzFjcMjaoT9PJvnv61eALJtx+dO4EXy3oQIDAQABAoIBAHrVU4IDrgKOtPYG\ncqNlnhLX1j8jv3o2+E2NVQr75EBNznNhoY1DM/tmWZvuJDuEakAHpW8jxlC8OYOg\nYm4tWSsurjEd1Ri1WaVMty2J0ZNVGcOgnUMS0b1X5supPk8Zx4W4VyJNeXEyOUu7\n48jdPReuunGRIHiI8gQg3+JjCXdxF2IqY0ekjK4C6mr4TnoFWyB3xybrzMVpdol9\npKEpfQEHXD8VNXZeuAwC0vOv9WZ9t2dWkYToutg/sq3zOFJi1SOKWHy1lXICBuAB\nnWHt17pUs9B5WEO3Wj3DXNgDLafMHZKJlESpNLW+ANr9avBOrNtPNxHl+Bak/pwL\nEZvM9VUCgYEA0f8FFW1BREH8+3DL45120qQ2yKvmhU3+CZyWSlyOxBrChLAVYdNl\nGltYS0Zeg7ez+5xgwN5RU/81J9pc48LcNPYp1WHnl8Nx+Cn9CFQuxgwgnAbmMYWr\nr019l2meDQGZhYrI8ZmfriU0QpjUFDvZOnUt2XePBXHFNz6oGt4PXnMCgYEA4j3B\n6JhfE1I4EMgfvBMBYIJ11QV14W5/M6Zorxkn7KrhJ3LW/aMkS96fbSzqsHBhNjrB\nXVTqZj4E2HsVbeMqn6C0KFhFF7U9l1ywA9GlocV6n2RViV5fCRK/YL46/yZ9tHFH\nCKWFSVgUbMN/xHS+3aAb+LNu5x4fFD1e4/atWJsCgYEAz6aSO1bW9A0ggO5P3xql\nFbOmLJa3E1hE/PInNw8BaW9gq96Gtj5YOlDbJUxHR45O3l4K2oy79QhmYqstsVbN\nc117jnIKlWqBdzjl6ed8fQAe+spjs9KPK4C/0QpybEAJtCDBhQ449PX7EGOZSwzH\nSGP425K7DVIsBu3hQvgUUHsCgYAp7ewsIWEtgYVmhtBq2NLegg84haSNPR9SATtR\niEX/9MN5vizeIQgvD3lYkISGYq2BkW4Y0A4JGOFpBZa5IOrbXrtE5ucXN73MeZ8d\ndhNOYf0R4VSA+v59/f19/oOMmiOd94iEr7h+GVbfuXPKgyCEjpHgi9C4ALsd0yns\n8eC6lQKBgA5QEMJvqxt6RZleuEoh2m2NMgL/0ZvLPaDnbI9A5EbR/k4OtPYTsgcp\nrVv9gKGvjl5gjiSSOYELmHQUCnIl5ots4Tawh/HSSXebog2C6WoVqZUPHYeYBg1v\nJNDOlIrtppwEdh5BqTGfpUW0/9y6jbnJZ+Sis4WH0gAui2yWmCCc\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/apiserver.key",
                            "id": "d019991773757d19610ef33392a250abbfff3a35"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_client_ca_crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_self_signed_cert.etcd-ca"
                    ],
                    "primary": {
                        "id": "aacbf6c9e8927c920c00e31ef8ce5935ea15a655",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDDzCCAfegAwIBAgIRAIMrupgK76fi3tUjd2C579swDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDYxNjUx\nNDBaFw0xOTA0MDYxNjUxNDBaMCExDTALBgNVBAoTBGV0Y2QxEDAOBgNVBAMTB2V0\nY2QtY2EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC+md94VZty+EfX\n5qmiT7hfmS6cLcQT7YwPyxNSDtSILopvJVwnh+ObbVgaQxPoP+fKNOocVHohRnh/\nfqGiV5aJt+mG6SJEuslduKzXa0iqXan4qwSDvTeMSw+cDEgnUon4p+hazXaU6dZU\n57qqg4quYfiIYx7aJVj6TqQGelDq9SGHAHLcuDSCh2HXuGg/rpkrFrtM4IkVQ9Vr\nyz188jIZuoQQgqds2dZl6Tys8Ve68ZHKgrhiUdz2xq87nWR0PtDDdn52sn7cRht9\nEjVC34AyGPkTHbh1BjE68yFHzvb3db6BNyLUfyI9cEa04Ao7MSu7ZM7UYyo+LAN2\ngiaF0GqZAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/\nMB0GA1UdDgQWBBTyTTSC68BruJif51HQqLH7IkOcKDANBgkqhkiG9w0BAQsFAAOC\nAQEAL663DahpcmezVTVBV9FHHLG3LYZyCJPX9kCJ4T3AJD8kpWRePUaP0H+ZM27j\nGgW78r9x5EmEXhtaLYeP/skRlkVxu0ytrPoU0e46T/6GOkSWeMJaa9+i1jw6qyq9\nwcfj/yR2vJB7LLcygwW/itdFSti9vKMmw6Om/8AnRgxYXsv9oqzkvAvqJ1jAzoCu\noMhhXGblJFxfwdl0doitiTZCGFwBNARfGN1+ZpuQ75QGuxB8bb2vWUnWE2g1d+oR\nlB5AR2GvK9lotw04BRVnAOHCAL6mZITDIyEF8EDkg3ii22bOivNyiGUn/YTAYMsZ\naXnI2soIL/NUVaLQDIr+vUsHIA==\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/etcd-client-ca.crt",
                            "id": "aacbf6c9e8927c920c00e31ef8ce5935ea15a655"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_client_crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_locally_signed_cert.client"
                    ],
                    "primary": {
                        "id": "1d40acbd467e628621399678cab2b49e7c928b96",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDWDCCAkCgAwIBAgIQLEYZVaTqH8rAcdjyfq+/3DANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwNjE2NTE0\nMVoXDTE5MDQwNjE2NTE0MVowJTENMAsGA1UEChMEZXRjZDEUMBIGA1UEAxMLZXRj\nZC1jbGllbnQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDFNdePWwHp\n2iNMWaDxHnW/jB1vgjSgm3cmgg5Q54rLyOYqLFRtdtznWVs1N0o16QWysCbgCw95\nRsAdmEieVSS9ZF/Y/+yfFUAPQh53aANN6wXVXEft4isjn0LbHS/fZ4o37znn4Mom\nKMX8l5cFF6cr7JQORhilnEvLb3pTYrqI96Cy6f05l3c0HBbrk6ywyft/0LzeNXOj\nNNVC48GJFbtjr64EapBOqk3lYlPFzID+45g/2KVIcQnhC1j58w259Y9/UEILd5jC\nuPipzSHN+DqhykV9DoG6JIbRhUD1ID10OQ/KfVzXpdSF/X7iWWZtGav1un+TA7ba\n1najMSEWXTetAgMBAAGjgYcwgYQwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQG\nCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFPJN\nNILrwGu4mJ/nUdCosfsiQ5woMCQGA1UdEQQdMBuCCG4yLnN0ZXZlgglsb2NhbGhv\nc3SHBH8AAAEwDQYJKoZIhvcNAQELBQADggEBAIjReiYxAr7LGmUn2IajEsBx8QIg\n+r1dXH401abED6BvEUm68HqbK8cJvbyuoPdt9Y/Uu61ymIr4yS4Q9T1wPpNnrKXF\nxUoUfq/DxnhUibLkBcbHdp1iT9C76RuvTAlnqF4Q1JRkzW8DILj16xfD6kbE2cut\nmNepjHTi3VsCSmQ8M6mDusn6G8L7P9y5mTqiGk1PHlyrcwVchVmAsAJXyYoy1wBZ\nttO2JuqBBxPrlLIzdEuJIQA6PMEmCvnKxM8nxc/sRQIF56VFeWFbRb3/JKiWbfHi\n1ofJdvzVSmaAR1DPrb/PimyUtbzWBFB7j2BUeQHr+jq8IF/f1UyXMa/BHOQ=\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/etcd-client.crt",
                            "id": "1d40acbd467e628621399678cab2b49e7c928b96"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_client_key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.client"
                    ],
                    "primary": {
                        "id": "082df8d57cc81dfd40c55748ae76c8e4a5dbea84",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpQIBAAKCAQEAxTXXj1sB6dojTFmg8R51v4wdb4I0oJt3JoIOUOeKy8jmKixU\nbXbc51lbNTdKNekFsrAm4AsPeUbAHZhInlUkvWRf2P/snxVAD0Ied2gDTesF1VxH\n7eIrI59C2x0v32eKN+855+DKJijF/JeXBRenK+yUDkYYpZxLy296U2K6iPegsun9\nOZd3NBwW65OssMn7f9C83jVzozTVQuPBiRW7Y6+uBGqQTqpN5WJTxcyA/uOYP9il\nSHEJ4QtY+fMNufWPf1BCC3eYwrj4qc0hzfg6ocpFfQ6BuiSG0YVA9SA9dDkPyn1c\n16XUhf1+4llmbRmr9bp/kwO22tZ2ozEhFl03rQIDAQABAoIBAQC/fKdBADocan4J\nvaGjXlMw2YkfZAtbw3jvQCtMbXb8pqauXnrgCyE11jLUuknpjMjGl3o34yV0ObmD\nQwGIE95ns5XJq76DPWwFJMtWX/2NY943LLJ/DjObFCIjhfSc9PlllHjiaQeAA+ky\nebLe8/eTk9SzA2cdL2T9NNJPMzcyk6HZyM39flr/gZpjImsW0HFc2vSKliZL8cC9\nnzjf0qCfSho/bUwpUjPMBxAYBi2nh0oP3yu0Cm8a0vfR01yQLSK8dU9VoVFhUQiI\nWx4QxtoDDCfl7YF4f3Rpe9lYkxfNMnrKI4hBKTlOsLPFHK/jx/N96BzYbtwVnUcZ\nYGhRx8X1AoGBANFRc5MwGQQkxt0F11W3ZTf+WmPcwwUHr/UifSkJt2W3dD4k80Mk\nmC0Krlq2j18BK59lVfxzy0whyZwnf8Mj3jntbRl4fPPDjvhJZH2g35DRHnE8pol8\nRHeCAgLWt0/wRpZVW+4IAjx670rr3Pn5F5YOOlajBOgIzRdPrGr2fa8XAoGBAPEx\nHseBRIRgDQTOw/Zarq0wcm2AGDKqTqOySO/CTum1mku8mNOGLbzBJ2QBTmaKCPze\nKIPc7AyyQiQtJJKmsOcFYb/RIoxNJaxjVr/lCJ/tWJg5k9vATrH0VOQXdun/ifVb\nkUkCO9H5UoK9qP1jzvLmt73szFy0KCEBEv35OGnbAoGBALxu7PKWHA8k5HlYps+d\nd9t+ePTpag7/KqItWCs3eghxrI29Sdkp+myh7u/u5QaL0S9/VHcd7ugsioiu7k9H\n3OidGtgRJbt0UyKlP3fw+RIvj441IV8npaNIQHM5xHCMR59SXJ3eS9USfpUd3CKU\n4WzOhio0O1h/g9H2gasRF3glAoGBALuF31Jp9OWe8EBOqhl+A9Vvl2f/cdDijOXF\nFeQjhMs8gMxlw8ShzCm3W3LreRNMOxSvfXyYZYaxia8q0gabR2s2yfsjFONUj/fp\n/GaSIhSFqp4gFg+DAyxktSPqAnCIV7DGEr1a2Tu1xysTXrIzyZEdRLqLw5BIGfMf\nLK7995iFAoGAHGhD5GhbTi6rL/vE8alKL5MCGM3CRkLTx4RdFWE8DYjCiT6OVeEY\ny5X9SC5wc6hFFRpiyJfwZbjaD99cuZc6kEf25Us9pnyMo4NIFXCgMTlaO7r3tFyS\nG6EFMuD+GZ8s+PETnG1UxlIuVX4t++FPgnGIM+kGzZVSPqydVMdjqqE=\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/etcd-client.key",
                            "id": "082df8d57cc81dfd40c55748ae76c8e4a5dbea84"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_peer_ca_crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_self_signed_cert.etcd-ca"
                    ],
                    "primary": {
                        "id": "aacbf6c9e8927c920c00e31ef8ce5935ea15a655",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDDzCCAfegAwIBAgIRAIMrupgK76fi3tUjd2C579swDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDYxNjUx\nNDBaFw0xOTA0MDYxNjUxNDBaMCExDTALBgNVBAoTBGV0Y2QxEDAOBgNVBAMTB2V0\nY2QtY2EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC+md94VZty+EfX\n5qmiT7hfmS6cLcQT7YwPyxNSDtSILopvJVwnh+ObbVgaQxPoP+fKNOocVHohRnh/\nfqGiV5aJt+mG6SJEuslduKzXa0iqXan4qwSDvTeMSw+cDEgnUon4p+hazXaU6dZU\n57qqg4quYfiIYx7aJVj6TqQGelDq9SGHAHLcuDSCh2HXuGg/rpkrFrtM4IkVQ9Vr\nyz188jIZuoQQgqds2dZl6Tys8Ve68ZHKgrhiUdz2xq87nWR0PtDDdn52sn7cRht9\nEjVC34AyGPkTHbh1BjE68yFHzvb3db6BNyLUfyI9cEa04Ao7MSu7ZM7UYyo+LAN2\ngiaF0GqZAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/\nMB0GA1UdDgQWBBTyTTSC68BruJif51HQqLH7IkOcKDANBgkqhkiG9w0BAQsFAAOC\nAQEAL663DahpcmezVTVBV9FHHLG3LYZyCJPX9kCJ4T3AJD8kpWRePUaP0H+ZM27j\nGgW78r9x5EmEXhtaLYeP/skRlkVxu0ytrPoU0e46T/6GOkSWeMJaa9+i1jw6qyq9\nwcfj/yR2vJB7LLcygwW/itdFSti9vKMmw6Om/8AnRgxYXsv9oqzkvAvqJ1jAzoCu\noMhhXGblJFxfwdl0doitiTZCGFwBNARfGN1+ZpuQ75QGuxB8bb2vWUnWE2g1d+oR\nlB5AR2GvK9lotw04BRVnAOHCAL6mZITDIyEF8EDkg3ii22bOivNyiGUn/YTAYMsZ\naXnI2soIL/NUVaLQDIr+vUsHIA==\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/etcd/peer-ca.crt",
                            "id": "aacbf6c9e8927c920c00e31ef8ce5935ea15a655"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_peer_crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_locally_signed_cert.peer"
                    ],
                    "primary": {
                        "id": "9892f978afd3673ef04abdfaf02d9f9022994f63",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDQzCCAiugAwIBAgIQTtzGNk40q1hyzzQiTV0eBDANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwNjE2NTE0\nMVoXDTE5MDQwNjE2NTE0MVowIzENMAsGA1UEChMEZXRjZDESMBAGA1UEAxMJZXRj\nZC1wZWVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA9YK4piCwT6KP\nCncTuAQ7sdBssQO3aOf7cSYyKtcdgfZsKFrrj6RjQ/ko2OUKFLYsrEa/FeuuWx/x\n5SeB+1cF6YxxbbQNMPyVwDhdZXDQqG7OH6lvxH4xOqwo50PAnVc5BQNFRDmV22X+\n5iHlTMLRLruoSHk63fDDcQnCDUPXJT5YDdM0C3AtKgf5VD7YEQDZYPexKl8ZyBar\n3AeTPhsH3ezlX1qrDbDD9Feu4p/besPlWoS2fFWP/tymqs0SN2eh91VuFWuFTGpg\ndWQKShNAhJK4+y8NSKEbOONkOdRAtiUY5wHgb0mEHpXovn7IRj9nJJVSiRfrn1IZ\n9HX/0P0gHQIDAQABo3UwczAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYB\nBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAU8k00guvA\na7iYn+dR0Kix+yJDnCgwEwYDVR0RBAwwCoIIbjIuc3RldmUwDQYJKoZIhvcNAQEL\nBQADggEBAJYHMyD+EWS9dXZeoyRUIvJgUjMRLjuDivgtBQIqV2ZQarp0BK91DGjE\n3WH31Q1k7VsrUP1LZIyMDe1vGVTZfXAZi9J93t1mb77VJk4UKLWaWC84QuPCPkxw\nkUlEeAULmtMbb1MzRBEPuzLXLra3AIUmGzjnP/LTGH6IrCCrfiJ3+T9QadlOkIoZ\nGxSD0F1vIgEsIQr9TLKyBmntzvm63o3ebwluM5JEe9gsotm7ugWe/QyDf1lc7OEn\nCjKUJHVttuujJj5OyS6QXgh6nBtg4i2tjVKwgiMfZ1L3m/2JwZ9v+i/n6oE/Vf1S\nNtG3zbs7ugCIuJyyUHti0SH6qM6sbVU=\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/etcd/peer.crt",
                            "id": "9892f978afd3673ef04abdfaf02d9f9022994f63"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_peer_key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.peer"
                    ],
                    "primary": {
                        "id": "b8b1eb04fd7e6c0a32e85558c62a983a5db24995",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpgIBAAKCAQEA9YK4piCwT6KPCncTuAQ7sdBssQO3aOf7cSYyKtcdgfZsKFrr\nj6RjQ/ko2OUKFLYsrEa/FeuuWx/x5SeB+1cF6YxxbbQNMPyVwDhdZXDQqG7OH6lv\nxH4xOqwo50PAnVc5BQNFRDmV22X+5iHlTMLRLruoSHk63fDDcQnCDUPXJT5YDdM0\nC3AtKgf5VD7YEQDZYPexKl8ZyBar3AeTPhsH3ezlX1qrDbDD9Feu4p/besPlWoS2\nfFWP/tymqs0SN2eh91VuFWuFTGpgdWQKShNAhJK4+y8NSKEbOONkOdRAtiUY5wHg\nb0mEHpXovn7IRj9nJJVSiRfrn1IZ9HX/0P0gHQIDAQABAoIBAQCKx4gFMHk5qtRc\nwA7/eDUeQIkQTt+Ah5HU1hiJquvdKSTecvaxTeVm6RMz99SI/KmoAJ3HkGAQ1q/w\nLzMElp6a9G6x6pOCW2VzMOlqjCkG7QvLTgYF9qdxWRwODnh0+Hcc5EplVH/nc3Jx\nODvb9kw0tJNd1Fl4V77CyRdOVEjrnYTEKMzJiQlxLuQ0RPgeolLKzlzujfOtpGoL\nvs825AP3/Ne/TZ9FTk9Msic2xoQXhCndluObJnStYA+Qbd36ezGxLQDaeGGlqIND\nMbs2YxhRIGVLtCZ0wplXvklFWSwG8uGodwZflBm3WdH43tk9203Qw2EbNgYpZz3r\nbLM6Bo4pAoGBAP8Al4+ENDep2+gniy+WRu8uPqglOvGp1IzEyLr1/8OB8MaNWAWY\nBLv/5LPGm+Ty5uFsvOetAgh7byAW//XKwjOz9p/cSjZhurO1z0JTI0kfN0lG1KwI\nwq+Gd3aRIB5FE0EJS2R9+C0jpDoip9vbfdwNjHT3A1B5AXHZ1E6wwGQzAoGBAPZ4\nn1ooMNcmJF+LJN/OZLbm4YEBMj0EkKcOq7ejrHX9QKGXI4IEX4eRX2XMaQ4byLeS\nSFTpUpAnCBptZcVrxHT2sEOpMXpFmO73E/vOGF+E6ysSCITfctqT5PLmSRH6/loW\nu20YWA+9EnuwTWErRiQVjC0sa/iDHG7eOybmiZpvAoGBAKTrLBosZV0OpOOLF5Bq\nP2wW230BvxJmRMnZxvxrdsNpuV+gMCpF++HeiHngXBiBI+Ls4WtwT91OfzsgxN+h\nB2JK5JjU7sYnBImPbwC1Jh/3aVkhzw+IBulgLMjo6P3KrL4mFbVjZutCnsbefPNL\nDCYSOSG4U1NrPwzz1UQjOfpTAoGBAL+8kILLd0s4Id2t2i69Wf4rWExKSPHM5lb/\ng7hlfJmBPVE3yWiwzDwjbCo+PY+7L4cXJmvf4tm/c39TkXNmZbtz2SWZrqLnF5T2\n4zXlW3KbbXLhIX10ct31ZYtMeJWjQ1GEE6RH5uG/fWx5d4ja6ELT/Gt7/jaikHDz\nMuMNPwjDAoGBAIi+OYsOtgiwj+Pe+9dnOxWX5McRrEnMhD3yCkimjywjGWxzYWTZ\nQkuqHqAg4QDtKB2kFdRMgmvqdCYqxj5rekBE//gL48LVkGry/yUUev1pWdka1GqQ\nCPXWvpJXwX9mG3hCEswRX6mIp4OW0uuCQfGtWD7/nqt6YI2YDqIK+Q38\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/etcd/peer.key",
                            "id": "b8b1eb04fd7e6c0a32e85558c62a983a5db24995"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_server_ca_crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_self_signed_cert.etcd-ca"
                    ],
                    "primary": {
                        "id": "aacbf6c9e8927c920c00e31ef8ce5935ea15a655",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDDzCCAfegAwIBAgIRAIMrupgK76fi3tUjd2C579swDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDYxNjUx\nNDBaFw0xOTA0MDYxNjUxNDBaMCExDTALBgNVBAoTBGV0Y2QxEDAOBgNVBAMTB2V0\nY2QtY2EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC+md94VZty+EfX\n5qmiT7hfmS6cLcQT7YwPyxNSDtSILopvJVwnh+ObbVgaQxPoP+fKNOocVHohRnh/\nfqGiV5aJt+mG6SJEuslduKzXa0iqXan4qwSDvTeMSw+cDEgnUon4p+hazXaU6dZU\n57qqg4quYfiIYx7aJVj6TqQGelDq9SGHAHLcuDSCh2HXuGg/rpkrFrtM4IkVQ9Vr\nyz188jIZuoQQgqds2dZl6Tys8Ve68ZHKgrhiUdz2xq87nWR0PtDDdn52sn7cRht9\nEjVC34AyGPkTHbh1BjE68yFHzvb3db6BNyLUfyI9cEa04Ao7MSu7ZM7UYyo+LAN2\ngiaF0GqZAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/\nMB0GA1UdDgQWBBTyTTSC68BruJif51HQqLH7IkOcKDANBgkqhkiG9w0BAQsFAAOC\nAQEAL663DahpcmezVTVBV9FHHLG3LYZyCJPX9kCJ4T3AJD8kpWRePUaP0H+ZM27j\nGgW78r9x5EmEXhtaLYeP/skRlkVxu0ytrPoU0e46T/6GOkSWeMJaa9+i1jw6qyq9\nwcfj/yR2vJB7LLcygwW/itdFSti9vKMmw6Om/8AnRgxYXsv9oqzkvAvqJ1jAzoCu\noMhhXGblJFxfwdl0doitiTZCGFwBNARfGN1+ZpuQ75QGuxB8bb2vWUnWE2g1d+oR\nlB5AR2GvK9lotw04BRVnAOHCAL6mZITDIyEF8EDkg3ii22bOivNyiGUn/YTAYMsZ\naXnI2soIL/NUVaLQDIr+vUsHIA==\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/etcd/server-ca.crt",
                            "id": "aacbf6c9e8927c920c00e31ef8ce5935ea15a655"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_server_crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_locally_signed_cert.server"
                    ],
                    "primary": {
                        "id": "5a8434321af8e265304ad9bfa2fbbae913c7e9aa",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDWTCCAkGgAwIBAgIRAMvY8NNV3cZk2mhN4tCEPHkwDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDYxNjUx\nNDFaFw0xOTA0MDYxNjUxNDFaMCUxDTALBgNVBAoTBGV0Y2QxFDASBgNVBAMTC2V0\nY2Qtc2VydmVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAst4wS2qf\nHE60I+w+i5IcIqz5I6N+ao305/NavSrxkCYOmqzBVTUtJuWjHQD6UmcgZb0FUqNB\nJhEIHD+KlgJLRHGfZDeLWQo/RD9LCBgthLvNexpz0CxMg85PY/9rQozOH0wfgd94\n2M+9GfkZb8zFgxrL2MTTmdxdr43Xl+6GdeLjoWqlRj2xsIcrcecQlUmi2r1xG/eg\nkHtskriQFt6qq1aCK3vrn8cwwtHitoR+2/wNXgDWOyi2e1oRP8yH6Pd5z7E16/fX\ng//rsNetBAzW7Ekgwn52205XP3VVNmPu52op8IBr1vEHP/32eQxF5SYCCWKpAQ+T\n20SoRkXznW176wIDAQABo4GHMIGEMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAU\nBggrBgEFBQcDAQYIKwYBBQUHAwIwDAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBTy\nTTSC68BruJif51HQqLH7IkOcKDAkBgNVHREEHTAbgghuMi5zdGV2ZYIJbG9jYWxo\nb3N0hwR/AAABMA0GCSqGSIb3DQEBCwUAA4IBAQAH3JkZm2L+DY0MUhG8i823HP09\nwULNam7FdpN0sj4uJOf5qpC+xNjzBoiq0lDHO/hkO0/FK57zEJIWEamJmqf9TsHN\nVnUAxqp88xfE2ACDJ3oyfGpsBNe2CDeG1+eWcEcIc9IRZNMylu0wQsCaMLSwRRTD\n2MraVQwy+18eyqFwrmAivqHMWBu7mCIHQZPRSyDIHpy/1grAJc0sOwg/YBF5K5Be\nnYEnh9hm9w9rORNTnpPbxrbpPXegzQbsgc3WMdLZrcqV5cKuUL18DmZkWlYkc32y\n/SYaV93Yp+y/CYrCPvrA4lONhwGtfoun6uv8ZX3sGVZ2T9LLfYQ0gbfc7uOd\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/etcd/server.crt",
                            "id": "5a8434321af8e265304ad9bfa2fbbae913c7e9aa"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.etcd_server_key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.server"
                    ],
                    "primary": {
                        "id": "b745372fbcd3a74e3531110bb8e9ee1c6b18d30d",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEAst4wS2qfHE60I+w+i5IcIqz5I6N+ao305/NavSrxkCYOmqzB\nVTUtJuWjHQD6UmcgZb0FUqNBJhEIHD+KlgJLRHGfZDeLWQo/RD9LCBgthLvNexpz\n0CxMg85PY/9rQozOH0wfgd942M+9GfkZb8zFgxrL2MTTmdxdr43Xl+6GdeLjoWql\nRj2xsIcrcecQlUmi2r1xG/egkHtskriQFt6qq1aCK3vrn8cwwtHitoR+2/wNXgDW\nOyi2e1oRP8yH6Pd5z7E16/fXg//rsNetBAzW7Ekgwn52205XP3VVNmPu52op8IBr\n1vEHP/32eQxF5SYCCWKpAQ+T20SoRkXznW176wIDAQABAoIBAETLPBvleCi1BIfE\ndxHLMlML4A6a9SYaTxVe/YlAGQRt/rPyubEB8MnDDIc9Nwm2bDl1B7UO4SG47zue\nHLkxTK2YXct3qXqnfEnNZhhI5EjmylMMi3qHby5KjTJSrHg+G5DiAEQ9JQeObpas\nveHICjcweTJ4EUJeBRJeJYtjzAdOhS+QX6gpXxh2TfjaR9WG/jRxLDuY2l/qv2gr\nEhynm7+w+dN87afsgL3K3GSsKU3IlL8L8f90TO9TSbkds1wOCRSaLIbacUEC9uhd\nbds95iPOn298cCP6duZY+DzjadjIZuC/LBVauSMo9cAczyUKxWlI26x1Gr/0vHPM\nSElW8VECgYEA6Xc2baCu6UEsfRBXPf78CdEBZSfNbR1llPZGu17NZkYZNwURjZDm\nkJ8W8aJOf44RHG57uBJ8ma4Y9AYS541DdnWrm6NCkq/v4rAe+1oFu4vKtvz3dHqz\nt9H1a37s5NDubEc9roxz0jOZkOED7xNKDcL6kwriXdkQWAxQjwVLOw8CgYEAxCHm\njMBMjRAYF4xRO4D3af/uDK1dRGccGvqRiT12mk3+krTr1BYL0uCkRVxbEWx9Sclt\nQpsXHY6g1j/DiLyzvMynUgBTCTIwahA3cUlh/e02QAct1zV0Lq82WuE2At/2NYjc\njvkMLssWCrRNVA8KqytY8XJMlOsyA4+maqa54WUCgYA4OXyDJEpbZFW5fMD17j12\ng74pRU+ksoqvOCxKnYcr1T/nTzIt/LJ6K8YTxTnQYD9gsH7dEp6tSA88XWYaG5we\noDIG1meG+hX0auPbNo/g3cahEQTrKU20vDy1eajFZke1Decd7TdLbR/Tk00mO2f/\nLnC4Dsv7O/ZCrhyMhQLcIwKBgBRZsCJKkabRVK6c0JDsAL/u3jRSiKrgR/pEpXUn\n+3ZnQVLXkuCeqPtoc6L+wjQ8nYNacwvGK8/VTLruQsudSMj+Mx4/Cl6Z5owawqXu\nh0xhoI9kL011LmjppSoo1AHYWyOS38+1552zVMYnjx55sRGxnbjvsyKAhN/5t7q5\nMfBBAoGADNPYe4lJ5xdjEnTjNUC/fsBxCZh8XSTcADT3z2neM1HaUum7b/QboGIk\n7uVNeTzgSEaOwmW1r6xMVOsQBXJawrINjP86CowzIeLZk7URIhs+2a4QYiV8QKir\n1EJ8tYuHDuPjjD+lXWlSXugjHXa/BhgLSYPAUpJq+T17L9gbwX0=\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/etcd/server.key",
                            "id": "b745372fbcd3a74e3531110bb8e9ee1c6b18d30d"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.kube-ca-crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_self_signed_cert.kube-ca.*"
                    ],
                    "primary": {
                        "id": "2941900bed589963293ef3ece510b3ad0df34201",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDFjCCAf6gAwIBAgIQAxJIMppTZiBncHjDmanvuDANBgkqhkiG9w0BAQsFADAl\nMREwDwYDVQQKEwhib290a3ViZTEQMA4GA1UEAxMHa3ViZS1jYTAeFw0xODA0MDYx\nNjUxNDBaFw0xOTA0MDYxNjUxNDBaMCUxETAPBgNVBAoTCGJvb3RrdWJlMRAwDgYD\nVQQDEwdrdWJlLWNhMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuz6z\nWHg28AUebbJu+aP8/VivK5J21y9NGQBrc6J7Vkqf6uA17Kvj31X3zil7kDoD947s\n7jJeQt2n75tDoTjSPQiBB/6lQAUmDmG3Di9+KsIRCJGkrstqXeM/+4RqsPI6YEH0\nB5Hj+S2EqY9TkPqrMxHaKtJ0nBksO2u4RFIDIUNHcRv9wCLzbA59aojztjEGH5AD\nuQZWyLvzMfOVgReJcX7/HQkzNWK09PDjck6tX/Q0/6Um2H3HSRJD9uMSp/b4EA5J\nhBXCeXw2ehxOEhRC1rfzS16OnY7Zx0GvNnQMW2TRe5jKacbiglfeHN6BxtRc9ehO\n4Sk87tRWufotZVb6+QIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAqQwDwYDVR0TAQH/\nBAUwAwEB/zAdBgNVHQ4EFgQUmvQCm5nfDvn4ii3I2p4RWQdjH2wwDQYJKoZIhvcN\nAQELBQADggEBABNf63i6sFVrwcKMSy9mzA5yeKfY06FeqcRjuSgEuLwT2Xh6yhey\nYowpVCKgqsREecR1omgznDjny41GEwjxqYuDGmYitwTS9h59oYFWhRl89y7hDCVp\n95c/NdPur3ni1Kj75cceypRekiaR2X4hBclCpDV2o0sol3t32QVJkAAhaTqn8oEw\nPsuzG1fgVzRDSM8/FaA67JJOAFq3EQPRMGeS3wr2DZOUJEMc1oMOltEswuv5n6aq\n6bpcibGBVbAD15oN0klnAFnSqz3239AmLrOn3AsM3QH19Oizc6+xNnWvM4k7QhRg\nVe9MoKr66EumXsZ/FE74fIN/lnwKGgWrhAM=\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/ca.crt",
                            "id": "2941900bed589963293ef3ece510b3ad0df34201"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.kube-ca-key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.kube-ca.*"
                    ],
                    "primary": {
                        "id": "4761e7fac0cc87975267fa2401bf2269395c772d",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAuz6zWHg28AUebbJu+aP8/VivK5J21y9NGQBrc6J7Vkqf6uA1\n7Kvj31X3zil7kDoD947s7jJeQt2n75tDoTjSPQiBB/6lQAUmDmG3Di9+KsIRCJGk\nrstqXeM/+4RqsPI6YEH0B5Hj+S2EqY9TkPqrMxHaKtJ0nBksO2u4RFIDIUNHcRv9\nwCLzbA59aojztjEGH5ADuQZWyLvzMfOVgReJcX7/HQkzNWK09PDjck6tX/Q0/6Um\n2H3HSRJD9uMSp/b4EA5JhBXCeXw2ehxOEhRC1rfzS16OnY7Zx0GvNnQMW2TRe5jK\nacbiglfeHN6BxtRc9ehO4Sk87tRWufotZVb6+QIDAQABAoIBAHB0d8HqcRQ1/tBj\nGcNUedyuJoZEsJsMDYG2ftI0A18P8ntdrQU3NuQq/WkUAOHd9gP4EtP77CC8ft+o\noDVzqtB9CwGCLj0E2pZImWgrndqQMyqyTfWstXUtxn+IR4t97xFgiu8A76n3bHVp\nXwbzhV5mmmCdhOs7MxV83G4r0zVl64/+yaypf9Nqbmqv1vNeg+h2S4he0gW2EAyn\nE7e9iBBfQyTIytWjUwsHs+CEGPl/1IQN4D1VVz1AWZ89GYLw4B7JAcsrQORRFfcQ\nsh3tv6bZEEW0UG9jYnGOoXehSR+zQYEXo3t0vO7VIZkjhdajgrpzWSGvyk5YuAow\nGELhfwECgYEA0lOeww+UOrleJgqSsEBv9s6IhUTmRKcUis/pkQ9hG5IoBQGmU0Em\nOTWB5NOyx2v9dJ/wt7rbqfLqHK3CmOtTDDCVEjnsakbV1LnknwnSVApJ9phs5wZ9\norY87+NFxEwKIrKnTrDHc90ewomOBex4ZV1HXcupTbi/vja+0DJRRsMCgYEA4+fu\ns4ntwXWj13IUo82nTvV9X6i3AGkytp9Jfp/OKEQ8NZsZuDYfFKFJ9F4kDsMZoEvq\numLM2we/G2zHBtlLcjkeQmXCCJdEmQ94xMpxnD69jPDv2HoCHR9EukoBUgs3Fa1O\nfNjkbL+/CWAUwdKY/g++XmxwqbU6bxNpwtn7s5MCgYEAtYUnou9iHaB3ydscKHMk\nblxnZKVHGn8ccoTn7qLYS0RDt7ZpxraWd49fcI7oX8Yqs6mJxffFtxIHzQKFzRZj\n0URok5dcG4jQ6UwaLMv8Mz3CAcohSu3GJlSjmOGMB9MceD+5t2dIbA2ti3XOFfy1\nF75+Zkvr7UECcvaqjeKvVKMCgYBlK9+uOeuetv9ts8nv0WqVRatLXNUoTIrjwSBa\nIszc2TW1Qk4PlY8ElHkFDwmIuBlXLHxeE2AHV5ABt68+nhW89hg1t4CEWcps/A5L\npeb7SmrQ92AxxC/OB8R1wkaFyk7Aw7eU+p+kmxZOLiXoyPl7xzdmKVN2MupmxsJr\namMvGwKBgA1g/1f4/9vsFd/6XukoMAUlpdZOYeJAM2e0PGtZj6BiRC1EvFl0j/Jj\nGYILR3fD+0mw9w+je7mp2CjGrt2WGiGMhkP/eUcYXk1QmOoTDHTpcqA/L48eglnW\nVHhA3jt8PhntxJ1L/N3jNSvP3V5orCjR7O3BS1IbPFzA+Ih0rXFl\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/ca.key",
                            "id": "4761e7fac0cc87975267fa2401bf2269395c772d"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.kubeconfig": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.kubeconfig"
                    ],
                    "primary": {
                        "id": "b83c93ed1afe2fa11ac5395268503fa25b0a89c6",
                        "attributes": {
                            "content": "apiVersion: v1\nkind: Config\nclusters:\n- name: local\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRQXhKSU1wcFRaaUJuY0hqRG1hbnZ1REFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURZeApOalV4TkRCYUZ3MHhPVEEwTURZeE5qVXhOREJhTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXV6NnoKV0hnMjhBVWViYkp1K2FQOC9WaXZLNUoyMXk5TkdRQnJjNko3VmtxZjZ1QTE3S3ZqMzFYM3ppbDdrRG9EOTQ3cwo3akplUXQybjc1dERvVGpTUFFpQkIvNmxRQVVtRG1HM0RpOStLc0lSQ0pHa3JzdHFYZU0vKzRScXNQSTZZRUgwCkI1SGorUzJFcVk5VGtQcXJNeEhhS3RKMG5Ca3NPMnU0UkZJRElVTkhjUnY5d0NMemJBNTlhb2p6dGpFR0g1QUQKdVFaV3lMdnpNZk9WZ1JlSmNYNy9IUWt6TldLMDlQRGpjazZ0WC9RMC82VW0ySDNIU1JKRDl1TVNwL2I0RUE1SgpoQlhDZVh3MmVoeE9FaFJDMXJmelMxNk9uWTdaeDBHdk5uUU1XMlRSZTVqS2FjYmlnbGZlSE42Qnh0UmM5ZWhPCjRTazg3dFJXdWZvdFpWYjYrUUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVbXZRQ201bmZEdm40aWkzSTJwNFJXUWRqSDJ3d0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQk5mNjNpNnNGVnJ3Y0tNU3k5bXpBNXllS2ZZMDZGZXFjUmp1U2dFdUx3VDJYaDZ5aGV5Cllvd3BWQ0tncXNSRWVjUjFvbWd6bkRqbnk0MUdFd2p4cVl1REdtWWl0d1RTOWg1OW9ZRldoUmw4OXk3aERDVnAKOTVjL05kUHVyM25pMUtqNzVjY2V5cFJla2lhUjJYNGhCY2xDcERWMm8wc29sM3QzMlFWSmtBQWhhVHFuOG9FdwpQc3V6RzFmZ1Z6UkRTTTgvRmFBNjdKSk9BRnEzRVFQUk1HZVMzd3IyRFpPVUpFTWMxb01PbHRFc3d1djVuNmFxCjZicGNpYkdCVmJBRDE1b04wa2xuQUZuU3F6MzIzOUFtTHJPbjNBc00zUUgxOU9pemM2K3hObld2TTRrN1FoUmcKVmU5TW9LcjY2RXVtWHNaL0ZFNzRmSU4vbG53S0dnV3JoQU09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: kubelet\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQU5EMVRBVDhLc2xlYjV2YjZhTE0yeFF3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBMgpNVFkxTVRReFdoY05NVGt3TkRBMk1UWTFNVFF4V2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFKck5xWFVZMVBFQXVKM1pkSHRyRGsvRFdIQ3dJelB0UHdMNjFubHJaL1hFOVdSUGIvbmF2UVJLVXBkdQpSaFhjSDNkeHYwbEhyOFFzZHhBdnRkMkEvczlNY0NaQ0dwNisvUVVzVStvbndkWGJaa3FocmxYWXBNSjFZUkczCkN1OHNrazV2OGNrUkcrZHE5K1JBbUdIMWppT25yL045RGpqTVJ2YWZzM2lKaVlTV01abnVNK0dGVC9LSWNjNm0KZDZYYUlrVFo2eHBvcFZnRzROOUtuNHVOL2pJMHkrTjFCbXYydnNteFc5RE1jcHZqcjVLR2VIQmNoeFdLQURhYgplL2hERkw1b0NhNU5uU0pxRDd5ZFEwQ3RBRkxFN2h5Y09HeGxqMjNiQ0w1ZDRiUnFJZFdYbG5aU1F0bWdtV1E3CkovMTZVdzU0NWJGVjNKNUR0RjJhamdsR0VQa0NBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZKcjBBcHVaM3c3NStJb3R5TnFlRVZrSFl4OXNNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJBClpXcVpOUEZjTUEzYUEvQVVOdjBKN2hveTZVWjB5bDArVkVuemxkUmNGRXRRUTloMnl1aDUvY042eWZJMnZKV0sKK3hRNitESzB2WWZ4d1BWNU5MOFZuTExpbVkvVWVyc3hnWFNZcS9qVlFIajRkU3c5V09KWis3dmh4bncremZqeQpCWmQ0WHl6bXR6MEoyODUwQjVrZW14QytjUFcwa3NnR0p1dWgyMlFobkU1ZENuTjhNalN0QUdaUUVUT1p4REZvCi9jV0t5ZER2LzhqcnVCbWZXTG5yYmNDOVNQZVpHZVRBSE1VMmlGVXIrQnVIamExc0RMZVB2aTNZR3ZCSDVrNnkKQWNCQWxkaFNqRDRnVm5QcU9MbzhzVUU0dGErZTZpQi96c3hyNXl1MUlIQjRpcVdsR0ZZZFhudS9PZm5qZ0NLcAoyc3NrNndhd25hTEt3QWxVZ3EyMgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBbXMycGRSalU4UUM0bmRsMGUyc09UOE5ZY0xBak0rMC9BdnJXZVd0bjljVDFaRTl2CitkcTlCRXBTbDI1R0Zkd2ZkM0cvU1VldnhDeDNFQysxM1lEK3oweHdKa0lhbnI3OUJTeFQ2aWZCMWR0bVNxR3UKVmRpa3duVmhFYmNLN3l5U1RtL3h5UkViNTJyMzVFQ1lZZldPSTZldjgzME9PTXhHOXAremVJbUpoSll4bWU0ego0WVZQOG9oeHpxWjNwZG9pUk5uckdtaWxXQWJnMzBxZmk0MytNalRMNDNVR2EvYSt5YkZiME14eW0rT3Zrb1o0CmNGeUhGWW9BTnB0NytFTVV2bWdKcmsyZEltb1B2SjFEUUswQVVzVHVISnc0YkdXUGJkc0l2bDNodEdvaDFaZVcKZGxKQzJhQ1paRHNuL1hwVERuamxzVlhjbmtPMFhacU9DVVlRK1FJREFRQUJBb0lCQUFiNjNQZ3RyWFJNYndhWApCbnlHSURnU2U4dGc5Y1ZpbmlPNVFiQnAybDhuaVZVRGkrMzlJZWF1bnppNnZTaEJLNTRNSCs3aTc1YnQxbFNCCmdqYkJtVHVwbTZqdDlCdFNTMEJQZGwwcGU4RHp5cEgwNWxKeW1VTTNYYkFaeThGckJoSEpWR0tYaGVXU1dpa04KakpGbUxBbUpoeEo0Z2dxbmswK05kZDhxZkd2Zzg5bU9mQ04vSGpacEdUOEhvVVdhSFlEL05XdGtqL3VFdlhCaQorMy8wdElTNnI2RjdGZTY1T2RiZU1NNFJrcFIySXdNR1dVcCtoWU4wR1dIR1FmRWNTa1hxdy9Cem5LOXJMdXpCCjF0K1RNR3ArZEx2NnBUMU5ON3VuOXZBWmRxNnk3ZStnaVFvWE9UaG5xUmpxNElsNFRsejlTenBBTnlwL2VFZVIKZFR3OE4wMENnWUVBeE9tNzZSU3M3TzZOdjVOL05KNksvNTBOa05UVk9oVk1sd0RCb0ErNmozbFkyWmVSMUY4UQoyeVlhRVdOZTNVQW01d0hHRnQyQkdDL2g5Zm9vanJnNUpUc0d3OVYzNEIzYStIU3JQRDAvVEJLTzlVMkJrYXExCjlaVFNlbnRIbERhTHM4K1M4ZVMzQUZ3RUJhVkJEakYwTFVSOVVPV215RnJOZExwUUFJSGpxOHNDZ1lFQXlVRXcKMkloNFArSXFYNzdZa3JYdFo0VFMwR01JVnozUVRBWXRMVkZicWpPRGRwSC9mUmRIdkV5eUZxOW8yVnkzQmxJVgpyK2RBOTFpUXFkTWllQzFraFRKZi9GMFRVb3NjY2luOXF3OWc0aHRuS05vL01RYnozVmgvR3NaalFHVmlxY0IvCmJqSWRSTVo2NjRxbkoxNUdHTnJuNVpPdVEycW15RUVvc2ttcHBjc0NnWUIxU0NtdHg2eS9hYzV2Zm5CVGJPS3AKSUdmR0RaMzZmRmtqejBXRUNobzUvaktYVnhsNmZpelIrajJvZ2FFczhscTVXR3NkajB5bWxVNW1iVnJldG9jQwp6OGRWdUwwdmRWaklodVMrZWxSTEFQcTR6RE1TQ2JWYTBnc1MvSDVEbnNGU2xaMldDWDJkN3pCT0ZJRk03Tk9mCmFwMmhJMGRWS2hBWktDY2lSanJPUlFLQmdRQ254RmhicVNmVTJVeEpsR1lscHRMSXdNaWNQbkh0aC9IajdpSXEKN085azZweGtjMEJ2bnNDR0Q4bEZiK1FQam1Ka09ua3BzYlZPZTkzY004MUFNVmJpVWlRQjAvVVBramVjVTdUSwpySDh1L1hqNWJUWFFRT041V1JSYjFaVlhVU3oySlNvVlNtRnJ1NmtzUU9FbXlFZlc0R1QvMUNRb3Z2ZFphRGZzCnA4dHNFUUtCZ0FFTmh6dDdpNVlCalk3RjdJbUZCZkZ1dFQzMnJYa05KVmhzQWZWRW5KY2M2SEZOcVBXSUVNWjEKWW1ScG5oM0tuWW9MUzFVUHVOZ0VUVWRHZjZlODkzVGtjZlFHaTZwbnRta09jMDVPRGN0dkwyYTBua1cxSnp0ZwpoNVhGRDd6aWp2UzRtVUJ6bDNTVzMwNUVZMGxHL0YyeXZtcFg2WUFuYkMxSGhmWTVlbk9VCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\ncontexts:\n- context:\n    cluster: local\n    user: kubelet\n",
                            "filename": "assets/auth/kubeconfig",
                            "id": "b83c93ed1afe2fa11ac5395268503fa25b0a89c6"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.kubelet-crt": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_locally_signed_cert.kubelet"
                    ],
                    "primary": {
                        "id": "b83a9255d82eb5da1217c0452a75878f25da50ce",
                        "attributes": {
                            "content": "-----BEGIN CERTIFICATE-----\nMIIDOzCCAiOgAwIBAgIRAND1TAT8Ksleb5vb6aLM2xQwDQYJKoZIhvcNAQELBQAw\nJTERMA8GA1UEChMIYm9vdGt1YmUxEDAOBgNVBAMTB2t1YmUtY2EwHhcNMTgwNDA2\nMTY1MTQxWhcNMTkwNDA2MTY1MTQxWjArMRcwFQYDVQQKEw5zeXN0ZW06bWFzdGVy\nczEQMA4GA1UEAxMHa3ViZWxldDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC\nggEBAJrNqXUY1PEAuJ3ZdHtrDk/DWHCwIzPtPwL61nlrZ/XE9WRPb/navQRKUpdu\nRhXcH3dxv0lHr8QsdxAvtd2A/s9McCZCGp6+/QUsU+onwdXbZkqhrlXYpMJ1YRG3\nCu8skk5v8ckRG+dq9+RAmGH1jiOnr/N9DjjMRvafs3iJiYSWMZnuM+GFT/KIcc6m\nd6XaIkTZ6xpopVgG4N9Kn4uN/jI0y+N1Bmv2vsmxW9DMcpvjr5KGeHBchxWKADab\ne/hDFL5oCa5NnSJqD7ydQ0CtAFLE7hycOGxlj23bCL5d4bRqIdWXlnZSQtmgmWQ7\nJ/16Uw545bFV3J5DtF2ajglGEPkCAwEAAaNgMF4wDgYDVR0PAQH/BAQDAgWgMB0G\nA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB8GA1Ud\nIwQYMBaAFJr0ApuZ3w75+IotyNqeEVkHYx9sMA0GCSqGSIb3DQEBCwUAA4IBAQBA\nZWqZNPFcMA3aA/AUNv0J7hoy6UZ0yl0+VEnzldRcFEtQQ9h2yuh5/cN6yfI2vJWK\n+xQ6+DK0vYfxwPV5NL8VnLLimY/UersxgXSYq/jVQHj4dSw9WOJZ+7vhxnw+zfjy\nBZd4Xyzmtz0J2850B5kemxC+cPW0ksgGJuuh22QhnE5dCnN8MjStAGZQETOZxDFo\n/cWKydDv/8jruBmfWLnrbcC9SPeZGeTAHMU2iFUr+BuHja1sDLePvi3YGvBH5k6y\nAcBAldhSjD4gVnPqOLo8sUE4ta+e6iB/zsxr5yu1IHB4iqWlGFYdXnu/OfnjgCKp\n2ssk6wawnaLKwAlUgq22\n-----END CERTIFICATE-----\n",
                            "filename": "assets/tls/kubelet.crt",
                            "id": "b83a9255d82eb5da1217c0452a75878f25da50ce"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.kubelet-key": {
                    "type": "local_file",
                    "depends_on": [
                        "tls_private_key.kubelet"
                    ],
                    "primary": {
                        "id": "b3f11986dcbdd5127c474f517882469b99ec5248",
                        "attributes": {
                            "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAms2pdRjU8QC4ndl0e2sOT8NYcLAjM+0/AvrWeWtn9cT1ZE9v\n+dq9BEpSl25GFdwfd3G/SUevxCx3EC+13YD+z0xwJkIanr79BSxT6ifB1dtmSqGu\nVdikwnVhEbcK7yySTm/xyREb52r35ECYYfWOI6ev830OOMxG9p+zeImJhJYxme4z\n4YVP8ohxzqZ3pdoiRNnrGmilWAbg30qfi43+MjTL43UGa/a+ybFb0Mxym+OvkoZ4\ncFyHFYoANpt7+EMUvmgJrk2dImoPvJ1DQK0AUsTuHJw4bGWPbdsIvl3htGoh1ZeW\ndlJC2aCZZDsn/XpTDnjlsVXcnkO0XZqOCUYQ+QIDAQABAoIBAAb63PgtrXRMbwaX\nBnyGIDgSe8tg9cViniO5QbBp2l8niVUDi+39Ieaunzi6vShBK54MH+7i75bt1lSB\ngjbBmTupm6jt9BtSS0BPdl0pe8DzypH05lJymUM3XbAZy8FrBhHJVGKXheWSWikN\njJFmLAmJhxJ4ggqnk0+Ndd8qfGvg89mOfCN/HjZpGT8HoUWaHYD/NWtkj/uEvXBi\n+3/0tIS6r6F7Fe65OdbeMM4RkpR2IwMGWUp+hYN0GWHGQfEcSkXqw/BznK9rLuzB\n1t+TMGp+dLv6pT1NN7un9vAZdq6y7e+giQoXOThnqRjq4Il4Tlz9SzpANyp/eEeR\ndTw8N00CgYEAxOm76RSs7O6Nv5N/NJ6K/50NkNTVOhVMlwDBoA+6j3lY2ZeR1F8Q\n2yYaEWNe3UAm5wHGFt2BGC/h9foojrg5JTsGw9V34B3a+HSrPD0/TBKO9U2Bkaq1\n9ZTSentHlDaLs8+S8eS3AFwEBaVBDjF0LUR9UOWmyFrNdLpQAIHjq8sCgYEAyUEw\n2Ih4P+IqX77YkrXtZ4TS0GMIVz3QTAYtLVFbqjODdpH/fRdHvEyyFq9o2Vy3BlIV\nr+dA91iQqdMieC1khTJf/F0TUosccin9qw9g4htnKNo/MQbz3Vh/GsZjQGViqcB/\nbjIdRMZ664qnJ15GGNrn5ZOuQ2qmyEEoskmppcsCgYB1SCmtx6y/ac5vfnBTbOKp\nIGfGDZ36fFkjz0WECho5/jKXVxl6fizR+j2ogaEs8lq5WGsdj0ymlU5mbVretocC\nz8dVuL0vdVjIhuS+elRLAPq4zDMSCbVa0gsS/H5DnsFSlZ2WCX2d7zBOFIFM7NOf\nap2hI0dVKhAZKCciRjrORQKBgQCnxFhbqSfU2UxJlGYlptLIwMicPnHth/Hj7iIq\n7O9k6pxkc0BvnsCGD8lFb+QPjmJkOnkpsbVOe93cM81AMVbiUiQB0/UPkjecU7TK\nrH8u/Xj5bTXQQON5WRRb1ZVXUSz2JSoVSmFru6ksQOEmyEfW4GT/1CQovvdZaDfs\np8tsEQKBgAENhzt7i5YBjY7F7ImFBfFutT32rXkNJVhsAfVEnJcc6HFNqPWIEMZ1\nYmRpnh3KnYoLS1UPuNgETUdGf6e893TkcfQGi6pntmkOc05ODctvL2a0nkW1Jztg\nh5XFD7zijvS4mUBzl3SW305EY0lG/F2yvmpX6YAnbC1HhfY5enOU\n-----END RSA PRIVATE KEY-----\n",
                            "filename": "assets/tls/kubelet.key",
                            "id": "b3f11986dcbdd5127c474f517882469b99ec5248"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "local_file.user-kubeconfig": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.user-kubeconfig"
                    ],
                    "primary": {
                        "id": "6555f2aa0aa8e492648d9c93c405d3cfa5546427",
                        "attributes": {
                            "content": "apiVersion: v1\nkind: Config\nclusters:\n- name: steve-cluster\n  cluster:\n    server: https://steve:443\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRQXhKSU1wcFRaaUJuY0hqRG1hbnZ1REFOQmdrcWhraUc5dzBCQVFzRkFEQWwKTVJFd0R3WURWUVFLRXdoaWIyOTBhM1ZpWlRFUU1BNEdBMVVFQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREEwTURZeApOalV4TkRCYUZ3MHhPVEEwTURZeE5qVXhOREJhTUNVeEVUQVBCZ05WQkFvVENHSnZiM1JyZFdKbE1SQXdEZ1lEClZRUURFd2RyZFdKbExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXV6NnoKV0hnMjhBVWViYkp1K2FQOC9WaXZLNUoyMXk5TkdRQnJjNko3VmtxZjZ1QTE3S3ZqMzFYM3ppbDdrRG9EOTQ3cwo3akplUXQybjc1dERvVGpTUFFpQkIvNmxRQVVtRG1HM0RpOStLc0lSQ0pHa3JzdHFYZU0vKzRScXNQSTZZRUgwCkI1SGorUzJFcVk5VGtQcXJNeEhhS3RKMG5Ca3NPMnU0UkZJRElVTkhjUnY5d0NMemJBNTlhb2p6dGpFR0g1QUQKdVFaV3lMdnpNZk9WZ1JlSmNYNy9IUWt6TldLMDlQRGpjazZ0WC9RMC82VW0ySDNIU1JKRDl1TVNwL2I0RUE1SgpoQlhDZVh3MmVoeE9FaFJDMXJmelMxNk9uWTdaeDBHdk5uUU1XMlRSZTVqS2FjYmlnbGZlSE42Qnh0UmM5ZWhPCjRTazg3dFJXdWZvdFpWYjYrUUlEQVFBQm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVbXZRQ201bmZEdm40aWkzSTJwNFJXUWRqSDJ3d0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQk5mNjNpNnNGVnJ3Y0tNU3k5bXpBNXllS2ZZMDZGZXFjUmp1U2dFdUx3VDJYaDZ5aGV5Cllvd3BWQ0tncXNSRWVjUjFvbWd6bkRqbnk0MUdFd2p4cVl1REdtWWl0d1RTOWg1OW9ZRldoUmw4OXk3aERDVnAKOTVjL05kUHVyM25pMUtqNzVjY2V5cFJla2lhUjJYNGhCY2xDcERWMm8wc29sM3QzMlFWSmtBQWhhVHFuOG9FdwpQc3V6RzFmZ1Z6UkRTTTgvRmFBNjdKSk9BRnEzRVFQUk1HZVMzd3IyRFpPVUpFTWMxb01PbHRFc3d1djVuNmFxCjZicGNpYkdCVmJBRDE1b04wa2xuQUZuU3F6MzIzOUFtTHJPbjNBc00zUUgxOU9pemM2K3hObld2TTRrN1FoUmcKVmU5TW9LcjY2RXVtWHNaL0ZFNzRmSU4vbG53S0dnV3JoQU09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nusers:\n- name: steve-user\n  user:\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQU5EMVRBVDhLc2xlYjV2YjZhTE0yeFF3RFFZSktvWklodmNOQVFFTEJRQXcKSlRFUk1BOEdBMVVFQ2hNSVltOXZkR3QxWW1VeEVEQU9CZ05WQkFNVEIydDFZbVV0WTJFd0hoY05NVGd3TkRBMgpNVFkxTVRReFdoY05NVGt3TkRBMk1UWTFNVFF4V2pBck1SY3dGUVlEVlFRS0V3NXplWE4wWlcwNmJXRnpkR1Z5CmN6RVFNQTRHQTFVRUF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MKZ2dFQkFKck5xWFVZMVBFQXVKM1pkSHRyRGsvRFdIQ3dJelB0UHdMNjFubHJaL1hFOVdSUGIvbmF2UVJLVXBkdQpSaFhjSDNkeHYwbEhyOFFzZHhBdnRkMkEvczlNY0NaQ0dwNisvUVVzVStvbndkWGJaa3FocmxYWXBNSjFZUkczCkN1OHNrazV2OGNrUkcrZHE5K1JBbUdIMWppT25yL045RGpqTVJ2YWZzM2lKaVlTV01abnVNK0dGVC9LSWNjNm0KZDZYYUlrVFo2eHBvcFZnRzROOUtuNHVOL2pJMHkrTjFCbXYydnNteFc5RE1jcHZqcjVLR2VIQmNoeFdLQURhYgplL2hERkw1b0NhNU5uU0pxRDd5ZFEwQ3RBRkxFN2h5Y09HeGxqMjNiQ0w1ZDRiUnFJZFdYbG5aU1F0bWdtV1E3CkovMTZVdzU0NWJGVjNKNUR0RjJhamdsR0VQa0NBd0VBQWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZApJd1FZTUJhQUZKcjBBcHVaM3c3NStJb3R5TnFlRVZrSFl4OXNNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJBClpXcVpOUEZjTUEzYUEvQVVOdjBKN2hveTZVWjB5bDArVkVuemxkUmNGRXRRUTloMnl1aDUvY042eWZJMnZKV0sKK3hRNitESzB2WWZ4d1BWNU5MOFZuTExpbVkvVWVyc3hnWFNZcS9qVlFIajRkU3c5V09KWis3dmh4bncremZqeQpCWmQ0WHl6bXR6MEoyODUwQjVrZW14QytjUFcwa3NnR0p1dWgyMlFobkU1ZENuTjhNalN0QUdaUUVUT1p4REZvCi9jV0t5ZER2LzhqcnVCbWZXTG5yYmNDOVNQZVpHZVRBSE1VMmlGVXIrQnVIamExc0RMZVB2aTNZR3ZCSDVrNnkKQWNCQWxkaFNqRDRnVm5QcU9MbzhzVUU0dGErZTZpQi96c3hyNXl1MUlIQjRpcVdsR0ZZZFhudS9PZm5qZ0NLcAoyc3NrNndhd25hTEt3QWxVZ3EyMgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBbXMycGRSalU4UUM0bmRsMGUyc09UOE5ZY0xBak0rMC9BdnJXZVd0bjljVDFaRTl2CitkcTlCRXBTbDI1R0Zkd2ZkM0cvU1VldnhDeDNFQysxM1lEK3oweHdKa0lhbnI3OUJTeFQ2aWZCMWR0bVNxR3UKVmRpa3duVmhFYmNLN3l5U1RtL3h5UkViNTJyMzVFQ1lZZldPSTZldjgzME9PTXhHOXAremVJbUpoSll4bWU0ego0WVZQOG9oeHpxWjNwZG9pUk5uckdtaWxXQWJnMzBxZmk0MytNalRMNDNVR2EvYSt5YkZiME14eW0rT3Zrb1o0CmNGeUhGWW9BTnB0NytFTVV2bWdKcmsyZEltb1B2SjFEUUswQVVzVHVISnc0YkdXUGJkc0l2bDNodEdvaDFaZVcKZGxKQzJhQ1paRHNuL1hwVERuamxzVlhjbmtPMFhacU9DVVlRK1FJREFRQUJBb0lCQUFiNjNQZ3RyWFJNYndhWApCbnlHSURnU2U4dGc5Y1ZpbmlPNVFiQnAybDhuaVZVRGkrMzlJZWF1bnppNnZTaEJLNTRNSCs3aTc1YnQxbFNCCmdqYkJtVHVwbTZqdDlCdFNTMEJQZGwwcGU4RHp5cEgwNWxKeW1VTTNYYkFaeThGckJoSEpWR0tYaGVXU1dpa04KakpGbUxBbUpoeEo0Z2dxbmswK05kZDhxZkd2Zzg5bU9mQ04vSGpacEdUOEhvVVdhSFlEL05XdGtqL3VFdlhCaQorMy8wdElTNnI2RjdGZTY1T2RiZU1NNFJrcFIySXdNR1dVcCtoWU4wR1dIR1FmRWNTa1hxdy9Cem5LOXJMdXpCCjF0K1RNR3ArZEx2NnBUMU5ON3VuOXZBWmRxNnk3ZStnaVFvWE9UaG5xUmpxNElsNFRsejlTenBBTnlwL2VFZVIKZFR3OE4wMENnWUVBeE9tNzZSU3M3TzZOdjVOL05KNksvNTBOa05UVk9oVk1sd0RCb0ErNmozbFkyWmVSMUY4UQoyeVlhRVdOZTNVQW01d0hHRnQyQkdDL2g5Zm9vanJnNUpUc0d3OVYzNEIzYStIU3JQRDAvVEJLTzlVMkJrYXExCjlaVFNlbnRIbERhTHM4K1M4ZVMzQUZ3RUJhVkJEakYwTFVSOVVPV215RnJOZExwUUFJSGpxOHNDZ1lFQXlVRXcKMkloNFArSXFYNzdZa3JYdFo0VFMwR01JVnozUVRBWXRMVkZicWpPRGRwSC9mUmRIdkV5eUZxOW8yVnkzQmxJVgpyK2RBOTFpUXFkTWllQzFraFRKZi9GMFRVb3NjY2luOXF3OWc0aHRuS05vL01RYnozVmgvR3NaalFHVmlxY0IvCmJqSWRSTVo2NjRxbkoxNUdHTnJuNVpPdVEycW15RUVvc2ttcHBjc0NnWUIxU0NtdHg2eS9hYzV2Zm5CVGJPS3AKSUdmR0RaMzZmRmtqejBXRUNobzUvaktYVnhsNmZpelIrajJvZ2FFczhscTVXR3NkajB5bWxVNW1iVnJldG9jQwp6OGRWdUwwdmRWaklodVMrZWxSTEFQcTR6RE1TQ2JWYTBnc1MvSDVEbnNGU2xaMldDWDJkN3pCT0ZJRk03Tk9mCmFwMmhJMGRWS2hBWktDY2lSanJPUlFLQmdRQ254RmhicVNmVTJVeEpsR1lscHRMSXdNaWNQbkh0aC9IajdpSXEKN085azZweGtjMEJ2bnNDR0Q4bEZiK1FQam1Ka09ua3BzYlZPZTkzY004MUFNVmJpVWlRQjAvVVBramVjVTdUSwpySDh1L1hqNWJUWFFRT041V1JSYjFaVlhVU3oySlNvVlNtRnJ1NmtzUU9FbXlFZlc0R1QvMUNRb3Z2ZFphRGZzCnA4dHNFUUtCZ0FFTmh6dDdpNVlCalk3RjdJbUZCZkZ1dFQzMnJYa05KVmhzQWZWRW5KY2M2SEZOcVBXSUVNWjEKWW1ScG5oM0tuWW9MUzFVUHVOZ0VUVWRHZjZlODkzVGtjZlFHaTZwbnRta09jMDVPRGN0dkwyYTBua1cxSnp0ZwpoNVhGRDd6aWp2UzRtVUJ6bDNTVzMwNUVZMGxHL0YyeXZtcFg2WUFuYkMxSGhmWTVlbk9VCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\ncontexts:\n- name: steve-context\n  context:\n    cluster: steve-cluster\n    user: steve-user\n",
                            "filename": "assets/auth/steve-config",
                            "id": "6555f2aa0aa8e492648d9c93c405d3cfa5546427"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local.default"
                },
                "template_dir.bootstrap-manifests": {
                    "type": "template_dir",
                    "depends_on": [],
                    "primary": {
                        "id": "5b57b36a88f0902c73429048fca3f169e4a22d32",
                        "attributes": {
                            "destination_dir": "assets/bootstrap-manifests",
                            "id": "5b57b36a88f0902c73429048fca3f169e4a22d32",
                            "source_dir": "/opt/cluster-config/terraform/.terraform/modules/ea39d6d476cd18bf0c8b076127e11683/resources/bootstrap-manifests",
                            "vars.%": "5",
                            "vars.cloud_provider": "",
                            "vars.etcd_servers": "https://n2.steve:2379",
                            "vars.hyperkube_image": "gcr.io/google_containers/hyperkube:v1.10.0",
                            "vars.pod_cidr": "10.2.0.0/16",
                            "vars.service_cidr": "10.3.0.0/16"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "template_dir.calico-manifests": {
                    "type": "template_dir",
                    "depends_on": [],
                    "primary": {
                        "id": "c0884774d210d3aeca2c00860fecb27ec97364af",
                        "attributes": {
                            "destination_dir": "assets/manifests-networking",
                            "id": "c0884774d210d3aeca2c00860fecb27ec97364af",
                            "source_dir": "/opt/cluster-config/terraform/.terraform/modules/ea39d6d476cd18bf0c8b076127e11683/resources/calico",
                            "vars.%": "4",
                            "vars.calico_cni_image": "quay.io/calico/cni:v2.0.1",
                            "vars.calico_image": "quay.io/calico/node:v3.0.4",
                            "vars.network_mtu": "1480",
                            "vars.pod_cidr": "10.2.0.0/16"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template.default"
                },
                "tls_cert_request.apiserver": {
                    "type": "tls_cert_request",
                    "depends_on": [
                        "tls_private_key.apiserver"
                    ],
                    "primary": {
                        "id": "7d76f718b4bb96609a5fb36f9b2ae825c82e4710",
                        "attributes": {
                            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIIC/TCCAeUCAQAwLzEUMBIGA1UEChMLa3ViZS1tYXN0ZXIxFzAVBgNVBAMTDmt1\nYmUtYXBpc2VydmVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuZXL\nUS990hm3iu3zUndyvRFaBmvLCZrS00G4LXj5sTNC2CJaib1IPy+gi/zoj+l3PE8v\nu2e+WhxsnWYhSgY3cbI8IzjFKCn8suhawi9iwrzr3JR4NHSHYxIK3lGoB9aJu2Kw\nKLnDBvHDEfRGuyB0FLnStjU75RKik2hBIJbG5EQObGozprywqcaU11bd9eiR5YrE\naZJjf1q7Q4Et8WEmz1sToEp3t3sH8chb2VyskpGUSaaL4AUqFsMfPTgkIcgCayfh\nkgH4MjvJEXtkeHkiDiYl8woQuGDlsjSFikJzYMOKvHRM1kv6vzFjcMjaoT9PJvnv\n61eALJtx+dO4EXy3oQIDAQABoIGIMIGFBgkqhkiG9w0BCQ4xeDB2MHQGA1UdEQRt\nMGuCBXN0ZXZlggprdWJlcm5ldGVzghJrdWJlcm5ldGVzLmRlZmF1bHSCFmt1YmVy\nbmV0ZXMuZGVmYXVsdC5zdmOCJGt1YmVybmV0ZXMuZGVmYXVsdC5zdmMuY2x1c3Rl\nci5sb2NhbIcECgMAATANBgkqhkiG9w0BAQsFAAOCAQEAqTTWntkEuvWryGu4I8oM\nyJrHZ4SCzhaMPFzojf08xQoAwdNOofUfsjn9ACHMAUWFuIeXI92V12oKZQMgpL2e\nCQdJxpXsSPqXUZgtOG8WwbCMG0n2Z+8lC9ozPfRuDo4TXeVeO/2hs7mXEP82+SoQ\nYUVOiCR26Op3e+wkk5v/arYYoK3No7OoB1sN544TwEUx4dRFvcf+gTLqEEacFbzq\nN7zf0hhjpjvDy+aMD0VGOaS07i2bG+aonPl59EsWxqkjQPjKisDIiUmcWvaOQrAv\nZTTZ78xBatHtaO9urCgENrO1fgJ3wziaSRKBFQFwtEB3a5vq9G5oedCKT2ENNIVJ\nVA==\n-----END CERTIFICATE REQUEST-----\n",
                            "dns_names.#": "5",
                            "dns_names.0": "steve",
                            "dns_names.1": "kubernetes",
                            "dns_names.2": "kubernetes.default",
                            "dns_names.3": "kubernetes.default.svc",
                            "dns_names.4": "kubernetes.default.svc.cluster.local",
                            "id": "7d76f718b4bb96609a5fb36f9b2ae825c82e4710",
                            "ip_addresses.#": "1",
                            "ip_addresses.0": "10.3.0.1",
                            "key_algorithm": "RSA",
                            "private_key_pem": "a2d6a1401e8150cd44200dbc54d04a4e0ee03982",
                            "subject.#": "1",
                            "subject.0.common_name": "kube-apiserver",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "kube-master",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_cert_request.client": {
                    "type": "tls_cert_request",
                    "depends_on": [
                        "tls_private_key.client"
                    ],
                    "primary": {
                        "id": "e2b76f6cf6411bd7c72e154672472f33df074457",
                        "attributes": {
                            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIICoTCCAYkCAQAwJTENMAsGA1UEChMEZXRjZDEUMBIGA1UEAxMLZXRjZC1jbGll\nbnQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDFNdePWwHp2iNMWaDx\nHnW/jB1vgjSgm3cmgg5Q54rLyOYqLFRtdtznWVs1N0o16QWysCbgCw95RsAdmEie\nVSS9ZF/Y/+yfFUAPQh53aANN6wXVXEft4isjn0LbHS/fZ4o37znn4MomKMX8l5cF\nF6cr7JQORhilnEvLb3pTYrqI96Cy6f05l3c0HBbrk6ywyft/0LzeNXOjNNVC48GJ\nFbtjr64EapBOqk3lYlPFzID+45g/2KVIcQnhC1j58w259Y9/UEILd5jCuPipzSHN\n+DqhykV9DoG6JIbRhUD1ID10OQ/KfVzXpdSF/X7iWWZtGav1un+TA7ba1najMSEW\nXTetAgMBAAGgNzA1BgkqhkiG9w0BCQ4xKDAmMCQGA1UdEQQdMBuCCG4yLnN0ZXZl\ngglsb2NhbGhvc3SHBH8AAAEwDQYJKoZIhvcNAQELBQADggEBAK7RrnjIBLCUQF11\nHin9Tc1jxv2Sv/WyQ/8l6u6jEMfv6f8PGrGkzh78lMaKS6LJS3cR/K3HkqreOMg/\nGl66i7bVwg+cM6c735924/rP479mH8sa0UXRsy9yHcyASgOuR9wKtDbN9oYhuRPs\nctBLIIPI+Jok7TRqaAH09sGtJjNGqoGr5/yPLGknBACzM/HDQpm9N/HF+h59jEgt\n9jhmUM7pdlADRZnnJgaZF6hOTJx+VGBX5QBjvMsIRYKunjZqmDksWJQwyhY4D/rY\nTm5UXJi9/D4K6CsnGqyffXW7bonuqrHt2MEOztJ0+JXwYOBbFVNH/G2BtQdwB9PT\nR4pAo+A=\n-----END CERTIFICATE REQUEST-----\n",
                            "dns_names.#": "2",
                            "dns_names.0": "n2.steve",
                            "dns_names.1": "localhost",
                            "id": "e2b76f6cf6411bd7c72e154672472f33df074457",
                            "ip_addresses.#": "1",
                            "ip_addresses.0": "127.0.0.1",
                            "key_algorithm": "RSA",
                            "private_key_pem": "93760b68662913f3ab0617a16eb9131a3d4df540",
                            "subject.#": "1",
                            "subject.0.common_name": "etcd-client",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "etcd",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_cert_request.kubelet": {
                    "type": "tls_cert_request",
                    "depends_on": [
                        "tls_private_key.kubelet"
                    ],
                    "primary": {
                        "id": "33ccc469b7c28a2b6b4b5a26a520f75865f310cc",
                        "attributes": {
                            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIICcDCCAVgCAQAwKzEXMBUGA1UEChMOc3lzdGVtOm1hc3RlcnMxEDAOBgNVBAMT\nB2t1YmVsZXQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCazal1GNTx\nALid2XR7aw5Pw1hwsCMz7T8C+tZ5a2f1xPVkT2/52r0ESlKXbkYV3B93cb9JR6/E\nLHcQL7XdgP7PTHAmQhqevv0FLFPqJ8HV22ZKoa5V2KTCdWERtwrvLJJOb/HJERvn\navfkQJhh9Y4jp6/zfQ44zEb2n7N4iYmEljGZ7jPhhU/yiHHOpnel2iJE2esaaKVY\nBuDfSp+Ljf4yNMvjdQZr9r7JsVvQzHKb46+ShnhwXIcVigA2m3v4QxS+aAmuTZ0i\nag+8nUNArQBSxO4cnDhsZY9t2wi+XeG0aiHVl5Z2UkLZoJlkOyf9elMOeOWxVdye\nQ7Rdmo4JRhD5AgMBAAGgADANBgkqhkiG9w0BAQsFAAOCAQEAHJLjy3YOa+GyHayW\ncT+Sa5nshiLRhe+5XQ0eb785766ubFRgfg13yQ0+Fid2FID2fkyHWuuYe017Nx0s\nzdaySUTujf9TbZoZtKwmseauOI5WirXwSzwCdjtZrYQW9NzyPAXEqMs5g9a2V/GY\n/5yyhOBXX6KQ4iDellETo1uW3NQmxDNMrKHuJUJ8pL0Ziwm/yaVy8sVQTh97oa/T\nBjLrQ/z1nO6FZekMAouTrlsLABGEczei2IdZZXdPBSXhK4FrliU3tbskmNuViKVI\nyKRJ4U2mqumbtkBaj0roDRJx/9A/049YcPHyHwRuYrVdo45TElnMSuHQfPyLONIH\nuc1lkg==\n-----END CERTIFICATE REQUEST-----\n",
                            "id": "33ccc469b7c28a2b6b4b5a26a520f75865f310cc",
                            "key_algorithm": "RSA",
                            "private_key_pem": "a8c134a32f2a30d799a8603cc62725f094e3316f",
                            "subject.#": "1",
                            "subject.0.common_name": "kubelet",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "system:masters",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_cert_request.peer": {
                    "type": "tls_cert_request",
                    "depends_on": [
                        "tls_private_key.peer"
                    ],
                    "primary": {
                        "id": "9b8e325444f37fa40b0ff123b2d827917644f54a",
                        "attributes": {
                            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIICjjCCAXYCAQAwIzENMAsGA1UEChMEZXRjZDESMBAGA1UEAxMJZXRjZC1wZWVy\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA9YK4piCwT6KPCncTuAQ7\nsdBssQO3aOf7cSYyKtcdgfZsKFrrj6RjQ/ko2OUKFLYsrEa/FeuuWx/x5SeB+1cF\n6YxxbbQNMPyVwDhdZXDQqG7OH6lvxH4xOqwo50PAnVc5BQNFRDmV22X+5iHlTMLR\nLruoSHk63fDDcQnCDUPXJT5YDdM0C3AtKgf5VD7YEQDZYPexKl8ZyBar3AeTPhsH\n3ezlX1qrDbDD9Feu4p/besPlWoS2fFWP/tymqs0SN2eh91VuFWuFTGpgdWQKShNA\nhJK4+y8NSKEbOONkOdRAtiUY5wHgb0mEHpXovn7IRj9nJJVSiRfrn1IZ9HX/0P0g\nHQIDAQABoCYwJAYJKoZIhvcNAQkOMRcwFTATBgNVHREEDDAKgghuMi5zdGV2ZTAN\nBgkqhkiG9w0BAQsFAAOCAQEAQNOualIrtc8HTxKpp/vZLEiUrehme3/gTCxpqktV\ngxtX8H41reSjHctwEQ0mgQeqW8/eeI1WwtMCsaykw7Iy43nVFahmfZcwI+iq+X7T\n23sWyfehLMbMp1SSNhbjEicpOu3WN17oURZIhsBMC7UFfEq5utTx2ZWnIhewo6q+\nGY53Qfe6WupLif+bhFRWR18B9dScmPvJkcKeqJPPjhz+EGD/llTOo3YlWyzFpCFM\nHpu+tNLC4GNmJeDUT6NF03LpOQorx9/2uKxspdINOVMfRxIBL2D+rnExBRkJ96UM\nYK402PImENZDA6ryvzIAG5yrGRxZZPWTq7g7xHACGn8zzw==\n-----END CERTIFICATE REQUEST-----\n",
                            "dns_names.#": "1",
                            "dns_names.0": "n2.steve",
                            "id": "9b8e325444f37fa40b0ff123b2d827917644f54a",
                            "key_algorithm": "RSA",
                            "private_key_pem": "ddce63de24e158952934cbfd6ed901bd30bc7ed3",
                            "subject.#": "1",
                            "subject.0.common_name": "etcd-peer",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "etcd",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_cert_request.server": {
                    "type": "tls_cert_request",
                    "depends_on": [
                        "tls_private_key.server"
                    ],
                    "primary": {
                        "id": "c8afc812e56dc6fde0b6332c9edaf24f1997e129",
                        "attributes": {
                            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIICoTCCAYkCAQAwJTENMAsGA1UEChMEZXRjZDEUMBIGA1UEAxMLZXRjZC1zZXJ2\nZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCy3jBLap8cTrQj7D6L\nkhwirPkjo35qjfTn81q9KvGQJg6arMFVNS0m5aMdAPpSZyBlvQVSo0EmEQgcP4qW\nAktEcZ9kN4tZCj9EP0sIGC2Eu817GnPQLEyDzk9j/2tCjM4fTB+B33jYz70Z+Rlv\nzMWDGsvYxNOZ3F2vjdeX7oZ14uOhaqVGPbGwhytx5xCVSaLavXEb96CQe2ySuJAW\n3qqrVoIre+ufxzDC0eK2hH7b/A1eANY7KLZ7WhE/zIfo93nPsTXr99eD/+uw160E\nDNbsSSDCfnbbTlc/dVU2Y+7nainwgGvW8Qc//fZ5DEXlJgIJYqkBD5PbRKhGRfOd\nbXvrAgMBAAGgNzA1BgkqhkiG9w0BCQ4xKDAmMCQGA1UdEQQdMBuCCG4yLnN0ZXZl\ngglsb2NhbGhvc3SHBH8AAAEwDQYJKoZIhvcNAQELBQADggEBAHshUmuj7dSDdCOZ\nJzpDf32JG77yVCOjAmi33RD/0F+exkGNP55E9/Mr0rEfdk0UGewygkKTwNzS2eKg\nivpf00LkU/hS9Pnl6TRPdAGmzAJvf/I2EaOGiCBdHBoryVKnrJkp+d6jTK8LscZG\n1NS7h9XnshSgrASzrEuwz/odoySufDHFl13alLp7xlZMnk0qv4xFkdoL0x+5KnBk\nqdjzEYUyk9Oc3cRQcRAfEMRpi593N3YPXOXZ7PxBAAtyBsEwU7ihQr9/+aIIgzJM\nQusXYEQ1iGlCH7EU2ka67DC+JHoT5tM8Xv/gUFnkEmIyiZTiRhu4Oc8JHZ5K3MEA\nZ5KcBxI=\n-----END CERTIFICATE REQUEST-----\n",
                            "dns_names.#": "2",
                            "dns_names.0": "n2.steve",
                            "dns_names.1": "localhost",
                            "id": "c8afc812e56dc6fde0b6332c9edaf24f1997e129",
                            "ip_addresses.#": "1",
                            "ip_addresses.0": "127.0.0.1",
                            "key_algorithm": "RSA",
                            "private_key_pem": "59c9a4e20f68dcd9d7fc00fe61f27994b9300bbd",
                            "subject.#": "1",
                            "subject.0.common_name": "etcd-server",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "etcd",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_locally_signed_cert.apiserver": {
                    "type": "tls_locally_signed_cert",
                    "depends_on": [
                        "tls_cert_request.apiserver",
                        "tls_private_key.kube-ca.*",
                        "tls_self_signed_cert.kube-ca.*"
                    ],
                    "primary": {
                        "id": "246998701317542288538720069180578548211",
                        "attributes": {
                            "allowed_uses.#": "4",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "server_auth",
                            "allowed_uses.3": "client_auth",
                            "ca_cert_pem": "d3aeaca82814634f4f6428778836146d4b370b85",
                            "ca_key_algorithm": "RSA",
                            "ca_private_key_pem": "b7e32d38bf74e138dc66218c7866bc0ed90d4657",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDtzCCAp+gAwIBAgIRALnSODHBnvQ89smOlmw/SfMwDQYJKoZIhvcNAQELBQAw\nJTERMA8GA1UEChMIYm9vdGt1YmUxEDAOBgNVBAMTB2t1YmUtY2EwHhcNMTgwNDA2\nMTY1MTQxWhcNMTkwNDA2MTY1MTQxWjAvMRQwEgYDVQQKEwtrdWJlLW1hc3RlcjEX\nMBUGA1UEAxMOa3ViZS1hcGlzZXJ2ZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw\nggEKAoIBAQC5lctRL33SGbeK7fNSd3K9EVoGa8sJmtLTQbgtePmxM0LYIlqJvUg/\nL6CL/OiP6Xc8Ty+7Z75aHGydZiFKBjdxsjwjOMUoKfyy6FrCL2LCvOvclHg0dIdj\nEgreUagH1om7YrAoucMG8cMR9Ea7IHQUudK2NTvlEqKTaEEglsbkRA5sajOmvLCp\nxpTXVt316JHlisRpkmN/WrtDgS3xYSbPWxOgSne3ewfxyFvZXKySkZRJpovgBSoW\nwx89OCQhyAJrJ+GSAfgyO8kRe2R4eSIOJiXzChC4YOWyNIWKQnNgw4q8dEzWS/q/\nMWNwyNqhP08m+e/rV4Asm3H507gRfLehAgMBAAGjgdcwgdQwDgYDVR0PAQH/BAQD\nAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAA\nMB8GA1UdIwQYMBaAFJr0ApuZ3w75+IotyNqeEVkHYx9sMHQGA1UdEQRtMGuCBXN0\nZXZlggprdWJlcm5ldGVzghJrdWJlcm5ldGVzLmRlZmF1bHSCFmt1YmVybmV0ZXMu\nZGVmYXVsdC5zdmOCJGt1YmVybmV0ZXMuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2Nh\nbIcECgMAATANBgkqhkiG9w0BAQsFAAOCAQEAZyC2IYAI4SVzRekZmbyUnPjzJbuA\nRUOyvyu30VO6tYQCF9AjDai5s87ZSA+Hv5WHJqL6l1loPQ+lOKqfJDPzaQQ2sWvT\nEUi+bQ+1FGuYixYftlIDjO5qFda4LFH4Q5IUXE9HfWy9I/qcmsjXIfbnuAvpj4a8\nN+CSS4+NYm6T7I3ihai44lSgQxQWoysglMGvhNBfkcNoQJzlaaSM5zUOQ1aO4iTd\n4uC1V791cMquMRwEtkpCt4lryZ+81wGvuqkUfc67Ffss/HDAnB4whUFjy9kO9bZi\n6UzAxroQ6JgAtT9tzbEqs4yTWqRkB1q46GsW29BtRra01uarW4P8Hrb82g==\n-----END CERTIFICATE-----\n",
                            "cert_request_pem": "8b1fa3a195c1f6472bfedfed027cfee9dfd44b38",
                            "early_renewal_hours": "0",
                            "id": "246998701317542288538720069180578548211",
                            "validity_end_time": "2019-04-06T16:51:41.637651219Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-06T16:51:41.637651219Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_locally_signed_cert.client": {
                    "type": "tls_locally_signed_cert",
                    "depends_on": [
                        "tls_cert_request.client",
                        "tls_private_key.etcd-ca.*",
                        "tls_self_signed_cert.etcd-ca.*"
                    ],
                    "primary": {
                        "id": "58850006440306221731954729137644486620",
                        "attributes": {
                            "allowed_uses.#": "4",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "server_auth",
                            "allowed_uses.3": "client_auth",
                            "ca_cert_pem": "f59e888f3058245552428bc0add4694824858151",
                            "ca_key_algorithm": "RSA",
                            "ca_private_key_pem": "100e218f5f946db6967e01b4110d79a4bc7b3b60",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDWDCCAkCgAwIBAgIQLEYZVaTqH8rAcdjyfq+/3DANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwNjE2NTE0\nMVoXDTE5MDQwNjE2NTE0MVowJTENMAsGA1UEChMEZXRjZDEUMBIGA1UEAxMLZXRj\nZC1jbGllbnQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDFNdePWwHp\n2iNMWaDxHnW/jB1vgjSgm3cmgg5Q54rLyOYqLFRtdtznWVs1N0o16QWysCbgCw95\nRsAdmEieVSS9ZF/Y/+yfFUAPQh53aANN6wXVXEft4isjn0LbHS/fZ4o37znn4Mom\nKMX8l5cFF6cr7JQORhilnEvLb3pTYrqI96Cy6f05l3c0HBbrk6ywyft/0LzeNXOj\nNNVC48GJFbtjr64EapBOqk3lYlPFzID+45g/2KVIcQnhC1j58w259Y9/UEILd5jC\nuPipzSHN+DqhykV9DoG6JIbRhUD1ID10OQ/KfVzXpdSF/X7iWWZtGav1un+TA7ba\n1najMSEWXTetAgMBAAGjgYcwgYQwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQG\nCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFPJN\nNILrwGu4mJ/nUdCosfsiQ5woMCQGA1UdEQQdMBuCCG4yLnN0ZXZlgglsb2NhbGhv\nc3SHBH8AAAEwDQYJKoZIhvcNAQELBQADggEBAIjReiYxAr7LGmUn2IajEsBx8QIg\n+r1dXH401abED6BvEUm68HqbK8cJvbyuoPdt9Y/Uu61ymIr4yS4Q9T1wPpNnrKXF\nxUoUfq/DxnhUibLkBcbHdp1iT9C76RuvTAlnqF4Q1JRkzW8DILj16xfD6kbE2cut\nmNepjHTi3VsCSmQ8M6mDusn6G8L7P9y5mTqiGk1PHlyrcwVchVmAsAJXyYoy1wBZ\nttO2JuqBBxPrlLIzdEuJIQA6PMEmCvnKxM8nxc/sRQIF56VFeWFbRb3/JKiWbfHi\n1ofJdvzVSmaAR1DPrb/PimyUtbzWBFB7j2BUeQHr+jq8IF/f1UyXMa/BHOQ=\n-----END CERTIFICATE-----\n",
                            "cert_request_pem": "0d7e58714d338130bf28edf66126851faeed44e6",
                            "early_renewal_hours": "0",
                            "id": "58850006440306221731954729137644486620",
                            "validity_end_time": "2019-04-06T16:51:41.239382903Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-06T16:51:41.239382903Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_locally_signed_cert.kubelet": {
                    "type": "tls_locally_signed_cert",
                    "depends_on": [
                        "tls_cert_request.kubelet",
                        "tls_private_key.kube-ca.*",
                        "tls_self_signed_cert.kube-ca.*"
                    ],
                    "primary": {
                        "id": "277753077711688010214093445331717774100",
                        "attributes": {
                            "allowed_uses.#": "4",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "server_auth",
                            "allowed_uses.3": "client_auth",
                            "ca_cert_pem": "d3aeaca82814634f4f6428778836146d4b370b85",
                            "ca_key_algorithm": "RSA",
                            "ca_private_key_pem": "b7e32d38bf74e138dc66218c7866bc0ed90d4657",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDOzCCAiOgAwIBAgIRAND1TAT8Ksleb5vb6aLM2xQwDQYJKoZIhvcNAQELBQAw\nJTERMA8GA1UEChMIYm9vdGt1YmUxEDAOBgNVBAMTB2t1YmUtY2EwHhcNMTgwNDA2\nMTY1MTQxWhcNMTkwNDA2MTY1MTQxWjArMRcwFQYDVQQKEw5zeXN0ZW06bWFzdGVy\nczEQMA4GA1UEAxMHa3ViZWxldDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC\nggEBAJrNqXUY1PEAuJ3ZdHtrDk/DWHCwIzPtPwL61nlrZ/XE9WRPb/navQRKUpdu\nRhXcH3dxv0lHr8QsdxAvtd2A/s9McCZCGp6+/QUsU+onwdXbZkqhrlXYpMJ1YRG3\nCu8skk5v8ckRG+dq9+RAmGH1jiOnr/N9DjjMRvafs3iJiYSWMZnuM+GFT/KIcc6m\nd6XaIkTZ6xpopVgG4N9Kn4uN/jI0y+N1Bmv2vsmxW9DMcpvjr5KGeHBchxWKADab\ne/hDFL5oCa5NnSJqD7ydQ0CtAFLE7hycOGxlj23bCL5d4bRqIdWXlnZSQtmgmWQ7\nJ/16Uw545bFV3J5DtF2ajglGEPkCAwEAAaNgMF4wDgYDVR0PAQH/BAQDAgWgMB0G\nA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB8GA1Ud\nIwQYMBaAFJr0ApuZ3w75+IotyNqeEVkHYx9sMA0GCSqGSIb3DQEBCwUAA4IBAQBA\nZWqZNPFcMA3aA/AUNv0J7hoy6UZ0yl0+VEnzldRcFEtQQ9h2yuh5/cN6yfI2vJWK\n+xQ6+DK0vYfxwPV5NL8VnLLimY/UersxgXSYq/jVQHj4dSw9WOJZ+7vhxnw+zfjy\nBZd4Xyzmtz0J2850B5kemxC+cPW0ksgGJuuh22QhnE5dCnN8MjStAGZQETOZxDFo\n/cWKydDv/8jruBmfWLnrbcC9SPeZGeTAHMU2iFUr+BuHja1sDLePvi3YGvBH5k6y\nAcBAldhSjD4gVnPqOLo8sUE4ta+e6iB/zsxr5yu1IHB4iqWlGFYdXnu/OfnjgCKp\n2ssk6wawnaLKwAlUgq22\n-----END CERTIFICATE-----\n",
                            "cert_request_pem": "6844eca508567d3ef4b29365a3dde5990fff9408",
                            "early_renewal_hours": "0",
                            "id": "277753077711688010214093445331717774100",
                            "validity_end_time": "2019-04-06T16:51:41.22864824Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-06T16:51:41.22864824Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_locally_signed_cert.peer": {
                    "type": "tls_locally_signed_cert",
                    "depends_on": [
                        "tls_cert_request.peer",
                        "tls_private_key.etcd-ca.*",
                        "tls_self_signed_cert.etcd-ca.*"
                    ],
                    "primary": {
                        "id": "104826109199726903030731645137247346180",
                        "attributes": {
                            "allowed_uses.#": "4",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "server_auth",
                            "allowed_uses.3": "client_auth",
                            "ca_cert_pem": "f59e888f3058245552428bc0add4694824858151",
                            "ca_key_algorithm": "RSA",
                            "ca_private_key_pem": "100e218f5f946db6967e01b4110d79a4bc7b3b60",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDQzCCAiugAwIBAgIQTtzGNk40q1hyzzQiTV0eBDANBgkqhkiG9w0BAQsFADAh\nMQ0wCwYDVQQKEwRldGNkMRAwDgYDVQQDEwdldGNkLWNhMB4XDTE4MDQwNjE2NTE0\nMVoXDTE5MDQwNjE2NTE0MVowIzENMAsGA1UEChMEZXRjZDESMBAGA1UEAxMJZXRj\nZC1wZWVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA9YK4piCwT6KP\nCncTuAQ7sdBssQO3aOf7cSYyKtcdgfZsKFrrj6RjQ/ko2OUKFLYsrEa/FeuuWx/x\n5SeB+1cF6YxxbbQNMPyVwDhdZXDQqG7OH6lvxH4xOqwo50PAnVc5BQNFRDmV22X+\n5iHlTMLRLruoSHk63fDDcQnCDUPXJT5YDdM0C3AtKgf5VD7YEQDZYPexKl8ZyBar\n3AeTPhsH3ezlX1qrDbDD9Feu4p/besPlWoS2fFWP/tymqs0SN2eh91VuFWuFTGpg\ndWQKShNAhJK4+y8NSKEbOONkOdRAtiUY5wHgb0mEHpXovn7IRj9nJJVSiRfrn1IZ\n9HX/0P0gHQIDAQABo3UwczAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYB\nBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAU8k00guvA\na7iYn+dR0Kix+yJDnCgwEwYDVR0RBAwwCoIIbjIuc3RldmUwDQYJKoZIhvcNAQEL\nBQADggEBAJYHMyD+EWS9dXZeoyRUIvJgUjMRLjuDivgtBQIqV2ZQarp0BK91DGjE\n3WH31Q1k7VsrUP1LZIyMDe1vGVTZfXAZi9J93t1mb77VJk4UKLWaWC84QuPCPkxw\nkUlEeAULmtMbb1MzRBEPuzLXLra3AIUmGzjnP/LTGH6IrCCrfiJ3+T9QadlOkIoZ\nGxSD0F1vIgEsIQr9TLKyBmntzvm63o3ebwluM5JEe9gsotm7ugWe/QyDf1lc7OEn\nCjKUJHVttuujJj5OyS6QXgh6nBtg4i2tjVKwgiMfZ1L3m/2JwZ9v+i/n6oE/Vf1S\nNtG3zbs7ugCIuJyyUHti0SH6qM6sbVU=\n-----END CERTIFICATE-----\n",
                            "cert_request_pem": "5e333e424166dfbb2de5bb120a237b9fa778ea20",
                            "early_renewal_hours": "0",
                            "id": "104826109199726903030731645137247346180",
                            "validity_end_time": "2019-04-06T16:51:41.268183298Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-06T16:51:41.268183298Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_locally_signed_cert.server": {
                    "type": "tls_locally_signed_cert",
                    "depends_on": [
                        "tls_cert_request.server",
                        "tls_private_key.etcd-ca.*",
                        "tls_self_signed_cert.etcd-ca.*"
                    ],
                    "primary": {
                        "id": "270959703787802947207837494006430055545",
                        "attributes": {
                            "allowed_uses.#": "4",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "server_auth",
                            "allowed_uses.3": "client_auth",
                            "ca_cert_pem": "f59e888f3058245552428bc0add4694824858151",
                            "ca_key_algorithm": "RSA",
                            "ca_private_key_pem": "100e218f5f946db6967e01b4110d79a4bc7b3b60",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDWTCCAkGgAwIBAgIRAMvY8NNV3cZk2mhN4tCEPHkwDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDYxNjUx\nNDFaFw0xOTA0MDYxNjUxNDFaMCUxDTALBgNVBAoTBGV0Y2QxFDASBgNVBAMTC2V0\nY2Qtc2VydmVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAst4wS2qf\nHE60I+w+i5IcIqz5I6N+ao305/NavSrxkCYOmqzBVTUtJuWjHQD6UmcgZb0FUqNB\nJhEIHD+KlgJLRHGfZDeLWQo/RD9LCBgthLvNexpz0CxMg85PY/9rQozOH0wfgd94\n2M+9GfkZb8zFgxrL2MTTmdxdr43Xl+6GdeLjoWqlRj2xsIcrcecQlUmi2r1xG/eg\nkHtskriQFt6qq1aCK3vrn8cwwtHitoR+2/wNXgDWOyi2e1oRP8yH6Pd5z7E16/fX\ng//rsNetBAzW7Ekgwn52205XP3VVNmPu52op8IBr1vEHP/32eQxF5SYCCWKpAQ+T\n20SoRkXznW176wIDAQABo4GHMIGEMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAU\nBggrBgEFBQcDAQYIKwYBBQUHAwIwDAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBTy\nTTSC68BruJif51HQqLH7IkOcKDAkBgNVHREEHTAbgghuMi5zdGV2ZYIJbG9jYWxo\nb3N0hwR/AAABMA0GCSqGSIb3DQEBCwUAA4IBAQAH3JkZm2L+DY0MUhG8i823HP09\nwULNam7FdpN0sj4uJOf5qpC+xNjzBoiq0lDHO/hkO0/FK57zEJIWEamJmqf9TsHN\nVnUAxqp88xfE2ACDJ3oyfGpsBNe2CDeG1+eWcEcIc9IRZNMylu0wQsCaMLSwRRTD\n2MraVQwy+18eyqFwrmAivqHMWBu7mCIHQZPRSyDIHpy/1grAJc0sOwg/YBF5K5Be\nnYEnh9hm9w9rORNTnpPbxrbpPXegzQbsgc3WMdLZrcqV5cKuUL18DmZkWlYkc32y\n/SYaV93Yp+y/CYrCPvrA4lONhwGtfoun6uv8ZX3sGVZ2T9LLfYQ0gbfc7uOd\n-----END CERTIFICATE-----\n",
                            "cert_request_pem": "c2f829c67c9169d5fb11674fe3384ba587140799",
                            "early_renewal_hours": "0",
                            "id": "270959703787802947207837494006430055545",
                            "validity_end_time": "2019-04-06T16:51:41.252775518Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-06T16:51:41.252775518Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.apiserver": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "8cb18334a0aa48a3eaf3f63d79a3ba5cc2feafb1",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "8cb18334a0aa48a3eaf3f63d79a3ba5cc2feafb1",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAuZXLUS990hm3iu3zUndyvRFaBmvLCZrS00G4LXj5sTNC2CJa\nib1IPy+gi/zoj+l3PE8vu2e+WhxsnWYhSgY3cbI8IzjFKCn8suhawi9iwrzr3JR4\nNHSHYxIK3lGoB9aJu2KwKLnDBvHDEfRGuyB0FLnStjU75RKik2hBIJbG5EQObGoz\nprywqcaU11bd9eiR5YrEaZJjf1q7Q4Et8WEmz1sToEp3t3sH8chb2VyskpGUSaaL\n4AUqFsMfPTgkIcgCayfhkgH4MjvJEXtkeHkiDiYl8woQuGDlsjSFikJzYMOKvHRM\n1kv6vzFjcMjaoT9PJvnv61eALJtx+dO4EXy3oQIDAQABAoIBAHrVU4IDrgKOtPYG\ncqNlnhLX1j8jv3o2+E2NVQr75EBNznNhoY1DM/tmWZvuJDuEakAHpW8jxlC8OYOg\nYm4tWSsurjEd1Ri1WaVMty2J0ZNVGcOgnUMS0b1X5supPk8Zx4W4VyJNeXEyOUu7\n48jdPReuunGRIHiI8gQg3+JjCXdxF2IqY0ekjK4C6mr4TnoFWyB3xybrzMVpdol9\npKEpfQEHXD8VNXZeuAwC0vOv9WZ9t2dWkYToutg/sq3zOFJi1SOKWHy1lXICBuAB\nnWHt17pUs9B5WEO3Wj3DXNgDLafMHZKJlESpNLW+ANr9avBOrNtPNxHl+Bak/pwL\nEZvM9VUCgYEA0f8FFW1BREH8+3DL45120qQ2yKvmhU3+CZyWSlyOxBrChLAVYdNl\nGltYS0Zeg7ez+5xgwN5RU/81J9pc48LcNPYp1WHnl8Nx+Cn9CFQuxgwgnAbmMYWr\nr019l2meDQGZhYrI8ZmfriU0QpjUFDvZOnUt2XePBXHFNz6oGt4PXnMCgYEA4j3B\n6JhfE1I4EMgfvBMBYIJ11QV14W5/M6Zorxkn7KrhJ3LW/aMkS96fbSzqsHBhNjrB\nXVTqZj4E2HsVbeMqn6C0KFhFF7U9l1ywA9GlocV6n2RViV5fCRK/YL46/yZ9tHFH\nCKWFSVgUbMN/xHS+3aAb+LNu5x4fFD1e4/atWJsCgYEAz6aSO1bW9A0ggO5P3xql\nFbOmLJa3E1hE/PInNw8BaW9gq96Gtj5YOlDbJUxHR45O3l4K2oy79QhmYqstsVbN\nc117jnIKlWqBdzjl6ed8fQAe+spjs9KPK4C/0QpybEAJtCDBhQ449PX7EGOZSwzH\nSGP425K7DVIsBu3hQvgUUHsCgYAp7ewsIWEtgYVmhtBq2NLegg84haSNPR9SATtR\niEX/9MN5vizeIQgvD3lYkISGYq2BkW4Y0A4JGOFpBZa5IOrbXrtE5ucXN73MeZ8d\ndhNOYf0R4VSA+v59/f19/oOMmiOd94iEr7h+GVbfuXPKgyCEjpHgi9C4ALsd0yns\n8eC6lQKBgA5QEMJvqxt6RZleuEoh2m2NMgL/0ZvLPaDnbI9A5EbR/k4OtPYTsgcp\nrVv9gKGvjl5gjiSSOYELmHQUCnIl5ots4Tawh/HSSXebog2C6WoVqZUPHYeYBg1v\nJNDOlIrtppwEdh5BqTGfpUW0/9y6jbnJZ+Sis4WH0gAui2yWmCCc\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC5lctRL33SGbeK7fNSd3K9EVoGa8sJmtLTQbgtePmxM0LYIlqJvUg/L6CL/OiP6Xc8Ty+7Z75aHGydZiFKBjdxsjwjOMUoKfyy6FrCL2LCvOvclHg0dIdjEgreUagH1om7YrAoucMG8cMR9Ea7IHQUudK2NTvlEqKTaEEglsbkRA5sajOmvLCpxpTXVt316JHlisRpkmN/WrtDgS3xYSbPWxOgSne3ewfxyFvZXKySkZRJpovgBSoWwx89OCQhyAJrJ+GSAfgyO8kRe2R4eSIOJiXzChC4YOWyNIWKQnNgw4q8dEzWS/q/MWNwyNqhP08m+e/rV4Asm3H507gRfLeh\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuZXLUS990hm3iu3zUndy\nvRFaBmvLCZrS00G4LXj5sTNC2CJaib1IPy+gi/zoj+l3PE8vu2e+WhxsnWYhSgY3\ncbI8IzjFKCn8suhawi9iwrzr3JR4NHSHYxIK3lGoB9aJu2KwKLnDBvHDEfRGuyB0\nFLnStjU75RKik2hBIJbG5EQObGozprywqcaU11bd9eiR5YrEaZJjf1q7Q4Et8WEm\nz1sToEp3t3sH8chb2VyskpGUSaaL4AUqFsMfPTgkIcgCayfhkgH4MjvJEXtkeHki\nDiYl8woQuGDlsjSFikJzYMOKvHRM1kv6vzFjcMjaoT9PJvnv61eALJtx+dO4EXy3\noQIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.client": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "fa29973f7c6cba0debdc8647946e3796fc92d2e2",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "fa29973f7c6cba0debdc8647946e3796fc92d2e2",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpQIBAAKCAQEAxTXXj1sB6dojTFmg8R51v4wdb4I0oJt3JoIOUOeKy8jmKixU\nbXbc51lbNTdKNekFsrAm4AsPeUbAHZhInlUkvWRf2P/snxVAD0Ied2gDTesF1VxH\n7eIrI59C2x0v32eKN+855+DKJijF/JeXBRenK+yUDkYYpZxLy296U2K6iPegsun9\nOZd3NBwW65OssMn7f9C83jVzozTVQuPBiRW7Y6+uBGqQTqpN5WJTxcyA/uOYP9il\nSHEJ4QtY+fMNufWPf1BCC3eYwrj4qc0hzfg6ocpFfQ6BuiSG0YVA9SA9dDkPyn1c\n16XUhf1+4llmbRmr9bp/kwO22tZ2ozEhFl03rQIDAQABAoIBAQC/fKdBADocan4J\nvaGjXlMw2YkfZAtbw3jvQCtMbXb8pqauXnrgCyE11jLUuknpjMjGl3o34yV0ObmD\nQwGIE95ns5XJq76DPWwFJMtWX/2NY943LLJ/DjObFCIjhfSc9PlllHjiaQeAA+ky\nebLe8/eTk9SzA2cdL2T9NNJPMzcyk6HZyM39flr/gZpjImsW0HFc2vSKliZL8cC9\nnzjf0qCfSho/bUwpUjPMBxAYBi2nh0oP3yu0Cm8a0vfR01yQLSK8dU9VoVFhUQiI\nWx4QxtoDDCfl7YF4f3Rpe9lYkxfNMnrKI4hBKTlOsLPFHK/jx/N96BzYbtwVnUcZ\nYGhRx8X1AoGBANFRc5MwGQQkxt0F11W3ZTf+WmPcwwUHr/UifSkJt2W3dD4k80Mk\nmC0Krlq2j18BK59lVfxzy0whyZwnf8Mj3jntbRl4fPPDjvhJZH2g35DRHnE8pol8\nRHeCAgLWt0/wRpZVW+4IAjx670rr3Pn5F5YOOlajBOgIzRdPrGr2fa8XAoGBAPEx\nHseBRIRgDQTOw/Zarq0wcm2AGDKqTqOySO/CTum1mku8mNOGLbzBJ2QBTmaKCPze\nKIPc7AyyQiQtJJKmsOcFYb/RIoxNJaxjVr/lCJ/tWJg5k9vATrH0VOQXdun/ifVb\nkUkCO9H5UoK9qP1jzvLmt73szFy0KCEBEv35OGnbAoGBALxu7PKWHA8k5HlYps+d\nd9t+ePTpag7/KqItWCs3eghxrI29Sdkp+myh7u/u5QaL0S9/VHcd7ugsioiu7k9H\n3OidGtgRJbt0UyKlP3fw+RIvj441IV8npaNIQHM5xHCMR59SXJ3eS9USfpUd3CKU\n4WzOhio0O1h/g9H2gasRF3glAoGBALuF31Jp9OWe8EBOqhl+A9Vvl2f/cdDijOXF\nFeQjhMs8gMxlw8ShzCm3W3LreRNMOxSvfXyYZYaxia8q0gabR2s2yfsjFONUj/fp\n/GaSIhSFqp4gFg+DAyxktSPqAnCIV7DGEr1a2Tu1xysTXrIzyZEdRLqLw5BIGfMf\nLK7995iFAoGAHGhD5GhbTi6rL/vE8alKL5MCGM3CRkLTx4RdFWE8DYjCiT6OVeEY\ny5X9SC5wc6hFFRpiyJfwZbjaD99cuZc6kEf25Us9pnyMo4NIFXCgMTlaO7r3tFyS\nG6EFMuD+GZ8s+PETnG1UxlIuVX4t++FPgnGIM+kGzZVSPqydVMdjqqE=\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFNdePWwHp2iNMWaDxHnW/jB1vgjSgm3cmgg5Q54rLyOYqLFRtdtznWVs1N0o16QWysCbgCw95RsAdmEieVSS9ZF/Y/+yfFUAPQh53aANN6wXVXEft4isjn0LbHS/fZ4o37znn4MomKMX8l5cFF6cr7JQORhilnEvLb3pTYrqI96Cy6f05l3c0HBbrk6ywyft/0LzeNXOjNNVC48GJFbtjr64EapBOqk3lYlPFzID+45g/2KVIcQnhC1j58w259Y9/UEILd5jCuPipzSHN+DqhykV9DoG6JIbRhUD1ID10OQ/KfVzXpdSF/X7iWWZtGav1un+TA7ba1najMSEWXTet\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxTXXj1sB6dojTFmg8R51\nv4wdb4I0oJt3JoIOUOeKy8jmKixUbXbc51lbNTdKNekFsrAm4AsPeUbAHZhInlUk\nvWRf2P/snxVAD0Ied2gDTesF1VxH7eIrI59C2x0v32eKN+855+DKJijF/JeXBRen\nK+yUDkYYpZxLy296U2K6iPegsun9OZd3NBwW65OssMn7f9C83jVzozTVQuPBiRW7\nY6+uBGqQTqpN5WJTxcyA/uOYP9ilSHEJ4QtY+fMNufWPf1BCC3eYwrj4qc0hzfg6\nocpFfQ6BuiSG0YVA9SA9dDkPyn1c16XUhf1+4llmbRmr9bp/kwO22tZ2ozEhFl03\nrQIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.etcd-ca": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "7982d768e107d2ce803803b390ba489d478bcaf6",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "7982d768e107d2ce803803b390ba489d478bcaf6",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAvpnfeFWbcvhH1+apok+4X5kunC3EE+2MD8sTUg7UiC6KbyVc\nJ4fjm21YGkMT6D/nyjTqHFR6IUZ4f36holeWibfphukiRLrJXbis12tIql2p+KsE\ng703jEsPnAxIJ1KJ+KfoWs12lOnWVOe6qoOKrmH4iGMe2iVY+k6kBnpQ6vUhhwBy\n3Lg0godh17hoP66ZKxa7TOCJFUPVa8s9fPIyGbqEEIKnbNnWZek8rPFXuvGRyoK4\nYlHc9savO51kdD7Qw3Z+drJ+3EYbfRI1Qt+AMhj5Ex24dQYxOvMhR87293W+gTci\n1H8iPXBGtOAKOzEru2TO1GMqPiwDdoImhdBqmQIDAQABAoIBACrJcBkbXqIYikg1\nR69gJguP356/x1yR3vdMpzGskplfmUQKJv3Yy4eArF544GcqsWX7KvLhI+mEYFh+\nnNpMv0Z7OrlGbKLxK3MWmfZh5xYXoKhp+8F3IJkl4IMvXqM1LDPdvZNkvFIBjFPT\nEVxl2yP6akhzt+FQsQC/1qJ9otybd5E0p7RzB54DYbwXEQrl2ljtVQxGAbCGeGdB\n0+M/LZ+urxf+A6Gyk5r/6ataaFwS88WTFY4RQn3F67qPLm/dCuMEw9wRzM0hLvlT\nDMUlTzSErWzqylVXhMgqmUIfg/VIVZTRaSeYj0JjaG5y6OAsipJIgEI923jeOz3e\nLZBnfAECgYEA4WXBYGMCeeIY1eMIYSJSO2H+h4S8FHkvFsjqpwIifIXwgymg9IMB\n6of1jKl8PAodJxdSnX4g6z3FOZAEvI4omc3kklUsHNKejAHZSyB0EHdzMegJK/fu\n0bBw7OMv5UP2AgTqKXnNQ8LBIVdzQr10aq2EgolNmHuEer+OlG0+YxECgYEA2Hqu\nsxmcLvwdz8IkUJTRoDVDZDKU+C9buT8qut0JmpdVXr/0Shil2qXKZrv5ShKiTidO\nQiCgk+ojZllqASWBE70ylfKnOG8IGRzOLTp3VRvik8YDTN6A2r5xeaKxne/6mvyG\n60bl0Bb3WEg1G8vge3i7pICSeh4VS89tUPjh/wkCgYA7P28scfo1pawXlP0f41Cw\nUVsBrm9uBkjNeXTM/6+nAeIt6CRqAYHgb2qpVefVNGdjXisWQRBQJcWREv1bvxaH\nD2sU2BSnYunQLbA7okVACtYZ+T9n8l0xe2rDqhht8IZbE4Wl72F4fVoc9IrUsU5H\nuGLLmWHvQhCZ336QH4M1sQKBgCxhmodlbLvFPGdnqgJLQF7UDKjyJdBsBSYJaT0+\nK8Xh2MLAH9lBDF+zNbeyOf2RrGzRah3sin9ItVE6a50ojzn4w/Ix+U58lPBxE2P6\nZJSyTtV09yA/TbOK78C8NiXnGT3FH/QEaQEsdDFJPHoiZjdqHS4wndcja8JLGGJN\nZCfhAoGBANY9eveylwR6Bfkr85cUbcgKZg2VfV1k2xaoN52qJO7+4XkJDEyTRjMa\n+nVAMcrTTt/sLGDf9Rf65rMGQPZ4HPGwvR47Rq4u5x8AsHtckdqKOPrNCMnS1v3b\n9i0nzFGfUueqIkbMxZ37b4Vk7l2psIgP0a9bpp+6fJMSStOxYj16\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC+md94VZty+EfX5qmiT7hfmS6cLcQT7YwPyxNSDtSILopvJVwnh+ObbVgaQxPoP+fKNOocVHohRnh/fqGiV5aJt+mG6SJEuslduKzXa0iqXan4qwSDvTeMSw+cDEgnUon4p+hazXaU6dZU57qqg4quYfiIYx7aJVj6TqQGelDq9SGHAHLcuDSCh2HXuGg/rpkrFrtM4IkVQ9Vryz188jIZuoQQgqds2dZl6Tys8Ve68ZHKgrhiUdz2xq87nWR0PtDDdn52sn7cRht9EjVC34AyGPkTHbh1BjE68yFHzvb3db6BNyLUfyI9cEa04Ao7MSu7ZM7UYyo+LAN2giaF0GqZ\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvpnfeFWbcvhH1+apok+4\nX5kunC3EE+2MD8sTUg7UiC6KbyVcJ4fjm21YGkMT6D/nyjTqHFR6IUZ4f36holeW\nibfphukiRLrJXbis12tIql2p+KsEg703jEsPnAxIJ1KJ+KfoWs12lOnWVOe6qoOK\nrmH4iGMe2iVY+k6kBnpQ6vUhhwBy3Lg0godh17hoP66ZKxa7TOCJFUPVa8s9fPIy\nGbqEEIKnbNnWZek8rPFXuvGRyoK4YlHc9savO51kdD7Qw3Z+drJ+3EYbfRI1Qt+A\nMhj5Ex24dQYxOvMhR87293W+gTci1H8iPXBGtOAKOzEru2TO1GMqPiwDdoImhdBq\nmQIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.kube-ca": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "b81bac7194e4f1b8fe8edc81c76aa65df99639be",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "b81bac7194e4f1b8fe8edc81c76aa65df99639be",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAuz6zWHg28AUebbJu+aP8/VivK5J21y9NGQBrc6J7Vkqf6uA1\n7Kvj31X3zil7kDoD947s7jJeQt2n75tDoTjSPQiBB/6lQAUmDmG3Di9+KsIRCJGk\nrstqXeM/+4RqsPI6YEH0B5Hj+S2EqY9TkPqrMxHaKtJ0nBksO2u4RFIDIUNHcRv9\nwCLzbA59aojztjEGH5ADuQZWyLvzMfOVgReJcX7/HQkzNWK09PDjck6tX/Q0/6Um\n2H3HSRJD9uMSp/b4EA5JhBXCeXw2ehxOEhRC1rfzS16OnY7Zx0GvNnQMW2TRe5jK\nacbiglfeHN6BxtRc9ehO4Sk87tRWufotZVb6+QIDAQABAoIBAHB0d8HqcRQ1/tBj\nGcNUedyuJoZEsJsMDYG2ftI0A18P8ntdrQU3NuQq/WkUAOHd9gP4EtP77CC8ft+o\noDVzqtB9CwGCLj0E2pZImWgrndqQMyqyTfWstXUtxn+IR4t97xFgiu8A76n3bHVp\nXwbzhV5mmmCdhOs7MxV83G4r0zVl64/+yaypf9Nqbmqv1vNeg+h2S4he0gW2EAyn\nE7e9iBBfQyTIytWjUwsHs+CEGPl/1IQN4D1VVz1AWZ89GYLw4B7JAcsrQORRFfcQ\nsh3tv6bZEEW0UG9jYnGOoXehSR+zQYEXo3t0vO7VIZkjhdajgrpzWSGvyk5YuAow\nGELhfwECgYEA0lOeww+UOrleJgqSsEBv9s6IhUTmRKcUis/pkQ9hG5IoBQGmU0Em\nOTWB5NOyx2v9dJ/wt7rbqfLqHK3CmOtTDDCVEjnsakbV1LnknwnSVApJ9phs5wZ9\norY87+NFxEwKIrKnTrDHc90ewomOBex4ZV1HXcupTbi/vja+0DJRRsMCgYEA4+fu\ns4ntwXWj13IUo82nTvV9X6i3AGkytp9Jfp/OKEQ8NZsZuDYfFKFJ9F4kDsMZoEvq\numLM2we/G2zHBtlLcjkeQmXCCJdEmQ94xMpxnD69jPDv2HoCHR9EukoBUgs3Fa1O\nfNjkbL+/CWAUwdKY/g++XmxwqbU6bxNpwtn7s5MCgYEAtYUnou9iHaB3ydscKHMk\nblxnZKVHGn8ccoTn7qLYS0RDt7ZpxraWd49fcI7oX8Yqs6mJxffFtxIHzQKFzRZj\n0URok5dcG4jQ6UwaLMv8Mz3CAcohSu3GJlSjmOGMB9MceD+5t2dIbA2ti3XOFfy1\nF75+Zkvr7UECcvaqjeKvVKMCgYBlK9+uOeuetv9ts8nv0WqVRatLXNUoTIrjwSBa\nIszc2TW1Qk4PlY8ElHkFDwmIuBlXLHxeE2AHV5ABt68+nhW89hg1t4CEWcps/A5L\npeb7SmrQ92AxxC/OB8R1wkaFyk7Aw7eU+p+kmxZOLiXoyPl7xzdmKVN2MupmxsJr\namMvGwKBgA1g/1f4/9vsFd/6XukoMAUlpdZOYeJAM2e0PGtZj6BiRC1EvFl0j/Jj\nGYILR3fD+0mw9w+je7mp2CjGrt2WGiGMhkP/eUcYXk1QmOoTDHTpcqA/L48eglnW\nVHhA3jt8PhntxJ1L/N3jNSvP3V5orCjR7O3BS1IbPFzA+Ih0rXFl\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7PrNYeDbwBR5tsm75o/z9WK8rknbXL00ZAGtzontWSp/q4DXsq+PfVffOKXuQOgP3juzuMl5C3afvm0OhONI9CIEH/qVABSYOYbcOL34qwhEIkaSuy2pd4z/7hGqw8jpgQfQHkeP5LYSpj1OQ+qszEdoq0nScGSw7a7hEUgMhQ0dxG/3AIvNsDn1qiPO2MQYfkAO5BlbIu/Mx85WBF4lxfv8dCTM1YrT08ONyTq1f9DT/pSbYfcdJEkP24xKn9vgQDkmEFcJ5fDZ6HE4SFELWt/NLXo6djtnHQa82dAxbZNF7mMppxuKCV94c3oHG1Fz16E7hKTzu1Fa5+i1lVvr5\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuz6zWHg28AUebbJu+aP8\n/VivK5J21y9NGQBrc6J7Vkqf6uA17Kvj31X3zil7kDoD947s7jJeQt2n75tDoTjS\nPQiBB/6lQAUmDmG3Di9+KsIRCJGkrstqXeM/+4RqsPI6YEH0B5Hj+S2EqY9TkPqr\nMxHaKtJ0nBksO2u4RFIDIUNHcRv9wCLzbA59aojztjEGH5ADuQZWyLvzMfOVgReJ\ncX7/HQkzNWK09PDjck6tX/Q0/6Um2H3HSRJD9uMSp/b4EA5JhBXCeXw2ehxOEhRC\n1rfzS16OnY7Zx0GvNnQMW2TRe5jKacbiglfeHN6BxtRc9ehO4Sk87tRWufotZVb6\n+QIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.kubelet": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "6935bd46bae075b5cc172b2eca63f1b513703466",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "6935bd46bae075b5cc172b2eca63f1b513703466",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAms2pdRjU8QC4ndl0e2sOT8NYcLAjM+0/AvrWeWtn9cT1ZE9v\n+dq9BEpSl25GFdwfd3G/SUevxCx3EC+13YD+z0xwJkIanr79BSxT6ifB1dtmSqGu\nVdikwnVhEbcK7yySTm/xyREb52r35ECYYfWOI6ev830OOMxG9p+zeImJhJYxme4z\n4YVP8ohxzqZ3pdoiRNnrGmilWAbg30qfi43+MjTL43UGa/a+ybFb0Mxym+OvkoZ4\ncFyHFYoANpt7+EMUvmgJrk2dImoPvJ1DQK0AUsTuHJw4bGWPbdsIvl3htGoh1ZeW\ndlJC2aCZZDsn/XpTDnjlsVXcnkO0XZqOCUYQ+QIDAQABAoIBAAb63PgtrXRMbwaX\nBnyGIDgSe8tg9cViniO5QbBp2l8niVUDi+39Ieaunzi6vShBK54MH+7i75bt1lSB\ngjbBmTupm6jt9BtSS0BPdl0pe8DzypH05lJymUM3XbAZy8FrBhHJVGKXheWSWikN\njJFmLAmJhxJ4ggqnk0+Ndd8qfGvg89mOfCN/HjZpGT8HoUWaHYD/NWtkj/uEvXBi\n+3/0tIS6r6F7Fe65OdbeMM4RkpR2IwMGWUp+hYN0GWHGQfEcSkXqw/BznK9rLuzB\n1t+TMGp+dLv6pT1NN7un9vAZdq6y7e+giQoXOThnqRjq4Il4Tlz9SzpANyp/eEeR\ndTw8N00CgYEAxOm76RSs7O6Nv5N/NJ6K/50NkNTVOhVMlwDBoA+6j3lY2ZeR1F8Q\n2yYaEWNe3UAm5wHGFt2BGC/h9foojrg5JTsGw9V34B3a+HSrPD0/TBKO9U2Bkaq1\n9ZTSentHlDaLs8+S8eS3AFwEBaVBDjF0LUR9UOWmyFrNdLpQAIHjq8sCgYEAyUEw\n2Ih4P+IqX77YkrXtZ4TS0GMIVz3QTAYtLVFbqjODdpH/fRdHvEyyFq9o2Vy3BlIV\nr+dA91iQqdMieC1khTJf/F0TUosccin9qw9g4htnKNo/MQbz3Vh/GsZjQGViqcB/\nbjIdRMZ664qnJ15GGNrn5ZOuQ2qmyEEoskmppcsCgYB1SCmtx6y/ac5vfnBTbOKp\nIGfGDZ36fFkjz0WECho5/jKXVxl6fizR+j2ogaEs8lq5WGsdj0ymlU5mbVretocC\nz8dVuL0vdVjIhuS+elRLAPq4zDMSCbVa0gsS/H5DnsFSlZ2WCX2d7zBOFIFM7NOf\nap2hI0dVKhAZKCciRjrORQKBgQCnxFhbqSfU2UxJlGYlptLIwMicPnHth/Hj7iIq\n7O9k6pxkc0BvnsCGD8lFb+QPjmJkOnkpsbVOe93cM81AMVbiUiQB0/UPkjecU7TK\nrH8u/Xj5bTXQQON5WRRb1ZVXUSz2JSoVSmFru6ksQOEmyEfW4GT/1CQovvdZaDfs\np8tsEQKBgAENhzt7i5YBjY7F7ImFBfFutT32rXkNJVhsAfVEnJcc6HFNqPWIEMZ1\nYmRpnh3KnYoLS1UPuNgETUdGf6e893TkcfQGi6pntmkOc05ODctvL2a0nkW1Jztg\nh5XFD7zijvS4mUBzl3SW305EY0lG/F2yvmpX6YAnbC1HhfY5enOU\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCazal1GNTxALid2XR7aw5Pw1hwsCMz7T8C+tZ5a2f1xPVkT2/52r0ESlKXbkYV3B93cb9JR6/ELHcQL7XdgP7PTHAmQhqevv0FLFPqJ8HV22ZKoa5V2KTCdWERtwrvLJJOb/HJERvnavfkQJhh9Y4jp6/zfQ44zEb2n7N4iYmEljGZ7jPhhU/yiHHOpnel2iJE2esaaKVYBuDfSp+Ljf4yNMvjdQZr9r7JsVvQzHKb46+ShnhwXIcVigA2m3v4QxS+aAmuTZ0iag+8nUNArQBSxO4cnDhsZY9t2wi+XeG0aiHVl5Z2UkLZoJlkOyf9elMOeOWxVdyeQ7Rdmo4JRhD5\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAms2pdRjU8QC4ndl0e2sO\nT8NYcLAjM+0/AvrWeWtn9cT1ZE9v+dq9BEpSl25GFdwfd3G/SUevxCx3EC+13YD+\nz0xwJkIanr79BSxT6ifB1dtmSqGuVdikwnVhEbcK7yySTm/xyREb52r35ECYYfWO\nI6ev830OOMxG9p+zeImJhJYxme4z4YVP8ohxzqZ3pdoiRNnrGmilWAbg30qfi43+\nMjTL43UGa/a+ybFb0Mxym+OvkoZ4cFyHFYoANpt7+EMUvmgJrk2dImoPvJ1DQK0A\nUsTuHJw4bGWPbdsIvl3htGoh1ZeWdlJC2aCZZDsn/XpTDnjlsVXcnkO0XZqOCUYQ\n+QIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.peer": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "89c6b4664b724f99fdb5feceb257fd1c4a4731ce",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "89c6b4664b724f99fdb5feceb257fd1c4a4731ce",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpgIBAAKCAQEA9YK4piCwT6KPCncTuAQ7sdBssQO3aOf7cSYyKtcdgfZsKFrr\nj6RjQ/ko2OUKFLYsrEa/FeuuWx/x5SeB+1cF6YxxbbQNMPyVwDhdZXDQqG7OH6lv\nxH4xOqwo50PAnVc5BQNFRDmV22X+5iHlTMLRLruoSHk63fDDcQnCDUPXJT5YDdM0\nC3AtKgf5VD7YEQDZYPexKl8ZyBar3AeTPhsH3ezlX1qrDbDD9Feu4p/besPlWoS2\nfFWP/tymqs0SN2eh91VuFWuFTGpgdWQKShNAhJK4+y8NSKEbOONkOdRAtiUY5wHg\nb0mEHpXovn7IRj9nJJVSiRfrn1IZ9HX/0P0gHQIDAQABAoIBAQCKx4gFMHk5qtRc\nwA7/eDUeQIkQTt+Ah5HU1hiJquvdKSTecvaxTeVm6RMz99SI/KmoAJ3HkGAQ1q/w\nLzMElp6a9G6x6pOCW2VzMOlqjCkG7QvLTgYF9qdxWRwODnh0+Hcc5EplVH/nc3Jx\nODvb9kw0tJNd1Fl4V77CyRdOVEjrnYTEKMzJiQlxLuQ0RPgeolLKzlzujfOtpGoL\nvs825AP3/Ne/TZ9FTk9Msic2xoQXhCndluObJnStYA+Qbd36ezGxLQDaeGGlqIND\nMbs2YxhRIGVLtCZ0wplXvklFWSwG8uGodwZflBm3WdH43tk9203Qw2EbNgYpZz3r\nbLM6Bo4pAoGBAP8Al4+ENDep2+gniy+WRu8uPqglOvGp1IzEyLr1/8OB8MaNWAWY\nBLv/5LPGm+Ty5uFsvOetAgh7byAW//XKwjOz9p/cSjZhurO1z0JTI0kfN0lG1KwI\nwq+Gd3aRIB5FE0EJS2R9+C0jpDoip9vbfdwNjHT3A1B5AXHZ1E6wwGQzAoGBAPZ4\nn1ooMNcmJF+LJN/OZLbm4YEBMj0EkKcOq7ejrHX9QKGXI4IEX4eRX2XMaQ4byLeS\nSFTpUpAnCBptZcVrxHT2sEOpMXpFmO73E/vOGF+E6ysSCITfctqT5PLmSRH6/loW\nu20YWA+9EnuwTWErRiQVjC0sa/iDHG7eOybmiZpvAoGBAKTrLBosZV0OpOOLF5Bq\nP2wW230BvxJmRMnZxvxrdsNpuV+gMCpF++HeiHngXBiBI+Ls4WtwT91OfzsgxN+h\nB2JK5JjU7sYnBImPbwC1Jh/3aVkhzw+IBulgLMjo6P3KrL4mFbVjZutCnsbefPNL\nDCYSOSG4U1NrPwzz1UQjOfpTAoGBAL+8kILLd0s4Id2t2i69Wf4rWExKSPHM5lb/\ng7hlfJmBPVE3yWiwzDwjbCo+PY+7L4cXJmvf4tm/c39TkXNmZbtz2SWZrqLnF5T2\n4zXlW3KbbXLhIX10ct31ZYtMeJWjQ1GEE6RH5uG/fWx5d4ja6ELT/Gt7/jaikHDz\nMuMNPwjDAoGBAIi+OYsOtgiwj+Pe+9dnOxWX5McRrEnMhD3yCkimjywjGWxzYWTZ\nQkuqHqAg4QDtKB2kFdRMgmvqdCYqxj5rekBE//gL48LVkGry/yUUev1pWdka1GqQ\nCPXWvpJXwX9mG3hCEswRX6mIp4OW0uuCQfGtWD7/nqt6YI2YDqIK+Q38\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD1grimILBPoo8KdxO4BDux0GyxA7do5/txJjIq1x2B9mwoWuuPpGND+SjY5QoUtiysRr8V665bH/HlJ4H7VwXpjHFttA0w/JXAOF1lcNCobs4fqW/EfjE6rCjnQ8CdVzkFA0VEOZXbZf7mIeVMwtEuu6hIeTrd8MNxCcINQ9clPlgN0zQLcC0qB/lUPtgRANlg97EqXxnIFqvcB5M+Gwfd7OVfWqsNsMP0V67in9t6w+VahLZ8VY/+3KaqzRI3Z6H3VW4Va4VMamB1ZApKE0CEkrj7Lw1IoRs442Q51EC2JRjnAeBvSYQelei+fshGP2cklVKJF+ufUhn0df/Q/SAd\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA9YK4piCwT6KPCncTuAQ7\nsdBssQO3aOf7cSYyKtcdgfZsKFrrj6RjQ/ko2OUKFLYsrEa/FeuuWx/x5SeB+1cF\n6YxxbbQNMPyVwDhdZXDQqG7OH6lvxH4xOqwo50PAnVc5BQNFRDmV22X+5iHlTMLR\nLruoSHk63fDDcQnCDUPXJT5YDdM0C3AtKgf5VD7YEQDZYPexKl8ZyBar3AeTPhsH\n3ezlX1qrDbDD9Feu4p/besPlWoS2fFWP/tymqs0SN2eh91VuFWuFTGpgdWQKShNA\nhJK4+y8NSKEbOONkOdRAtiUY5wHgb0mEHpXovn7IRj9nJJVSiRfrn1IZ9HX/0P0g\nHQIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.server": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "fde0799176f45f4ed23b5daca39a89597b76335e",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "fde0799176f45f4ed23b5daca39a89597b76335e",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEAst4wS2qfHE60I+w+i5IcIqz5I6N+ao305/NavSrxkCYOmqzB\nVTUtJuWjHQD6UmcgZb0FUqNBJhEIHD+KlgJLRHGfZDeLWQo/RD9LCBgthLvNexpz\n0CxMg85PY/9rQozOH0wfgd942M+9GfkZb8zFgxrL2MTTmdxdr43Xl+6GdeLjoWql\nRj2xsIcrcecQlUmi2r1xG/egkHtskriQFt6qq1aCK3vrn8cwwtHitoR+2/wNXgDW\nOyi2e1oRP8yH6Pd5z7E16/fXg//rsNetBAzW7Ekgwn52205XP3VVNmPu52op8IBr\n1vEHP/32eQxF5SYCCWKpAQ+T20SoRkXznW176wIDAQABAoIBAETLPBvleCi1BIfE\ndxHLMlML4A6a9SYaTxVe/YlAGQRt/rPyubEB8MnDDIc9Nwm2bDl1B7UO4SG47zue\nHLkxTK2YXct3qXqnfEnNZhhI5EjmylMMi3qHby5KjTJSrHg+G5DiAEQ9JQeObpas\nveHICjcweTJ4EUJeBRJeJYtjzAdOhS+QX6gpXxh2TfjaR9WG/jRxLDuY2l/qv2gr\nEhynm7+w+dN87afsgL3K3GSsKU3IlL8L8f90TO9TSbkds1wOCRSaLIbacUEC9uhd\nbds95iPOn298cCP6duZY+DzjadjIZuC/LBVauSMo9cAczyUKxWlI26x1Gr/0vHPM\nSElW8VECgYEA6Xc2baCu6UEsfRBXPf78CdEBZSfNbR1llPZGu17NZkYZNwURjZDm\nkJ8W8aJOf44RHG57uBJ8ma4Y9AYS541DdnWrm6NCkq/v4rAe+1oFu4vKtvz3dHqz\nt9H1a37s5NDubEc9roxz0jOZkOED7xNKDcL6kwriXdkQWAxQjwVLOw8CgYEAxCHm\njMBMjRAYF4xRO4D3af/uDK1dRGccGvqRiT12mk3+krTr1BYL0uCkRVxbEWx9Sclt\nQpsXHY6g1j/DiLyzvMynUgBTCTIwahA3cUlh/e02QAct1zV0Lq82WuE2At/2NYjc\njvkMLssWCrRNVA8KqytY8XJMlOsyA4+maqa54WUCgYA4OXyDJEpbZFW5fMD17j12\ng74pRU+ksoqvOCxKnYcr1T/nTzIt/LJ6K8YTxTnQYD9gsH7dEp6tSA88XWYaG5we\noDIG1meG+hX0auPbNo/g3cahEQTrKU20vDy1eajFZke1Decd7TdLbR/Tk00mO2f/\nLnC4Dsv7O/ZCrhyMhQLcIwKBgBRZsCJKkabRVK6c0JDsAL/u3jRSiKrgR/pEpXUn\n+3ZnQVLXkuCeqPtoc6L+wjQ8nYNacwvGK8/VTLruQsudSMj+Mx4/Cl6Z5owawqXu\nh0xhoI9kL011LmjppSoo1AHYWyOS38+1552zVMYnjx55sRGxnbjvsyKAhN/5t7q5\nMfBBAoGADNPYe4lJ5xdjEnTjNUC/fsBxCZh8XSTcADT3z2neM1HaUum7b/QboGIk\n7uVNeTzgSEaOwmW1r6xMVOsQBXJawrINjP86CowzIeLZk7URIhs+2a4QYiV8QKir\n1EJ8tYuHDuPjjD+lXWlSXugjHXa/BhgLSYPAUpJq+T17L9gbwX0=\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCy3jBLap8cTrQj7D6LkhwirPkjo35qjfTn81q9KvGQJg6arMFVNS0m5aMdAPpSZyBlvQVSo0EmEQgcP4qWAktEcZ9kN4tZCj9EP0sIGC2Eu817GnPQLEyDzk9j/2tCjM4fTB+B33jYz70Z+RlvzMWDGsvYxNOZ3F2vjdeX7oZ14uOhaqVGPbGwhytx5xCVSaLavXEb96CQe2ySuJAW3qqrVoIre+ufxzDC0eK2hH7b/A1eANY7KLZ7WhE/zIfo93nPsTXr99eD/+uw160EDNbsSSDCfnbbTlc/dVU2Y+7nainwgGvW8Qc//fZ5DEXlJgIJYqkBD5PbRKhGRfOdbXvr\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAst4wS2qfHE60I+w+i5Ic\nIqz5I6N+ao305/NavSrxkCYOmqzBVTUtJuWjHQD6UmcgZb0FUqNBJhEIHD+KlgJL\nRHGfZDeLWQo/RD9LCBgthLvNexpz0CxMg85PY/9rQozOH0wfgd942M+9GfkZb8zF\ngxrL2MTTmdxdr43Xl+6GdeLjoWqlRj2xsIcrcecQlUmi2r1xG/egkHtskriQFt6q\nq1aCK3vrn8cwwtHitoR+2/wNXgDWOyi2e1oRP8yH6Pd5z7E16/fXg//rsNetBAzW\n7Ekgwn52205XP3VVNmPu52op8IBr1vEHP/32eQxF5SYCCWKpAQ+T20SoRkXznW17\n6wIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_private_key.service-account": {
                    "type": "tls_private_key",
                    "depends_on": [],
                    "primary": {
                        "id": "69fd4eabaac81ea844c47a8a2bf7d8db455a2c05",
                        "attributes": {
                            "algorithm": "RSA",
                            "ecdsa_curve": "P224",
                            "id": "69fd4eabaac81ea844c47a8a2bf7d8db455a2c05",
                            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAucUJ9jL6M6IcayauJ2QknJ43NdJljjc6lU8DerarU8zl8SrK\nQnLS9Pz8h+zb/cVUiWUi8xGutpMHrsGShmcCXSn/JrblYwDqfeZWx9hOo89AHmIR\nrUUphqi1tGYVK6HOwjOf95YdSJrQSxREqQEBgIUAPxbw6/WlRIaAT13DI9fPAIXt\nfsTnnzMAdUIrgZi/dNpvwXYXG2ZYHzRbA+c2LxOOcLSgXoh8QjodrIjzgyDaciy0\nVhsUa509BIygEJWHQpaop2lD3QUuEffiPzrySnIHLHDfeiFiLaOyj7qr95FtMktn\nNI+mw/au/sHJKZ+n0RdenfOX/ofkFM6VXnqKPQIDAQABAoIBABlq61UDXpaH/Mlw\nbm23VwcS4sz7b6fIyLw7Jme47LI3m9Kmnyv+V/zrTIYwk10ijdGKxABsD/KtJWT0\n2V6IY5tprp6WccZdDriRNph7cS8aoVRG6NJDX04scUgwm37v0cFinOWcZX9Up2FO\ncaKKH7F9AS6grfArGSTKHm49jwCtP8fGhc9LOaCqu2pVEePZWOn6ZM5ukHMoNl4O\nOQjO8Wkfn8SpMPS3HCNu1TcsTEtOp/xSTm5yIFcfB4/J2+Uvxt/AE+iWukqZ2A+t\n8VOVHPEXKmqfP3E9MYJ/7OhYwdZQw9ufW7zuIHbh3vIis8nHBx6Xf2BywbW4Br8o\nv75BJGUCgYEA5MJ03zG7K928oDjeqRKclOmrhQxXeMR9u7nHTLOEGjGqiCtDtUx8\nPGOfqlOumywHCOPv857h2e3UGHBjKlYzeb+4iafHwh9U6S9qH/eJ6XpYagX6n82l\nMk/FLl+KxwEaEImduJJ2ecOiRKiEVFRMW3pfZbLW7KdmISw5g/OU8j8CgYEAz+QS\nNaznrTLguBRn9PJGkmy2asiqSMHVskklQJaPwQB+GMqfuKB6QOG+mpLLADhpdleA\nFCSximSuM5nNe87GxblBT3wHoWR/SdZrld8ElS7hTO7qNqNquNqoxni2IIru3Rcg\n+1YiCxWsx6Ked+50MJJBJtsBqEWjiEq4VDjwbIMCgYA/8lvZSH2Z9ZIU99DGUn2S\n4v8fYiPRjpvXLkeYGVaEO/3/sphqxca02uR3KI1WsygERDN/Vpqr4N+5NTGDVDVv\ngziCwnQEv91skeSIqxnSOnEcsi8tHL9hIQttuyeAGb6/gLimL8sOnrFtn+3d5PKz\nX7HrK+MIpILYIxSw3hZ04QKBgQDJbrbKNXACHRMqqfMUnxAMXrPeAfMlLlOuPTuQ\nOpKtspl70hEy5qOubE2wHl3+J6rgVOYwHmG8s9MrAnLc7L0i5l7G8mm+Us8XL2Dt\nRbt+BX+eeLyOFoeY952jOWFXZOcPaJK3lXzE+sqAYSxlDrKcQYpJaNlRP7C1pZi3\nWrhymwKBgD8E4PN905uTLotZYsBFARUN8G7rBB+ZLKVaf9mIXwUUm0oWM7KYt3CZ\nXvNMT4a/HrmCQqMyqOfJZ6FX4UF3Pl/0w7WXB++uL+HdY9tFCKd18J8xs9wg/W8u\nKfRKfCkUUtba7rKHuRcprnozfni9RgVx2lzUb472TGrOecyJbZa7\n-----END RSA PRIVATE KEY-----\n",
                            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC5xQn2MvozohxrJq4nZCScnjc10mWONzqVTwN6tqtTzOXxKspCctL0/PyH7Nv9xVSJZSLzEa62kweuwZKGZwJdKf8mtuVjAOp95lbH2E6jz0AeYhGtRSmGqLW0ZhUroc7CM5/3lh1ImtBLFESpAQGAhQA/FvDr9aVEhoBPXcMj188Ahe1+xOefMwB1QiuBmL902m/BdhcbZlgfNFsD5zYvE45wtKBeiHxCOh2siPODINpyLLRWGxRrnT0EjKAQlYdClqinaUPdBS4R9+I/OvJKcgcscN96IWIto7KPuqv3kW0yS2c0j6bD9q7+wckpn6fRF16d85f+h+QUzpVeeoo9\n",
                            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAucUJ9jL6M6IcayauJ2Qk\nnJ43NdJljjc6lU8DerarU8zl8SrKQnLS9Pz8h+zb/cVUiWUi8xGutpMHrsGShmcC\nXSn/JrblYwDqfeZWx9hOo89AHmIRrUUphqi1tGYVK6HOwjOf95YdSJrQSxREqQEB\ngIUAPxbw6/WlRIaAT13DI9fPAIXtfsTnnzMAdUIrgZi/dNpvwXYXG2ZYHzRbA+c2\nLxOOcLSgXoh8QjodrIjzgyDaciy0VhsUa509BIygEJWHQpaop2lD3QUuEffiPzry\nSnIHLHDfeiFiLaOyj7qr95FtMktnNI+mw/au/sHJKZ+n0RdenfOX/ofkFM6VXnqK\nPQIDAQAB\n-----END PUBLIC KEY-----\n",
                            "rsa_bits": "2048"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_self_signed_cert.etcd-ca": {
                    "type": "tls_self_signed_cert",
                    "depends_on": [
                        "tls_private_key.etcd-ca"
                    ],
                    "primary": {
                        "id": "174355920786992534506628630637503442907",
                        "attributes": {
                            "allowed_uses.#": "3",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "cert_signing",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDDzCCAfegAwIBAgIRAIMrupgK76fi3tUjd2C579swDQYJKoZIhvcNAQELBQAw\nITENMAsGA1UEChMEZXRjZDEQMA4GA1UEAxMHZXRjZC1jYTAeFw0xODA0MDYxNjUx\nNDBaFw0xOTA0MDYxNjUxNDBaMCExDTALBgNVBAoTBGV0Y2QxEDAOBgNVBAMTB2V0\nY2QtY2EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC+md94VZty+EfX\n5qmiT7hfmS6cLcQT7YwPyxNSDtSILopvJVwnh+ObbVgaQxPoP+fKNOocVHohRnh/\nfqGiV5aJt+mG6SJEuslduKzXa0iqXan4qwSDvTeMSw+cDEgnUon4p+hazXaU6dZU\n57qqg4quYfiIYx7aJVj6TqQGelDq9SGHAHLcuDSCh2HXuGg/rpkrFrtM4IkVQ9Vr\nyz188jIZuoQQgqds2dZl6Tys8Ve68ZHKgrhiUdz2xq87nWR0PtDDdn52sn7cRht9\nEjVC34AyGPkTHbh1BjE68yFHzvb3db6BNyLUfyI9cEa04Ao7MSu7ZM7UYyo+LAN2\ngiaF0GqZAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/\nMB0GA1UdDgQWBBTyTTSC68BruJif51HQqLH7IkOcKDANBgkqhkiG9w0BAQsFAAOC\nAQEAL663DahpcmezVTVBV9FHHLG3LYZyCJPX9kCJ4T3AJD8kpWRePUaP0H+ZM27j\nGgW78r9x5EmEXhtaLYeP/skRlkVxu0ytrPoU0e46T/6GOkSWeMJaa9+i1jw6qyq9\nwcfj/yR2vJB7LLcygwW/itdFSti9vKMmw6Om/8AnRgxYXsv9oqzkvAvqJ1jAzoCu\noMhhXGblJFxfwdl0doitiTZCGFwBNARfGN1+ZpuQ75QGuxB8bb2vWUnWE2g1d+oR\nlB5AR2GvK9lotw04BRVnAOHCAL6mZITDIyEF8EDkg3ii22bOivNyiGUn/YTAYMsZ\naXnI2soIL/NUVaLQDIr+vUsHIA==\n-----END CERTIFICATE-----\n",
                            "early_renewal_hours": "0",
                            "id": "174355920786992534506628630637503442907",
                            "is_ca_certificate": "true",
                            "key_algorithm": "RSA",
                            "private_key_pem": "100e218f5f946db6967e01b4110d79a4bc7b3b60",
                            "subject.#": "1",
                            "subject.0.common_name": "etcd-ca",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "etcd",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0",
                            "validity_end_time": "2019-04-06T16:51:40.959302771Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-06T16:51:40.959302771Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                },
                "tls_self_signed_cert.kube-ca": {
                    "type": "tls_self_signed_cert",
                    "depends_on": [
                        "tls_private_key.kube-ca"
                    ],
                    "primary": {
                        "id": "4082609673469477784158182026481627064",
                        "attributes": {
                            "allowed_uses.#": "3",
                            "allowed_uses.0": "key_encipherment",
                            "allowed_uses.1": "digital_signature",
                            "allowed_uses.2": "cert_signing",
                            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIDFjCCAf6gAwIBAgIQAxJIMppTZiBncHjDmanvuDANBgkqhkiG9w0BAQsFADAl\nMREwDwYDVQQKEwhib290a3ViZTEQMA4GA1UEAxMHa3ViZS1jYTAeFw0xODA0MDYx\nNjUxNDBaFw0xOTA0MDYxNjUxNDBaMCUxETAPBgNVBAoTCGJvb3RrdWJlMRAwDgYD\nVQQDEwdrdWJlLWNhMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuz6z\nWHg28AUebbJu+aP8/VivK5J21y9NGQBrc6J7Vkqf6uA17Kvj31X3zil7kDoD947s\n7jJeQt2n75tDoTjSPQiBB/6lQAUmDmG3Di9+KsIRCJGkrstqXeM/+4RqsPI6YEH0\nB5Hj+S2EqY9TkPqrMxHaKtJ0nBksO2u4RFIDIUNHcRv9wCLzbA59aojztjEGH5AD\nuQZWyLvzMfOVgReJcX7/HQkzNWK09PDjck6tX/Q0/6Um2H3HSRJD9uMSp/b4EA5J\nhBXCeXw2ehxOEhRC1rfzS16OnY7Zx0GvNnQMW2TRe5jKacbiglfeHN6BxtRc9ehO\n4Sk87tRWufotZVb6+QIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAqQwDwYDVR0TAQH/\nBAUwAwEB/zAdBgNVHQ4EFgQUmvQCm5nfDvn4ii3I2p4RWQdjH2wwDQYJKoZIhvcN\nAQELBQADggEBABNf63i6sFVrwcKMSy9mzA5yeKfY06FeqcRjuSgEuLwT2Xh6yhey\nYowpVCKgqsREecR1omgznDjny41GEwjxqYuDGmYitwTS9h59oYFWhRl89y7hDCVp\n95c/NdPur3ni1Kj75cceypRekiaR2X4hBclCpDV2o0sol3t32QVJkAAhaTqn8oEw\nPsuzG1fgVzRDSM8/FaA67JJOAFq3EQPRMGeS3wr2DZOUJEMc1oMOltEswuv5n6aq\n6bpcibGBVbAD15oN0klnAFnSqz3239AmLrOn3AsM3QH19Oizc6+xNnWvM4k7QhRg\nVe9MoKr66EumXsZ/FE74fIN/lnwKGgWrhAM=\n-----END CERTIFICATE-----\n",
                            "early_renewal_hours": "0",
                            "id": "4082609673469477784158182026481627064",
                            "is_ca_certificate": "true",
                            "key_algorithm": "RSA",
                            "private_key_pem": "b7e32d38bf74e138dc66218c7866bc0ed90d4657",
                            "subject.#": "1",
                            "subject.0.common_name": "kube-ca",
                            "subject.0.country": "",
                            "subject.0.locality": "",
                            "subject.0.organization": "bootkube",
                            "subject.0.organizational_unit": "",
                            "subject.0.postal_code": "",
                            "subject.0.province": "",
                            "subject.0.serial_number": "",
                            "subject.0.street_address.#": "0",
                            "validity_end_time": "2019-04-06T16:51:40.955833479Z",
                            "validity_period_hours": "8760",
                            "validity_start_time": "2018-04-06T16:51:40.955833479Z"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.tls.default"
                }
            },
            "depends_on": []
        }
    ]
}
